<wdkModel>

  <!--=====================================================================-->
  <!-- Params  -->
  <!--=====================================================================-->
  <paramSet name="organismParams"> 
      <flatVocabParam name="organism"
                     queryRef="organismVQ.withGenes"
                     prompt="Organism"
                     multiPick="true"
                     quote="false">
          <useTermOnly value="true" includeProjects="ApiDB"/>
      </flatVocabParam>

<!-- cannot reuse "organism" param above because apidb needs to use the internal value in the local ortholog question -->
<flatVocabParam name="localorganism"
                     queryRef="organismVQ.LocalOrganisms"
                     prompt="Organism"
                     multiPick="true"
                     quote="false">
      </flatVocabParam>

      <flatVocabParam name="text_search_organism"
                     queryRef="organismVQ.withGenes"
                     prompt="Organism"
                     multiPick="true"
                     quote="false">
          <suggest  includeProjects="CryptoDB" 
                    default="Cryptosporidium parvum,Cryptosporidium hominis"/>

          <useTermOnly value="true"/>
      </flatVocabParam>

  </paramSet> 


  <!--=====================================================================-->
  <!-- Vocab queries for organism parameters

       These queries differ by which rows they return.  The columns are the
       same:

         term: scientific name of species
         internal: comma-separated list of all taxon ids for the clade whose
                   root is that species

        Many have the same general structure:
         - the taxon list which forms the internal value us generated by a
           recursive sub-query nested inside the SELECT clause
         - the set of rows is determined by an inline view in the FROM clause
           named "organisms"
         - an optional ordering is imposed by another inline view in the FROM
           clause named "partial_ordering".  This is used to let
           P. falciparum, P. vivax, and P. yoelii (in that order) start a
           list of genes.  It's OK for any (or all) of those to be omitted
           from the list, and it's OK for other genes to be included, but if
           they're there, they go first. Otherwise, the organisms are
           ordered alphabetically.
                                                                           -->
  <!--=====================================================================-->

  <querySet name="organismVQ">

    <!--===================================================================-->
    <!-- localorganism to apidb  -->
    <!--===================================================================-->

<sqlQuery name="LocalOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <sql>
		
		SELECT distinct t.taxon_id AS internal, tn.name AS term, 2 AS idx
                        FROM sres.taxon t, sres.taxonName tn
                        WHERE t.taxon_id = tn.taxon_id
                        AND tn.name_class  = 'scientific name'
                        AND t.NCBI_TAX_ID IN (237895,353152,5823,31271,36329,5851,126793,352914,5811,184922)
                  ORDER BY tn.name


               </sql>
          </sqlQuery>


    <!--===================================================================-->
    <!-- all -->
    <!--===================================================================-->

    <sqlQuery name="all" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (  SELECT ns.taxon_id
                                FROM dots.NaSequence ns, dots.GeneFeature gf,apidb.geneattributes ga
                                WHERE gf.na_sequence_id = ns.na_sequence_id
                                AND ga.source_id = gf.source_id
                                AND ga.project_id = '@PROJECT_ID@' 
                              UNION
                                SELECT ns.taxon_id
                                FROM dots.NaSequence ns, sres.SequenceOntology so,apidb.sequenceattributes ga
                                WHERE so.sequence_ontology_id = ns.sequence_ontology_id
                                AND so.term_name IN ('contig', 'supercontig', 'chromosome')
                                AND ga.source_id = ns.source_id
                                AND ga.project_id = '@PROJECT_ID@' 
                                  ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual
                ) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="all" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>
    <!--===================================================================-->
    <!-- with chromosomes -->  
    <!--===================================================================-->

    <sqlQuery name="withChromosomes" includeProjects="CryptoDB,ToxoDB,PlasmoDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium falciparum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="CryptoDB">Cryptosporidium parvum</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&' ) organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withChromosomes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- with genomic seq

         only include a species if one of the species' taxon_ids is
         associated with a sequence whose sequence_ontology_id maps to
         'contig', 'supercontig' or 'chromosome'.
                                                                           -->
    <!--===================================================================-->

    <sqlQuery name="withGenomicSeq" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT  CASE 
                        WHEN tn.name = 'Giardia intestinalis' THEN 'Giardia lamblia' 
                        else tn.name
                      END as name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, sres.SequenceOntology so,apidb.sequenceattributes ga
                              WHERE so.sequence_ontology_id = ns.sequence_ontology_id
                                AND so.term_name IN ('contig', 'supercontig', 'chromosome')
                                AND ga.source_id = ns.source_id
                                AND ga.project_id = '@PROJECT_ID@'
                              ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual
                ) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withGenomicSeq" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>
    <!--===================================================================-->
    <!-- with genes

         Each row returned represents a species.  Species are only included if
         they are represented in a sequence record (in dots.NaSequence), either
         by their own taxon_id or that of a subspecies.  Sequence records are
         only used if there is a gene record (dots.GeneFeature) that points to
         them.
                                                                           -->
    <!--===================================================================-->

    <sqlQuery name="withGenes" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT CASE 
                        WHEN tn.name = 'Giardia intestinalis' THEN 'Giardia lamblia' 
                        else tn.name
                      END as name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, dots.GeneFeature gf,apidb.geneattributes ga
                              WHERE gf.na_sequence_id = ns.na_sequence_id
                              AND ga.source_id = gf.source_id
                              AND ga.project_id = '@PROJECT_ID@' 
                              ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual
                ) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withGenes" includeProjects="ApiDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- with ESTs -->  
    <!--===================================================================-->

        <sqlQuery name="withESTs" excludeProjects="ApiDB">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT tn.name AS term, t.taxon_id AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens, dots.Est e, apidb.EstAttributes ea
                              WHERE e.na_sequence_id = ens.na_sequence_id
                              AND ens.source_id = ea.source_id
                              AND ea.project_id = '@PROJECT_ID@'))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

<wsQuery name="withESTs" includeProjects="ApiDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

        <sqlQuery name="withESTsAndGenes" excludeProjects="ApiDB">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT CASE 
                        WHEN tn.name = 'Giardia intestinalis' THEN 'Giardia lamblia' 
                        else tn.name
                      END as term, t.taxon_id AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens, dots.Est e, 
                                apidb.EstAttributes ea, apidb.EstAlignmentGeneSummary s
                              WHERE ea.source_id = s.accession
                              AND s.gene is not null
                              AND e.na_sequence_id = ens.na_sequence_id
                              AND ens.source_id = ea.source_id
                              AND ea.project_id = '@PROJECT_ID@'))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

    <wsQuery name="withESTsAndGenes" includeProjects="ApiDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- with EC -->  
    <!--===================================================================-->

    <sqlQuery name="withEC" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT CASE 
                        WHEN tn.name = 'Giardia intestinalis' THEN 'Giardia lamblia' 
                        else tn.name
                      END as name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT nas.taxon_id
                              FROM dots.translatedaafeature taf, dots.AaSequenceEnzymeClass asec,
                              dots.transcript t, dots.genefeature gf, apidb.geneattributes ga, dots.NASEQUENCE nas
                              WHERE taf.aa_sequence_id = asec.aa_sequence_id
                              AND t.na_feature_id = taf.na_feature_id
                              AND gf.na_feature_id = t.parent_id
                              AND ga.source_id = gf.source_id
                              ANd ga.project_id = '@PROJECT_ID@'
                              AND nas.na_sequence_id = gf.na_sequence_id
                              ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withEC" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- cp-tg

         Choices must be a subset of
         {Cryptosporidium parvum, Toxoplasma gondii}.

         This is enforced with an sqlParamValue namded "organism", which is
         set as a function of the project
                                                                           -->
    <!--===================================================================-->

    <sqlQuery name="cp-tg" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="CryptoDB">Cryptosporidium parvum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="GiardiaDB">Giardia intestinalis</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="PlasmoDB,TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT  case when organisms.name = 'Giardia intestinalis' then 'Giardia  lamblia' else organisms.name end AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="cp-tg" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- cp-tg-pb

         Choices must be a subset of
         {Cryptosporidium parvum, Toxoplasma gondii, Plasmodium berghei}.

         This is enforced with an sqlParamValue named "organism", which is
         set as a function of the project
                                                                           -->
    <!--===================================================================-->

    <sqlQuery name="cp-tg-pb" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="CryptoDB">Cryptosporidium parvum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium berghei</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="GiardiaDB">Giardia intestinalis</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT case when organisms.name = 'Giardia intestinalis' then 'Giardia  lamblia' else organisms.name end AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="cp-tg-pb" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>


 <!--===================================================================-->
    <!-- cp-tg-pf-tv-gl

         Choices must be a subset of
         {Cryptosporidium parvum, Toxoplasma gondii, Plasmodium falciparum, Trichomonas vaginalis, Giardia intestinalis }.

         This is enforced with an sqlParamValue named "organism", which is
         set as a function of the project
                                                                           -->
    <!--===================================================================-->

    <sqlQuery name="cp-tg-pf-tv-gl" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="CryptoDB">Cryptosporidium parvum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium berghei</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="TrichDB">Trichomonas vaginalis</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="GiardiaDB">Giardia intestinalis</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT  case when organisms.name = 'Giardia intestinalis' then 'Giardia  lamblia' else organisms.name end AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="cp-tg-pf-tv-gl" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- plasmoWithGenes  -->  
    <!--===================================================================-->

    <sqlQuery name="withPlasmoGenes" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name like 'Plasmodium %'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, dots.GeneFeature gf
                              WHERE gf.na_sequence_id = ns.na_sequence_id))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withPlasmoGenes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>



<!--====================================================================-->
<!-- withPlamsoTrichGiardiaGenes -->
<!--====================================================================-->


<sqlQuery name="withPlasmoTrichGiardiaGenes" includeProjects="PlasmoDB,GiardiaDB,TrichDB">
      <column name="internal"/>
      <column name="term"/>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, dots.GeneFeature gf,apidb.geneattributes ga
                              WHERE gf.na_sequence_id = ns.na_sequence_id
                              AND ga.source_id = gf.source_id
                              AND ga.project_id = '@PROJECT_ID@' 
                              ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual
                ) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="withPlasmoTrichGiardiaGenes" includeProjects="ApiDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>


<!--===================================================================-->
    <!-- tg withPlasmoGenes -->  
    <!--===================================================================-->

    <sqlQuery name="withPlasmoGenes-tg" excludeProjects="ApiDB,CryptoDB">
      <column name="internal"/>
      <column name="term"/>
      
      <sql includeProjects="PlasmoDB">
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name like 'Plasmodium %'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, dots.GeneFeature gf
                              WHERE gf.na_sequence_id = ns.na_sequence_id))) organisms,
               (SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>
      
      <sql includeProjects="ToxoDB">
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = 'Toxoplasma gondii' ) organisms
          ORDER BY organisms.name
        ]]>
      </sql>


 <sql includeProjects="TrichDB,GiardiaDB">
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id IN
                       (SELECT taxon_id
                        FROM sres.taxon
                        CONNECT BY taxon_id = prior parent_id
                        START WITH taxon_id IN
                             (SELECT ns.taxon_id
                              FROM dots.NaSequence ns, dots.GeneFeature gf,apidb.geneattributes ga
                              WHERE gf.na_sequence_id = ns.na_sequence_id
                              AND ga.source_id = gf.source_id
                              AND ga.project_id = '@PROJECT_ID@' 
                              ))) organisms,
               (SELECT 'Cryptosporidium parvum' AS name, 1 AS rank FROM dual
                 UNION
                SELECT 'Cryptosporidium hominis' AS name, 2 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium falciparum' AS name, 3 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium vivax' AS name, 4 AS rank FROM dual
                 UNION
                SELECT 'Plasmodium yoelii' AS name, 5 AS rank FROM dual
                ) partial_ordering
          WHERE organisms.name = partial_ordering.name(+)
          ORDER BY partial_ordering.rank, organisms.name
        ]]>
      </sql>

    </sqlQuery>

    <wsQuery name="withPlasmoGenes-tg" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

<!--===================================================================-->
    <!-- tg pf gl   for genes by sage tags-->
    <!--===================================================================-->

    <sqlQuery name="tg-pf-gl" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium falciparum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="GiardiaDB">Giardia intestinalis</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="CryptoDB,TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT  case when organisms.name = 'Giardia intestinalis' then 'Giardia  lamblia' else organisms.name end AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="tg-pf-gl" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>


    <!--===================================================================-->
    <!-- tg pf -->  
    <!--===================================================================-->

    <sqlQuery name="tg-pf" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium falciparum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="ToxoDB">Toxoplasma gondii</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="CryptoDB,GiardiaDB,TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="tg-pf" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- pf -->  
    <!--===================================================================-->

    <sqlQuery name="pf" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium falciparum</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="CryptoDB,GiardiaDB,ToxoDB,TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="pf" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

    <!--===================================================================-->
    <!-- pb -->  
    <!--===================================================================-->

    <sqlQuery name="pb" excludeProjects="ApiDB">
      <column name="internal"/>
      <column name="term"/>
      <sqlParamValue name="organism" includeProjects="PlasmoDB">Plasmodium berghei</sqlParamValue>
      <sqlParamValue name="organism" includeProjects="CryptoDB,GiardiaDB,ToxoDB,TrichDB">none at all</sqlParamValue>
      <sql>
        <![CDATA[
          SELECT organisms.name AS term,
                 (SELECT apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id)))
                                             AS apidb.varchartab), ', ')
                         AS internal
                  FROM sres.taxon
                  CONNECT BY prior taxon_id = parent_id
                  START WITH taxon_id = organisms.internal_taxon) AS internal
          FROM (SELECT tn.name, t.taxon_id AS internal_taxon
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND tn.name = '&&organism&&') organisms
          ORDER BY organisms.name
        ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="pb" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="ApiDB">
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
    </wsQuery>

  </querySet>

</wdkModel>
