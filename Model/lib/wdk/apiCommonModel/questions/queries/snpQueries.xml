<wdkModel>

  <querySet name="SnpsBy" includeProjects="PlasmoDB,ToxoDB,ApiDB,CryptoDB">

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpBySourceId" includeProjects="PlasmoDB,ToxoDB,CryptoDB"  isCacheable="true">
          <paramRef ref="snpParams.snp_id"/>
	  <column name="source_id"/>
	  <column name="project_id"/>
	  <sql>
	    <![CDATA[
	      SELECT sf.source_id AS source_id, '@PROJECT_ID@' as project_id
	      FROM dots.SnpFeature sf
	      WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE($$snp_id$$,' ',''), '*', '%'))
	    ]]>
	  </sql>
      </sqlQuery>

     <wsQuery name="SnpBySourceId" includeProjects="ApiDB" 
              isCacheable="true" 
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="snpParams.snp_id"/>
	  <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </wsQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpsByGeneId"  includeProjects="PlasmoDB,ToxoDB,CryptoDB"
             isCacheable="true">
        <paramRef ref="sharedParams.ds_gene_ids" excludeProjects="CryptoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" includeProjects="CryptoDB"/>
        <paramRef ref="sharedParams.snp_strain_a"/>
        <paramRef ref="sharedParams.snp_strain_m"/>
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="snp_location"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="prot_pos"/>
        <column name="ref_product"/>
        <column name="comp_products"/>

        <sqlParamValue name="providers" includeProjects="PlasmoDB">
           AND ed.name in ('Sanger reichenowi SNPs','PlasmoDB combined SNPs')
        </sqlParamValue>
        <sqlParamValue name="providers" includeProjects="ToxoDB">
          AND ed.name in ('Genomic Sequence SNPs','Genetic Markers - David Sibley','John Boothroyd lab at Stanford')
        </sqlParamValue>
        <sqlParamValue name="providers" includeProjects="CryptoDB"></sqlParamValue>

        <sql>
            <![CDATA[
select * from (
SELECT snpq.source_id, '@PROJECT_ID@' as project_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
FROM                 
  (SELECT hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  FROM   dots.SeqVariation sva, dots.SeqVariation svb, dots.NALocation l,                               
    dots.NaSequence nas,dots.NALocation gene_loc,
    (SELECT distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
     FROM dots.GeneFeature gf, dots.SnpFeature sf, dots.SeqVariation isva, dots.SeqVariation isvb, 
        sres.ExternalDatabase ed,sres.ExternalDatabaseRelease edr,apidb.GeneId gi, @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
      WHERE ds.dataset_id = $$ds_gene_ids$$
      AND gi.id = lower(ds.dataset_value)
      AND gf.source_id = gi.gene 
      AND gf.na_feature_id = sf.parent_id                               
      AND edr.external_database_release_id = sf.external_database_release_id                               
      AND edr.external_database_id = ed.external_database_id                               
      &&providers&& 
      AND sf.na_feature_id = isva.parent_id                               
      AND sf.na_feature_id = isvb.parent_id                               
      AND isva.strain = $$snp_strain_a$$                               
      AND isvb.strain in ($$snp_strain_m$$)
      AND isva.allele != isvb.allele ) hits
  WHERE hits.na_sequence_id = nas.na_sequence_id
    AND hits.gene_na_feature_id = gene_loc.na_feature_id
    AND hits.snp_na_feature_id = l.na_feature_id
    AND hits.snp_na_feature_id = sva.parent_id 
    AND hits.snp_na_feature_id = svb.parent_id 
    AND sva.strain = $$snp_strain_a$$                               
    AND svb.strain in ($$snp_strain_a$$,$$snp_strain_m$$)                             
    ) snpq                              
GROUP BY snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
)
           ]]>
       </sql>

    </sqlQuery>

    <wsQuery name="SnpsByGeneId" includeProjects="ApiDB" 
             isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.ds_gene_ids"  default="PF11_0344"/>
        <paramRef ref="sharedParams.snp_strain_a"/>
        <paramRef ref="sharedParams.snp_strain_m"/>
        <paramRef ref="sharedParams.signature"/>
        <wsColumn name="source_id"  width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
    </wsQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Location -->
    <!-- 
         This query contains two nested inline views.  The 
         inner, named "hits", identifies SNPs within the given 
         genomic region for which the reference strain has a 
         different allele from at least one of the others.  The 
         outer inline view, "snpq", has one row for each SNP for 
         each strain (e.g. (100 SNPs) x (1 reference + 3 other 
         strains) = 400 records).  At the top level, the query 
         itself then groups all rows of a SNP into a single row 
         (which, for the above example, would mean grouping four 
         rows into one).
         
         It seems necessary to have these three levels in the 
         query's structure, but it might be possible to optimize 
         within each level.  For instance, the innermost query must 
         join dots.SnpFeature to dots.NaLocation.  A big 
         materialized view could precompute this join. -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByLocation" includeProjects="PlasmoDB,ToxoDB,CryptoDB" isCacheable="true">
          <paramRef ref="sharedParams.chromosomeOptional" multiPick="false"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <column name="source_id"/>
	  <column name="project_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>


        <sqlParamValue name="providers" includeProjects="PlasmoDB">
           AND ed.name in ('Sanger reichenowi SNPs','PlasmoDB combined SNPs')
        </sqlParamValue>
        <sqlParamValue name="providers" includeProjects="ToxoDB">
          AND ed.name in ('Genomic Sequence SNPs','Genetic Markers - David Sibley','John Boothroyd lab at Stanford')
        </sqlParamValue>
        <sqlParamValue name="providers" includeProjects="CryptoDB"></sqlParamValue>

        <sql>
            <![CDATA[
              select * from (
              SELECT snpq.source_id, '@PROJECT_ID@' as project_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
                apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
                apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
                apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
                apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
                apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
              FROM                 
                (SELECT hits.source_id as source_id,hits.seq_source_id || ':' || trim(to_char(hits.start_min,'999,999,999')) as snp_location,                               
                  sva.strain as ref_strain, svb.strain as comp_strain,                               
                  CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
                  ELSE sva.allele END as ref_allele,                 
                  CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
                  ELSE svb.allele END as comp_all,                 
                  CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
                  sva.product as ref_product, svb.product as comp_product,                           
                  hits.position_in_protein as prot_pos,
                  sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b, gf.source_id as gene
                FROM  dots.SeqVariation sva, dots.SeqVariation svb, dots.NALocation gene_loc, dots.GeneFeature gf,
                  (SELECT distinct isf.na_feature_id as na_feature_id, isf.source_id, isf.parent_id,
                    nas.source_id as seq_source_id,l.start_min,isf.position_in_protein
                   FROM sres.ExternalDatabase ed,sres.ExternalDatabaseRelease edr,dots.SeqVariation isva, dots.NALocation l,
                        dots.naSequence nas, dots.SeqVariation isvb, dots.SnpFeature isf    
                   WHERE nas.source_id = $$chromosomeOptional$$
                    AND isf.na_sequence_id = nas.na_sequence_id
                    AND edr.external_database_release_id = isf.external_database_release_id
                    AND edr.external_database_id = ed.external_database_id   
                    &&providers&&
                    AND isf.na_feature_id = l.na_feature_id
                    AND l.end_max >= $$start_point$$
                    AND (l.start_min <= $$end_point$$ OR $$end_point$$ = 0)
                    AND isf.na_feature_id = isva.parent_id                               
                    AND isf.na_feature_id = isvb.parent_id                               
                    AND isva.strain = $$snp_strain_a$$                               
                    AND isvb.strain in ($$snp_strain_m$$)
                    AND isva.allele != isvb.allele ) hits 
                WHERE  hits.parent_id = gf.na_feature_id(+)
                  AND gf.na_feature_id = gene_loc.na_feature_id(+)    
                  AND hits.na_feature_id = sva.parent_id 
                  AND hits.na_feature_id = svb.parent_id 
                  AND sva.strain = $$snp_strain_a$$
                  AND svb.strain in ($$snp_strain_a$$,$$snp_strain_m$$)
                  ) snpq                              
              GROUP BY snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product)
           ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="SnpsByLocation" includeProjects="ApiDB"
             isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >
          <paramRef ref="organismParams.organism" queryRef="organismVQ.tg-pf"/>
          <paramRef ref="sharedParams.chromosomeOptional" multiPick="false"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </wsQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByAlleleFrequency" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="snpParams.major_allele_min"/>
        <paramRef ref="snpParams.major_allele_max"/>
        <paramRef ref="snpParams.minor_allele_min"/>
        <paramRef ref="snpParams.minor_allele_max"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="minor_alleles"/>
        <column name="minor_products"/>
        <column name="minor_strains"/>
        <column name="major_strains"/>
        <sql>
            <![CDATA[
select * from (
select snpq.source_id, '@PROJECT_ID@' as project_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.major_allele,snpq.major_product,snpq.major_allele_count, snpq.minor_allele_count,
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele != snpq.major_allele THEN snpq.allele END) AS apidb.varchartab), ', ') as minor_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele != snpq.major_allele THEN snpq.product END) AS apidb.varchartab), ', ') as minor_products,
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele != snpq.major_allele THEN snpq.strain END) AS apidb.varchartab), ', ') as minor_strains,
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele = snpq.major_allele THEN snpq.strain END) AS apidb.varchartab), ', ') as major_strains              
FROM
  (select sf.source_id,gf.source_id as gene, nas.source_id || ':' || l.start_min as snp_location,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sf.major_allele) ELSE sf.major_allele END as major_allele,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele) ELSE sva.allele END as allele,   
    sf.major_allele_count, sf.minor_allele_count,
    sf.major_product, sf.position_in_protein as prot_pos, sva.product, sva.strain
  from dots.genefeature gf, dots.snpfeature sf, dots.nalocation l, dots.nalocation gene_loc,
    sres.externaldatabase ed,sres.EXTERNALDATABASERELEASE edr,dots.externalnasequence nas,
    dots.SEQVARIATION sva
  where sf.na_sequence_id = nas.na_sequence_id
    and sf.parent_id = gf.na_feature_id(+)
    and gf.na_feature_id = gene_loc.na_feature_id(+)
    and edr.external_database_release_id = sf.external_database_release_id
    and edr.external_database_id = ed.external_database_id
    and ed.name = 'PlasmoDB combined SNPs'
    and l.na_feature_id = sf.na_feature_id
    and sf.minor_allele_count >= $$minor_allele_min$$
    and sf.minor_allele_count <= $$minor_allele_max$$
    and sf.major_allele_count >= $$major_allele_min$$
    and sf.major_allele_count <= $$major_allele_max$$
    and sf.major_allele is not null
    and sf.minor_allele is not null
    and sf.na_feature_id = sva.parent_id ) snpq 
group by snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.major_allele,snpq.major_product,snpq.major_allele_count, snpq.minor_allele_count
)
           ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="SnpsByAlleleFrequency" includeProjects="ApiDB"
             isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism" queryRef="organismVQ.pf"/>
        <paramRef ref="snpParams.major_allele_min"/>
        <paramRef ref="snpParams.major_allele_max"/>
        <paramRef ref="snpParams.minor_allele_min"/>
        <paramRef ref="snpParams.minor_allele_max"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="minor_alleles"/>
        <wsColumn name="minor_products"/>
        <wsColumn name="minor_strains"/>
        <wsColumn name="major_strains"/>
    </wsQuery>

  </querySet>

</wdkModel>
