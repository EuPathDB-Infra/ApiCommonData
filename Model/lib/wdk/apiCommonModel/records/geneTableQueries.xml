<wdkModel>

<!-- notes

  - so far this is only a unification of p and t.  crypto seemed pretty different

  - the pathways query is diff between t and p, but shouldn't be.  one is wrong.

--> 


  <querySet name="GeneTables">


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Aliases -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Aliases" isCacheable="false" includeProjects="CryptoDB,PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="alias"/>
            <sql>
            <![CDATA[
            SELECT distinct ng.name AS alias
            FROM dots.GeneFeature gf, dots.NaFeatureNaGene nfng, dots.NaGene ng
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = nfng.na_feature_id
              AND nfng.na_gene_id = ng.na_gene_id
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- SNPs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="SNPs" includeProjects="PlasmoDB,ToxoDB"
               isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="strain_a_query"/>
            <column name="strain_b_query"/>
            <column name="strain_a_disp"/>
            <column name="strain_b_disp"/>
            <column name="gene_source_id"/>
            <column name="num_non_synonymous"/>
            <column name="num_synonymous"/>
            <column name="num_nonsense"/>
            <column name="num_non_coding"/>
            <column name="cds_snp_density"/>
            <column name="num_total"/>

            <sql includeProjects="PlasmoDB">
            <![CDATA[
              SELECT
              source_id as gene_source_id,
              'Pf-' || replace(strain_a,' ','%20') as strain_a_query,
              CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-'|| replace(strain_b,' ','%20') END  as strain_b_query,
              CASE WHEN strain_b = 'Preich' THEN 'Sp. Pf-'||strain_a ELSE strain_a END as strain_a_disp,
              CASE WHEN strain_b = 'Preich' THEN 'Sp. P.reichenowi' ELSE strain_b END as strain_b_disp,
              CASE WHEN strain_b = 'Preich' THEN 0 ELSE total END as ord, cds_length,
	      round(non_synonymous / CASE synonymous
	         WHEN 0 THEN 1
		 ELSE synonymous end, 2) as dn_ds_ratio,
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,
              stop as num_nonsense,non_coding as num_non_coding,total as num_total,
              round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density
	      FROM apidb.snpsummary
	      WHERE source_id = '$$primaryKey$$'
              ORDER BY ord desc
            ]]>
            </sql>

            <sql includeProjects="ToxoDB">
            <![CDATA[
              SELECT  strain_a as strain_a_disp, 
              strain_b as strain_b_disp, 
              CASE WHEN strain_a = 'ME49' THEN 'ME49 (type II)' 
              WHEN strain_a = 'RH' THEN 'RH'
              WHEN strain_a = 'VEG' THEN 'VEG (type III)'
              WHEN strain_a = 'GT1' THEN 'GT1 (type I)' END as strain_a_query,
              CASE WHEN strain_b = 'ME49' THEN 'ME49 (type II)' 
              WHEN strain_b = 'RH' THEN 'RH'
              WHEN strain_b = 'VEG' THEN 'VEG (type III)'
              WHEN strain_b = 'GT1' THEN 'GT1 (type I)' END as strain_b_query,
              cds_length,source_id as gene_source_id,                
              round(non_synonymous / CASE synonymous WHEN 0 THEN 1  ELSE synonymous end, 2) as dn_ds_ratio,              
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,              
              stop as num_nonsense,non_coding as num_non_coding,total as num_total,              
              round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density             
              FROM apidb.SnpSummary ss
              WHERE ss.source_id = '$$primaryKey$$' 
              ORDER BY num_total desc
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Notes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Notes" excludeProjects="ApiDB"
               isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="comment_string"/>
            <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
            SELECT nfc.comment_string
            FROM dots.naFeatureComment nfc, dots.GeneFeature nf
            WHERE nf.source_id='$$primaryKey$$'
              AND nf.na_feature_id = nfc.na_feature_id
            ]]>
            </sql>
            <sql includeProjects="CryptoDB"> 
            <![CDATA[
            SELECT comment_string
            FROM   dots.NAFeatureComment nafc,
            (
            select source_id, na_feature_id from dots.transcript
            union
            select source_id, na_feature_id from dots.rnatype
            union
            select source_id, na_feature_id from dots.RNAStructure
            union
            select source_id, na_feature_id from dots.genefeature g
            ) feat
            WHERE nafc.na_feature_id = feat.na_feature_id
            AND feat.source_id = '$$primaryKey$$'
            AND TO_CHAR(comment_string) not like 'introns and exons likely.' 
            AND TO_CHAR(comment_string) not like 'introns and exons likely'
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- User Comments -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="UserComments" excludeProjects="ApiDB"
                 isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="comment_id"/>
            <column name="stable_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id, c.stable_id,
                     NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.GeneFeature gf
              WHERE u.email = c.email
                    AND c.comment_target_id = 'gene'
                    AND c.stable_id = gf.source_id
                    AND gf.source_id = '$$primaryKey$$'
                    AND c.review_status_id != 'rejected'
                    AND c.review_status_id != 'task'
              ORDER BY c.comment_date DESC
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- EC number -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="EcNumber" excludeProjects="ApiDB" 
               isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="ec_number" />
            <column name="source"/>
            <column name="ec_description"/>
            <column name="expasy_url" />
            <sql includeProjects="CryptoDB">
            <![CDATA[
            SELECT distinct
                   CASE 
                   WHEN asec.evidence_code = 'CryptoCyc' THEN
                      DECODE(LOWER(SUBSTR(gf.source_id, 1, 3)), 'cgd', 
                      '<a href=''http://cryptocyc.cryptodb.org/CRYPTO/NEW-IMAGE?type=GENE&object=' || gf.source_id || '''>CryptoCyc</a>', 
                      '<a href=''http://cryptocyc.cryptodb.org/HOMINIS/NEW-IMAGE?type=GENE&object=' || gf.source_id || '''>CryptoCyc</a>'
                      )
                   WHEN asec.evidence_code = 'KEGG' THEN
                      DECODE(LOWER(SUBSTR(gf.source_id, 1, 3)), 'cgd', 
                      '<a href=''http://www.genome.jp/dbget-bin/www_bget?cpv:' || gf.source_id || '''>KEGG</a>', 
                      '<a href=''http://www.genome.jp/dbget-bin/www_bget?cho:' || gf.source_id || '''>KEGG</a>' 
                      )
                   ELSE
                       asec.evidence_code 
            END  AS source,
                   ec.ec_number,
                   ec.description as ec_description
            FROM dots.translatedAaFeature taf,
                 dots.genefeature gf,
                 dots.transcript t,
                 dots.aaSequenceEnzymeClass asec, 
                 sres.enzymeClass ec
            WHERE  gf.source_id='$$primaryKey$$'
              AND  gf.na_feature_id = t.parent_id
              AND  t.na_feature_id = taf.na_feature_id
              AND  taf.aa_sequence_id = asec.aa_sequence_id
              AND  asec.enzyme_class_id = ec.enzyme_class_id
            ]]>
            </sql>
            <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
            SELECT distinct asec.evidence_code AS source, ec.ec_number,
                   ec.description as ec_description,
                   'http://us.expasy.org/cgi-bin/enzyme-search-ec?field1='
                   ||ec_number_1
                   || decode(ec_number_2, null, null,
                             chr(38) || 'field2='||ec_number_2)
                   || decode(ec_number_3, null, null,
                             chr(38) || 'field3='||ec_number_3)
                   || decode(ec_number_4, null, null,
                             chr(38) || 'field4='||ec_number_4)
                   as expasy_url
            FROM dots.GeneFeature gf,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- GO terms -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="GoTerms" excludeProjects="ApiDB"
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="is_not"/>
            <column name="go_id"/>
            <column name="ontology"/>
            <column name="go_term_name"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="lowercase_evidence_code"/>
            <sql>
            <![CDATA[
            SELECT gts.is_not, gts.go_id, gts.ontology, gts.go_term_name,
                    gts.source, gts.evidence_code,
                    lower(gts.evidence_code) AS lowercase_evidence_code
            FROM apidb.GoTermSummary gts
            WHERE gts.source_id = '$$primaryKey$$'
            ORDER BY gts.ontology, gts.go_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Pathways -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MetabolicPathways" excludeProjects="ApiDB"
                   isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="pathway_id"/>
            <column name="pathway_name"/>
            <column name="activity"/>

            <sql includeProjects="PlasmoDB">
            <![CDATA[
            SELECT DISTINCT dr.primary_identifier AS pathway_id,
                            decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier, dr.lowercase_secondary_identifier) AS pathway_name,
                            dr.remark as activity
            FROM dots.GeneFeature gf,
                 dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
            AND gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'Links to Pathway Maps'
            ORDER BY dr.primary_identifier
            ]]>
            </sql>

            <sql includeProjects="ToxoDB">
            <![CDATA[
	    SELECT DISTINCT dr.primary_identifier AS pathway_id,
                   decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier, dr.lowercase_secondary_identifier) AS pathway_name,
                   dr.remark as activity
	    FROM dots.GeneFeature gf,dots.Transcript t, dots.DbRefaaFeature draf, 
	         sres.DbRef dr, dots.TranslatedAaFeature taf,
		 sres.ExternalDatabaseRelease edr,
		 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
	    AND gf.na_feature_id = t.parent_id
	    AND t.na_feature_id = taf.na_feature_id
            AND taf.aa_feature_id = draf.aa_feature_id
            AND draf.db_ref_id = dr.db_ref_id
	    AND dr.external_database_release_id = edr.external_database_release_id
	    AND edr.external_database_id = ed.external_database_id
	    AND ed.name = 'Links to Pathway Maps'
	    ORDER BY dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Orthologs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Orthologs" excludeProjects="ApiDB"
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="source_id" />
            <column name="species"/>
            <column name="product"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT gf2.source_id, tn.name as species, gf2.product
            FROM dots.GeneFeature gf1, dots.SequenceSequenceGroup ssg1,
                 dots.SequenceSequenceGroup ssg2, dots.GeneFeature gf2,
                 dots.ExternalNaSequence ens, core.TableInfo ti,
                 sres.TaxonName tn
            WHERE gf1.source_id = '$$primaryKey$$'
              AND gf1.na_feature_id = ssg1.sequence_id
              AND ssg1.source_table_id = ti.table_id
              AND ssg1.sequence_group_id = ssg2.sequence_group_id
              AND ssg2.source_table_id = ti.table_id
              AND ssg2.sequence_id = gf2.na_feature_id
              AND gf2.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id = tn.taxon_id
              AND tn.name_class = 'scientific name'
              AND ti.name = 'GeneFeature'
              AND gf2.source_id != gf1.source_id
            ORDER BY tn.name, gf2.source_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Epitopes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Epitopes" excludeProjects="ApiDB"
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
                SELECT es.iedb_id, es.location, es.sequence, es.name,
                       es.confidence
                FROM apidb.EpitopeSummary es
                WHERE es.source_id = '$$primaryKey$$'
                ORDER BY DECODE(es.confidence, 'Low', 1,
                              'Medium', 2,
                              'High', 3,
                              4) desc,es.location
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mass spec -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpec" includeProjects="PlasmoDB"
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="developmental_stage"/>
            <column name="algorithm"/>
            <column name="seq_coverage"/>
            <column name="number_of_spans"/>
            <column name="sequence_count"/>
            <column name="spectrum_count"/>
            <sql>
            <![CDATA[
               SELECT mss.developmental_stage,
                      'Sequest' as algorithm, 
                      mss.aa_seq_percent_covered as seq_coverage,
                      mss.number_of_spans, mss.sequence_count, mss.spectrum_count
               FROM dots.TranslatedAaFeature taf, dots.genefeature gf, 
                    dots.transcript t, apidb.MassSpecSummary mss
               WHERE gf.source_id = '$$primaryKey$$'
                 AND t.parent_id = gf.na_feature_id
                 AND taf.na_feature_id = t.na_feature_id
                 AND mss.aa_sequence_id = taf.aa_sequence_id
               ORDER by mss.developmental_stage
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="UniqueMassSpecPeptides"  includeProjects="CryptoDB"
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="sequence"   />
            <column name="start_min"  />
            <column name="end_max"    />
            <column name="count"      />
            <sql>
            <![CDATA[
             select start_min,
                    end_max,
                    count,
                    SUBSTR(taas.sequence, 
                           start_min, 
                           (end_max - start_min +1)) sequence
             from (select start_min,
                    end_max,
                    taaf.aa_sequence_id,
                    count(*) count
             from apidb.massspecsummary mss,
             dots.massspecfeature msf,
             dots.aalocation aal,
             dots.translatedaafeature taaf,
             dots.transcript t,
             dots.genefeature gf
             where mss.mass_spec_summary_id = msf.source_id
             and msf.aa_feature_id = aal.aa_feature_id
             and mss.aa_sequence_id = taaf.aa_sequence_id
             and taaf.na_feature_id = t.na_feature_id
             and t.parent_id = gf.na_feature_id
             and gf.source_id = '$$primaryKey$$'
             group by start_min, 
                      taaf.aa_sequence_id,
                      end_max
             ) u,
             dots.translatedaasequence taas
             where u.aa_sequence_id = taas.aa_sequence_id
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- PFam domains -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="PfamDomains" 
                  isCacheable="false">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="definition"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="accession" />
            <column name="score" includeProjects="CryptoDB"/>
            <column name="accession_base" includeProjects="ToxoDB"/>
            <sql includeProjects="CryptoDB">
                SELECT distinct df.source_id as accession, 
                       ede.description as definition, 
                       df.score, 
                       aal.start_min, 
                       aal.end_max
                FROM  dots.translatedaafeature taaf,
                      dots.domainfeature df,
                      dots.aalocation aal,
                      sres.externaldatabaseentry ede
                WHERE taaf.aa_sequence_id = df.aa_sequence_id
                AND df.aa_feature_id = aal.aa_feature_id
                AND df.ALGORITHM_NAME = 'HMMPfam'
                AND df.external_database_release_id = ede.external_database_release_id
                AND df.source_id = SUBSTR(external_primary_identifier, 1, 
                                     INSTR(external_primary_identifier, '.', 1, 1) -1)
                AND taaf.source_id = '$$primaryKey$$'
                ORDER BY start_min
            </sql>
            <sql includeProjects="ToxoDB">
            SELECT pe.definition, pe.accession,
                   SUBSTR(pe.accession, 1, INSTR(pe.accession, '.', 1, 1) -1)
                       AS accession_base,
                   al.start_min, al.end_max
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.DomainFeature df,
                 dots.AaLocation al, dots.PfamEntry pe
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = df.aa_sequence_id
              AND df.aa_feature_id = al.aa_feature_id
              AND df.pfam_entry_id = pe.pfam_entry_id
              AND df.e_value <= 0.05
              GROUP BY pe.definition, pe.accession, al.start_min, al.end_max
            </sql>
        </sqlQuery>

    
  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- GFF data dump tables  -->
  <!--===========================================================================-->
  <!--===========================================================================-->

       <sqlQuery name="GeneGffDbxrefs" isCacheable="false">
        <paramRef ref="recordParams.primaryKey"/>
        <paramRef ref="recordParams.projectId"/>
        <column name="gff_dbxref"/>
        <sql>
/*          SELECT gts.source_id,
                   gts.go_id AS gff_dbxref
            FROM apidb.GoTermSummary gts
            WHERE gts.source_id = '$$primaryKey$$'
           UNION
*/          SELECT gf.source_id,
                   'taxon:' || t.ncbi_tax_id AS gff_dbxref
            FROM dots.GeneFeature gf, dots.NaSequence ns, sres.Taxon t
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id = t.taxon_id
           UNION
            SELECT gf.source_id,
                   'EC:' || ec.ec_number AS gff_dbxref
            FROM dots.GeneFeature gf,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
           UNION
/*            SELECT gf.source_id, so.so_id AS gff_dbxref
            FROM dots.GeneFeature gf, sres.SequenceOntology so
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.sequence_ontology_id = so.sequence_ontology_id
           UNION
*/            SELECT gf.source_id,
                   'NCBI_gi:' || dr.secondary_identifier AS gff_dbxref
            FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = drnf.na_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                    = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
                              'NRDB_ref_dbXRefBySeqIdentity',
                              'NRDB_sp_dbXRefBySeqIdentity')
           UNION
            SELECT gf.source_id,
                   'PDB:' || dr.primary_identifier AS gff_dbxref
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
           UNION
            SELECT DISTINCT gf.source_id,
                   'Sanger:' || gf.source_id AS gff_dbxref
            FROM dots.GeneFeature gf, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name like 'Sanger%'
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneRnas">
        <paramRef ref="recordParams.primaryKey"/>
        <paramRef ref="recordParams.projectId"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_transcript_sequence"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   decode(so.term_name,
                          'protein_coding', 'mRNA',
                          'rRNA_encoding', 'rRNA',
                          'snRNA_encoding', 'snRNA',
                          'tRNA_encoding', 'tRNA',
                          'non_protein_coding', 'transcript',
                          so.term_name) as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   gf.source_id as gff_attr_parent,
                   'rna_' || rna.source_id as gff_attr_id,
                   rna.source_id as gff_attr_name,
                   rna.product as gff_attr_description,
                   rna.source_id as gff_attr_locus_tag,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size,
                   s.sequence as gff_transcript_sequence
            from DoTS.GeneFeature gf,
                 DoTS.Transcript rna,
                 DoTS.NaLocation nl,
                 DoTS.ExternalNaSequence ens,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr,
                 sres.SequenceOntology so,
                 dots.splicednasequence s
            where gf.source_id = '$$primaryKey$$'
                and gf.na_feature_id = rna.parent_id
                and rna.na_feature_id = nl.na_feature_id
                and gf.na_sequence_id = ens.na_sequence_id
                and rna.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                and gf.sequence_ontology_id = so.sequence_ontology_id
                and s.na_sequence_id = rna.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneCdss">
        <paramRef ref="recordParams.primaryKey"/>
        <paramRef ref="recordParams.projectId"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_coding_sequence"/>
        <column name="gff_protein_sequence"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'CDS' as gff_type,
                   least(tf.translation_start, tf.translation_stop) as gff_fstart,
                   greatest(tf.translation_start, tf.translation_stop) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   mod(tf.translation_start, 3) as gff_phase,
                   rna.source_id as gff_attr_parent,
                   'cds_' || tf.source_id as gff_attr_id,
                   tf.source_id as gff_attr_name,
                   gf.product as gff_attr_description,
                   tf.source_id as gff_attr_locus_tag,
                   (tf.translation_stop - tf.translation_start + 1) as gff_attr_size,
                   SUBSTR(s.sequence,tf.translation_start,(tf.translation_stop - tf.translation_start + 1)) as gff_coding_sequence,
                   tas.sequence as gff_protein_sequence
              from dots.genefeature gf, 
                   dots.transcript rna,
                   dots.splicednasequence s, 
                   dots.TranslatedAaFeature tf,
                   dots.TranslatedAaSequence tas,
                   dots.ExternalNaSequence ens, 
                   dots.NaLocation nl
              where gf.source_id = '$$primaryKey$$'
                and rna.parent_id = gf.na_feature_id
                and s.na_sequence_id = rna.na_sequence_id
                and rna.na_feature_id = tf.na_feature_id
                AND tf.aa_sequence_id = tas.aa_sequence_id
                and gf.na_sequence_id = ens.na_sequence_id
                and gf.na_feature_id = nl.na_feature_id
              order by tf.translation_start asc, tf.translation_stop asc
        </sql>
    </sqlQuery>


    <sqlQuery name="GeneExons">
        <paramRef ref="recordParams.primaryKey"/>
        <paramRef ref="recordParams.projectId"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'exon' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   decode(ef.reading_frame, NULL, '.', ef.reading_frame) as gff_phase,
                   rna.source_id as gff_attr_parent,
                   'exon_' || ef.source_id as gff_attr_id,
                   ef.name as gff_attr_name,
                   ef.name as gff_attr_description,
                   ef.source_id as gff_attr_locus_tag,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size
            from DoTS.GeneFeature gf, 
                 DoTS.Transcript rna, 
                 DoTS.ExonFeature ef,
                 DoTS.NaLocation nl, 
                 DoTS.ExternalNaSequence ens,
                 dots.RnaFeatureExon rfe
            where gf.source_id = '$$primaryKey$$'
            and gf.na_feature_id = rna.parent_id
            and rna.na_feature_id = rfe.rna_feature_id
            and ef.na_feature_id = rfe.exon_feature_id
            and ef.na_feature_id = nl.na_feature_id
            and gf.na_sequence_id = ens.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>


  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- PlasmoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interactions as prey -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InteractionsAsPrey" isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="source_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="prey_number_of_baits"/>
            <sql>
            <![CDATA[
            SELECT bf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.prey_number_of_baits
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE pf.source_id='$$primaryKey$$'
             AND pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interactions as bait -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InteractionsAsBait" isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="source_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="bait_number_of_preys"/>
            <sql>
            <![CDATA[
            SELECT pf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.bait_number_of_preys
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE bf.source_id='$$primaryKey$$'
             AND pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Y2H interactions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Y2hInteractions" isCacheable="false" includeProjects="PlasmoDB">
        <paramRef ref="recordParams.primaryKey"/>
        <paramRef ref="recordParams.projectId"/>
        <column name="source_id"/>
        <column name="bait_start"/>
        <column name="bait_end"/>
        <column name="prey_start"/>
        <column name="prey_end"/>
        <column name="times_observed" />
        <column name="number_of_searches"/>
        <column name="prey_number_of_baits"/>
        <column name="bait_number_of_preys"/>
        <column name="bait_or_prey"/>
        <sql>
            <![CDATA[
               SELECT pf.source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, NULL AS prey_number_of_baits,
                       bait_number_of_preys, 'bait' as bait_or_prey
                FROM dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens, apidb.GeneInteraction gi
                WHERE bf.source_id = '$$primaryKey$$'
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND pf.na_sequence_id = ens.na_sequence_id
                UNION
                SELECT bf.source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, prey_number_of_baits,
                       NULL AS bait_number_of_preys, 'prey' as bait_or_prey
                FROM dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens,  apidb.GeneInteraction gi
                WHERE pf.source_id = '$$primaryKey$$'
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND bf.na_sequence_id = ens.na_sequence_id
           ]]>
        </sql>
      </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Array elements -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ArrayElements" isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="array_source_id"/>
            <column name="array_provider"/>
            <sql>
            <![CDATA[
               SELECT ens.source_id as array_source_id,
                      ed.name as array_provider
               FROM dots.Similarity s, dots.Transcript t, dots.GeneFeature gf,
                    sres.ExternalDatabase ed,
                    sres.ExternalDatabaseRelease edr,
                    dots.ExternalNaSequence ens,
                    core.TableInfo ti1, core.TableInfo ti2
               WHERE gf.source_id = '$$primaryKey$$'
                 AND t.parent_id = gf.na_feature_id
                 AND ed.external_database_id = edr.external_database_id
                 AND edr.external_database_release_id = ens.external_database_release_id
                 AND ens.na_sequence_id = s.query_id
                 AND 'ExternalNASequence' = ti1.name
                 AND ti1.table_id = s.query_table_id
                 AND 'Transcript' = ti2.name
                 AND ti2.table_id = s.subject_table_id
                 AND t.na_feature_id = s.subject_id
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein expression -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ProteinExpression" isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="profile_element"/>
            <column name="element_value"/>
            <sql>
            <![CDATA[
            SELECT REPLACE(pen.name, '_', ' ') as profile_element,
                   DECODE(pe.value, 1, 'yes', 'no') as element_value
            FROM apidb.profileElementName pen,
                 apidb.profileElement pe,
                 apidb.profile p,
                 apidb.profileSet ps
            WHERE p.source_id = '$$primaryKey$$'
            AND ps.name = 'berghei_proteomic_Sinden'
            AND ps.profile_set_id = p.profile_set_id
	    AND ps.profile_set_id = pen.profile_set_id
            AND p.profile_id = pe.profile_id
	    AND pen.element_order = pe.element_order
            ORDER BY pen.element_order
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- MR4 reagents -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Mr4Reagents" isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="atcc_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
                SELECT dbr.primary_identifier AS atcc_number,
                       dbr.secondary_identifier AS reagent_type,
                       dbr.remark
                FROM dots.GeneFeature gf,
                     dots.DbRefAAFeature df,
                     dots.Transcript t,
                     dots.TranslatedAAFeature taf,
                     sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE gf.source_id = '$$primaryKey$$'
                  AND t.parent_id = gf.na_feature_id
                  AND taf.na_feature_id = t.na_feature_id
                  AND df.aa_feature_id = taf.aa_feature_id
                  AND dbr.db_ref_id = df.db_ref_id
                  AND ed.name = 'MR4DBxRefs'
                  AND edr.external_database_id = ed.external_database_id
                  AND dbr.external_database_release_id
                      = edr.external_database_release_id
                ORDER BY dbr.secondary_identifier, dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein database links -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ProteinDatabase" 
                  isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="accession"/>
            <column name="gi"/>
            <column name="dataset"/>
            <column name="accession_url"/>
            <column name="gi_url"/>
            <sql>
            <![CDATA[
                SELECT dr.primary_identifier AS accession,
                       dr.secondary_identifier AS gi,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity', 'GenBank',
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                           'Protein Data Bank',
                                       'NRDB_ref_dbXRefBySeqIdentity', 'RefSeq',
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                           'Swiss-Prot',
                                       ed.name) AS dataset,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.rcsb.org/pdb/navbarsearch.do?newSearch=yes&isAuthorSearch=no&radioset=All&inputQuickSearch='
                                         || dr.primary_identifier
                                         || '&image.x=0&image.y=0&image=Search',
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                       'http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-newId+[swissprot-AllText:'
                                         || dr.primary_identifier || '*]+-view+UniprotView+-page+qResult',
                                       ed.name) AS accession_url,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       ed.name) AS gi_url
                FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE gf.source_id = '$$primaryKey$$'
                  AND gf.na_feature_id = drnf.na_feature_id
                  AND drnf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                        = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
      /* gets its own section     'NRDB_pdb_dbXRefBySeqIdentity', */
                                  'NRDB_ref_dbXRefBySeqIdentity',
                                  'NRDB_sp_dbXRefBySeqIdentity')
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- 3-D structure predictions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="3dPreds"
                  isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="search_term"/>
            <column name="pdb_template"/>
            <sql>
            <![CDATA[
            SELECT gf.source_id as search_term, dr.primary_identifier as pdb_template
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
            ]]>
            </sql>
        </sqlQuery>
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- PDB similarities -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="PdbSimilarities"
                  isCacheable="false" includeProjects="PlasmoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="pdb_chain"/>
            <column name="pdb_id"/>
            <column name="pvalue_mant"/>
            <column name="pvalue_exp"/>
            <column name="taxon"/>
            <column name="pdb_title"/>
            <column name="percent_identity"/>
            <column name="percent_plasmo_coverage"/>
            <sql>
            <![CDATA[
                SELECT ps.pdb_chain, ps.pdb_title, ps.pdb_id, ps.pvalue_mant,
                       ps.pvalue_exp, ps.taxon, ps.percent_identity,
                       ps.percent_plasmo_coverage
                FROM apidb.PdbSimilarity ps
                WHERE ps.source_id = '$$primaryKey$$'
                ORDER BY ps.score DESC
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- two channel diff expr -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

      <sqlQuery name="TwoChannelDifferentialExpression" isCacheable='false' includeProjects="PlasmoDB">
       <paramRef ref="recordParams.primaryKey"/>
       <paramRef ref="recordParams.projectId"/>
       <column name="studyName" />
       <column name="fold_change" />
       <column name="confidence" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
          SELECT lg.name as studyName,
	      max(to_char(de.fold_change, '999.99')) as fold_change,
              max(to_char(de.confidence,'99.99')) as confidence
            FROM Rad.LogicalGroup lg,
                 Rad.AnalysisInput ai,
                 Rad.Analysis a, 
                 RAD.DifferentialExpression de, 
                 Rad.ShortOligoFamily sof,
                 Rad.Protocol p, 
                 Rad.ProtocolParam pp, 
                 Rad.AnalysisParam ap,
                 ApiDB.GeneAlias ga
            WHERE lg.name = 'DOZI mutant vs. Wild Type - Loess Normalized Analyses'
             AND ai.logical_group_id = lg.logical_group_id 
             AND a.analysis_id = ai.analysis_id
             AND de.analysis_id = a.analysis_id
             AND sof.composite_element_id = de.row_id
             AND sof.source_id is not null
             AND ga.gene = '$$primaryKey$$'
             AND ga.alias = sof.source_id
             AND p.name = 'PaGE'
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND pp.name = 'reference_condition'
             AND ap.protocol_param_id = pp.protocol_param_id
             AND a.analysis_id = ap.analysis_id
             GROUP BY lg.name
        ]]>
       </sql>
    </sqlQuery>

  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- ToxoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Task comments -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="TaskComments" 
                  isCacheable="false" includeProjects="ToxoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="comment_string"/>
            <sql>
			<![CDATA[
			SELECT content AS comment_string
			FROM @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c
			WHERE c.stable_id = '$$primaryKey$$'
				AND c.review_status_id = 'task'
			]]>
            </sql>
        </sqlQuery>

  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- CryptoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- BLASTP -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="BlastP" includeProjects="CryptoDB" 
             isCacheable='true'>
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="source_id" />
            <column name="description" />
            <column name="pval" />
            <column name="secondary_identifier" />
            <sql> 
            <!-- The '409' genes do not have protein_ids so need to test for null -->
            <![CDATA[
            SELECT * 
            FROM (SELECT eaas.source_id as source_id, 
                         eaas.secondary_identifier, 
                         sim.pvalue_mant || 'e' || sim.pvalue_exp as pval,
                         eaas.description
                  FROM dots.similarity sim, 
                       dots.externalaasequence eaas, 
                       dots.translatedaasequence taas, 
                       dots.transcript t, 
                       dots.translatedaafeature taf,
                       core.tableinfo qtab,
                       core.tableinfo stab
                  WHERE sim.QUERY_ID = taas.aa_sequence_id
                  AND taas.aa_sequence_id = taf.aa_sequence_id 
                  AND taf.na_feature_id = t.na_feature_id
                  AND (t.protein_id != eaas.source_id or t.protein_id is null)
                  AND sim.SUBJECT_ID = eaas.AA_SEQUENCE_ID
                  AND sim.subject_table_id = stab.table_id
                  AND stab.name = 'ExternalAASequence'
                  AND sim.query_table_id  = qtab.table_id 
                  AND qtab.name = 'TranslatedAASequence'
                  AND t.source_id = '$$primaryKey$$'
                  ORDER BY to_number(pval) ASC)
            WHERE rownum < 6
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein IDs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <!-- GeneTables.ProteinIds -->
        <sqlQuery name="ProteinIds" includeProjects="CryptoDB">
            <paramRef ref="recordParams.primaryKey"/>
            <paramRef ref="recordParams.projectId"/>
            <column name="protein_id"/>
            <sql>
            SELECT protein_id
            FROM dots.transcript
            WHERE source_id = '$$primaryKey$$'
            </sql>
        </sqlQuery>

   </querySet>
</wdkModel>
