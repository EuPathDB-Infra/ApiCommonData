<?xml version="1.0" encoding="UTF-8"?>

<!-- $Id: plasmoDbModel.xml,v 1.36 2005/04/14 17:21:13 mheiges Exp $ -->

<!DOCTYPE xml [
  <!ENTITY nbsp "&#160;">
  <!ENTITY lt   "&#60;">
  <!ENTITY gt   "&#62;">
]>

<wdkModel name="PlasmoDB" displayName="PlasmoDB" version="5.3">


<!-- ******************* -->
<!-- model introduction  -->
<!-- ******************* -->
<introduction></introduction>


<!-- ************ -->
<!-- questionSets -->
<!-- ************ -->

<!--
A question is "a query that returns a list of records."  (Regular queries
return columns and rows.)  They are formed by pairing a query with a
record class.  The query must be one that returns one column containing
a list of primary keys.  The record class must be one that expects as
a primary key the type of key returned by the query.

A question set is a grouping of questions.  It may be used in the
user interface to present the enclosed questions in one choice box.
-->


<!-- questions that return Gene records -->
<questionSet name="GeneQuestions"
             displayName="Search genes">

    <description>
      Find Genes
    </description>

    <question name="GenesByLocation"
         category="Genomic Position"
         displayName="Chromosomal Location"
         queryRef="GeneFeatureIds.GenesByGenomicRegion"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that are located in a specified genomic region.
        </summary>
        <description>
          <![CDATA[
          Find genes that are located in a specified genomic region.<br><br>
          Either select a <i>P. falciparum</i> genomic sequence from the
          pull-down menu <i>or</i> enter a genomic sequence ID from any
          <i>Plasmodium</i> species (if you supply both, the sequence ID will
          be used).
          ]]>
        </description>
    </question>

    <question name="GenesByNonnuclearLocation"
         category="Genomic Position"
         displayName="Non-nuclear Chromosomal Location"
         queryRef="GeneFeatureIds.GenesByNonnuclearGenomicRegion"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that are located in a specified region of the non-nuclear genome.
        </summary>
        <description>
          <![CDATA[
          Find <i>P. falciparum</i> genes that are located in a specified
          non-nuclear region of the genome.<br><br>
          ]]>
        </description>
    </question>

    <question name="GenesByCentromereProximity"
              displayName="Proximity to Centromeres (P.f.)"
              category="Genomic Position"
              queryRef="GeneFeatureIds.GenesByCentromereProximity"
              summaryAttributesList="location_text,dist_centromere,product"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from an annotated centromere location.
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from an annotated centromere location.
          ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="dist_centromere" displayName="Distance from Centromere"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByTelomereProximity"
              displayName="Proximity to Telomeres (P.f.)"
              category="Genomic Position"
              queryRef="GeneFeatureIds.GenesByTelomereProximity"
              summaryAttributesList="location_text,dist_telomere,product"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from the start and end positions of chromosomes.Chromosome ends include telomeric repeats..
          ]]>
        </summary>
        <description>
          <![CDATA[
	  Find <i>P. falciparum</i> genes within a given distance from a telomere.  We are using the start and end positions of chromosomes to define the location of the telomere.  Your query should take into account that the actual location of the telomere is <b>NEAR</b> the end of the chromosome.
          ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="dist_telomere" displayName="Distance from Telomere"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByGeneType"
         category="Gene Attributes"
         displayName="Gene Type"
              queryRef="GeneFeatureIds.GenesByGeneType"
              summaryAttributesList="organism,location_text,product,is_pseudo"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find genes by type (eg, protein coding, tRNA, pseudogenes, etc).
        </summary>
        <description>
           <![CDATA[
          Find genes by type.
          <br><br>
          Gene type assignments are based on the gene annotations from the Sanger Institute and TIGR.
          ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="is_pseudo" displayName="Pseudogene" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByExonCount"
              category="Gene Attributes"
              displayName="Exon Count"
              queryRef="GeneFeatureIds.GenesByExonCount"
              summaryAttributesList="organism,location_text,product,exon_count"
              sortingAttributesList="organism asc,exon_count desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes having the given number of exons.
        </summary>
        <description>
           <![CDATA[
        Find genes having the given number of exons.
          <br><br>

        Exon numbers are based on gene model annotation from the Sanger Institute and TIGR.
          ]]>
        </description>
    </question>

    <question name="GenesByIsoelectricPoint"
         displayName="Isoelectric Point"
         category="Predicted Proteins"
         queryRef="GeneFeatureIds.GenesByIsoelectricPoint"
         summaryAttributesList="organism,location_text,product,isoelectric_point"
         sortingAttributesList="organism asc,isoelectric_point asc, location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes whose protein product has an isoelectric point in a range that you specify.
        </summary>
        <description>
           <![CDATA[
             Find genes whose protein product has an isoelectric point in the specified range.
           ]]>
        </description>
    </question>

    <question name="GenesByMolecularWeight"
         displayName="Molecular Weight"
         category="Predicted Proteins"
         queryRef="GeneFeatureIds.GenesByMolecularWeight"
         summaryAttributesList="organism,location_text,product,molecular_weight"
         sortingAttributesList="organism asc,molecular_weight asc, location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes whose unmodified protein product has a molecular weight in a range that you specify.
        </summary>
        <description>
           <![CDATA[
            Find genes whose unmodified protein product has a molecular weight in a range that you specify.
          <br><br>

             Molecular weights are machine calculated from the raw translation and does not take into account any protein or residue modifications. For translations containing ambiguous amino acid codes (B, Z, X) we calculate the average of the upper and lower bound of the molecular weight.
           ]]>
        </description>
    </question>

    <question name="GenesByPdbSimilarity"
         displayName="PDB 3D Structures"
         category="Predicted Proteins"
         queryRef="GeneFeatureIds.GenesByPdbSimilarity"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find genes whose protein product has high BLAST similarity to a chain of a <a href="http://www.rcsb.org/pdb">Protein Data Bank (PDB)</a> structure.
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find genes whose protein product has high BLAST similarity to a chain of a <a href="http://www.rcsb.org/pdb">Protein Data Bank (PDB)</a> structure.
            Specify one or more organisms whose genes to retrieve; one or more
            clades of organisms whose PDB records should be considered; and a
            p-value exponent cutoff.
            ]]>
        </description>
    </question>

    <question name="GenesWithStructurePrediction"
              displayName="Predicted 3D Structure (P.f.)"
              category="Predicted Proteins"
              queryRef="GeneFeatureIds.GenesWithStructurePrediction"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes that have
              computationally predicted 3D structure models.
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find <i>P. falciparum</i> genes that have
              computationally predicted 3D structure models.
              <br><br>
              The models were generated
              computationally
              by Dinesh Gupta at the <a href="http://icgeb.res.in/">ICGEB</a>.
              They are seeded with experimentally-determined
              structures of similar proteins (from <a href="http://www.rcsb.org">PDB</a>).
          ]]>
        </description>
    </question>

    <question name="GenesWithProteinLowComplexity"
              displayName="Low Complexity Proteins (P.f.)"
              category="Predicted Proteins"
              queryRef="GeneFeatureIds.GenesWithProteinLowComplexity"
              summaryAttributesList="product,organism"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
	  Find <i>P. falciparum</i> genes with low complexity amino acid sequence
          ]]>
        </summary>
        <description>
          <![CDATA[
	  The low complexity percent was derived for <i>P. falciparum</i> genes using seg. <br></br>Wootton, J.C., Federhen, S. (1993)  Statistics of local complexity in amino acid sequences and sequence databases.  <i>Computers & Chemistry</i> 17: 149-163.
          ]]>
        </description>
    </question>

    <question name="GenesBySecondaryStructure"
              displayName="Protein Secondary Structure"
              category="Predicted Proteins"
              queryRef="GeneFeatureIds.GenesBySecondaryStructure"
              summaryAttributesList="organism,location_text,product,percent_coil,percent_strand,percent_helix"
              sortingAttributesList="organism asc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes whose proteins are predicted to have the given secondary-structure content by the PSIPRED program.
        </summary>
        <description>
          <![CDATA[
              Find genes whose proteins are predicted to have the given secondary-structure content by the PSIPRED program. The percent composition is computed by counting the amino acids in which one of the three calls is given the highest confidence, and dividing by the length of the protein.  For example the percent helix is the number of amino acids in which helix has the highest confidence, divided by the length of the protein.


              </P><PRE><B>References:</B> <BR> Jones DT. (1999) Protein secondary structure prediction<BR> based on position-specific scoring matrices<BR> <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=10493868">J Mol Biol. 1999 Sep 17;292(2):195-202</a></PRE>
          ]]>
        </description>
        <dynamicAttributes>
             <columnAttribute name="percent_coil" displayName="Percent Coil" align="center"
                              inReportMaker="false"/>
             <columnAttribute name="percent_strand" displayName="Percent Strand" align="center"
                              inReportMaker="false"/>
             <columnAttribute name="percent_helix" displayName="Percent Helix" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesBySimilarity"
         displayName="BLAST"
         category="Similarity/Pattern"
         queryRef="GeneFeatureIds.GenesBySimilarity"
         summaryAttributesList="organism,product,Header,TabularRow,Alignment,Footer"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
           Find genes that have BLAST similarity to your input sequence.
         </summary>
         <description>
           <![CDATA[
             Find genes that have BLAST similarity to your input query sequence.
            <p>The search uses <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesByMotifSearch"
         displayName="Protein Motif Pattern"
         category="Similarity/Pattern"
         queryRef="GeneFeatureIds.GenesByMotifSearch"
         summaryAttributesList="organism,location_text,product,Locations,MatchCount,Sequence"
         sortingAttributesList="organism asc,MatchCount desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
             Find genes whose protein product contains a motif pattern that
             you specify, e.g. "two cysteines followed by one or more
             hydrophobic amino acids, followed by arginine, then lysine".
         </summary>
         <description>
           <![CDATA[
             Find genes whose protein product contains a motif pattern that
             you specify., e.g. "CC6+RK", which means "two cysteines followed
             by one or more hydrophobic amino acids, followed by arginine,
             then lysine". The pattern need not be well conserved. If 
             you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.  
             <br><br>

             Another example is the pattern of the
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">
             Pexel motif</a>, which can be represented as "R.L.[EQD]", meaning
             "an arginine, then any amino acid, then a leucine, then any amino
             acid, then either an aspartic acid, a glutamic acid, or a
             glutamine".
             <br><br>

             The pattern need not be well conserved. If you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.
             <br><br>

             Specify the pattern with a (Perl style) "regular expression".
             (Regular expressions are more powerful than PROSITE patterns.)
             For a description of how to create regular expressions,
             please see the <a href="regexp.jsp">Regular Expression Tutorial</a>.
             <br><br>

             The following codes can be used to represent classes of amino acids.
		<table border columns=3>
                   <TR>
                      <TD><B>AA property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>
          ]]>
         </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" displayName="Match Locations" align="center"/>
           <columnAttribute name="MatchCount" displayName="Match Count" align="center"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>


    <!-- question name="GenesByPfamDomain"
              category="Similarity/Pattern"
              displayName="Pfam domain"
              queryRef="GeneFeatureIds.GenesByPfamDomain"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes containing a given Pfam domain, family or repeat.
        </summary>
        <description>
            <![CDATA[
Find genes containing a given Pfam domain, family or repeat.  Type a Pfam name, accession or description. Use the <a href="http://www.sanger.ac.uk/Software/Pfam/browse/top_twenty.shtml">Pfam browser</a> to search Pfam if you are not sure.
            ]]>
        </description>
    </question -->


    <question name="GenesByInterproDomain"
              category="Similarity/Pattern"
              displayName="Interpro Domain"
              queryRef="GeneFeatureIds.GenesByInterproDomain"
              summaryAttributesList="organism,location_text,product,e_value"
              sortingAttributesList="organism asc,e_value asc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes containing a given protein domain.
        </summary>
        <description>
            <![CDATA[
            Find genes whose predicted protein contains a domain from
            the InterPro set of domain databases.  The domain matches are
            identified by the InterProScan program.
            <p>First choose a member database.
            <p>Then begin typing the domain name, or part of it. You will
            be prompted with all possible domains that match what you have typed.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="e_value" displayName="Score / E value" align="center"/> 
	</dynamicAttributes>
    </question>

    <question name="GenesBySnps"
              category="Population Biology"
              displayName="SNP Characteristics"
              queryRef="GeneFeatureIds.GenesBySnps"
              summaryAttributesList="product,total_snps,num_non_synonymous,num_synonymous,num_nonsense,num_noncoding,dn_ds_ratio,cds_snp_density"
              sortingAttributesList="total_snps desc,cds_snp_density desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
	 Find <i>P. falciparum</i> genes which have SNPs meeting specific criteria (Non-synonymous / synonymous SNP ratio, SNP density, etc).
           ]]>
        </summary>
        <description>
            <![CDATA[
	     Search for <I>P. falciparum</I> genes by SNP density, the number of SNPs of different classes, ratio of non-synonymous to synonymous, etc.
             Note that if you don't care about one of the parameters, don't change the defaults
             on that parameter and you will get all genes irrespective of that parameter.
             For example, running this query
             to compare 3D7 and Dd2 using default parameters returns 2577 genes.  Among the top 20 on the list
             are CLAG, AMA1, chloroquine resistance marker and multiple PfEMP1 and SURFIN genes.
             <p>Note: Due to the extreme codon bias in the falciparum genome, the ratio of non-synonymous
             to synonymous snps per gene is much higher than expected so this should be considered when creating queries.
             We are intending to calculate more reliable normalized Dn/Ds or Ka/Ks ratios in subsequent releases of PlasmoDB.


             <p>SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.</p>
	     <div align="center">
                <img src="images/dnds_ratio.png" alt="Chart of gene count for those with fifty or fewer total SNPs">
             </div>
	     <br><br>
            ]]>
        </description>

	<dynamicAttributes>
	     <columnAttribute name="total_snps" displayName="Total SNPs" align="center"/> 
	     <columnAttribute name="cds_snp_density" displayName="SNPs per Kb (CDS)" align="center"/>
	     <columnAttribute name="dn_ds_ratio" displayName="Non-syn/syn SNP ratio" align="center"/>
	     <columnAttribute name="num_synonymous" displayName="Synonymous SNPs" align="center"/>
	     <columnAttribute name="num_non_synonymous" displayName="Non-synonymous SNPs" align="center"/>
	     <columnAttribute name="num_nonsense" displayName="Nonsense SNPs" align="center"/>
	     <columnAttribute name="num_noncoding" displayName="Non-coding SNPs" align="center"/>
	</dynamicAttributes>

    </question>

    <question name="GenesByEcNumber"
         category="Putative Function"
         displayName="EC Number (P.f.)"
              queryRef="GeneFeatureIds.GenesByEcNumber"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
          Find <i>P. falciparum </i> genes by assigned Enzyme Commission (EC) number.
          ]]>
        </summary>
        <description>
           <![CDATA[
Find <i>P. falciparum </i> genes by their Enzyme Commission (EC) number.  Use '-' in place of numbers to denote partial EC Numbers, for example, '2.7.7.-'.
 For help with obtaining EC numbers, try the
           <a href="http://ca.expasy.org/enzyme/">ExPASy-ENZYME</a>
           browser.
          <br><br>

E.C. number annotation for <i>P. falciparum</i> are from Andy Berry, Matt Berriman (Sanger Institute) and Hagai Ginsburg (Hebrew University).
          ]]>
        </description>
    </question>

    <question name="GenesByGoTerm"
         category="Putative Function"
         displayName="GO Term"
              queryRef="GeneFeatureIds.GenesByGoTerm"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
Find genes by Gene Ontology (GO) term for molecular function, biological process or subcellular localization.
        </summary>
        <description>
           <![CDATA[
           Find genes by Gene Ontology (GO) term for molecular function,
           biological process or subcellular localization.  The search finds
           genes with the GO term you specify and genes with terms that are
           specializations of your term (is-a).  For a list of GO terms, try
           the
           <a href="http://www.godatabase.org/cgi-bin/amigo/go.cgi">AmiGO</a>
           browser.  For GO IDs, include the GO prefix as in "GO:0003824."
           <br><br>

           GO term annotation was provided by the sequencing and annotation
           centers (Sanger and TIGR), and was inferred from similarity to
           protein domains from the
           <a href="http://www.ebi.ac.uk/interpro/">InterPro</a> databases.
           ]]>
       </description>
    </question>


    <question name="GenesByMetabolicPathway"
         displayName="Metabolic Pathway (P.f.)"
         category="Putative Function"
         queryRef="GeneFeatureIds.GenesByMetabolicPathway"
         summaryAttributesList="location_text,product,met_pathways"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes involved in a specific metabolic pathway.
        </summary>
        <description>
            <![CDATA[
        Find genes involved in a specific metabolic pathway.
          <br><br>

        Maps of Metabolic Pathways were constructed as described on the Malaria Parasite Metabolic Pathways website
            <a href="http://sites.huji.ac.il/malaria/FramIntroduction.html">here</a> .
           ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="met_pathways" displayName="Metabolic Pathways"/>
	</dynamicAttributes>
    </question>

    <question name="GenesByProteinProteinInteraction"
              displayName="Y2H Protein Interaction (P.f.)"
              category="Putative Function"
              queryRef="GeneFeatureIds.GenesByProteinProteinInteraction"
              summaryAttributesList="location_text,product,bait_start,bait_end,prey_start,prey_end,times_observed,number_of_searches,preyNumberBaits,baitNumberPreys,bait_or_prey"
              sortingAttributesList="times_observed desc, number_of_searches desc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes that interact with a given gene, as determined by yeast two-hybrid experiments.
        </summary>
        <description>
           <![CDATA[
Find genes that interact with a given gene, as determined by yeast two-hybrid experiments.  <br><br>
        <i>Times reproduced</i> refers to the number of independent yeast two-hybrid screens in which a given interaction was found. Interactions found in two or more yeast two-hybrid screens were independently reproduced, and are thus more likely to be true yeast two-hybrid positives.
<br><br>
<i>Times observed</i> refers to the total number of times a given interaction was identified in all yeast two-hybrid screens.  An  interaction can be identified multiple times in the same screen for several reasons: (1) The original yeast cell containing the pair of  interacting proteins divided before being plated on selective media; (2) The same prey plasmid was present in the library multiple times  and thus gave rise to multiple positive colonies; or (3) The prey  gene was present in the library as multiple independent, overlapping  fragments, all of which interact with a given bait.  Only (3) provides independent confirmation of a putative interaction.
<br><br>
Protein interactions were experimentally determined using the yeast two-hybrid system as described in LaCount DJ, Vignali M, Chettier R, Phansalkar A, Bell R, Hesselberth JR, Schoenfeld LW, Ota I, Sahasrabudhe S, Kurschner C, Fields S, Hughes RE.  A protein interaction network of the malaria parasite Plasmodium falciparum. Nature. 2005 438:103-7.

          ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="bait_start" displayName="Bait Start" align="center"/>
            <columnAttribute name="bait_end" displayName="Bait End" align="center"/>
            <columnAttribute name="prey_start" displayName="Prey Start" align="center"/>
            <columnAttribute name="prey_end" displayName="Prey End" align="center"/>
            <columnAttribute name="times_observed"
                       displayName="Times Observed" align="center"/>
            <columnAttribute name="number_of_searches"
                       displayName="Times Reproduced" align="center"/>
            <columnAttribute internal="true" name="prey_number_of_baits"/>
            <columnAttribute internal="true" name="gene_source_id"/>
            <linkAttribute name="preyNumberBaits"
                       displayName="Baits Interacting with Found Gene" align="center"
                       visible="$$prey_number_of_baits$$">
                <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=GeneQuestions.GenesByProteinProteinInteraction&locus_tag=$$gene_source_id$$&min_searches=1&min_observed=1&myPropbait_or_prey=prey&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="bait_number_of_preys" internal="true"/>
            <linkAttribute name="baitNumberPreys"
                       displayName="Preys Interacting with Found Gene" align="center"
                       visible="$$bait_number_of_preys$$">
                <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=GeneQuestions.GenesByProteinProteinInteraction&locus_tag=$$gene_source_id$$&min_searches=1&min_observed=1&myPropbait_or_prey=bait&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="bait_or_prey"
                       displayName="Query Gene Was" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByFunctionalInteraction"
         displayName="Predicted Functional Interaction (P.f.)"
         category="Putative Function"
         queryRef="GeneFeatureIds.GenesByFunctionalInteraction"
         summaryAttributesList="location_text,product,queries_matched,query_ids,likelihood_scores"
         sortingAttributesList="queries_matched desc,likelihood_scores desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
          Find genes of <i>P. falciparum</i> (strain HB3) identified by the <a href="http://www.cbil.upenn.edu/plasmoMAP">plasmoMAP</a> project to have a functional interaction with the given gene.
          ]]>
        </summary>
        <description>
           <![CDATA[
Find genes of <i>Plasmodium falciparum</i> (strain HB3) identified by the <a href="http://www.cbil.upenn.edu/plasmoMAP">plasmoMAP</a> project to have a functional interaction with the given gene.

<br><br>Input a gene ID and a minimum interaction likelihood score.  Scores range from 2 to 9435, and increasing scores indicate higher confidence.  Generally, a likelihood score of 10 or more indicates a high-confidence interaction.

<br><br>There are 388,969 total predicted protein pairs in the result set, with likelihood scores ranging from 2 to 9435. Below a score of 2, the number of false positives exceed the number of true positives. Most protein-protein interaction pairs (~79%) have a likelihood score of below 10, while about 20% of the pairs have a likelihood score between 10 and 9435 (only 251 pairs, or about 0.06% of the total, have a likelihood score above 100).

<br><br>Empirical observations of the results show that while many pairs with very low likelihood scores (say between 2-4) are biologically valid, the predicted interactions are likely to be highly accurate as the scores approach a value of 10. In the published manuscript, a score of 14 was used to isolate a high-confidence subset of interactions, where the number of true positives was about 10 times greater than the number of false positives.


<br><br><a href="http://www.genome.org/cgi/content/abstract/gr.4573206v1">Date, S.V. & Stoeckert, C.J., Jr. Computational modeling of the <i>Plasmodium falciparum</i> interactome reveals protein function on a genome-wide scale. <i>Genome Research</i>, April 2006, doi:10.1101/gr.4573206</a>
          ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="likelihood_scores"
                       displayName="Likelihood Scores" align="center"/>
            <columnAttribute name="query_ids"
                       displayName="Query IDs"/>
            <columnAttribute name="queries_matched"
                       displayName="Queries matched" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByWatersDifferentialExpression"
              category="Transcript Expression"
              displayName="Diff. expression in DOZI mutant vs. WT (P.b.)"
              queryRef="GeneFeatureIds.GenesByWatersDifferentialExpression" 
              summaryAttributesList="product,fold_change,confidence"
              sortingAttributesList="fold_change desc,confidence desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[ Find <i>P. berghei</i> genes by differential expression in DOZI mutant vs. WT (from purified gametocytes). ]]>
        </summary>
        <description>
            <![CDATA[
Find genes whose expression was found to be up-regulated or down-regulated based upon PaGE differential expression analysis in a microarray study of purified gametocytes where the PB000603.01.0 gene in P. berghei has been knocked out. It has been proposed (Mair et al. Science 2006) to name PB000603.01.0 protein "DOZI" for "development of of zygote inhibited."
<p>
A list of genes is returned based on the fold-change, PaGE-determined confidence (based on replicate analysis), and whether up or down regulated. For example, choosing fold change >= 2, confidence >= 0.8, and down regulated returns a list of 335 genes including PB000603.01.0 (the knocked out gene) with a fold change of -7.14.
<p>
For further information on the experiments, refer to:
<p>
Mair GR, Braks JA, Garver LS, Wiegant JC, Hall N, Dirks RW, Khan SM, Dimopoulos G, Janse CJ, Waters AP. Regulation of sexual development of Plasmodium by translational repression. Science. 2006 Aug 4;313(5787):667-9.
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold Change" align="center"/>
	     <columnAttribute name="confidence" displayName="Confidence" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="GenesByDifferentialMeanExpression"
              category="Transcript Expression"
              displayName="Diff. expression (fold-change) in KO vs. WT (P.f.)"
              queryRef="GeneFeatureIds.GenesByDifferentialMeanExpression" 
              summaryAttributesList="product,fold_change"
              sortingAttributesList="fold_change desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find  <i>P. falciparum</i> genes by differential expression (fold-change) in Sir2 and invasion pathway KO studies
            ]]>
        </summary>
        <description>
            <![CDATA[
Find genes based on fold-change differences in expression by comparing assays of P. falciparum RNA when the Sir2 histone deacetylase gene is knocked out, when an erythrocyte binding protein (EBA-175, EBA-140, or pfRh2b) is knocked out, or in their associated controls. Please be aware that these are individual comparisons and not subjected to any statistical analysis.
<p>
The data is from a total of 17 microarray experiments (1, 2, 3) performed using an Affymetrix short oligonucleotide platform. This platform contains oligos (25-mers) derived from the predicted coding regions of the entire P. falciparum genome (4). The Sir2 Knock out (KO) experiments were designed to look at var gene silencing by Sir2 (PF13_0152). The EBA-175 (MAL7P1.176), EBA-140 (MAL13P1.60), and pfRh2b (MAL13P1.176) KOs were performed to study sialic acid-dependent versus sialic acid-independent invasion pathways. W2mef/C4/Nm is a sialic acid-independent clone. The D10 strain naturally is missing the pfRh2b and EBA-140 genes.
<p>
Expression values for each probe set were obtained by the gcRMA algorithm (5). Queries can be performed to retrieve genes with a fold change of expression values greater or equal to the value entered between the reference (numerator) and comparison (denominator) studies chosen. For example, choosing W2mef EBA175 KO (late T) as the reference, W2mef WT (late T) as the comparison study, down-regulated as the direction, and fold-change >= 2 returns a list of 55 genes with MAL7P1.176 (EBA175) at the top with a fold change of -4.9.
<p>
References:
<p>
(1) Duraisingh et al., Heterochromatin silencing and locus repositioning linked to regulation of virulence genes in Plasmodium falciparum. Cell. 2005 Apr 8;121(1):13-24
<p>
(2) Stubbs et al., Molecular mechanism for switching of P. falciparum invasion pathways into human erythrocytes. Science. 2005 Aug 26;309(5739):1384-7
<p>
(3) Baum et al., Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions. PLoS Pathog. 2005 Dec;1(4):e37
<p>
(4) Discovery of Gene Function by Expression Profiling of the Malaria Parasite Life Cycle. Karine G. Le Roch, Yingyao Zhou, Peter L. Blair, Muni Grainger, J. Kathleen Moch, J. David Haynes, Patricia De la Vega, Anthony A. Holder, Serge Batalov, Daniel J. Carucci, and Elizabeth A. Winzeler Published online July 31, 2003; 10.1126/science.1087025 (Science Express Research Articles)
<p>
(5) http://bioconductor.org/packages/bioc/html/gcrma.html
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold-change"/>
	</dynamicAttributes>
    </question>


    <question name="GenesByExpressionPercentileA"
              category="Transcript Expression"
              displayName="Expression percentile in KO and WT (P.f.)"
              queryRef="GeneFeatureIds.GenesByExpressionPercentileA" 
              summaryAttributesList="product,percentile"
              sortingAttributesList="percentile desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find  <i>P. falciparum</i> genes by expression percentile from Sir2 KO and invasion pathway KO studies 
            ]]>
        </summary>
        <description>
            <![CDATA[
Find genes expressed when the Sir2 histone deacetylase gene is knocked out, when an erythrocyte binding protein (EBA-175, EBA-140, or pfRh2b) is knocked out, or in  their associated controls.
<p>
The data is from a total of 17 microarray experiments (1, 2, 3) performed using an Affymetrix short oligonucleotide platform. This platform contains oligos (25-mers) derived from the predicted coding regions of the entire P. falciparum genome (4). The Sir2 Knock out (KO) experiments were designed to look at var gene silencing by Sir2 (PF13_0152). The EBA-175 (MAL7P1.176), EBA-140 (MAL13P1.60), and pfRh2b (MAL13P1.176) KOs were performed to study sialic acid-dependent versus sialic acid-independent invasion pathways. W2mef/C4/Nm is a sialic acid-independent clone. The D10 strain naturally is missing the pfRh2b and EBA-140 genes.
<p>
Expression values for each probe set were obtained by the gcRMA algorithm (5). Queries can be performed to retrieve only those genes in at least the Xth percentile level, where X can be from 95 to 5. In this way it is possible to select only the most highly expressed genes, to any desired level above the 5th percentile. Genes are returned in decreasing order of their intensity.
<p>
References:
<p>

(1) Duraisingh et al., Heterochromatin silencing and locus repositioning linked to regulation of virulence genes in Plasmodium falciparum. Cell. 2005 Apr 8;121(1):13-24
<p>

(2) Stubbs et al., Molecular mechanism for switching of P. falciparum invasion pathways into human erythrocytes. Science. 2005 Aug 26;309(5739):1384-7
<p>

(3) Baum et al., Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions. PLoS Pathog. 2005 Dec;1(4):e37

<p>
(4) Discovery of Gene Function by Expression Profiling of the Malaria Parasite Life Cycle. Karine G. Le Roch, Yingyao Zhou, Peter L. Blair, Muni Grainger, J. Kathleen Moch, J. David Haynes, Patricia De la Vega, Anthony A. Holder, Serge Batalov, Daniel J. Carucci, and Elizabeth A. Winzeler Published online July 31, 2003; 10.1126/science.1087025 (Science Express Research Articles)

<p>

(5) http://bioconductor.org/packages/bioc/html/gcrma.html
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="percentile" displayName="Percentile" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="GenesByExpressionTiming"
         displayName="Expression Timing (P.f)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByExpressionTiming"
         summaryAttributesList="organism,product,derisiOverlayPct"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes with peaks or troughs occuring within specified intervals during the intraerythrocytic infection cycle.
        </summary>
        <description>
           <![CDATA[
              Find genes with peaks or troughs occuring within specified intervals during the intraerythrocytic infection cycle.  Five intraerythrocytic time courses may be
              queried in turn (and results may be combined using the
              <a href="showQueryHistory.do">query history</a>).  The time
              courses are those provided by the
               <a href="http://derisilab.ucsf.edu/">DeRisi
              Lab</a>. They are from a
              glass slide array and analyze HB3, 3D7, and Dd2 parasites.
          ]]>
        </description>
    </question>

    <question name="GenesByProfileSimilarity"
         displayName="Expression Profile Similarity (P.f.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByProfileSimilarity"
         summaryAttributesList="organism,distance,time_shift,profilesGraph"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
            <![CDATA[
          Find <i>P. falciparum</i> genes that have a similar expression profile to your input gene.
          ]]>
         </summary>
         <description>
           <![CDATA[
           Find <i>P. falciparum</i> genes that have a (glass slide) expression profile similar to that of your input gene.
             Find genes that have similar expression profile to your input gene.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="distance" displayName="Profile Distance"
                              inReportMaker="true"/>
             <columnAttribute name="time_shift" displayName="Time Shift"
                              inReportMaker="true"/>
             <columnAttribute name="query_source_id" displayName="QueryGeneId"
                        inReportMaker="false"/>
             <textAttribute name="profilesGraph" displayName="Profiles"
                        inReportMaker="false" truncateTo="100000">
                <text>
                   <![CDATA[
                   <img src="@CGI_URL@/dataPlotter.pl?id=$$primaryKey$$&sid=$$query_source_id$$&type=DeRisiProfileQuery::Ver1&model=plasmo&fmt=png&thumb=1" alt=""/>
                    ]]>
                </text>
             </textAttribute>
         </dynamicAttributes>
    </question>

    <question name="GenesByExpressionPercentile"
         displayName="Expression Percentile (P.f.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByExpression"
         summaryAttributesList="product,winzelerPct"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
         Find <i>P. falciparum</i> genes expressed in early ring, late ring, early trophozoite, late trophozoite, early
         schizont, late schizont, merozoite, sporozoite, or gametocyte.
          ]]>
        </summary>
        <description>
           <![CDATA[
        Find genes expressed in
        early ring, late ring, early trophozoite, late trophozoite, early
        schizont, late schizont, merozoite, sporozoite, or gametocyte.
        <br><br>

        The data is from a total of 17 microarray experiments (1) performed using an
        Affymetrix short oligonucleotide platform.  Cultures were synchronized
        using two independent methods, 5% D-sorbitol and temperature cycling,
        for all developmental stages except Gametocyte and Sporozoite.  This
        platform contains oligos (25-mers) derived from the predicted coding
        regions of the entire <I>P. falciparum</I> genome.
        <P>Expression values for each probe set were obtained by the MOID
        algorithm (2). Queries can be performed to retrieve only those genes
        in at least the Xth percentile level, where X can be from 95 to 5.  In
        this way it is possible to select only the most highly expressed
        genes, to any desired level above the 5th percentile.  Genes are
        returned in decreasing order of their intensity.
        <p>However, please note that, regardless of the percentile expression
        level selected, only genes that are above background and whose
        observed expression level would not be expected by chance (MOID
        expression level >10 and logP < -0.5) are included and will be
        reported.  This means that genes that have only a single probe on the
        array will not be reported as their logP values will always be too
        high to satisfy the query.
        <p><b>References:</b><br> (1) Discovery of Gene Function by Expression
        Profiling of the Malaria Parasite Life Cycle.  Karine G. Le Roch,
        Yingyao Zhou, Peter L. Blair, Muni Grainger, J. Kathleen Moch, J.
        David Haynes, Patricia De la Vega, Anthony A. Holder, Serge Batalov,
        Daniel J. Carucci, and Elizabeth A. Winzeler Published online July 31,
        2003; 10.1126/science.1087025 (Science Express Research Articles)
        <br>(2) Zhou Y, Abagyan R. Match-Only Integral Distribution (MOID)
        Algorithm for high-density oligonucleotide array analysis. BMC
        Bioinformatics. 2002;3(1):3.
          ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="max_percentile" displayName="Max Percentile"
                             inReportMaker="false"/>
            <columnAttribute name="min_percentile" displayName="Min Percentile"
                             inReportMaker="false"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByGametocyteExpression"
         displayName="Gametocyte Expression (P.f.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByGametocyteExpression"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
                Find <i>P. falciparum</i> genes by
                percentile protein expression in gametocytes.
           ]]>
        </summary>
        <description>
            <![CDATA[
                Find <i>Plasmodium falciparum</i> genes expressed during
                gametocytogenesis in strain NF54, strain 3D7, or MACS-purified
                strain 3D7. It uses data from a total of 23 microarray
                experiments (1), as shown here for gene PFD0830w:<br><br>
                <div align="center">
                <img src="images/gam_pct_pfd0830w.png" alt="Expression levels chart">
                </div><br><br>
                These experiments were performed using an Affymetrix short
                oligonucleotide platform, which contains oligos (25-mers)
                derived from the predicted coding regions of the entire <I>P.
                falciparum</I> genome. </P> <P> Expression values for each
                probe set were obtained by the MOID algorithm (2). Genes can
                be found by their percentile expression in the selected set of
                assays.<br><br>
                However, please note that, regardless of the percentile
                expression level selected, only genes that are above
                background and whose observed expression level would not be
                expected by chance (MOID expression level >10 and logP < -0.5)
                are included and will be reported.  This means that genes that
                have only a single probe on the array will not be reported as
                their logP values will always be too high to satisfy the query.
                <br><br>
                <pre><b>References:</b><br>(1) Jason A. Young, Quinton L. Fivelman, Peter L. Blair, Patricia de la Vega,<br>Karine G. Le Roch, Yingyao Zhou, Daniel J. Carucci, David A. Baker, Elizabeth A. Winzeler<br><a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=16005087&dopt=Citation">The Plasmodium falciparum sexual development transcriptome: a microarray analysis using ontology-based pattern identification</a><br>Mol Biochem Parasitol. 2005 Jul 5; <br>(2) Zhou Y, Abagyan R.<br><a href="http://www.biomedcentral.com/1471-2105/3/3">Match-Only Integral Distribution (MOID) Algorithm for high-density oligonucleotide array analysis.</a><br>BMC Bioinformatics. 2002;3(1):3.</pre>
           ]]>
        </description>
    </question>

    <question name="BergheiGenesByExpressionPercentile"
         displayName="Expression Percentile (P.b.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.BergheiGenesByExpressionPercentile"
         summaryAttributesList="product,watersPct"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
        Find <i>P. berghei</i> genes expressed in late schizont, ring, early trophozoite and early schizont stages.
         ]]>
        </summary>
        <description>
           <![CDATA[
Find <i>P. berghei</i> genes expressed in late schizont, ring, early trophozoite, and early schizont stages. The stages were all hybridized with late trophozoites allowing us to use late trophozoites as a reference for this query.
<p>
There are two timecourses: HP and HPE.  HP is High Producer (as in gametocytes) and HPE is High Producer "E".  HP was mechanically passaged on a weekly basis from mouse to mouse and 10 independent experiments were set up (HPA-HPJ).  The parasites were observed, waiting for non-producing parasites to appear.  HPE was the chosen one. A deletion in HP was assumed to have created HPE (they are otherwise isogenic) and KO'd the production of gametocytes.  In such a scenario the non-producer would quickly overgrow the producer.  Both are cloned.
      ]]>
        </description>
    </question>

    <question name="GenesByMassSpec"
         displayName="Protein Expression (P.f.)"
         category="Protein Expression"
         queryRef="GeneFeatureIds.GenesByMassSpec"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
                Find <I>P. falciparum</I> genes that have evidence of
                expression in a specific lifecycle stage
                or within a subcellular fraction of the parasite.
          ]]>
        </summary>
        <description>
            <![CDATA[
                Find <I>P. falciparum</I> genes that have evidence of
                expression in a specific lifecycle stage
                or within a subcellular fraction. 
                Select the stage or subcellular fraction and the 
                threshold conditions for tandem mass spectrometry, 
                MS/MS, evidence and only genes with mass-spec evidence will be
                returned. A lower value for the minimum percent coverage or number of spans
                will result in increased sensitivity and lower stringency.
                If the minimum percent coverage is set to 0%, which is the default,
                only genes with at least some mass-spec evidence will be returned.
                Specifying a higher number of spectra will result in the
                selection of proteins that are more abundant.
                These values are not strictly quantitative
                as the detection of proteins in MS/MS analyses is dependent on
                solubility of the proteins and other factors.
                <br><br>
                <UL type='a'>Current data sets stored in PlasmoDB:
                <LI> Florens 2002: Merozoites, Trophozoites, Sporozoites,
                Gametocytes
                <LI> Florens 2004: Membranes_iRBC, CompleteTrophozoiteSchizont
                </UL>
                Selecting "any" will result in returning genes that appear in
                any of the available datasets.<BR>
                Please refer to the original papers for more information
                on the experiments and experimental conditions.
                <PRE> <B>References:</B><BR>
                a) Florens, L., Washburn, M.P., Raine, J.D., Anthony, R.M., Grainger, M., Haynes, J.D.,<BR>
                Moch, J.K., Muster, N., Sacci, J.B., Tabb, D.L., Witney, A.A., Wolters, D., Wu, Y.,<BR>
                Gardner, M.J., Holder, A.A., Sinden, R.E., Yates, J.R., Carucci, D.J. (2002)<BR>
                A proteomic view of the <I>Plasmodium falciparum</I> life cycle. Nature 419: 520-526.<BR><BR>
                c) Lasonder, E., Ishihama, Y., Andersen, J.S., Vermunt, A.M., Pain, A., Sauerwein, R.W.,<BR>
                Eling, W.M., Hall, N., Waters, A.P., Stunnenberg, H.G., Mann M. (2002) Analysis of the<BR>
                Plasmodium falciparum proteome by high-accuracy mass spectrometry. Nature. 419:537-542.<BR><BR>
                b) Florens, L., Liu X., Wang, Y., Yang, S., Schwartz, O., Peglar, M., Carucci, D.J.,Yates,<BR>
                J.R., Wu, Y.  Proteomics Approach Reveals Novel Proteins on the Surface of Malaria-Infected <BR>
                Erythrocytes (in press) <BR> </PRE>
                        ]]>
        </description>
    </question>

    <question name="GenesByProteomicsProfile"
         displayName="Protein Expression (P.b.)"
         category="Protein Expression"
         queryRef="GeneFeatureIds.GenesByProteomicsProfile"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find <i>P. berghei</i> genes with the specified protein expression across different life cycle stages.
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find <i>P. berghei</i> genes with the specified protein expression across different life cycle stages.  For each life cycle stage, choose "observed", "not observed" or "do not care".   Genes are returned that have a matching expression pattern.
            ]]>
        </description>
    </question>

    <question name="GenesBySubcellularLocalization"
         category="Cellular Location"
         displayName="Subcellular Localization"
              queryRef="GeneFeatureIds.GenesBySubcellularLocalization"
              summaryAttributesList="location_text,product"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
               Find <i>P. falciparum</i> genes targeted to the apicoplast or the RBC membrane.
          ]]>
         </summary>
        <description>
           <![CDATA[
               Find <i>P. falciparum</i> genes targeted to the apicoplast or the RBC membrane. Sequence motifs identified by
               Marti and co-workers (Cowman lab),  and Hiller and co-workers
               (Haldar lab), as being associated with  proteins targeted to
               the human erythrocyte, are referred to as the  'Pexel' and 'HT'
               motifs respectively.<br><br>
               <b>References:</b><br>
               <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=12560551&dopt=Citation">Foth
               BJ, Ralph SA, Tonkin CJ, Struck NS, Fraunholz M, Roos DS,
               Cowman AF, McFadden GI<br>Dissecting apicoplast targeting in
               the malaria parasite <i>Plasmodium falciparum</i><br>
               <i>Science</i> 2003 Jan 31; <b>299</b>(5607):705-8</a>
               <br><br>
                <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591203&query_hl=1">Hiller
               NL, Bhattacharjee S, van Ooij C, Liolios K, Harrison T,
               Lopez-Estrano C, Haldar K<br>
               A host-targeting signal in virulence proteins reveals a
               secretome in malarial infection<br>
               <i>Science</i> 2004 Dec 10; <b>306</b>(5703):1897-8</a><br><br>
               <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">Marti
               M, Good RT, Rug M, Knuepfer E, Cowman AF<br>
               Targeting malaria virulence and remodeling proteins to the host
               erythrocyte<br>
               <i>Science</i> 2004 Dec 10; <b>306</b>(5703):1930-3</a>
          ]]>
        </description>
    </question>

    <question name="GenesByTransmembraneDomains"
         category="Cellular Location"
         displayName="Transmembrane Domain Count"
              queryRef="GeneFeatureIds.GenesByTransmembraneDomains"
              summaryAttributesList="organism,location_text,product,tm_count"
              sortingAttributesList="organism asc,tm_count asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find genes with at least a given number of transmembrane domains.
        </summary>
        <description>
           <![CDATA[
Find genes with at least a given number of transmembrane domains.
<br><br>
Transmembrane domains were predicted using TMHMM2.
          ]]>
        </description>
    </question>

    <question name="GenesWithSignalPeptide"
         displayName="Predicted Signal Peptide"
         category="Cellular Location"
         queryRef="GeneFeatureIds.GenesWithSignalPeptide"
         summaryAttributesList="organism,location_text,product,sigp_sum_score"
         sortingAttributesList="organism asc,sigp_sum_score desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes that are predicted to encode a signal peptide.
        </summary>
        <description>
           <![CDATA[
Find genes that are predicted to encode a signal peptide.
          <br><br>

                                                   The predictions are made with the <a href="http://www.cbs.dtu.dk/services/SignalP/">SignalP</a> program.
          ]]>
        </description>
        <dynamicAttributes>
             <columnAttribute name="sigp_sum_score" displayName="Summary score" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesWithEpitopes" 
              category="Other Attributes"
              displayName="Epitope Presence"
              queryRef="GeneFeatureIds.GenesWithEpitopes" 
              summaryAttributesList="product,organism,location_text,count,confidence"
        sortingAttributesList="organism desc,location_text desc, count desc, confidence asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
             <summary>
              <![CDATA[
                Find <i>Plasmodium</i> genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune Epitope Database and Analysis Resource</a>. 
              ]]>
             </summary>
              <description>
              <![CDATA[
                Find genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune 
                Epitope Database and Analysis Resource</a><sup>1</sup> (IEDB). <p>
                The epitopes have been remapped from the original Epitope Source Accession Number 
                provided by IEDB to the corresponding gene identifiers used in PlasmoDB.
                <p><hr><p>
                <font size='-1'>
                <sup>1</sup>Peters B, Sidney J, Bourne P, Bui HH, Buus S, Doh G, Fleri W, 
                Kronenberg M, Kubo R, Lund O, Nemazee D, Ponomarenko JV, Sathiamurthy M, Schoenberger S, 
                Stewart S, Surko P, Way S, Wilson S, Sette A. 
                <a href="http://biology.plosjournals.org/perlserv/?request=get-document&amp;doi=10.1371/journal.pbio.0030091">The immune epitope database and analysis resource: from vision to blueprint. 
                PLoS Biol. 2005 Mar;3(3):e91</a>
                 </font>
              ]]>
              </description>
        <dynamicAttributes>
           <columnAttribute name="count" displayName="Epitope Count" align="center"/>
            <columnAttribute name="confidence" displayName="Confidence" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByExportPrediction"
         displayName="Exported Protein"
         category="Cellular Location"
         queryRef="GeneFeatureIds.GenesByExportPrediction"
         summaryAttributesList="organism,location_text,product,exportpred_score"
         sortingAttributesList="organism asc,exportpred_score desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes that are predicted by ExportPred to produce an exported protein.
        </summary>
        <description>
            <![CDATA[
            Find genes that are predicted by ExportPred to produce an exported protein.
            ]]>
        </description>
         <dynamicAttributes>
            <columnAttribute name="exportpred_score"
                       displayName="ExportPred score" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByPhyleticProfile"
         displayName="Homology Phylogenetic Profile (P.f. and P.y.)"
         category="Evolution"
         queryRef="GeneFeatureIds.GenesByPhyleticProfile"
         summaryAttributesList="location_text,product,num_queries,query_ids,mutual_information_scores"
         sortingAttributesList="num_queries desc,mutual_information_scores desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
         Find <i>P. falciparum</i> or <i>P. yoelii</i> genes that have a homology-based phylogenetic profile similar to a specified list of genes.
          ]]>
        </summary>
        <description>
           <![CDATA[
           Find <i>P. falciparum</i> or <i>P. yoelii</i> genes that have a homology-based
           phylogenetic profile similar to a specified list of genes. This query also allows you to
           determine how similar in terms of phylogenetic profile the members of the query list are as they
           will hit more of the same genes the more similar the members of the query list are to one another.
           <br><br>

           The phylogenetic profile (homology-based) of a 
           gene is a series of 164 "present" or "absent" calls reflecting the
           presence or absence of a putative homolog in 164 completely
           sequenced genomes. Similarity between profiles is a good indicator
           of functional linkages between proteins (see Pellegrini M, Marcotte
           EM, Thompson MJ, Eisenberg D, Yeates TO. Assigning protein
           functions by comparative genome analysis: protein phylogenetic
           profiles. Proc. Natl. Acad. Sci. USA 1999 96, 4285-4288). Data on
           ORFs with the most similar profiles to a given query ORF is also
           available, and can be used to establish the function of
           uncharacterized ORFs, based on the similarity of their profiles
           (see Date SV & Marcotte EM. Discovery of uncharacterized cellular
           systems by genome-wide analysis of functional linkages. Nature
           Biotechnology 2003 21:1055-1062) with ORFs of known function.
          ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="mutual_information_scores"
                       displayName="Mutual Information Score" align="center"/>
            <columnAttribute name="query_ids"
                       displayName="Query IDs"/>
            <columnAttribute name="num_queries"
                       displayName="Queries matched" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="GenesByOrthologPattern"
         displayName="Orthology Phylogenetic Profile"
         category="Evolution"
         queryRef="GeneFeatureIds.GenesByOrthologPattern"
         summaryAttributesList="organism, location_text,product"
         sortingAttributesList="organism asc, location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that have a specified orthology-based phylogenetic profile.
        </summary>
        <description>
            <![CDATA[
            Find genes that have a specified orthology-based phylogenetic profile. The phylogenetic profile of a gene is a series of 87 "present" or "absent" calls, reflecting the presence or absence of a putative ortholog in 87 genomes.
           <br><br>

           An <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a> analysis of the proteins of 87 species, including Plasmodia, placed each protein in an ortholog group. From a Plasmodium gene perspective, the other species that are included in that gene's ortholog group can be thought of as a phylogenetic profile.
            <br><br>
            Use this query to define a pattern
            across those ortholog groups, and find genes that match that pattern.  The pattern is a
            specification, for each species, of "include", "exclude", or "don't care."  Click on the
            radio button next to a species to toggle through the three states.  (A
            <img src="images/yes.gif" alt="include"> means
            "include", an <img src="images/no.gif" alt="exclude"> means "exclude"
            and <img src="images/dc.gif" alt="don't care"> means "don't care".)
            <br> <br>
            For example, to find genes
            that are present in Apicomplexa but not in humans, click on Apicomplexa until you see
            a <img src="images/yes.gif" alt="include"> and click on <i>Homo
            sapiens</i> until you see an
            <img src="images/no.gif" alt="exclude">.
            <br> <br>
            Note that this query can take some time because of the large number
            of combinations of possible presence/absence calls (2<sup>87</sup>
            possible combinations, of which 2,723 are associated with a total of
            35,603 genes).
           ]]>
        </description>
    </question>

    <question name="GenesOrthologousToAGivenGene"
              displayName="Orthologs and Paralogs"
              category="Evolution"
              queryRef="GeneFeatureIds.GenesOrthologousToAGivenGene"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find genes that have been identified by the
              <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a>
              project as orthologous (or paralagous) to a given gene.
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find genes that have been identified by the
              <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a>
              project as orthologous (or paralogous) to a given gene.
          ]]>
        </description>
    </question>

     <question name="GeneBySingleLocusTag"
         category="Other Attributes"
         displayName="ID"
              queryRef="GeneFeatureIds.GeneBySingleLocusTag"
              summaryAttributesList="organism,location_text,product,gene_type"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find a gene by its ID.
        </summary>
        <description>
           <![CDATA[
           Find a gene by its ID. The search is case
           insensitive. Asterisks can be used as wild cards (e.g. ' PF11_* ').
           Genes whose IDs have changed can be found by either the old or the
           new ID. GI numbers (e.g. 23508535), Entrez Protein Locus IDs (e.g.
           NP_701204.1), PDB IDs (e.g. 1HN6), or GenBank IDs (e.g. AAB36701.1)
           can also be used.
          ]]>
        </description>
    </question>

     <question name="GeneByLocusTag"
         category="Other Attributes"
         displayName="List of IDs"
              queryRef="GeneFeatureIds.GeneByLocusTag"
              summaryAttributesList="organism,location_text,product,gene_type"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find a gene by its ID.
        </summary>
        <description>
           <![CDATA[
           Find genes by a list of IDs. User can either enter the ID list manually, 
           or upload a file that contains the list. IDs can be delimited by a comma, 
           a semi colon, or any white spaces. For example, a list can be in the
           following form: "PF11_0344, PF11_0306"
          ]]>
        </description>
    </question>

    <question name="GenesByTextSearch"
         displayName="Keyword (search product name, notes, etc.)"
         category="Other Attributes"
         queryRef="GeneFeatureIds.GenesByTextSearch"
         summaryAttributesList="organism,location_text,product"
         sortingAttributesList="organism asc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
             Find genes with a text search against their product name, notes, GO, EC, Domains, NRDB, or metabolic pathways.
             Find genes associated with given text.
         </summary>
         <description>
           <![CDATA[
             Find genes by searching text annotations.
             Specify the search pattern with a "regular expression". 
<p>Wildcards and other special characters:
<ul>
<li><b>.</b>  Any character
<li><b>\s</b>  A space character
<li><b>\w</b>  An alpha-numeric character
<li><b>\S</b>  A non-space character
<li><b>\W</b>  An non-alpha-numeric character
<li><b>*</b> Zero, one or more of the preceding character
<li><b>|</b> Or
</ul>
<p>Examples:
<ul>
<li><b>g-protein.*receptor</b>  "g-protein" and "receptor" with anything in between.
<li><b>g-protein|receptor</b> "g-protein" or "receptor"
<li><b>var\s|pfemp1</b> "var" (followed by a space) or "pfemp1"
</ul>
               For more info on regular expressions, do a web search on "Perl regex".
          ]]>
         </description>
    </question>

    <question name="GenesByTaxon"
         category="Other Attributes"
         displayName="Taxon"
         queryRef="GeneFeatureIds.GenesByTaxon"
         summaryAttributesList="organism,location_text,product"
         sortingAttributesList="organism asc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes from one or more Plasmodium species.
        </summary>
        <description>
           <![CDATA[
            Find genes from one or more Plasmodium species.
          ]]>
        </description>
    </question>


    <question name="GenesByProteinDbAccession"
              displayName="Protein Accession"
              category="Other Attributes"
              queryRef="GeneFeatureIds.GenesByProteinDbAccession"
              summaryAttributesList="product,organism"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes mapped to a protein accession number.
        </summary>
        <description>
          <![CDATA[
              Find genes mapped to a protein accession number.  The result set will include all genes of the specified species whose predicted protein sequence exactly matches records with the given accession number in
              <a href="http://www.ncbi.nlm.nih.gov/Genbank">GenBank</a>,
              <a href="http://www.ncbi.nlm.nih.gov/RefSeq">RefSeq</a>, or
              <a href="http://www.ebi.ac.uk/swissprot">Swiss-Prot</a>
          ]]>
        </description>
    </question>

    <question name="GenesByMr4Reagents"
         displayName="MR4 Reagents Availability (P.f.)"
         category="Other Attributes"
         queryRef="GeneFeatureIds.GenesByMr4Reagents"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
                Find <i>P. falciparum</i> genes that have
                <a href="http://www.malaria.atcc.org/">MR4</a> reagents.
           ]]>
        </summary>
        <description>
            <![CDATA[
                Find <i>Plasmodium falciparum</i> genes that have
                <a href="http://www.malaria.atcc.org/">MR4</a> reagents.
                <br><br>
                The reagents are mapped to genes using gene names and
                GenBank/EMBL sequence similarity. An MR4
                reagent may be linked to multiple genes when it is not clear
                which is the correct gene or if the reagent might be considered
                to function with either gene.
           ]]>
        </description>
    </question>

    <question name="GenesByESTOverlap"
              category="Transcript Expression"
              displayName="EST evidence"
              queryRef="GeneFeatureIds.GenesByESTOverlap"
              summaryAttributesList="organism,location_text,product,number_of_ests"
              sortingAttributesList="organism asc,number_of_ests desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes with evidence of expression based on expressed sequence tags (ESTs)
        </summary>
        <description>
            <![CDATA[
             Find genes with evidence of expression based on expressed sequence tags (ESTs).
             For example:  What <i>P. falciparum</i> genes map to ESTs from the 3D7 gametocyte library?
               NOTE: you can visualize the EST alignments by clicking on the "View this sequence in the genome browser" link and turning on the EST Alignments track.
            ]]>
        </description>
        <dynamicAttributes>
             <columnAttribute name="number_of_ests" displayName="Number of ESTs"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>


<!-- questions that return Sequence records -->

<questionSet name="GenomicSequenceQuestions"
             displayName="Search genomic sequences">

    <description>
      Find Sequences
    </description>

    <question name="SequenceBySourceId"
         displayName="Genomic Sequence ID"
              queryRef="SequenceIds.SequenceBySourceId"
              summaryAttributesList="formatted_organism"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <summary>
           Find chromosomes or contigs by PlasmoDB ID.
        </summary>
        <description>
           <![CDATA[
           Find chromosomes or contigs by PlasmoDB ID.
          ]]>
        </description>
    </question>

    <question name="SequencesByTaxon"
         displayName="Taxon"
              queryRef="SequenceIds.SequencesByTaxon"
              summaryAttributesList="formatted_organism"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <summary>
          Find chromosomes or contigs from one or more Plasmodium species.
        </summary>
        <description>
           <![CDATA[
          Find chromosomes or contigs from one or more Plasmodium species.
          ]]>
        </description>
    </question>

    <question name="SequencesBySimilarity"
         displayName="BLAST"
         queryRef="SequenceIds.SequencesBySimilarity"
         summaryAttributesList="formatted_organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="SequenceRecordClasses.SequenceRecordClass">
         <summary>
           <![CDATA[
             Find <i>Plasmodium</i> chromosomes or contigs that have BLAST similarity to your input sequence.
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find genomic sequences that have BLAST similarity to your input sequence.
             <p>The search uses <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>


<!-- questions that return EST records -->
<questionSet name="EstQuestions"
             displayName="Find ESTs by">

    <description>
      Find ESTs
    </description>

    <question name="EstBySourceId"
	      displayName="ID"
	      queryRef="EstIds.EstBySourceId"
	      summaryAttributesList="formatted_organism,dbest_name"
	      recordClassRef="EstRecordClasses.EstRecordClass">
        <summary>
	Find ESTs by ID
	</summary>

	<description>
	  <![CDATA[
	    Find ESTs by ID
	  ]]>
	</description>
    </question>

    <!-- EstQuestions.EstsByLocation -->
    <question name="EstsByLocation"
              category="Genomic Position"
              displayName="Genomic Location"
              queryRef="EstIds.EstsByLocation"
              summaryAttributesList="formatted_organism,dbest_name,est_location"
              sortingAttributesList="est_location asc"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <summary>
            Find ESTs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ESTs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the EST(s) on the chromosome.
            ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="est_location" displayName="EST location(s)"/>
        </dynamicAttributes>
    </question>

    <!-- EstQuestions.EstsByLibrary -->
    <question name="EstsByLibrary"
              category="Transcript Expression"
              displayName="Library"
              queryRef="EstIds.EstsByLibrary"
              summaryAttributesList="formatted_organism,dbest_name"
              sortingAttributesList="formatted_organism asc,dbest_name asc"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs by Library Name</description>
    </question>

    <!-- EstQuestions.EstsWithGeneOverlap -->
    <question name="EstsWithGeneOverlap"
         displayName="Extent of Gene Overlap"
         queryRef="EstIds.EstsWithGeneOverlap"
         summaryAttributesList="formatted_organism,dbest_name,est_locations,genes"
         sortingAttributesList="formatted_organism asc,est_locations asc"
         recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs that Overlap a Gene..</description>
        <dynamicAttributes>
            <columnAttribute name="est_locations" displayName="EST location(s)"/>
            <columnAttribute name="genes" displayName="Gene(s)"/>
        </dynamicAttributes>
    </question>

    <question name="EstsBySimilarity"
         displayName="BLAST"
         queryRef="EstIds.EstsBySimilarity"
         summaryAttributesList="formatted_organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="EstRecordClasses.EstRecordClass">
         <summary>
           <![CDATA[
             Find <i>Plasmodium</i> ESTs that have BLAST similarity to your input sequence.
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find ESTs that have BLAST similarity to your input sequence.
             <p>The search uses <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>

<!-- questions that return ORF records -->
<questionSet name="OrfQuestions"
             displayName="Find ORFs by">

    <description>
      Find ORFs
    </description>

    <question name="OrfByOrfId"
              displayName="ID"
              queryRef="OrfIds.OrfByOrfId"
              summaryAttributesList=""
              recordClassRef="OrfRecordClasses.OrfRecordClass">

        <summary>
        Find ORFs by locus tags
        </summary>

        <description>
            <![CDATA[
            Find ORFs by locus tags
            ]]>
        </description>
    </question>

    <question name="OrfsByLocation"
              category="Genomic Position"
              displayName="Genomic Location"
              queryRef="OrfIds.OrfsByLocation"
              summaryAttributesList="formatted_organism,orf_location_text,length"
              sortingAttributesList="formatted_organism asc,orf_location_text asc"
              recordClassRef="OrfRecordClasses.OrfRecordClass">
        <summary>
            Find ORFs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ORFs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the ORF(s) on the chromosome.
            ]]>
        </description>
    </question>

    <question name="OrfsBySimilarity"
         displayName="BLAST"
         queryRef="OrfIds.OrfsBySimilarity"
         summaryAttributesList="formatted_organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
         <summary>
           <![CDATA[
             Find <i>Plasmodium</i> ORFs that have BLAST similarity to your input sequence.
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find genes ORFs that have BLAST similarity to your input sequence.

             <p>The search uses <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="OrfsByMotifSearch"
         displayName="Motif Pattern"
         category="Similarity/Pattern"
         queryRef="OrfIds.OrfsByMotifSearch"
         summaryAttributesList="formatted_organism,Locations,MatchCount,Sequence"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
        <summary>
             Find ORFs whose translation contains a motif pattern that
             you specify, e.g. "two cysteines followed by one or more
             hydrophobic amino acids, followed by arginine, then lysine".
         </summary>
         <description>
           <![CDATA[
             Find ORFs whose translation contains a motif pattern that
             you specify., e.g. "CC6+RK", which means "two cysteines followed
             by one or more hydrophobic amino acids, followed by arginine,
             then lysine".
             <br><br>

             Another example is the pattern of the
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">
             Pexel motif</a>, which can be represented as "R.L.[EQD]", meaning
             "an arginine, then any amino acid, then a leucine, then any amino
             acid, then either an aspartic acid, a glutamic acid, or a
             glutamine".
             <br><br>

             The pattern need not be well conserved. If you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.
             <br><br>

             Specify the pattern with a (Perl style) "regular expression".
             (Regular expressions are more powerful than PROSITE patterns.)
             For help please see the <a href="regexp.jsp">Regular Expression Tutorial</a>.
             <br><br>

             The following codes can be used to represent classes of amino acids.
		<table border columns=3>
                   <TR>
                      <TD><B>AA property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>
          ]]>
         </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" inReportMaker="false"/>
           <columnAttribute name="MatchCount" displayName="Match Count"
                            inReportMaker="false"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>

</questionSet>

<questionSet name="SnpQuestions"
             displayName="Find SNPs by">
     <description>
         "Find SNPs"
     </description>

     <question name="SnpBySourceId"
               displayName="ID"
               queryRef="SnpsBy.SnpBySourceId"
	       summaryAttributesList=""
	       recordClassRef="SnpRecordClasses.SnpRecordClass">
          <summary>
            Find SNPs by ID
          </summary>
	  <description>
	    <![CDATA[
              Find SNPs by ID
	    ]]>
	  </description>
      </question>

      <question name="SnpsByGeneId"
              category="Gene"
              displayName="Gene ID"
              queryRef="SnpsBy.SnpsByGeneId"
              summaryAttributesList="snp_location,linkedGeneId, ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find SNPs that are located in a specified gene.
        </summary>
	<description>
            <![CDATA[
              Find SNPs that are contained within a gene.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="SnpsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="SnpsBy.SnpsByLocation"
              summaryAttributesList="snp_location,linkedGeneId,ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            <![CDATA[
            Find <i>P. falciparum</i> SNPs by chromosomal location
          ]]>
        </summary>
	<description>
            <![CDATA[
              Find <i>P. falciparum</i> SNPs by chromosomal location relative to P. falciparum.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="SnpsByAlleleFrequency"
              category="Other Attributes"
              displayName="Allele Frequency"
              queryRef="SnpsBy.SnpsByAlleleFrequency"
              summaryAttributesList="snp_location,major_allele_count,major_strains,major_allele,major_product,minor_allele_count,minor_strains,minor_alleles,minor_products,linkedGeneId,position_in_protein"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            <![CDATA[
            Find <i>P. falciparum</i> SNPs by the frequency of the major and minor alleles
            ]]>
        </summary>
	<description>
            <![CDATA[
              Find SNPs by specifying the frequency of the major and minor alleles.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="major_strains" displayName="Major Strains"/>
	     <columnAttribute name="minor_strains" displayName="Minor Strains"/>
	     <columnAttribute name="minor_alleles" displayName="Minor Alleles" align="center"/>
	     <columnAttribute name="minor_products" displayName="Minor Products" align="center"/>
	</dynamicAttributes>
    </question>

</questionSet>

<!-- questions for use in data dumps -->
<questionSet name="DataDumpQuestions"
             displayName="Data Dumping Questions"
             internal="yes">

    <description>
      These questions are intended for generating data dumps
    </description>

    <question name="GeneGffQuestion"
         displayName="Find genes to dump"
              queryRef="DataDumpQueries.GeneGffQuery"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>Find all genes to dump</description>
    </question>

    <question name="SequenceGffQuestion"
         displayName="Find chromosomes to dump"
              queryRef="DataDumpQueries.SequenceGffQuery"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <description>Find all genes to dump</description>
    </question>

    <question name="GenesByExternalDatabase"
         displayName="External Database"
         queryRef="DataDumpQueries.GenesByExternalDatabase"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Used to make GFF files (one per Ext. Db. Rlse)
        </summary>
        <description>
        </description>
    </question>

</questionSet>


<!-- questions for internal use -->
<questionSet name="InternalQuestions"
             displayName="Internal Questions"
             internal="yes">

    <question name="GenesByOrthologs"
         displayName="Genes Orthologous to Genes in a Query Result"
              queryRef="GeneFeatureIds.GenesByOrthologs"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           <![CDATA[
Find the Plasmodium genes that are orthologs (or paralogs) of the genes in a Query History result.

The typical use of this query is to begin by having an interesting <i>P. falciparum</i> result in My Query History.  Then, come here to find orthologs of those genes in the less well-annotated species.  In general, use this query to transform sets of genes from one species to others.

Ortholog groups were generated from 61 species using OrthoMCL as described in   Li L, Stoeckert CJ Jr, Roos DS. OrthoMCL: identification of ortholog groups for eukaryotic genomes. Genome Res. 2003 13:2178-89. These species include the 55 used to generate orthologs groups at the <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL DB site</a> plus <i>P. vivax, Leishmania major, T. brucei, T. cruzi, Apis mellifera</i> (honeybee) and <i>S. purpatus</i> (sea urchin).  The OrthoMCL DB site is described in Feng et al. Nucleic Acids Res. 2006 Database Issue.
          ]]>
        </description>
    </question>

    <question name="GenesByPlasmoDbDataset"
         displayName="Genes imported from PlasmoDB 4.4"
              queryRef="GeneFeatureIds.GenesByPlasmoDbDataset"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           <![CDATA[
        Find genes by importing a PlasmoDB 4.4 query result. The Query History page at the PlasmoDB version 4.4 site (http://plasmodb.org) now contains a column called "Dataset." To import any of the queries run at the PlasmoDB 4.4 site, cut and paste the Dataset identifier from the PlasmoDB Query History page.
          ]]>
        </description>
    </question>

    <question name="GenesByIntraerythrocyticExpression" displayName="Asexual"
              queryRef="GeneFeatureIds.GenesByIntraerythrocyticExpression"
              summaryAttributesList="product,winzelerPct"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
              Asexual cycle expression on Affy chips, from the Winzeler lab
        </description>
         <dynamicAttributes>
             <columnAttribute name="max_percentile" displayName="Max Percentile"
                              inReportMaker="false"/>
             <columnAttribute name="min_percentile" displayName="Min Percentile"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesByExtraerythrocyticExpression" displayName="Sexual"
              queryRef="GeneFeatureIds.GenesByExtraerythrocyticExpression"
              summaryAttributesList="product,winzelerPct"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
              Sexual cycle expression on Affy chips, from the Winzeler lab
        </description>
         <dynamicAttributes>
             <columnAttribute name="max_percentile" displayName="Max Percentile"
                              inReportMaker="false"/>
             <columnAttribute name="min_percentile" displayName="Min Percentile"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesByExpression" displayName="All"
              queryRef="GeneFeatureIds.GenesByExpression"
              summaryAttributesList="product,winzelerPct"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
              Gene Expression on Affy chips, from the Winzeler lab
        </description>
         <dynamicAttributes>
             <columnAttribute name="max_percentile" displayName="Max Percentile"
                              inReportMaker="false"/>
             <columnAttribute name="min_percentile" displayName="Min Percentile"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesByMicroarrayEvidence" displayName="Microarray evidence"
              queryRef="GeneFeatureIds.GenesByIntraerythrocyticExpression"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           <![CDATA[
           Find <i>P. falciparum</i> and <i>P. berghei</i> genes based on transcript expression data from microarray experiments.
            ]]>
        </description>
    </question>

    <question name="GenesByMassSpecEvidence" displayName="Mass spectrometry evidence"
              queryRef="GeneFeatureIds.GenesByIntraerythrocyticExpression"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           <![CDATA[
           Find <i>P. falciparum</i> and <i>P. berghei</i> genes based on protein expression data from mass spectrometry experiments.
            ]]>
        </description>
    </question>

    <question name="GenesByProteinStructure" displayName="Protein structure"
              queryRef="GeneFeatureIds.GenesByIntraerythrocyticExpression"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           Find genes based on secondary and 3-D protein structure.
        </description>
    </question>

    <question name="UnifiedBlast"
         displayName="BLAST"
         queryRef="EstIds.UnifiedBlast"
         summaryAttributesList="organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="EstRecordClasses.EstRecordClass">
         <summary>
           <![CDATA[
             Search any PlasmoDB dataset by BLAST similarity to your input
             sequence.
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find genes, genomic sequences, ESTs, or ORFs that have BLAST
             similarity to your input sequence.
             <p>
             (<b>Note:</b> not all species have Genes or ESTs available.)
             <p>The search uses
             <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
             <p><b>Note:</b> If you get <b>0 Results</b> it may be because
             not all <i>Targets</i> are available for all
             Plasmodium species.  <i>PlasmoDB does not contain any Genes or ESTs
             for P.gallinacium, P.knowlesi, P.reichenowi.</i>
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>



<!-- Querys that return SNP source_ids (for use in questions). -->
<querySet name="SnpsBy">
      <sqlQuery name="SnpBySourceId" displayName="ID" isCacheable="true">
          <paramRef ref="idQueryParams.snp_id"/>
	  <column name="source_id"/>
	  <sql>
	    <![CDATA[
	      SELECT sf.source_id AS source_id
	      FROM dots.SnpFeature sf
	      WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$snp_id$$',' ',''), '*', '%'))
	    ]]>
	  </sql>
      </sqlQuery>

      <sqlQuery name="SnpsByGeneId" displayName="SNPs by Gene ID" isCacheable="true">
        <paramRef ref="params.ds_gene_ids"/>
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_m"/>
        <column name="source_id"/>
        <column name="snp_location"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="prot_pos"/>
        <column name="ref_product"/>
        <column name="comp_products"/>
        <sql>
            <![CDATA[
select snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
from                 
  (select hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  from   dots.SEQVARIATION sva, dots.seqvariation svb, dots.nalocation l,                               
    dots.externalnasequence nas,dots.nalocation gene_loc,
    (select distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
     from dots.genefeature gf, dots.snpfeature sf, dots.SEQVARIATION isva, dots.seqvariation isvb, 
        sres.externaldatabase ed,sres.EXTERNALDATABASERELEASE edr,apidb.GeneId gi, @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
      WHERE ds.dataset_id = $$ds_gene_ids$$
      AND gi.id = lower(ds.dataset_value)
      AND gf.source_id = gi.gene 
      and gf.na_feature_id = sf.parent_id                               
      and edr.external_database_release_id = sf.external_database_release_id                               
      and edr.external_database_id = ed.external_database_id                               
      and ed.name in ('Sanger reichenowi SNPs','PlasmoDB combined SNPs')                               
      and sf.na_feature_id = isva.parent_id                               
      and sf.na_feature_id = isvb.parent_id                               
      and isva.strain = '$$snp_strain_a$$'                               
      and isvb.strain in ($$snp_strain_m$$)
      and isva.allele != isvb.allele ) hits
  where hits.na_sequence_id = nas.na_sequence_id
    and hits.gene_na_feature_id = gene_loc.na_feature_id
    and hits.snp_na_feature_id = l.na_feature_id
    and hits.snp_na_feature_id = sva.parent_id 
    and hits.snp_na_feature_id = svb.parent_id 
    and sva.strain = '$$snp_strain_a$$'                               
    and svb.strain in ('$$snp_strain_a$$',$$snp_strain_m$$)                             
    ) snpq                              
group by snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
           ]]>
       </sql>
    </sqlQuery>

       <sqlQuery name="SnpsByLocation" displayName="SNPs by chromosomal location" isCacheable="true">
          <paramRef ref="params.chromosome_single"/>
          <paramRef ref="params.start_point"/>
          <paramRef ref="params.end_point"/>
          <paramRef ref="params.snp_strain_a"/>
          <paramRef ref="params.snp_strain_m"/>
          <column name="source_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>
        <sql>
            <![CDATA[
select snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
from                 
  (select hits.source_id as source_id,hits.seq_source_id || ':' || trim(to_char(hits.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b, gf.source_id as gene
  from   dots.SEQVARIATION sva, dots.seqvariation svb, dots.nalocation gene_loc, dots.genefeature gf,
    (select distinct isf.na_feature_id as na_feature_id, isf.source_id, isf.parent_id,
      nas.source_id as seq_source_id,l.start_min,isf.position_in_protein
     from sres.externaldatabase ed,sres.EXTERNALDATABASERELEASE edr,dots.SEQVARIATION isva, dots.nalocation l,
          dots.externalnasequence nas, dots.seqvariation isvb, dots.snpfeature isf    
     where nas.source_id = $$chromosome_single$$   
      and isf.na_sequence_id = nas.na_sequence_id
      and edr.external_database_release_id = isf.external_database_release_id
      and edr.external_database_id = ed.external_database_id   
      and ed.name in ('Sanger reichenowi SNPs','PlasmoDB combined SNPs')
      and isf.na_feature_id = l.na_feature_id
      AND l.end_max >= $$start_point$$
      AND (l.start_min <= $$end_point$$ OR $$end_point$$ = 0)
      and isf.na_feature_id = isva.parent_id                               
      and isf.na_feature_id = isvb.parent_id                               
      and isva.strain = '$$snp_strain_a$$'                               
      and isvb.strain in ($$snp_strain_m$$)
      and isva.allele != isvb.allele ) hits 
  where  hits.parent_id = gf.na_feature_id(+)
    and gf.na_feature_id = gene_loc.na_feature_id(+)    
    and hits.na_feature_id = sva.parent_id 
    and hits.na_feature_id = svb.parent_id 
    and sva.strain = '$$snp_strain_a$$'
    and svb.strain in ('$$snp_strain_a$$',$$snp_strain_m$$)
    ) snpq                              
group by snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
           ]]>
       </sql>
    </sqlQuery>

 <sqlQuery name="SnpsByAlleleFrequency" displayName="SNPs by chromosomal location" isCacheable="true">
        <paramRef ref="params.major_allele_min"/>
        <paramRef ref="params.major_allele_max"/>
        <paramRef ref="params.minor_allele_min"/>
        <paramRef ref="params.minor_allele_max"/>
        <column name="source_id"/>
        <column name="minor_alleles"/>
        <column name="minor_products"/>
        <column name="minor_strains"/>
        <column name="major_strains"/>
        <sql>
            <![CDATA[
select snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.major_allele,snpq.major_product,snpq.major_allele_count, snpq.minor_allele_count,
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele != snpq.major_allele THEN snpq.allele END) AS apidb.varchartab), ', ') as minor_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele != snpq.major_allele THEN snpq.product END) AS apidb.varchartab), ', ') as minor_products,
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele != snpq.major_allele THEN snpq.strain END) AS apidb.varchartab), ', ') as minor_strains,
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele = snpq.major_allele THEN snpq.strain END) AS apidb.varchartab), ', ') as major_strains              
FROM
  (select sf.source_id,gf.source_id as gene, nas.source_id || ':' || l.start_min as snp_location,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sf.major_allele) ELSE sf.major_allele END as major_allele,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele) ELSE sva.allele END as allele,   
    sf.major_allele_count, sf.minor_allele_count,
    sf.major_product, sf.position_in_protein as prot_pos, sva.product, sva.strain
  from dots.genefeature gf, dots.snpfeature sf, dots.nalocation l, dots.nalocation gene_loc,
    sres.externaldatabase ed,sres.EXTERNALDATABASERELEASE edr,dots.externalnasequence nas,
    dots.SEQVARIATION sva
  where sf.na_sequence_id = nas.na_sequence_id
    and sf.parent_id = gf.na_feature_id(+)
    and gf.na_feature_id = gene_loc.na_feature_id(+)
    and edr.external_database_release_id = sf.external_database_release_id
    and edr.external_database_id = ed.external_database_id
    and ed.name = 'PlasmoDB combined SNPs'
    and l.na_feature_id = sf.na_feature_id
    and sf.minor_allele_count >= $$minor_allele_min$$
    and sf.minor_allele_count <= $$minor_allele_max$$
    and sf.major_allele_count >= $$major_allele_min$$
    and sf.major_allele_count <= $$major_allele_max$$
    and sf.major_allele is not null
    and sf.minor_allele is not null
    and sf.na_feature_id = sva.parent_id ) snpq 
group by snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.major_allele,snpq.major_product,snpq.major_allele_count, snpq.minor_allele_count
           ]]>
       </sql>
    </sqlQuery>

</querySet>

<!-- Querys that return Gene primary keys (for use in questions). -->
<querySet name="GeneFeatureIds">

    <sqlQuery name="GeneByLocusTag" displayName="by Gene ID List"
              isCacheable="true">
        <paramRef ref="params.ds_gene_ids"/>
        <column name="source_id"/>
        <sql>
             <![CDATA[
            SELECT DISTINCT gi.gene AS source_id
            FROM apidb.GeneId gi,  @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
            WHERE ds.dataset_id = $$ds_gene_ids$$
              AND gi.id LIKE REGEXP_REPLACE(REPLACE(LOWER(ds.dataset_value),
                                                       '*', '%'),
                                               '[[:space:]]', '')
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GeneBySingleLocusTag" displayName="by Gene ID"
              isCacheable="true">
        <paramRef ref="params.locus_tag"/>
        <column name="source_id"/>
        <sql>
             <![CDATA[
            SELECT DISTINCT gi.gene AS source_id
            FROM apidb.GeneId gi
            WHERE gi.id LIKE REGEXP_REPLACE(REPLACE(LOWER('$$locus_tag$$'),
                                                       '*', '%'),
                                               '[[:space:]]', '')
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGeneIds" displayName="by Gene IDs"
              isCacheable="true">
        <paramRef ref="params.ds_gene_ids"/>
        <column name="source_id"/>
        <sql>
             <![CDATA[
            SELECT DISTINCT gi.gene AS source_id
            FROM apidb.GeneId gi, 
                @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
            WHERE gi.gene = ds.dataset_value
                AND ds.dataset_id = $$ds_gene_ids$$
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByEcNumber" displayName="by EC Number" isCacheable="true">
        <paramRef ref="params.ec_number_pattern"/>
        <paramRef ref="params.pf_organism"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
         SELECT DISTINCT gf.source_id
         FROM dots.GeneFeature gf, dots.ExternalNaSequence ens,
              dots.Transcript t, dots.translatedAaFeature taf,
              dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
         WHERE ('$$pf_organism$$' = '-1'
                OR ens.taxon_id in (select taxon_id from sres.taxon
                                    connect by parent_id = prior taxon_id
                                    start with taxon_id = '$$pf_organism$$'))
           AND  ens.na_sequence_id = gf.na_sequence_id
           AND gf.na_feature_id = t.parent_id
           AND t.na_feature_id = taf.na_feature_id
           AND taf.aa_sequence_id = asec.aa_sequence_id
           AND asec.enzyme_class_id = ec.enzyme_class_id
           AND ec.ec_number LIKE REPLACE(REPLACE('$$ec_number_pattern$$',' ',''),
                                         '-', '%')
         ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByPlasmoDbDataset" displayName="by PlasmoDB 4.4 dataset" isCacheable="true">
        <paramRef ref="params.plasmodb_dataset"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <!-- keep order or genes but remove duplicates -->
            <![CDATA[
                SELECT imported.source_id FROM (
                    SELECT ga.gene AS source_id, min(c.i) AS i
                    FROM cache$$plasmodb_dataset$$@apidb.cbilprod c,
                         apidb.plasmodb_genes@apidb.cbilprod pg,
                         apidb.GeneAlias ga
                    WHERE c.na_feature_id = pg.na_feature_id
                      AND lower(pg.source_id) = ga.alias
                    GROUP BY ga.gene) imported
                ORDER BY i
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByTransmembraneDomains" displayName="With Transmembrane Domains" isCacheable="true">
        <paramRef ref="params.min_tm"/>
        <paramRef ref="params.max_tm"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"  />
        <sql>
            <![CDATA[
            SELECT gf.source_id
            FROM dots.GeneFeature gf, dots.NaSequence ns,
                 (SELECT t.parent_id, COUNT(*) AS tm_count
                  FROM dots.Transcript t, dots.TranslatedAaFeature tlaf,
                       dots.TransmembraneAaFeature tmaf, dots.AaLocation al
                  WHERE t.na_feature_id = tlaf.na_feature_id
                    AND tlaf.aa_sequence_id = tmaf.aa_sequence_id
                    AND tmaf.aa_feature_id = al.aa_feature_id
                  GROUP BY t.parent_id, t.na_feature_id, tlaf.aa_feature_id
                  HAVING COUNT(*) >= $$min_tm$$ AND COUNT(*) <= $$max_tm$$) tms
            WHERE tms.parent_id = gf.na_feature_id
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id IN ($$organism$$)
            ORDER BY tm_count, gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByProteinProteinInteraction" displayName="by protein-protein interaction" isCacheable="true">
        <paramRef ref="params.locus_tag" default="PFL0275w"/>
        <paramRef ref="params.min_searches"/>
        <paramRef ref="params.min_observed"/>
        <paramRef ref="params.bait_or_prey"/>
        <column name="source_id" />
        <column name="gene_source_id" />
        <column name="bait_start" />
        <column name="bait_end" />
        <column name="prey_start" />
        <column name="prey_end" />
        <column name="times_observed" />
        <column name="number_of_searches" />
        <column name="prey_number_of_baits" />
        <column name="bait_number_of_preys" />
        <column name="bait_or_prey" />
        <sql>
            <![CDATA[
            SELECT * FROM
               (SELECT pf.source_id, pf.source_id as gene_source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches,
                       (select distinct prey_number_of_baits
                         from apidb.geneinteraction igi
                         where igi.bait_gene_feature_id = pf.na_feature_id) AS prey_number_of_baits,
                       bait_number_of_preys, 'bait' as bait_or_prey
                FROM apidb.GeneId ga, dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens, apidb.GeneInteraction gi
                WHERE lower('$$locus_tag$$') = ga.id
                  AND ga.gene = bf.source_id
                  AND gi.number_of_searches >= $$min_searches$$
                  AND gi.times_observed >= $$min_observed$$
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND pf.na_sequence_id = ens.na_sequence_id
                UNION
                SELECT bf.source_id, bf.source_id as gene_source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, prey_number_of_baits,
                       (select distinct bait_number_of_preys
                         from apidb.geneinteraction igi
                         where igi.prey_gene_feature_id = bf.na_feature_id) AS bait_number_of_preys, 'prey' as bait_or_prey
                FROM apidb.GeneId ga, dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens,  apidb.GeneInteraction gi
                WHERE lower('$$locus_tag$$') = ga.id
                  AND ga.gene = pf.source_id
                  AND gi.number_of_searches >= $$min_searches$$
                  AND gi.times_observed >= $$min_observed$$
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND bf.na_sequence_id = ens.na_sequence_id)
            WHERE ($$bait_or_prey$$ = bait_or_prey
                   OR $$bait_or_prey$$ = 'either')
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGeneType" displayName="by Gene Type"
              isCacheable="true">
        <paramRef ref="params.geneType"/>
        <paramRef ref="params.includePseudogenes"/>
        <paramRef ref="params.organism"/>
        <column name="source_id" />
        <column name="is_pseudo" />
        <sql>
            <![CDATA[
            SELECT gf.source_id,decode(gf.is_pseudo,0,'No',1,'Yes') as is_pseudo
            FROM dots.GeneFeature gf, dots.ExternalNaSequence ens
            WHERE gf.sequence_ontology_id IN ($$geneType$$)
              AND gf.na_sequence_id = ens.na_sequence_id
              and gf.is_pseudo in ($$includePseudogenes$$)
              AND ens.taxon_id IN ($$organism$$)
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExpressionTiming" displayName="by Expression Timing"
              isCacheable="true">
        <paramRef ref="params.profileSet"/>
        <paramRef ref="params.minOrMax"/>
        <paramRef ref="params.maxExprHour"/>
        <paramRef ref="params.maxPlusMinusHours"/>
        <paramRef ref="params.minExprHour"/>
        <paramRef ref="params.minPlusMinusHours"/>
        <paramRef ref="params.inductionFold"/>
        <paramRef ref="params.expressionPct"/>
        <column name="source_id"/>
        <sql>
          <![CDATA[
          SELECT DISTINCT gf.source_id
          FROM apidb.profile pr, apidb.profileset prs,
               dots.nafeature gf
          WHERE (('$$minOrMax$$' = 'min')
                 OR ((abs($$maxExprHour$$ - pr.equiv_max) <= $$maxPlusMinusHours$$)
                      OR (abs($$maxExprHour$$ - pr.equiv_max) >= (48 - $$maxPlusMinusHours$$))))
          AND (('$$minOrMax$$' = 'max')
               OR ((abs($$minExprHour$$ - pr.equiv_min) <= $$minPlusMinusHours$$)
                   OR (abs($$minExprHour$$ - pr.equiv_min) >= (48 -$$minPlusMinusHours$$))))
          AND pr.ind_ratio >= $$inductionFold$$
          AND pr.max_percentile >= $$expressionPct$$ / 100
          AND pr.source_id = gf.source_id
          AND pr.profile_set_id = prs.profile_set_id
          AND prs.name like ('$$profileSet$$')
          ORDER BY gf.source_id
          ]]>
      </sql>
    </sqlQuery>

    <wsQuery name="GenesBySimilarity" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="GeneBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="GeneBlastDbParams.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>
       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

    <wsQuery name="GenesByProfileSimilarity" displayName="Profile Similarity"
             processName="org.plasmodb.wsfplugin.profile.ProfileSimilarityPlugin">
       <paramRef ref="params.ProfileGeneId"/>
       <paramRef ref="params.ProfileDistanceMethod"/>
       <paramRef ref="params.ProfileNumToReturn"/>
       <paramRef ref="params.ProfileProfileSet"/>
       <paramRef ref="params.ProfileSearchGoal"/>
       <paramRef ref="params.ProfileTimeShift"/>
       <paramRef ref="params.ProfileScaleData"/>
       <paramRef ref="params.ProfileMinShift"/>
       <paramRef ref="params.ProfileMaxShift"/>
       <wsColumn name="source_id" width="50" wsName="GeneID"/>
       <wsColumn name="distance" wsName="Distance" width="50"/>
       <wsColumn name="time_shift" wsName="Shift" width="50"/>
       <wsColumn name="query_source_id" wsName="QueryGeneId" width="50"/>
    </wsQuery>

    <wsQuery name="GenesByMotifSearch" displayName="Motif Search"
             processName="org.apidb.apicomplexa.wsfplugin.motifsearch.MotifSearchPlugin">
       <paramRef ref="params.Expression"/>
       <paramRef ref="params.Dataset"/>
       <wsColumn name="source_id" width="32" wsName="GeneID"/>
       <wsColumn name="Locations" width="3999"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="3999"/>
    </wsQuery>

    <wsQuery name="GenesByTextSearch" displayName="Text term"
             processName="org.apidb.apicomplexa.wsfplugin.textsearch.TextSearchPlugin">
       <paramRef ref="params.text_expression"/>
       <paramRef ref="params.case_independent"/>
       <paramRef ref="params.whole_words"/>
       <paramRef ref="params.max_pvalue"/>
       <paramRef ref="params.datasets"/>
       <paramRef ref="params.species_name"/>
       <wsColumn name="source_id" width="32" wsName="GeneID"/>
    </wsQuery>

    <sqlQuery name="GenesByOrthologs" displayName="by orthology"
              isCacheable="true">
        <description>
            Find orthologs of the genes in an existing query result set
        </description>
        <paramRef ref="params.historyId"/>
        <paramRef ref="params.organism"/>
        <column name="source_id" />
        <sql>
            <![CDATA[
            SELECT DISTINCT gf2.source_id
            FROM $$historyId$$ qr, dots.GeneFeature gf1,
                 dots.SequenceSequenceGroup ssg1, dots.SequenceSequenceGroup ssg2,
                 dots.GeneFeature gf2, dots.ExternalNaSequence ens,
                 core.TableInfo ti
            WHERE qr.source_id = gf1.source_id
              AND gf1.na_feature_id = ssg1.sequence_id
              AND ssg1.source_table_id = ti.table_id
              AND ssg1.sequence_group_id = ssg2.sequence_group_id
              AND ssg2.source_table_id = ti.table_id
              AND ssg2.sequence_id = gf2.na_feature_id
              AND gf2.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id in ($$organism$$)
              AND ti.name = 'GeneFeature'
            GROUP BY gf2.source_id
            ORDER BY gf2.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGoTerm" displayName="by GO term"
              isCacheable="true">
        <paramRef ref="params.go_term"/>
        <paramRef ref="params.organism"/>
        <column name="source_id" />
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id
            FROM dots.ExternalNaSequence ens, dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf,
                 dots.GoAssociation ga, sres.GoTerm gp,
                 sres.GoRelationship gr, core.TableInfo ti,
                 sres.GoRelationshipType grt
            WHERE ens.taxon_id IN ($$organism$$)
              AND ens.na_sequence_id = gf.na_sequence_id
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = ga.row_id
              AND ga.table_id = ti.table_id
              AND ti.name = 'TranslatedAASequence'
              AND ga.go_term_id = gr.child_term_id
              AND gr.parent_term_id = gp.go_term_id
              AND (gp.go_id = '$$go_term$$'
                   OR gp.name LIKE REPLACE('$$go_term$$', '*', '%'))
              AND gr.go_relationship_type_id = grt.go_relationship_type_id
              AND grt.name = 'closure'
            ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByPhyleticProfile" displayName="by phyletic profile"
              isCacheable="true">
        <paramRef ref="params.ds_gene_ids" default="PY03942"/>
        <paramRef ref="params.min_mutual_information_score"/>
        <paramRef ref="params.include_only_queries"/>
        <paramRef ref="params.min_num_query_matches"/>
        <column name="source_id" />
        <column name="query_ids" />
        <column name="mutual_information_scores" />
        <column name="num_queries" />
        <sql>
            <![CDATA[
                SELECT gf2.source_id, count(*) as num_queries,
                    apidb.tab_to_string(CAST(COLLECT(gf1.source_id) AS apidb.varchartab), ', ') AS query_ids, 
                    apidb.tab_to_string(CAST(COLLECT(to_char(mis.mutual_information_score/10000)) AS apidb.varchartab), ', ') AS mutual_information_scores
                FROM dots.GeneFeature gf1, dots.PhylogeneticProfile pp1,
                     dots.MutualInformationScore mis, dots.PhylogeneticProfile pp2,
                     dots.GeneFeature gf2,@LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds, apidb.GeneId gi
                WHERE '$$include_only_queries$$' = 'no'
                  AND gf1.source_id = gi.gene
                  AND gi.id = lower(ds.dataset_value)
                  AND ds.dataset_id = $$ds_gene_ids$$
                  AND gf1.na_feature_id = pp1.na_feature_id
                  AND ((pp1.phylogenetic_profile_id = mis.primary_profile_id
                  AND mis.secondary_profile_id = pp2.phylogenetic_profile_id)
                    OR (pp1.phylogenetic_profile_id = mis.secondary_profile_id
                  AND mis.primary_profile_id = pp2.phylogenetic_profile_id))
                  and mis.mutual_information_score/1000 >= $$min_mutual_information_score$$
                  AND pp2.na_feature_id = gf2.na_feature_id
                  AND gf2.source_id != gf1.source_id
                  group  by gf2.source_id
                  having count(*) >= $$min_num_query_matches$$
                UNION
                SELECT gf2.source_id, count(*) as num_queries,
                    apidb.tab_to_string(CAST(COLLECT(gf1.source_id) AS apidb.varchartab), ', ') AS query_ids, 
                    apidb.tab_to_string(CAST(COLLECT(to_char(mis.mutual_information_score/10000)) AS apidb.varchartab), ', ') AS mutual_information_scores
                FROM dots.GeneFeature gf1, dots.PhylogeneticProfile pp1,
                     dots.MutualInformationScore mis, dots.PhylogeneticProfile pp2,
                     dots.GeneFeature gf2,@LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds, apidb.GeneId gi
                WHERE '$$include_only_queries$$' = 'yes'
                  AND gf1.source_id = gi.gene
                  AND gi.id = lower(ds.dataset_value)
                  AND ds.dataset_id = $$ds_gene_ids$$
                  AND gf1.na_feature_id = pp1.na_feature_id
                  AND ((pp1.phylogenetic_profile_id = mis.primary_profile_id
                  AND mis.secondary_profile_id = pp2.phylogenetic_profile_id)
                    OR (pp1.phylogenetic_profile_id = mis.secondary_profile_id
                  AND mis.primary_profile_id = pp2.phylogenetic_profile_id))
                  and mis.mutual_information_score/1000 >= $$min_mutual_information_score$$
                  AND pp2.na_feature_id = gf2.na_feature_id
                  AND gf2.source_id in (select intds.dataset_value as gene_id 
                      from @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ intds
                      where intds.dataset_id = $$ds_gene_ids$$) 
                  AND gf2.source_id != gf1.source_id
                  group  by gf2.source_id
                  having count(*) >= $$min_num_query_matches$$
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByFunctionalInteraction" displayName="by functional interaction"
              isCacheable="true">
        <paramRef ref="params.ds_gene_ids" default="PF11_0344"/>
        <paramRef ref="params.min_interaction"/>
        <paramRef ref="params.include_only_queries"/>
        <paramRef ref="params.min_num_query_matches"/>
        <column name="source_id"/>
        <column name="likelihood_scores"/>
        <column name="query_ids" />
        <column name="queries_matched"/>
        <sql>
            <![CDATA[
                SELECT gf2.source_id, 
                  apidb.tab_to_string(CAST(COLLECT(gf1.source_id) AS apidb.varchartab), ', ') AS query_ids, 
                  apidb.tab_to_string(CAST(COLLECT(to_char(rnf.value)) AS apidb.varchartab), ', ') AS likelihood_scores,
                  count(*) as queries_matched
                FROM dots.GeneFeature gf1, apidb.RelatedNaFeature rnf,
                     dots.GeneFeature gf2,@LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds, apidb.GeneId gi
                WHERE '$$include_only_queries$$' = 'no'
                  AND gf1.source_id = gi.gene
                  AND gi.id = lower(ds.dataset_value)
                  AND ds.dataset_id = $$ds_gene_ids$$
                  AND gf1.na_feature_id = rnf.na_feature_id
                  AND rnf.associated_na_feature_id = gf2.na_feature_id
                  AND rnf.value >= '$$min_interaction$$'
                GROUP BY gf2.source_id
                HAVING count(*) >= $$min_num_query_matches$$
              UNION
                SELECT gf2.source_id, 
                  apidb.tab_to_string(CAST(COLLECT(gf1.source_id) AS apidb.varchartab), ', ') AS query_ids, 
                  apidb.tab_to_string(CAST(COLLECT(to_char(rnf.value)) AS apidb.varchartab), ', ') AS likelihood_scores,
                  count(*) as queries_matched
                FROM dots.GeneFeature gf1, apidb.RelatedNaFeature rnf,
                     dots.GeneFeature gf2,@LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds, apidb.GeneId gi
                WHERE '$$include_only_queries$$' = 'yes'
                  AND gf1.source_id = gi.gene
                  AND gi.id = lower(ds.dataset_value)
                  AND ds.dataset_id = $$ds_gene_ids$$
                  AND gf1.na_feature_id = rnf.na_feature_id
                  AND rnf.associated_na_feature_id = gf2.na_feature_id
                  AND rnf.value >= '$$min_interaction$$'
                  AND gf2.source_id in (select intds.dataset_value as gene_id 
                      from @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ intds
                      where intds.dataset_id = $$ds_gene_ids$$)
                GROUP BY gf2.source_id
                HAVING count(*) >= $$min_num_query_matches$$
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesWithSignalPeptide" displayName="with signal peptide"
              isCacheable="true">
        <paramRef ref="params.organism"/>
        <paramRef ref="params.min_sigp_sum_score" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="sigp_sum_score"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id,(spf.maxy_conclusion + spf.maxc_conclusion + spf.maxs_conclusion + spf.means_conclusion ) as sigp_sum_score
            FROM dots.ExternalNaSequence ens, dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.SignalPeptideFeature spf
            WHERE ens.taxon_id in ($$organism$$)
              AND ens.na_sequence_id = gf.na_sequence_id
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = spf.aa_sequence_id
              AND (spf.maxy_conclusion +
                   spf.maxc_conclusion +
                   spf.maxs_conclusion +
                   spf.means_conclusion ) >= $$min_sigp_sum_score$$ 
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByIntraerythrocyticExpression" isCacheable="true">
        <paramRef ref="params.synchronization"/>
        <paramRef ref="params.intraerythrocytic_stages"/>
        <paramRef ref="params.min_expression_percentile"/>
        <paramRef ref="params.max_expression_percentile"/>
        <column name="source_id"/>
        <column name="max_percentile"/>
        <column name="min_percentile"/>
        <sql>
            <![CDATA[
            SELECT e.source_id, MAX(e.value) AS max_percentile,
                   MIN(e.value) AS min_percentile
            FROM apidb.Expression e
            WHERE (e.element_order = $$intraerythrocytic_stages$$
                   OR $$intraerythrocytic_stages$$ = 0)
              AND e.profile_set_name in ($$synchronization$$)
              AND e.value >= $$min_expression_percentile$$ / 100
              AND e.value <= $$max_expression_percentile$$ / 100
            GROUP BY e.source_id
            ORDER BY e.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExtraerythrocyticExpression" isCacheable="true">
        <paramRef ref="params.extraerythrocytic_stages"/>
        <paramRef ref="params.min_expression_percentile"/>
        <paramRef ref="params.max_expression_percentile"/>
        <column name="source_id"/>
        <column name="max_percentile"/>
        <column name="min_percentile"/>
        <sql>
            <![CDATA[
            SELECT e.source_id, MAX(e.value) AS max_percentile,
                   MIN(e.value) AS min_percentile
            FROM apidb.Expression e
            WHERE e.profile_set_name in ('winzeler_cc_sorbPct', 'winzeler_cc_sporPct')
              AND (e.element_order = $$extraerythrocytic_stages$$
                   OR $$extraerythrocytic_stages$$ = 0)
              AND e.value >= $$min_expression_percentile$$ / 100
              AND e.value <= $$max_expression_percentile$$ / 100
            GROUP BY e.source_id
            ORDER BY e.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExpression" isCacheable="true">
        <paramRef ref="params.min_expression_percentile"/>
        <paramRef ref="params.max_expression_percentile"/>
        <column name="source_id"/>
        <column name="max_percentile"/>
        <column name="min_percentile"/>
        <sql>
            <![CDATA[

            SELECT e.source_id, MAX(e.value) AS max_percentile,
                   MIN(e.value) AS min_percentile
            FROM apidb.Expression e
            WHERE e.profile_set_name
                  in ('winzeler_cc_sorbPct', 'winzeler_cc_tempPct',
                      'winzeler_cc_sporPct')
              AND e.value >= $$min_expression_percentile$$ / 100
              AND e.value <= $$max_expression_percentile$$ / 100
            GROUP BY e.source_id
            ORDER BY e.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByDifferentialMeanExpression" isCacheable='true'>
       <paramRef ref="params.diffMeanExpr_reference"/>
       <paramRef ref="params.diffMeanExpr_comparitor"/>
       <paramRef ref="params.regulated_dir"/>
       <paramRef ref="params.fold_change"/>
       <column name="source_id" />
       <column name="fold_change" />
       <sql>
        <![CDATA[
           SELECT ga.gene as source_id, 
                   to_char((CASE WHEN avg(ep1.mean)/avg(ep2.mean) >= 1
                   THEN avg(ep1.mean)/avg(ep2.mean)
                   ELSE -1/(avg(ep1.mean)/avg(ep2.mean))
                   END),999.9) as fold_change
            FROM Rad.AnalysisInput ai1, Rad.Analysis a1, 
                 Rad.ExpressionProfile ep1,  
                 Rad.AnalysisInput ai2, Rad.Analysis a2,
                 Rad.ExpressionProfile ep2, 
                 Rad.Protocol p, Rad.ShortOligoFamily sof,
                 ApiDB.GeneAlias ga
            WHERE p.name = 'R Expression Statistics'
             AND ai1.logical_group_id = $$diffMeanExpr_reference$$
             AND a1.analysis_id = ai1.analysis_id
             AND a1.protocol_id = p.protocol_id
             AND ep1.analysis_id = a1.analysis_id
             AND sof.composite_element_id = ep1.row_id
             AND ai2.logical_group_id = $$diffMeanExpr_comparitor$$
             AND a2.analysis_id = ai2.analysis_id
             AND a2.protocol_id = p.protocol_id
             AND ep2.analysis_id = a2.analysis_id
             AND sof.composite_element_id = ep2.row_id
             AND sof.source_id is not null
             AND ga.alias = sof.source_id
             having  case when '$$regulated_dir$$' = '-' 
                    then avg(ep2.mean)/avg(ep1.mean)
                     else avg(ep1.mean)/avg(ep2.mean)
                     end > $$fold_change$$
             GROUP BY ga.gene
             ORDER BY ga.gene
            ]]>
          </sql>
    </sqlQuery>   

    <sqlQuery name="GenesByExpressionPercentileA" displayName="By Expression Percentile" isCacheable='true'>
       <paramRef ref="params.cowmanSample"/>
       <paramRef ref="params.percentile"/>
       <column name="source_id" />
       <column name="percentile" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
	    SELECT 
                 ga.gene as source_id, 
                 max(to_char(de.percentile,'99.99')) as percentile
            FROM RAD.ExpressionProfile de, Rad.ShortOligoFamily sof,
                 Rad.Analysis a, Rad.AnalysisInput aia, 
		 Rad.LogicalGroup lga,
                 Rad.Protocol p, Rad.ProtocolParam pp, Rad.AnalysisParam ap,
                 ApiDB.GeneAlias ga
            WHERE sof.source_id is not null
             AND ga.alias = sof.source_id
             AND sof.composite_element_id = de.row_id
             AND a.analysis_id = de.analysis_id
             AND a.analysis_id = aia.analysis_id
             AND aia.logical_group_id = lga.logical_group_id 
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND ap.protocol_param_id = pp.protocol_param_id
             AND ap.analysis_id = a.analysis_id
             AND p.name = 'R Expression Statistics'
             AND lga.logical_group_id = '$$cowmanSample$$'
             AND de.percentile >= $$percentile$$
             GROUP BY ga.gene
             ORDER BY ga.gene
            ]]>
          </sql>
    </sqlQuery>   

    <sqlQuery name="GenesByWatersDifferentialExpression" isCacheable='true'>
       <paramRef ref="params.confidence"/>
       <paramRef ref="params.fold_change"/>
       <paramRef ref="params.regulated_dir"/>
       <column name="source_id" />
       <column name="confidence" />
       <column name="fold_change" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
          SELECT ga.gene as source_id,
	      max(to_char(de.fold_change, '999.99')) as fold_change,
              max(to_char(de.confidence,'99.99')) as confidence
            FROM Rad.LogicalGroup lg,
                 Rad.AnalysisInput ai,
                 Rad.Analysis a, 
                 RAD.DifferentialExpression de, 
                 Rad.ShortOligoFamily sof,
                 Rad.Protocol p, 
                 Rad.ProtocolParam pp, 
                 Rad.AnalysisParam ap,
                 ApiDB.GeneAlias ga
            WHERE lg.name = 'DOZI mutant vs. Wild Type - Loess Normalized Analyses'
             AND ai.logical_group_id = lg.logical_group_id 
             AND a.analysis_id = ai.analysis_id
             AND de.analysis_id = a.analysis_id
             AND sof.composite_element_id = de.row_id
             AND sof.source_id is not null
             AND ga.alias = sof.source_id
             AND p.name = 'PaGE'
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND pp.name = 'reference_condition'
             AND ap.protocol_param_id = pp.protocol_param_id
             AND a.analysis_id = ap.analysis_id
             AND de.confidence >= $$confidence$$
             AND ( $$regulated_dir$$ de.fold_change) >= $$fold_change$$
             GROUP BY ga.gene
             ORDER BY ga.gene
        ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="BergheiGenesByExpressionPercentile" isCacheable="true">
        <paramRef ref="params.waters_profilesets"/>
        <paramRef ref="params.r_min_expression_percentile"/>
        <paramRef ref="params.r_max_expression_percentile"/>
        <paramRef ref="params.yt_min_expression_percentile"/>
        <paramRef ref="params.yt_max_expression_percentile"/>
        <paramRef ref="params.ys_min_expression_percentile"/>
        <paramRef ref="params.ys_max_expression_percentile"/>
        <paramRef ref="params.ms_min_expression_percentile"/>
        <paramRef ref="params.ms_max_expression_percentile"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
        SELECT DISTINCT fred.source_id from(
            SELECT p.source_id
            FROM apidb.profileElementName pen,
                 apidb.profileSet ps,
                 apidb.profile p,
                 apidb.profileElement pe
            WHERE ps.name LIKE '$$waters_profilesets$$'
              AND p.profile_set_id = ps.profile_set_id
              AND pe.profile_id = p.profile_id
              AND pen.element_order = pe.element_order
              AND pen.name = 'R'
              AND ps.profile_set_id = pen.profile_set_id
              AND pe.value >= $$r_min_expression_percentile$$ / 100
              AND pe.value <= $$r_max_expression_percentile$$ / 100
          INTERSECT
            SELECT p.source_id
            FROM apidb.profileElementName pen,
                 apidb.profileSet ps,
                 apidb.profile p,
                 apidb.profileElement pe
            WHERE ps.name LIKE '$$waters_profilesets$$'
              AND p.profile_set_id = ps.profile_set_id
              AND pe.profile_id = p.profile_id
              AND pen.element_order = pe.element_order
              AND pen.name = 'YT'
              AND ps.profile_set_id = pen.profile_set_id
              AND pe.value >= $$yt_min_expression_percentile$$ / 100
              AND pe.value <= $$yt_max_expression_percentile$$ / 100
          INTERSECT
            SELECT p.source_id
            FROM apidb.profileElementName pen,
                 apidb.profileSet ps,
                 apidb.profile p,
                 apidb.profileElement pe
            WHERE ps.name LIKE '$$waters_profilesets$$'
              AND p.profile_set_id = ps.profile_set_id
              AND pe.profile_id = p.profile_id
              AND pen.element_order = pe.element_order
              AND pen.name = 'YS'
              AND ps.profile_set_id = pen.profile_set_id
              AND pe.value >= $$ys_min_expression_percentile$$ / 100
              AND pe.value <= $$ys_max_expression_percentile$$ / 100
          INTERSECT
            SELECT p.source_id
            FROM apidb.profileElementName pen,
                 apidb.profileSet ps,
                 apidb.profile p,
                 apidb.profileElement pe
            WHERE ps.name LIKE '$$waters_profilesets$$'
              AND p.profile_set_id = ps.profile_set_id
              AND pe.profile_id = p.profile_id
              AND pen.element_order = pe.element_order
              AND pen.name = 'MS'
              AND ps.profile_set_id = pen.profile_set_id
              AND pe.value >= $$ms_min_expression_percentile$$ / 100
              AND pe.value <= $$ms_max_expression_percentile$$ / 100
          ) fred
          ORDER BY fred.source_id
        ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesBySubcellularLocalization" isCacheable="true">
        <paramRef ref="params.localization"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
              SELECT DISTINCT s.source_id
              FROM apidb.Subcellular s
              WHERE targetting_domain = '$$localization$$'
              ORDER BY s.source_id
           ]]>
       </sql>
    </sqlQuery>

    <!-- sqlQuery name="GenesBySubcellularLocalization" isCacheable="true">
        <paramRef ref="params.localization"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
              SELECT DISTINCT paf.source_id
              FROM dots.PredictedAaFeature paf
              WHERE external_database_release_id IN (-1, $$localization$$)
              ORDER BY paf.source_id
           ]]>
       </sql>
    </sqlQuery -->

    <sqlQuery name="GenesByIsoelectricPoint"
              displayName="by Isoelectric Point" isCacheable="true">
        <paramRef ref="params.min_isoelectric_point"/>
        <paramRef ref="params.max_isoelectric_point"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <column name="isoelectric_point"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT DISTINCT asa.isoelectric_point, gf.source_id
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf,
                 apidb.AaSequenceAttribute asa,
                 dots.NaSequence ns
            WHERE asa.isoelectric_point BETWEEN $$min_isoelectric_point$$
                                            AND $$max_isoelectric_point$$
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = asa.aa_sequence_id
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id in ($$organism$$)
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByMolecularWeight" displayName="by Molecular Weight"
              isCacheable="true">
        <paramRef ref="params.min_molecular_weight"/>
        <paramRef ref="params.max_molecular_weight"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT DISTINCT gf.source_id
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, apidb.AaSequenceAttribute asa,
                 dots.NaSequence ns
            WHERE asa.min_molecular_weight <= $$max_molecular_weight$$
              AND asa.max_molecular_weight >= $$min_molecular_weight$$
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = asa.aa_sequence_id
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id in ($$organism$$)
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExonCount" displayName="by exon count" isCacheable="true">
        <paramRef ref="params.num_exons_gte"/>
        <paramRef ref="params.num_exons_lte"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
 <!--  try this sql when bfmv columns indexed     <sql>
            <![CDATA[
             SELECT source_id
             FROM apidb.geneattributes
             WHERE ncbi_tax_id in ($$organism$$)
             AND exon_count  >= $$num_exons_gte$$
             And exon_count <= $$num_exons_lte$$
            ]]>
       </sql>
  -->
       <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT gf.source_id
            FROM dots.geneFeature gf, dots.ExternalNaSequence ns,dots.nalocation l,
                 (SELECT t.parent_id, count(*) AS exon_count
                  FROM dots.Transcript t, dots.ExonFeature ef, dots.rnafeatureexon rfe
                  WHERE t.na_feature_id = rfe.rna_feature_id
                  and ef.na_feature_id = rfe.exon_feature_id
                  GROUP BY t.parent_id, t.na_feature_id
                  HAVING COUNT(*) >= $$num_exons_gte$$ and count(*) <= $$num_exons_lte$$) exons
            WHERE exons.parent_id = gf.na_feature_id
              AND gf.na_sequence_id = ns.na_sequence_id
              AND gf.na_feature_id = l.na_feature_id
              AND ns.taxon_id in ($$organism$$)
            ORDER BY ns.taxon_id,ns.source_id,l.start_min
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByOrthologPattern" displayName="by Ortholog Pattern"
              isCacheable="true">
        <paramRef ref="params.profile_pattern"/>
        <paramRef ref="params.included_species"/>
        <paramRef ref="params.excluded_species"/>
        <paramRef ref="params.phyletic_indent_map"/>
        <paramRef ref="params.phyletic_term_map"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT DISTINCT gf.source_id, ns.taxon_id
            FROM apidb.PhylogeneticProfile pp, dots.GeneFeature gf, dots.NaSequence ns
            WHERE pp.profile_string LIKE '$$profile_pattern$$'
              AND pp.source_id = gf.source_id
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id in ($$organism$$)
            ORDER BY ns.taxon_id, gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByMetabolicPathway" displayName="by Metabolic Pathway"
              isCacheable="true">
        <paramRef ref="params.metabolic_pathway"/>
        <column name="source_id"/>
        <column name="met_pathways"/>
        <sql>
            <![CDATA[
              SELECT gf.source_id,
       apidb.tab_to_string(CAST(COLLECT(distinct decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier)) AS apidb.varchartab), ', ') as met_pathways
            FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf, sres.DbRef dr,
              (SELECT idrnf.na_feature_id
               FROM dots.DbRefNaFeature idrnf, sres.DbRef idr
               WHERE idr.primary_identifier = '$$metabolic_pathway$$'
                 AND idrnf.db_ref_id = idr.db_ref_id) internal
            WHERE internal.na_feature_id = drnf.na_feature_id
            AND gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            group by gf.source_id
           ]]>
<!--            SELECT gf.source_id,
                   apidb.tab_to_string(CAST(COLLECT(distinct decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier)) AS apidb.varchartab), ', ') as met_pathways
            FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf, sres.DbRef dr
            WHERE gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.primary_identifier = '$$metabolic_pathway$$'
            group by gf.source_id
-->
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByProteomicsProfile" displayName="by Proteomics Profile"
              isCacheable="true">
        <paramRef ref="params.asexual_blood_stages_value"/>
        <paramRef ref="params.gametocytes_value"/>
        <paramRef ref="params.ookinetes_value"/>
        <paramRef ref="params.oocysts_value"/>
        <paramRef ref="params.sporozoites_value"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT pb.source_id FROM
            (SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps
            WHERE pe.profile_id = p.profile_id
            AND   p.profile_set_id = ps.profile_set_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pe.element_order = 1 AND ('any' = '$$asexual_blood_stages_value$$' OR
                                           pe.value = '$$asexual_blood_stages_value$$'))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps
            WHERE pe.profile_id = p.profile_id
            AND   p.profile_set_id = ps.profile_set_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pe.element_order = 2 AND ('any' = '$$gametocytes_value$$' OR
                                           pe.value = '$$gametocytes_value$$'))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps
            WHERE pe.profile_id = p.profile_id
            AND   p.profile_set_id = ps.profile_set_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pe.element_order = 3 AND ('any' = '$$ookinetes_value$$' OR
                                           pe.value = '$$ookinetes_value$$'))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps
            WHERE pe.profile_id = p.profile_id
            AND   p.profile_set_id = ps.profile_set_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pe.element_order = 4 AND ('any' = '$$oocysts_value$$' OR
                                           pe.value = '$$oocysts_value$$'))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps
            WHERE pe.profile_id = p.profile_id
            AND   p.profile_set_id = ps.profile_set_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pe.element_order = 5 AND ('any' = '$$sporozoites_value$$' OR
                                           pe.value = '$$sporozoites_value$$'))) pb
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByMr4Reagents" displayName="by MR4 Reagents"
              isCacheable="true">
        <paramRef ref="params.mr4_reagent_type"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
               SELECT DISTINCT gf.source_id
               FROM dots.GeneFeature gf,
                dots.DbRefAaFeature df,
                sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                sres.ExternalDatabase ed, dots.TranslatedAAFeature taf,
                dots.Transcript t
               WHERE ed.name = 'MR4DBxRefs'
                 AND edr.external_database_id = ed.external_database_id
                 AND dbr.external_database_release_id = edr.external_database_release_id
                 AND (LOWER(dbr.secondary_identifier) = '$$mr4_reagent_type$$'
                      OR '$$mr4_reagent_type$$' = 'any')
                 AND df.db_ref_id = dbr.db_ref_id
                 AND taf.aa_feature_id = df.aa_feature_id
                 AND t.na_feature_id = taf.na_feature_id
                 AND gf.na_feature_id = t.parent_id

           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExportPrediction" displayName="by Export Prediction"
              isCacheable="true">
        <paramRef ref="params.min_exportpred_score"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <column name="exportpred_score"/>
        <sql>
            <![CDATA[
                SELECT gf.source_id, max(df.score) as exportpred_score
                FROM dots.aasequence aa,dots.DomainFeature df, dots.translatedaafeature tf,
                     dots.transcript t,dots.genefeature gf
                WHERE  aa.taxon_id in ($$organism$$)
                   AND aa.aa_sequence_id = df.aa_sequence_id
                   AND df.algorithm_name = 'exportpred'
                   AND df.score >= $$min_exportpred_score$$
                   AND tf.aa_sequence_id = aa.aa_sequence_id
                   AND t.na_feature_id = tf.na_feature_id
                   AND gf.na_feature_id = t.parent_id
                   GROUP BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByTaxon" displayName="by taxon"
              isCacheable="true">
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT gf.source_id
                FROM DoTS.GeneFeature gf
                WHERE gf.na_sequence_id IN
                      (SELECT ens.na_sequence_id
                       FROM dots.ExternalNaSequence ens
                       WHERE ens.taxon_id in ($$organism$$))
                  AND gf.source_id IS NOT NULL
                ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <!-- GeneFeatureIds.GenesWithEpitopes -->
    <sqlQuery name="GenesWithEpitopes" displayName="By Gene ID" isCacheable='true'>
        <paramRef ref="params.organism"/>
        <paramRef ref="epitopeParams.confidence"/>
        <column name="source_id" />
        <column name="confidence" />
        <column name="count" />
        <sql>
            <![CDATA[
        SELECT gf.source_id, count(ef.source_id) AS count,
           DECODE(
             MAX(
               DECODE(ef.type, 'Not Full Set Not on Blast Hit', 1,
                      'Not Full Set On Blast Hit', 2,
                      'Full Set Not on Blast Hit', 2,
                      'Full Set On Blast Hit', 3,
                       4)),
               1, 'Low',
               2, 'Medium',
               3, 'High',
               4, 'unknown epitope type') AS confidence
        FROM dots.TranslatedAaSequence tas, dots.EpitopeFeature ef,
             dots.AaLocation al, sres.ExternalDatabaseRelease edr,
             sres.ExternalDatabase ed, dots.GeneFeature gf,
             dots.TranslatedAaFeature taf, dots.Transcript t,
             dots.MotifAaSequence mas, dots.ExternalNaSequence ens
        WHERE tas.aa_sequence_id = ef.aa_sequence_id
          AND ef.aa_feature_id = al.aa_feature_id
          AND ef.motif_aa_sequence_id = mas.aa_sequence_id
          AND tas.aa_sequence_id = taf.aa_sequence_id
          AND taf.na_feature_id = t.na_feature_id
          AND t.parent_id = gf.na_feature_id
          AND gf.na_sequence_id = ens.na_sequence_id
          AND ens.taxon_id in ($$organism$$)
          AND ef.external_database_release_id
              = edr.external_database_release_id
          AND edr.external_database_id = ed.external_database_id
          AND ed.name = 'Links to IEDB epitopes'
          AND ef.type IN ($$confidence$$)
        GROUP BY gf.source_id
        ORDER BY gf.source_id
           ]]>
        </sql>
    </sqlQuery>   

    <sqlQuery name="GenesByMassSpec" displayName="with mass-spec evidence"
              isCacheable="true">
        <paramRef ref="params.mass_spec_stage"/>
        <paramRef ref="params.min_seq_coverage"/>
        <paramRef ref="params.min_span_count"/>
        <paramRef ref="params.min_spectrum_count"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT distinct gf.source_id
                FROM apidb.MassSpecSummary mss, dots.transcript t,
                     dots.genefeature gf, dots.translatedAAFeature taf
                WHERE (mss.developmental_stage = '$$mass_spec_stage$$'
                          OR '$$mass_spec_stage$$' = 'any')
                  AND mss.aa_seq_percent_covered >= $$min_seq_coverage$$
                  AND mss.number_of_spans >= $$min_span_count$$
                  AND mss.spectrum_count >= $$min_spectrum_count$$
                  AND taf.aa_sequence_id = mss.aa_sequence_id
                  AND t.na_feature_id = taf.na_feature_id
                  AND gf.na_feature_id = t.parent_id
                  ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

<!--
   <sqlQuery name="GenesByGenBankAccession"
              displayName="by GenBank Accession number"
              isCacheable="true">
        <paramRef ref="params.genbank_accession"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT gf.source_id
                FROM dots.GeneFeature gf
                WHERE gf.source_id IN
                      (SELECT sns.source_id
                       FROM dots.SplicedNaSequence sns,
                            dots.dbrefNaSequence drns,
                            sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                            sres.ExternalDatabase ed
                       WHERE dr.primary_identifier = '$$genbank_accession$$'
                         AND sns.na_sequence_id = drns.na_sequence_id
                         AND drns.db_ref_id = dr.db_ref_id
                         AND dr.external_database_release_id
                             = edr.external_database_release_id
                         AND edr.external_database_id = ed.external_database_id
                         AND ed.name = 'GenBank'
                       UNION
                       SELECT gf.source_id
                       FROM dots.GeneFeature gf, dots.ExternalNaSequence ens,
                            dots.dbrefNaSequence drns,
                            sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                            sres.ExternalDatabase ed
                       WHERE gf.na_sequence_id = ens.na_sequence_id
                         AND ens.na_sequence_id = drns.na_sequence_id
                         AND drns.db_ref_id = dr.db_ref_id
                         AND dr.primary_identifier = '$$genbank_accession$$'
                         AND dr.external_database_release_id
                             = edr.external_database_release_id
                         AND edr.external_database_id = ed.external_database_id
                         AND ed.name = 'GenBank')
                ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>
-->

    <sqlQuery name="GenesOrthologousToAGivenGene"
              displayName="orthologous to a given gene"
              isCacheable="true">
        <paramRef ref="params.locus_tag"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT gf2.source_id
                FROM dots.GeneFeature gf1, dots.SequenceSequenceGroup ssg1,
                     dots.SequenceSequenceGroup ssg2, dots.GeneFeature gf2,
                     core.TableInfo ti,apidb.GeneId gi
                WHERE gi.id = lower('$$locus_tag$$')
                  AND gf1.source_id = gi.gene 
                  AND gf1.na_feature_id = ssg1.sequence_id
                  AND ssg1.source_table_id = ti.table_id
                  AND ssg1.sequence_group_id = ssg2.sequence_group_id
                  AND ssg2.source_table_id = ti.table_id
                  AND ssg2.sequence_id = gf2.na_feature_id
                  AND ti.name = 'GeneFeature'
                  AND gf2.source_id != gf1.source_id
                ORDER BY gf2.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCentromereProximity"
              isCacheable="true">
        <paramRef ref="params.max_centromere_distance"/>
        <paramRef ref="params.chromosome"/>
        <column name="source_id"/>
        <column name="dist_centromere"/>
        <sql>
            <![CDATA[
                SELECT gcd.gene AS source_id,
                TRIM(TO_CHAR(gcd.centromere_distance,'9,999,999')) as dist_centromere
                FROM apidb.GeneCentromereDistance gcd, apidb.GeneAttributes ga
                WHERE gcd.gene = ga.source_id
                  AND gcd.centromere_distance <= $$max_centromere_distance$$
                  AND gcd.genomic_sequence in ($$chromosome$$)
                ORDER BY gcd.genomic_sequence, ga.start_min
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByTelomereProximity"
              isCacheable="true">
        <paramRef ref="params.distanceFromTelomere"/>
        <paramRef ref="params.chromosome"/>
        <column name="source_id"/>
        <column name="dist_telomere"/>
        <sql>
            <![CDATA[
	    SELECT gf.source_id, 
            trim(to_char(LEAST(s.length - l.end_max,l.start_min),'999,999')) as dist_telomere
	    FROM Dots.GENEFEATURE gf, dots.NALOCATION l, dots.EXTERNALNASEQUENCE s
	    WHERE gf.na_sequence_id = s.na_sequence_id
	     AND l.na_feature_id = gf.na_feature_id
	     AND s.source_id  in ($$chromosome$$)
	     AND (l.end_max >= s.length - $$distanceFromTelomere$$
                                      OR l.start_min <= 1 + $$distanceFromTelomere$$)
	     ORDER BY s.source_id,l.end_max
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGenomicRegion"
              displayName="by genomic location" isCacheable="true">
        <paramRef ref="params.pfGenomicSequenceOrNot"/>
        <paramRef ref="params.genomicSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT distinct gf.source_id
            FROM dots.GeneFeature gf, dots.naLocation nl, dots.ExternalNaSequence ens
            WHERE nl.na_feature_id = gf.na_feature_id
              AND (ens.source_id = $$pfGenomicSequenceOrNot$$
                   OR lower(ens.source_id) = lower('$$genomicSequence$$'))
              AND gf.na_sequence_id = ens.na_sequence_id
              AND end_max >= $$start_point$$ 
              AND (start_min <= $$end_point$$ OR $$end_point$$ = 0)
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByNonnuclearGenomicRegion"
              displayName="by non-nuclear genomic location" isCacheable="true">
        <paramRef ref="params.pfNonnuclearSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT distinct gf.source_id
            FROM dots.GeneFeature gf, dots.naLocation nl, dots.ExternalNaSequence ens
            WHERE nl.na_feature_id = gf.na_feature_id
              AND ens.source_id IN ($$pfNonnuclearSequence$$)
              AND gf.na_sequence_id = ens.na_sequence_id
              AND end_max >= $$start_point$$ 
              AND (start_min <= $$end_point$$ OR $$end_point$$ = 0)
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="GenesWithStructurePrediction"
              displayName="with Structure Predictions"
              isCacheable="true">
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByPdbSimilarity"
              isCacheable="true">
        <paramRef ref="params.clades"/>
        <paramRef ref="params.pvalue_cutoff"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT gf.source_id, MAX(ens.taxon_id) AS gene_taxon_id
            FROM dots.TranslatedAaFeature taf, dots.TranslatedAaSequence tas,
                 core.TableInfo tas_ti, dots.Similarity s,
                 core.TableInfo eas_ti, dots.ExternalAaSequence eas,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,
                 dots.GeneFeature gf, dots.ExternalNaSequence ens,
                 dots.Transcript t
            WHERE taf.aa_sequence_id = tas.aa_sequence_id
              AND tas_ti.name = 'TranslatedAASequence'
              AND tas_ti.table_id = s.query_table_id
              AND s.query_id = tas.aa_sequence_id
              AND s.pvalue_exp < $$pvalue_cutoff$$
              AND eas_ti.name = 'ExternalAASequence'
              AND eas_ti.table_id = s.subject_table_id
              AND s.subject_id = eas.aa_sequence_id
              AND eas.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'PDB protein sequences'
              AND t.na_feature_id = taf.na_feature_id
              AND gf.na_feature_id = t.parent_id
              AND gf.na_sequence_id = ens.na_sequence_id
              AND eas.taxon_id IN
                  (SELECT taxon_id from sres.taxon
                   CONNECT BY parent_id = PRIOR taxon_id
                   START WITH taxon_id IN ($$clades$$))
              AND ens.taxon_id IN ($$organism$$)
            GROUP BY gf.source_id
            ORDER BY MAX(ens.taxon_id), gf.source_id
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByProteinDbAccession"
              isCacheable="true">
        <paramRef ref="params.accession"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id
             FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                  sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                  sres.ExternalDatabase ed, dots.ExternalNaSequence ens
             WHERE (dr.primary_identifier = '$$accession$$'
                    OR dr.secondary_identifier = '$$accession$$')
               AND gf.na_feature_id = drnf.na_feature_id
               AND drnf.db_ref_id = dr.db_ref_id
               AND dr.external_database_release_id
                     = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name IN ('NRDB_gb_dbXRefBySeqIdentity',
                           /*  'NRDB_pdb_dbXRefBySeqIdentity', */
                               'NRDB_ref_dbXRefBySeqIdentity',
                               'NRDB_sp_dbXRefBySeqIdentity',
                               'GenBank')
              AND gf.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id IN ($$organism$$)
            ORDER BY gf.source_id
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesBySnps"
              isCacheable="true">
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_b"/>
        <paramRef ref="params.snp_stat" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.snp_density" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="cds_snp_density"/>
        <column name="dn_ds_ratio"/>
        <column name="num_synonymous"/>
        <column name="num_non_synonymous"/>
        <column name="num_noncoding"/>
        <column name="num_nonsense"/>
        <column name="total_snps"/>
        <sql>
            <![CDATA[
              SELECT source_id,
	           round(non_synonymous / CASE synonymous
	                      WHEN 0 THEN 1
				  ELSE synonymous end, 2) as dn_ds_ratio,
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,
              non_coding as num_noncoding, stop as num_nonsense,
              cds_length,round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density,
              total as total_snps
	      FROM apidb.snpsummary
	      WHERE ((strain_a = '$$snp_strain_a$$' and strain_b = '$$snp_strain_b$$' )
                    or  (strain_a = '$$snp_strain_b$$' and strain_b = '$$snp_strain_a$$'))
	      AND non_synonymous / CASE synonymous
	                          WHEN 0 THEN 1
				  ELSE synonymous end >= $$dn_ds_ratio_lower$$
	      AND non_synonymous / CASE synonymous
	                          WHEN 0 THEN 1
				  ELSE synonymous end <= $$dn_ds_ratio_upper$$
              AND $$snp_stat$$ >= $$occurrences_lower$$
	      AND $$snp_stat$$ <= $$occurrences_upper$$
              AND (non_synonymous + synonymous) / cds_length * 1000 >= $$snp_density$$
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesWithProteinLowComplexity"
              isCacheable="true">
        <paramRef ref="params.percentLowComplexity"/>
        <paramRef ref="params.chromosome"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
	    select gf.source_id
	    from Dots.LowComplexityAAFeature lc, Dots.GeneFeature gf,
	         Dots.ExternalNASequence ens, Dots.AALocation al, 
                 Dots.AASequence s, Dots.Transcript t, Dots.TranslatedAAFeature taf
            where ens.source_id in ($$chromosome$$)
            and gf.na_sequence_id = ens.na_sequence_id
            and t.parent_id = gf.na_feature_id
            and taf.na_feature_id = t.na_feature_id
            and s.aa_sequence_id = taf.aa_sequence_id
            and lc.aa_sequence_id = s.aa_sequence_id
            and al.aa_feature_id = lc.aa_feature_id
	    group by gf.source_id
	    having sum(100 *(al.end_max - al.start_min)/s.length ) > $$percentLowComplexity$$
            ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesBySecondaryStructure"
              isCacheable="true">
        <paramRef ref="params.min_coil"/>
        <paramRef ref="params.max_coil"/>
        <paramRef ref="params.min_strand"/>
        <paramRef ref="params.max_strand"/>
        <paramRef ref="params.min_helix"/>
        <paramRef ref="params.max_helix"/>
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <column name="percent_coil"/>
        <column name="percent_strand"/>
        <column name="percent_helix"/>
        <sql>
            <![CDATA[
            SELECT gf.source_id, c.percentage as percent_coil, e.percentage as percent_strand, h.percentage as percent_helix
            FROM dots.SecondaryStructure ss, dots.SecondaryStructureCall c, dots.SecondaryStructureCall e,
                 dots.SecondaryStructureCall h,dots.genefeature gf,dots.transcript t, 
                 dots.translatedaafeature tf,dots.nasequence s
            WHERE s.na_sequence_id = gf.na_sequence_id
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = tf.na_feature_id
              AND tf.aa_sequence_id = ss.aa_sequence_id
              AND ss.secondary_structure_id = c.secondary_structure_id
              AND ss.secondary_structure_id = e.secondary_structure_id
              AND ss.secondary_structure_id = h.secondary_structure_id
              AND c.structure_type = 'C'
              AND e.structure_type = 'E'
              AND h.structure_type = 'H'
              AND c.percentage between $$min_coil$$ and $$max_coil$$
              AND e.percentage between $$min_strand$$ and $$max_strand$$
              AND h.percentage between $$min_helix$$ and $$max_helix$$
              AND s.taxon_id IN ($$organism$$)
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByInterproDomain"
              isCacheable="true">
        <paramRef ref="params.domain_database"/>
        <paramRef ref="params.domain_accession"/>
        <paramRef ref="params.organism"/>
        <!--paramRef ref="params.e_value"/-->
        <column name="source_id"/>
        <column name="e_value"/>
        <sql>
            <![CDATA[
            SELECT gf.source_id,avg(df.e_value) as e_value
            FROM dots.DomainFeature df,dots.translatedaasequence tas,
                 dots.genefeature gf, dots.transcript t, dots.TranslatedAAFeature taf,
                 dots.DbRefAaFeature draf, sres.DbRef dr
            WHERE tas.aa_sequence_id = df.aa_sequence_id
              AND df.aa_feature_id = draf.aa_feature_id
              AND draf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = $$domain_database$$
              AND dr.primary_identifier
                  = substr('$$domain_accession$$', 1, instr('$$domain_accession$$'||':', ':')-1)
              AND tas.taxon_id IN ($$organism$$)
              AND tas.aa_sequence_id = taf.aa_sequence_id
              AND taf.na_feature_id = t.na_feature_id
              AND gf.na_feature_id = t.parent_id
              GROUP BY gf.source_id
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGametocyteExpression"
              isCacheable="true">
        <paramRef ref="params.day_and_strain"/>
        <paramRef ref="params.min_expression_percentile" default="80"/>
        <paramRef ref="params.max_expression_percentile" default="100"/>
        <paramRef ref="params.pf_organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT p.source_id
            FROM apidb.profile p, apidb.profileElementName pen,
                 apidb.profileElement pe
            WHERE pe.value BETWEEN $$min_expression_percentile$$ / 100
                               AND $$max_expression_percentile$$ / 100
              AND pen.profile_element_name_id IN ($$day_and_strain$$)
              AND pen.profile_set_id = p.profile_set_id
              AND p.profile_id = pe.profile_id
              AND pe.element_order = pen.element_order
            ORDER by p.source_id
            /* and don't forget $$pf_organism$$ */
            ]]>
       </sql>
    </sqlQuery>

    <!-- GeneFeatureIds.GenesByESTOverlap -->
    <sqlQuery name="GenesByESTOverlap" displayName="By EST Overlap" isCacheable='true'>
       <paramRef ref="params.organism"/>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <column name="source_id" />
       <column name="number_of_ests" />
       <sql>
            <![CDATA[
            SELECT gene as source_id,count(*) as number_of_ests
            FROM apidb.ESTALIGNMENTGENESUMMARY
            WHERE est_gene_overlap_length >= $$bp_overlap_gte$$
            AND is_consistent in ($$high_confidence_only$$)
            AND is_best_alignment in ($$best_alignment_only$$)
            AND percent_identity >= $$min_percent_identity$$
            AND percent_est_bases_aligned >= $$min_percent_est_aligned$$
            AND library_id in ($$libraryId$$)
            AND target_taxon_id in ($$organism$$)
            GROUP by gene
            ]]>
          </sql>
    </sqlQuery>

</querySet>

<!-- Querys that return sequence primary keys (for use in questions). -->
<querySet name="SequenceIds">

    <sqlQuery name="SequenceBySourceId" displayName="by Source ID" isCacheable="true">
        <paramRef ref="params.sequence"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT distinct source_id
            FROM dots.externalNaSequence
            WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$sequence$$',' ',''), '*', '%'))
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="SequencesByTaxon" displayName="by Source ID" isCacheable="true">
        <paramRef ref="params.organism_with_sequences"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT ens.source_id
                FROM dots.externalNaSequence ens, sres.SequenceOntology so
                WHERE ens.taxon_id IN (SELECT taxon_id FROM sres.taxon
                                       CONNECT BY parent_id = prior taxon_id
                                       START WITH taxon_id in ($$organism_with_sequences$$))
                  AND ens.sequence_ontology_id = so.sequence_ontology_id
                  AND (so.term_name = 'supercontig' OR so.term_name = 'contig')
                ORDER BY ens.source_id
            ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="SequencesBySimilarity" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="SequenceBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>       
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>
       
       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

</querySet>

<!-- Querys that return EST primary keys (for use in questions). -->
<querySet name="EstIds">

    <sqlQuery name="EstBySourceId" displayName="ID" isCacheable="true">
        <paramRef ref="idQueryParams.est_id"/>
        <column name="source_id"/>
        <sql>
          <![CDATA[
            SELECT est.accession AS source_id
            FROM dots.Est est
            WHERE LOWER(accession) LIKE LOWER(REPLACE(REPLACE('$$est_id$$',' ',''), '*', '%'))
          ]]>
    </sql>
    </sqlQuery>

    <sqlQuery name="EstsByLocation" displayName="Genomic Location" isCacheable="true">
        <paramRef ref="params.chromosome"/>
        <paramRef ref="params.genomicSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <paramRef ref="params.libraryId"/>
        <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="est_location"/>
        <sql>
            <![CDATA[
            SELECT accession as source_id,
                   apidb.tab_to_string(CAST(COLLECT(target_sequence_source_id || ':' || trim(to_char(target_start,'999,999,999')) || '-' || trim(to_char(target_end,'999,999,999')) || '(' || decode(is_reversed,0,'+',1,'-',null) || ')') AS apidb.varchartab), ', ') AS est_location
	    FROM  apidb.ESTALIGNMENTGENESUMMARY
            WHERE (target_sequence_source_id IN ($$chromosome$$)
                   OR lower(target_sequence_source_id) = lower('$$genomicSequence$$'))
            AND target_start >= $$start_point$$
            AND (target_end <= $$end_point$$ OR $$end_point$$ = 0)
            AND   is_consistent in ($$high_confidence_only$$)
            AND   is_best_alignment in ($$best_alignment_only$$)
            AND   percent_identity >= $$min_percent_identity$$
            AND   percent_est_bases_aligned >= $$min_percent_est_aligned$$
            AND   library_id in ($$libraryId$$)
	    GROUP BY accession
           ]]>
       </sql>
    </sqlQuery>

    <!-- EstIds.EstsByLibrary -->
    <sqlQuery name="EstsByLibrary" displayName="Library Name" isCacheable='true'>
        <paramRef ref="params.libraryId"/>
        <column name="source_id" />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT enas.source_id
            FROM dots.externalnasequence enas, dots.est e
            WHERE enas.na_sequence_id = e.na_sequence_id
            AND e.library_id in ($$libraryId$$)
           ]]>
       </sql>
    </sqlQuery>

    <!-- EstIds.EstsWithGeneOverlap -->
    <sqlQuery name="EstsWithGeneOverlap" displayName="ESTs that overlap genes" isCacheable='true'>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte"/>
       <paramRef ref="params.inNotIn"/>
       <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <column name="source_id" />
       <column name="est_locations" />
       <column name="genes" />
        <sql>
            <![CDATA[
              SELECT accession as source_id,
                  apidb.tab_to_string(CAST(COLLECT(target_sequence_source_id || ':' || trim(to_char(target_start,'999,999,999')) || '-' || trim(to_char(target_end,'999,999,999')) || '(' || decode(is_reversed,0,'+',1,'-',null) || ')') AS apidb.varchartab), ', ') AS est_locations,
                  apidb.tab_to_string(CAST(COLLECT(gene) AS apidb.varchartab), ', ') as genes
	    FROM (
                SELECT accession,gene ,target_start,target_end, is_reversed, target_sequence_source_id
                FROM apidb.ESTALIGNMENTGENESUMMARY
                WHERE is_consistent in ($$high_confidence_only$$)
                AND is_best_alignment in ($$best_alignment_only$$)
                AND percent_identity >= $$min_percent_identity$$
                AND percent_est_bases_aligned >= $$min_percent_est_aligned$$
                AND library_id in ($$libraryId$$)
             $$inNotIn$$                    
               SELECT i.accession,i.gene ,i.target_start,i.target_end, i.is_reversed, i.target_sequence_source_id
                FROM apidb.ESTALIGNMENTGENESUMMARY i
                WHERE i.est_gene_overlap_length >= $$bp_overlap_gte$$
                AND is_consistent in ($$high_confidence_only$$)
                AND is_best_alignment in ($$best_alignment_only$$)
                AND percent_identity >= $$min_percent_identity$$
                AND percent_est_bases_aligned >= $$min_percent_est_aligned$$
                AND library_id in ($$libraryId$$)
            )          
            GROUP BY accession
           ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="EstsBySimilarity" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="EstBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="GeneBlastDbParams.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

    <wsQuery name="UnifiedBlast" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

</querySet>

<!-- Querys that return ORF primary keys (for use in questions). -->
<querySet name="OrfIds">

    <sqlQuery name="OrfByOrfId" displayName="ID" isCacheable="true">
        <paramRef ref="idQueryParams.orf_id"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT m.source_id
                FROM dots.Miscellaneous m, sres.sequenceontology so
                WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$orf_id$$',' ',''), '*', '%'))
                AND m.sequence_ontology_id= so.sequence_ontology_id
                AND so.term_name='ORF'
            ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="OrfsByLocation" displayName="ORFs by  genomic location" isCacheable="true">
        <paramRef ref="params.pfGenomicSequenceOrNot"/>
        <paramRef ref="params.genomicSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <column name="source_id"/>
        <column name="orf_location"/>
        <sql>
            <![CDATA[
	    SELECT t.source_id,
                  enas.source_id || ':' || trim(to_char(nal.start_min,'999,999,999')) || '-' || trim(to_char(nal.end_max,'999,999,999')) || '(' || decode(nal.is_reversed,0,'+',1,'-',null) || ')' as orf_location
	    FROM  dots.externalNASequence enas,
	          dots.nafeature t,
	          sres.sequenceontology so,
	          dots.nalocation nal
	    WHERE enas.na_sequence_id = t.na_sequence_id
	      AND t.sequence_ontology_id = so.sequence_ontology_id
	      AND so.term_name = 'ORF'
	      AND t.na_feature_id = nal.na_feature_id
	      AND (enas.source_id = $$pfGenomicSequenceOrNot$$
                   OR lower(enas.source_id) = lower('$$genomicSequence$$'))
              AND nal.end_max >= $$start_point$$ 
              AND (nal.start_min <= $$end_point$$ OR $$end_point$$ = 0)
           ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="OrfsByMotifSearch" displayName="Motif Search"
             processName="org.apidb.apicomplexa.wsfplugin.motifsearch.MotifSearchPlugin">
       <paramRef ref="params.Expression"/>
       <paramRef ref="OrfMotifSearchParams.Dataset"/>
       <wsColumn name="source_id" width="60" wsName="GeneID"/>
       <wsColumn name="Locations" width="3999"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="3999"/>
    </wsQuery>

    <wsQuery name="OrfsBySimilarity" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="OrfBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="60" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

</querySet>


<!-- Queries that retrieve attributes or tables for data dumping records -->

<querySet name="DataDumpQueries">

    <sqlQuery name="GenesByExternalDatabase" isCacheable="true">
        <paramRef ref="params.extDbName"/>
        <paramRef ref="params.extDbRlsVer"/>
        <column name="source_id"/>
        <sql>
                SELECT DISTINCT gf.source_id AS source_id
                FROM DoTS.GeneFeature gf, SRes.ExternalDatabase ed,
                     SRes.ExternalDatabaseRelease edr
                WHERE gf.external_database_release_id = edr.external_database_release_id 
                AND edr.version = '$$extDbRlsVer$$'
                AND ed.name = '$$extDbName$$'
                AND edr.external_database_id = ed.external_database_id
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffQuery" isCacheable="true">
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
                SELECT DISTINCT gf.source_id AS source_id
                FROM DoTS.GeneFeature gf
                WHERE gf.na_sequence_id in
                      (SELECT na_sequence_id
                       FROM dots.ExternalNaSequence ens
                       WHERE ens.taxon_id IN ($$organism$$))
                  AND gf.source_id IS NOT NULL
            ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffQuery" isCacheable="true">
        <paramRef ref="params.organism_with_sequences"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
                SELECT DISTINCT ens.source_id AS source_id
                FROM dots.ExternalNaSequence ens, sres.SequenceOntology so
                WHERE ens.taxon_id IN (SELECT taxon_id FROM sres.taxon
                                       CONNECT BY parent_id = prior taxon_id
                                       START WITH taxon_id in ($$organism_with_sequences$$))
                  AND ens.sequence_ontology_id = so.sequence_ontology_id
                  AND (so.term_name = 'supercontig' OR so.term_name = 'contig')
            ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffAttrs">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <sql>
            select gf.source_id,
                   ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'gene' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   gf.source_id as gff_attr_id,
                   gf.source_id as gff_attr_name,
                   gf.product as gff_attr_description,
                   gf.source_id as gff_attr_locus_tag,
                   (greatest(nl.start_min, nl.end_max) - least(nl.start_min, nl.end_max) + 1) as gff_attr_size
            from DoTS.GeneFeature gf, 
                 DoTS.NaLocation nl, 
                 DoTS.ExternalNaSequence ens
            where gf.source_id = '$$primaryKey$$'
                  and gf.na_feature_id = nl.na_feature_id
                  and gf.na_sequence_id = ens.na_sequence_id
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffDbxrefs" isCacheable="false">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_dbxref"/>
        <sql>
/*          SELECT gts.source_id,
                   gts.go_id AS gff_dbxref
            FROM apidb.GoTermSummary gts
            WHERE gts.source_id = '$$primaryKey$$'
           UNION
*/          SELECT gf.source_id,
                   'taxon:' || t.ncbi_tax_id AS gff_dbxref
            FROM dots.GeneFeature gf, dots.NaSequence ns, sres.Taxon t
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id = t.taxon_id
           UNION
            SELECT gf.source_id,
                   'EC:' || ec.ec_number AS gff_dbxref
            FROM dots.GeneFeature gf,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
           UNION
/*            SELECT gf.source_id, so.so_id AS gff_dbxref
            FROM dots.GeneFeature gf, sres.SequenceOntology so
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.sequence_ontology_id = so.sequence_ontology_id
           UNION
*/            SELECT gf.source_id,
                   'NCBI_gi:' || dr.secondary_identifier AS gff_dbxref
            FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = drnf.na_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                    = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
                              'NRDB_ref_dbXRefBySeqIdentity',
                              'NRDB_sp_dbXRefBySeqIdentity')
           UNION
            SELECT gf.source_id,
                   'PDB:' || dr.primary_identifier AS gff_dbxref
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
           UNION
            SELECT DISTINCT gf.source_id,
                   'Sanger:' || gf.source_id AS gff_dbxref
            FROM dots.GeneFeature gf, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name like 'Sanger%'
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneRnas" displayName="Constituent RNAs">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_transcript_sequence"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   decode(so.term_name,
                          'protein_coding', 'mRNA',
                          'rRNA_encoding', 'rRNA',
                          'snRNA_encoding', 'snRNA',
                          'tRNA_encoding', 'tRNA',
                          'non_protein_coding', 'transcript',
                          so.term_name) as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   gf.source_id as gff_attr_parent,
                   'rna_' || rna.source_id as gff_attr_id,
                   rna.source_id as gff_attr_name,
                   rna.product as gff_attr_description,
                   rna.source_id as gff_attr_locus_tag,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size,
                   s.sequence as gff_transcript_sequence
            from DoTS.GeneFeature gf,
                 DoTS.Transcript rna,
                 DoTS.NaLocation nl,
                 DoTS.ExternalNaSequence ens,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr,
                 sres.SequenceOntology so,
                 dots.splicednasequence s
            where gf.source_id = '$$primaryKey$$'
                and gf.na_feature_id = rna.parent_id
                and rna.na_feature_id = nl.na_feature_id
                and gf.na_sequence_id = ens.na_sequence_id
                and rna.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                and gf.sequence_ontology_id = so.sequence_ontology_id
                and s.na_sequence_id = rna.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneCdss" displayName="Constituent CDSs">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_coding_sequence"/>
        <column name="gff_protein_sequence"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'CDS' as gff_type,
                   least(tf.translation_start, tf.translation_stop) as gff_fstart,
                   greatest(tf.translation_start, tf.translation_stop) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   mod(tf.translation_start, 3) as gff_phase,
                   rna.source_id as gff_attr_parent,
                   'cds_' || tf.source_id as gff_attr_id,
                   tf.source_id as gff_attr_name,
                   gf.product as gff_attr_description,
                   tf.source_id as gff_attr_locus_tag,
                   (tf.translation_stop - tf.translation_start + 1) as gff_attr_size,
                   SUBSTR(s.sequence,tf.translation_start,(tf.translation_stop - tf.translation_start + 1)) as gff_coding_sequence,
                   tas.sequence as gff_protein_sequence
              from dots.genefeature gf, 
                   dots.transcript rna,
                   dots.splicednasequence s, 
                   dots.TranslatedAaFeature tf,
                   dots.TranslatedAaSequence tas,
                   dots.ExternalNaSequence ens, 
                   dots.NaLocation nl
              where gf.source_id = '$$primaryKey$$'
                and rna.parent_id = gf.na_feature_id
                and s.na_sequence_id = rna.na_sequence_id
                and rna.na_feature_id = tf.na_feature_id
                AND tf.aa_sequence_id = tas.aa_sequence_id
                and gf.na_sequence_id = ens.na_sequence_id
                and gf.na_feature_id = nl.na_feature_id
              order by tf.translation_start asc, tf.translation_stop asc
        </sql>
    </sqlQuery>


    <sqlQuery name="GeneExons" displayName="Constituent exons">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'exon' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   decode(ef.reading_frame, NULL, '.', ef.reading_frame) as gff_phase,
                   rna.source_id as gff_attr_parent,
                   'exon_' || ef.source_id as gff_attr_id,
                   ef.name as gff_attr_name,
                   ef.name as gff_attr_description,
                   ef.source_id as gff_attr_locus_tag,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size
            from DoTS.GeneFeature gf, 
                 DoTS.Transcript rna, 
                 DoTS.ExonFeature ef,
                 DoTS.NaLocation nl, 
                 DoTS.ExternalNaSequence ens,
                 dots.RnaFeatureExon rfe
            where gf.source_id = '$$primaryKey$$'
            and gf.na_feature_id = rna.parent_id
            and rna.na_feature_id = rfe.rna_feature_id
            and ef.na_feature_id = rfe.exon_feature_id
            and ef.na_feature_id = nl.na_feature_id
            and gf.na_sequence_id = ens.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffAttrs" displayName="Chromosomes">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_molecule_type"/>
        <column name="gff_attr_organism_name"/>
        <column name="gff_attr_translation_table"/>
        <column name="gff_attr_topology"/>
        <column name="gff_attr_localization"/>
        <column name="gff_attr_size"/>
        <column name="gff_sequence"/>
        <sql>
            select ens.source_id,
                   ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'supercontig' as gff_type,
                   1 as gff_fstart,
                   ens.length as gff_fend,
                   '.' as gff_score,
                   '+' as gff_strand,
                   '.' as gff_phase,
                   ens.source_id as gff_attr_id,
                   ens.source_id as gff_attr_name,
                   ens.description as gff_attr_description,
                   ens.source_id as gff_attr_locus_tag,
                   'dsDNA' as gff_attr_molecule_type,
                   SUBSTR(tn.name, 1, INSTR(tn.name || '  ', ' ', 1, 2) - 1) as gff_attr_organism_name,
                   11 as gff_attr_translation_table,
                   'linear' as gff_attr_topology,
                   'nuclear' as gff_attr_localization,
                   ens.length as gff_attr_size,
                   ens.sequence as gff_sequence
            from DoTS.ExternalNaSequence ens,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr,
                 sres.taxon t,
                 sres.TaxonName tn
            where ens.source_id = '$$primaryKey$$'
              and ens.external_database_release_id = edr.external_database_release_id
              and edr.external_database_id = ed.external_database_id
              and ens.taxon_id = t.taxon_id
              and ens.taxon_id = tn.taxon_id
              and tn.name_class = 'scientific name'
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffDbxrefs" isCacheable="false">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_dbxref"/>
        <sql>
            SELECT ens.source_id,
                   'taxon:' || t.ncbi_tax_id AS gff_dbxref
            FROM dots.ExternalNaSequence ens, sres.Taxon t
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.taxon_id = t.taxon_id
/*           UNION
            SELECT ens.source_id, so.so_id AS gff_dbxref
            FROM dots.ExternalNaSequence ens, sres.SequenceOntology so
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.sequence_ontology_id = so.sequence_ontology_id
*/           UNION
            SELECT ens.source_id,
                   'GenBank:' || dr.primary_identifier AS thingie
            FROM dots.ExternalNaSequence ens, dots.dbrefNaSequence drns,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.na_sequence_id = drns.na_sequence_id
              AND drns.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'GenBank'
        </sql>
    </sqlQuery>

</querySet>


    <!-- *************** -->
    <!-- recordClassSets -->
    <!-- *************** -->

    <!--
    A "record" is an object that gathers together data about an entity in the
    database.  The entity is defined as data associated with a primary key,
    and data in the record is based on that key. The data comes in three forms:
    attributes, text attributes and tables.  An attribute is a single value
    that describes the entity, such as "size."  A text attribute is similar,
    but the value is created by defining a text string and optionally embedding
    into that string the values of other attributes.  A table is a value
    in the form of columns and rows, such as a table describing related
    publications.

    A record class is a template for creating records from a given primary key.
    It includes "attribute queries," "table queries" and "text attributes."

    An attribute query must have only one parameter, the primary key.  It must
    return exactly zero or one rows.  The columns in the query are interpreted
    as attributes of the record.

    A text attribute has a body of text with the values of other attributes
    optionally embedded in it.  The other attribute values are referred to
    as variables of the form "$$name_of_attribute$$".

    A table query must have only one parameter, the primary key.  It may
    return any number of rows (but typically not a huge number).  The result
    of the query is interpreted as being a table that

    A "record set" is a grouping of records. It is useful in organizing the
    model xml file.

    The full name of a record is is of the form "set_name.name."
    -->

	<recordClassSet name="UserCommentsRecordClasses">
        <recordClass idPrefix=""
          name="GeneCommentsClass" type="GeneComments">
          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="UserCommentTables.GeneComments">
		    <columnAttribute name="comment_id" displayName="Comment ID"/>
            <columnAttribute name="headline" displayName="Headline"/>
			<columnAttribute name="content" displayName="Comment"/>
			<columnAttribute name="location_string" displayName="Location(s)"/>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
            <columnAttribute name="project_name_version" displayName="Version"/>
            <columnAttribute name="review_status_id" displayName="Review Status"/>
          </table>
		</recordClass>

        <recordClass idPrefix=""
          name="SequenceCommentsClass" type="SequenceComments">
          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="UserCommentTables.SequenceComments">
		    <columnAttribute name="comment_id" displayName="Comment ID"/>
            <columnAttribute name="headline" displayName="Headline"/>
			<columnAttribute name="content" displayName="Comment"/>
			<columnAttribute name="location_string" displayName="Location(s)"/>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
            <columnAttribute name="project_name_version" displayName="Version"/>
            <columnAttribute name="review_status_id" displayName="Review Status"/>
          </table>
		</recordClass>

	</recordClassSet>

    <recordClassSet name="GeneRecordClasses">

        <recordClass idPrefix=""
          name="GeneRecordClass" type="Gene"
          attributeOrdering="dnaContext"
          aliasQueryRef="GeneAttributes.GeneAlias">

          <reporter name="tabular" displayName="Summary - tab delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="gff3" displayName="Summary - GFF3"
                    implementation="org.apidb.apicommon.model.report.Gff3Reporter"/>
          <reporter name="fullRecord" displayName="Detailed - text"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
          <reporter name="srt" displayName="Sequence - configurable FASTA"
                    implementation=""/>

          <attributeQueryRef ref="GeneAttributes.Bfmv">
            <columnAttribute displayName="Data Source" name="external_db_name"/>
            <columnAttribute displayName="Genomic Sequence ID" name="sequence_id"/>
             <textAttribute name="location_text" displayName="Genomic Location">
              <text>
                  <![CDATA[
                  $$sequence_id$$: $$start_min_text$$ - $$end_max_text$$ ($$strand_plus_minus$$)
                  ]]>
              </text>
            </textAttribute>

            <columnAttribute name="strand" displayName="Gene Strand" internal="false"/>
            <columnAttribute displayName="Gene Type" name="gene_type" internal="false"/>
            <columnAttribute name="exon_count" displayName="# Exons" internal="false"
                             inReportMaker="true"/>
            <columnAttribute displayName="Transcript Length" name="transcript_length" internal="false"/>
            <columnAttribute displayName="CDS Length" name="cds_length" internal="false"/>
            <columnAttribute name="product" displayName="Product Description" internal="false"/>
            <columnAttribute displayName="Protein Length" name="protein_length" internal="false"/>
            <columnAttribute displayName="# TM Domains" internal="false"
                             inReportMaker="true" name="tm_count" align="center"/>
            <columnAttribute displayName="Molecular Weight" name="molecular_weight" align="center"/>
            <columnAttribute name="isoelectric_point" displayName="Isoelectric Point" align="center"/>

            <columnAttribute name="ec_numbers_string" displayName="EC Numbers"/>
            <columnAttribute name="ann_go_function" displayName="Annotated GO Function"/>
            <columnAttribute name="ann_go_process" displayName="Annotated GO Process"/>
            <columnAttribute name="ann_go_component" displayName="Annotated GO Component"/>
            <columnAttribute name="pred_go_function" displayName="Predicted GO Function"/>
            <columnAttribute name="pred_go_process" displayName="Predicted GO Process"/>
            <columnAttribute name="pred_go_component" displayName="Predicted GO Component"/>
            <columnAttribute name="der_min_level" displayName="Pf-iRBC min expr ratio (GS array)" align="center"/>
            <columnAttribute name="der_min_timing" displayName="Pf-iRBC min expr time (GS array)" align="center"/>
            <columnAttribute name="der_max_level" displayName="Pf-iRBC max expr ratio (GS array)" align="center"/>
            <columnAttribute name="der_max_pct" displayName="Pf-iRBC max expr %ile (GS array)" align="center"/>
            <columnAttribute name="der_max_timing" displayName="Pf-iRBC max expr time (GS array)" align="center"/>
            <columnAttribute name="winz_min_level" displayName="Pf-iRBC+Spz+Gam min expr level (Affy)" align="center"/>
            <columnAttribute name="winz_min_timing" displayName="Pf-iRBC+Spz+Gam min expr stage (Affy)" align="center"/>
            <columnAttribute name="winz_max_level" displayName="Pf-iRBC+Spz+Gam max expr level (Affy)" align="center"/>
            <columnAttribute name="winz_max_pct" displayName="Pf-iRBC+Spz+Gam max expr %ile (Affy)" align="center"/>
            <columnAttribute name="winz_max_timing" displayName="Pf-iRBC+Spz+Gam max expr stage (Affy)" align="center"/>

            <textAttribute name="derisiOverlayPct" displayName="Pf-iRBC expr profile graph (GS array)"
                           inReportMaker="false" truncateTo="100000" sortable="false">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=DeRisiOverlay::Ver1&id=$$primaryKey$$&model=plasmo&fmt=png&thumb=1&vp=lgr,LEGEND" alt=""/>
                ]]>
            </text>
         </textAttribute>

            <textAttribute name="winzelerPct" displayName="Pf-iRBC+Spz+Gam expr profile graph (Affy)"
                        inReportMaker="false" truncateTo="100000" sortable="false">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Winzeler::Cc&id=$$primaryKey$$&model=plasmo&fmt=png&thumb=1&vp=pct" alt=""/>
                ]]>
            </text>
         </textAttribute>

         <textAttribute name="watersPct" displayName="Pb-iRBC expr profile graph (GS array)"
                        inReportMaker="false" truncateTo="100000" sortable="false">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Waters::Ver1&id=$$primaryKey$$&model=plasmo&fmt=png&thumb=1&vp=pct" alt=""/>
                ]]>
            </text>
         </textAttribute>

            <!-- internal=true atts -->
            <columnAttribute name="min_molecular_weight" displayName="Min Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="max_molecular_weight" displayName="Max Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="hydropathicity_gravy_score" displayName="Hydropathicity Gravy Score" internal="true" inReportMaker="false"/>
            <columnAttribute name="aromaticity_score" displayName="Aromaticity" internal="true" inReportMaker="false"/>
            <columnAttribute name="species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Strand" name="strand_plus_minus" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_start" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_end" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism_full" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism" internal="false" inReportMaker="true"/>
            <columnAttribute displayName="genus_species" name="genus_species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Taxonomy Id" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="PlasmoCYC DB Name" name="plasmocyc_db" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="PlasmoCYC Gene ID" name="plasmocyc_gene_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="External DB Version" name="external_db_version" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Id" name="so_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Name" name="so_term_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Definition" internal="true" name="so_term_definition" inReportMaker="false"/>
            <columnAttribute displayName="Ontology Name" name="ontology_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Version" name="so_version" internal="true" inReportMaker="false"/>
            <columnAttribute name="anticodon" displayName="Anticodon" internal="true" inReportMaker="false"/>
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.ExpressionGraphs">
            <columnAttribute name="graph_derisi_winzeler" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_winzeler" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_3d7" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_hb3" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_dd2" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_waters" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_gametocyte" internal="true"
                             inReportMaker="false"/>
            <columnAttribute name="graph_cowman" internal="true"
                             inReportMaker="false"/>
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.ProteinSequence">
            <columnAttribute displayName="Predicted Protein Sequence"
                             name="protein_sequence" internal="true"/>
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.TranscriptSequence">
            <columnAttribute displayName="Predicted RNA/mRNA Sequence (introns spliced out)"
                             name="transcript_sequence" internal="true" inReportMaker="true"/>
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.CDS">
            <columnAttribute displayName="Coding Sequence" internal="true"
                    name="cds"/>
          </attributeQueryRef>

         
          <table name="SNPs"
                 displayName="SNPs Summary"
                 queryRef="GeneTables.SNPs">
            <columnAttribute internal="true" name="strain_a_query"/>
            <columnAttribute internal="true" name="strain_b_query"/>
            <columnAttribute internal="true" name="strain_a_disp"/>
            <columnAttribute internal="true" name="strain_b_disp"/>
            <columnAttribute internal="true" name="gene_source_id"/>
            <linkAttribute name="LinkForStrainComparison"
                           displayName="Strains"
                           visible="$$strain_a_disp$$ vs $$strain_b_disp$$">
                 <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=SnpQuestions.SnpsByGeneId&ds_gene_ids_type=DATA&ds_gene_ids_data=$$gene_source_id$$&myMultiProp%28snp_strain_a%29=$$strain_a_query$$&myMultiProp%28snp_strain_m%29=$$strain_b_query$$&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>


            <columnAttribute displayName="CDS SNP Density"
                             name="cds_snp_density"/>
            <columnAttribute displayName="Non-synonymous"
                             name="num_non_synonymous"/>
            <columnAttribute displayName="Synonymous" name="num_synonymous"/>
            <columnAttribute displayName="Nonsense" name="num_nonsense"/>
            <columnAttribute displayName="Non-coding" name="num_non_coding"/>
            <columnAttribute displayName="Total" name="num_total"/>
          </table>

          <table name="Notes"
                 displayName="Notes"
                 queryRef="GeneTables.Notes">
            <columnAttribute displayName="Note" name="comment_string"/>
          </table>

          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="GeneTables.UserComments">
		    <columnAttribute name="comment_id" internal="true"/>
		    <columnAttribute name="stable_id" internal="true"/>
            <columnAttribute name="headline" internal="true"/>
			<linkAttribute name="headline_link"
							displayName="Headline"
							visible="$$headline$$">
				<url>
				<![CDATA[showRecord.do?name=UserCommentsRecordClasses.GeneCommentsClass&project_id=&primary_key=$$stable_id$$#$$comment_id$$]]>
				</url>
			</linkAttribute>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
          </table>

          <table name="EcNumber"
                 displayName="EC Number"
                 queryRef="GeneTables.EcNumber">
            <columnAttribute name="ec_number" internal="true"/>
            <linkAttribute name="ec_number_link"
                           displayName="EC Number"
                           visible="$$ec_number$$">
                 <url>
                    <![CDATA[$$expasy_url$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="Source" name="source"/>
            <columnAttribute displayName="EC Description"
                             name="ec_description"/>
            <columnAttribute name="expasy_url" internal="true"/>
          </table>

          <table name="MassSpec" displayName="Mass Spec.-based Expression Evidence"
                 queryRef="GeneTables.MassSpec">
            <columnAttribute name="developmental_stage" displayName="Lifecycle Stage"/>
            <columnAttribute name="algorithm" displayName="Algorithm"/>
            <columnAttribute name="seq_coverage" displayName="Coverage"/>
            <columnAttribute name="number_of_spans" displayName="Spans"/>
            <columnAttribute name="sequence_count" displayName="Sequences"/>
            <columnAttribute name="spectrum_count" displayName="Spectra"/>
          </table>

          <table name="GoTerms"
                 displayName="GO Terms"
                 queryRef="GeneTables.GoTerms">
            <columnAttribute displayName="Is Not" name="is_not"/>
            <columnAttribute name="go_id" internal="true"/>
            <columnAttribute displayName="Ontology" name="ontology"/>
            <linkAttribute name="go_id_link" displayName="GO ID" visible="$$go_id$$">
                 <url>
                    <![CDATA[http://www.godatabase.org/cgi-bin/amigo/go.cgi?action=query&view=query&query=+$$go_id$$&search_constraint=terms]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="GO Term Name" name="go_term_name"/>
            <columnAttribute displayName="Source" name="source"/>
            <columnAttribute name="evidence_code" internal="true"/>
            <columnAttribute name="lowercase_evidence_code" internal="true"/>
            <linkAttribute name="evidence_code_link"
                           displayName="Evidence Code"
                           visible="$$evidence_code$$">
                 <url>
                    <![CDATA[http://www.geneontology.org/GO.evidence.shtml#$$lowercase_evidence_code$$]]>
                 </url>
            </linkAttribute>
          </table>

          <table name="Aliases"
                 displayName="Aliases"
                 queryRef="GeneTables.Aliases">
            <columnAttribute displayName="Alias" name="alias"/>
          </table>

<!--
          <table name="InteractionsAsBait"
                 displayName="Interactions As Bait"
                 queryRef="GeneTables.InteractionsAsBait">
            <linkAttribute name="prey_link" displayName="Prey Gene"
                           visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="source_id" internal="true"/>
            <columnAttribute name="bait_start" displayName="Bait Start"/>
            <columnAttribute name="bait_end" displayName="Bait End"/>
            <columnAttribute name="prey_start" displayName="Prey Start"/>
            <columnAttribute name="prey_end" displayName="Prey End"/>
            <columnAttribute name="times_observed"
                    displayName="# of Observations"/>
            <columnAttribute name="number_of_searches"
                    displayName="# of Searches"/>
            <columnAttribute name="bait_number_of_preys"
                    displayName="# of Baits"/>
          </table>
-->

<!--
          <table name="InteractionsAsPrey"
                 displayName="Interactions As Prey"
                 queryRef="GeneTables.InteractionsAsPrey">
            <linkAttribute name="bait_link" displayName="Bait Gene"
                           visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="source_id" internal="true"/>
            <columnAttribute name="bait_start" displayName="Bait Start"/>
            <columnAttribute name="bait_end" displayName="Bait End"/>
            <columnAttribute name="prey_start" displayName="Prey Start"/>
            <columnAttribute name="prey_end" displayName="Prey End"/>
            <columnAttribute name="times_observed"
                    displayName="# of Observations"/>
            <columnAttribute name="number_of_searches"
                    displayName="# of Searches"/>
            <columnAttribute name="prey_number_of_baits"
                    displayName="# of Preys"/>
          </table>
-->
          <table name="Y2hInteractions"
                 displayName="Y2H Interactions"
                 queryRef="GeneTables.Y2hInteractions">
              <columnAttribute name="source_id" internal="true"/>
              <linkAttribute name="geneLink" displayName="Gene"
                       visible="$$source_id$$">
                   <url>
                      <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$source_id$$]]>
                   </url>
              </linkAttribute>
              <columnAttribute name="bait_start" displayName="Bait Start"
                               internal="false"/>
              <columnAttribute name="bait_end" displayName="Bait End"
                               internal="false"/>
              <columnAttribute name="prey_start" displayName="Prey Start"
                               internal="false"/>
              <columnAttribute name="prey_end" displayName="Prey End"
                               internal="false"/>
              <columnAttribute name="times_observed" internal="false"
                               displayName="Times Observed"/>
              <columnAttribute name="number_of_searches" internal="false"
                               displayName="Times Reproduced"/>
              <columnAttribute name="prey_number_of_baits" internal="false"
                               displayName="Baits Interacting with Found Gene"/>
              <columnAttribute name="bait_number_of_preys" internal="false"
                               displayName="Prey Interacting with Found Gene"/>
              <columnAttribute name="bait_or_prey" internal="false"
                               displayName="Query Gene Was:"/>
          </table>

          <!-- tableQueryRef ref="GeneTables.PhyleticProfiles"/ -->

          <table name="Orthologs"
                 displayName="Paralogs and Plasmodium Orthologs"
                 queryRef="GeneTables.Orthologs">
            <columnAttribute name="source_id" internal="true"/>
            <linkAttribute name="gene" displayName="Gene" visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="Species" name="species"/>
            <columnAttribute displayName="Product" name="product"/>
          </table>

<!--
          <table name="Genbank"
                 displayName="GenBank"
                 queryRef="GeneTables.Genbank">
            <columnAttribute name="genbank_accession" internal="true"/>
            <linkAttribute name="gene" displayName="Accession Number"
                        visible="$$genbank_accession$$">
                 <url>
                    <![CDATA[http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val=$$genbank_accession$$]]>
                 </url>
            </linkAttribute>
          </table>
-->

          <table name="MetabolicPathways"
                 displayName="Metabolic Pathways"
                 queryRef="GeneTables.MetabolicPathways">
            <columnAttribute name="pathway_id" internal="true"/>
            <columnAttribute name="pathway_name" internal="true"/>
            <linkAttribute name="pathway" displayName="Pathway"
                        visible="$$pathway_name$$">
                 <url>
                    <![CDATA[http://sites.huji.ac.il/malaria/maps/$$pathway_id$$.html]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="activity"/>
          </table>

          <table name="ArrayElements"
                 displayName="Mapped Array Elements"
                 queryRef="GeneTables.ArrayElements">
            <columnAttribute name="array_source_id" internal="true"/>
            <columnAttribute name="array_provider" displayName="Provider"
                             internal="false"/>
            <linkAttribute name="element_link" displayName="Array Element"
                        visible="$$array_source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=ArrayElementRecordClasses.ArrayElementRecordClass&primary_key=$$array_source_id$$]]>
                 </url>
            </linkAttribute>
          </table>

          <table name="TwoChannelDiffExpr"
                 displayName="Two Channel Differential Expression"
                 queryRef="GeneTables.TwoChannelDifferentialExpression">
            <columnAttribute name="studyName" displayName="Study"/>
            <columnAttribute name="fold_change" displayName="Fold change"/>
            <columnAttribute name="confidence" displayName="Confidence"/>
          </table>

          <table name="ProteinExpression"
                 displayName="Protein Expression"
                 queryRef="GeneTables.ProteinExpression">
            <columnAttribute name="profile_element" displayName="Life Cycle Stage"/>
            <columnAttribute name="element_value" displayName="Observed?"/>
          </table>

          <table name="Mr4Reagents"
                 displayName="MR4 Reagents"
                 queryRef="GeneTables.Mr4Reagents">
            <columnAttribute name="atcc_number" internal="true"/>
            <linkAttribute name="atcc_link" displayName="ATCC Number"
                        visible="$$atcc_number$$">
                 <url>
                    <![CDATA[http://google.com/search?q=$$atcc_number$$+site%3Amr4.org&btnI=I]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="reagent_type" displayName="Reagent Type"/>
            <columnAttribute name="remark" displayName="Remark"/>
          </table>

          <table name="ProteinDatabase"
                 displayName="Protein Linkouts"
                 queryRef="GeneTables.ProteinDatabase">
            <columnAttribute name="dataset" displayName="Database"/>
            <columnAttribute name="accession" internal="true"/>
            <columnAttribute name="gi" internal="true"/>
            <columnAttribute name="accession_url" internal="true"/>
            <columnAttribute name="gi_url" internal="true"/>
            <linkAttribute name="accession_link" displayName="Accession"
                        visible="$$accession$$">
                 <url>$$accession_url$$</url>
            </linkAttribute>
            <linkAttribute name="gi_link" displayName="GI"
                        visible="$$gi$$">
                 <url>$$gi_url$$</url>
            </linkAttribute>
          </table>

          <table name="3dPreds"
                 displayName="3D Structure Predictions"
                 queryRef="GeneTables.3dPreds">
            <columnAttribute name="search_term" internal="true"/>
            <columnAttribute name="pdb_template" internal="true"/>
            <linkAttribute name="icgeb_link" displayName="3D Structure Predictions From ICGEB"
                        visible="$$search_term$$-$$pdb_template$$">
                 <url>
                     http://bioinfo.icgeb.res.in/codes/model_simple.php?search_term=$$search_term$$
                 </url>
            </linkAttribute>
            <linkAttribute name="pdb_link" displayName="PDB Template"
                        visible="$$pdb_template$$">
                 <url>http://www.rcsb.org/pdb/cgi/explore.cgi?pdbId=$$pdb_template$$</url>
            </linkAttribute>
          </table>

          <table name="PdbSimilarities"
                 displayName="Similarities to Protein Data Bank (PDB) Chains"
                 queryRef="GeneTables.PdbSimilarities">
            <columnAttribute name="pdb_chain" internal="true"/>
            <columnAttribute name="pdb_id" internal="true"/>
            <columnAttribute name="pvalue_mant" internal="true"/>
            <columnAttribute name="pvalue_exp" internal="true"/>
            <linkAttribute name="pdb_link" displayName="PDB Structure"
                        visible="$$pdb_chain$$">
                <url>
                    http://www.rcsb.org/pdb/cgi/explore.cgi?pdbId=$$pdb_id$$
                </url>
            </linkAttribute>
            <columnAttribute name="pdb_title" displayName="PDB Molecular Description"/>
            <columnAttribute name="taxon" internal="true"/>
            <textAttribute name="italicized_taxon" displayName="Taxon">
                <text>
                    <![CDATA[
                    <i>$$taxon$$</i>
                    ]]>
                </text>
            </textAttribute>
            <columnAttribute name="percent_plasmo_coverage" displayName="% of PlasmoDB Protein Covered"/>
            <columnAttribute name="percent_identity" displayName="% Identity"/>
            <textAttribute name="Pvalue" displayName="P-value">
                <text>
                    <![CDATA[
                    $$pvalue_mant$$ x 10<sup>$$pvalue_exp$$</sup>
                    ]]>
                </text>
            </textAttribute>
          </table>

          <table name="Epitopes"
                 displayName="Epitopes from IEDB"
                 queryRef="GeneTables.Epitopes">
            <columnAttribute name="iedb_id" internal="true"/>
            <linkAttribute name="iedb_link" displayName="Epitope"
                        visible="$$iedb_id$$">
                <url>
                    <![CDATA[
                    http://www.immuneepitope.org/httpQuery.do?dispatch=runquery&eid=$$iedb_id$$
                    ]]>
                </url>
            </linkAttribute>
            <columnAttribute name="sequence" displayName="Sequence"/>
            <columnAttribute name="location" displayName="Location on Protein"/>
             <columnAttribute name="name" displayName="Strain"/>
            <columnAttribute name="confidence" displayName="Confidence"/>
          </table>

         <linkAttribute name="Publications" visible="View"
                        internal="true" inReportMaker="false">
            <url>
               <![CDATA[
                     @PUBLICATIONS_URL@$$primaryKey$$
                     ]]>
            </url>
         </linkAttribute>

         <linkAttribute name="PlasmoCyc" visible="View"
                        internal="true" inReportMaker="false">
            <url>
               <![CDATA[
                     http://apicyc.apidb.org/$$plasmocyc_db$$/NEW-IMAGE?type=NIL&object=$$plasmocyc_gene_id$$
                     ]]>
            </url>
         </linkAttribute>

          <textAttribute name="overview" displayName="Overview"
                         internal="true" inReportMaker="false">
             <text>
                  <![CDATA[
                     $$organism$$ $$gene_type$$ on <a href="showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&project_id=&primary_key=$$sequence_id$$">$$sequence_id$$</a> from $$start_min_text$$ to $$end_max_text$$
                  ]]>
             </text>
         </textAttribute>

         <textAttribute name="dnaContext" displayName="Genomic Context" internal="true" inReportMaker="false">
            <text>
                <![CDATA[
                @CGI_URL@/gbrowse_img/plasmodb/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;embed=1;type=AnnotatedGenes+CombinedSNPs;options=CombinedSNPs+2;h_feat=$$primaryKey$$@thistle;width=600;hmap=dnaContextMap;base=@CGI_URL@/gbrowse
                ]]>
            </text>
         </textAttribute>

         

         <textAttribute name="gbrowseLink" internal="true" inReportMaker="false">
            <text>
                 <![CDATA[
                @CGI_URL@/gbrowse/plasmodb/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;enable=AnnotatedGenes;h_feat=$$primaryKey$$@thistle
                ]]>
            </text>
         </textAttribute>

         <textAttribute name="proteinFeatures" displayName="Protein Features"
                        internal="true" inReportMaker="false">
            <text>
                 <![CDATA[
                 @CGI_URL@/gbrowse_img/plasmodbaa/?name=$$primaryKey$$;embed=1;width=600;hmap=proteinFeatureMap
                 ]]>
            </text>
         </textAttribute>


            <!-- nestedRecord questionRef="NestedRecordQuestions.Protein"/ -->

          <!-- attributes for GFF3 report makers -->
          <attributeQueryRef ref="DataDumpQueries.GeneGffAttrs">
              <columnAttribute displayName="SeqId" name="gff_seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="gff_source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="gff_type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="gff_score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="gff_strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="gff_attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="gff_attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="description" name="gff_attr_description" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Locus Tag" name="gff_attr_locus_tag" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Size" name="gff_attr_size" internal="true" inReportMaker="false"/>
          </attributeQueryRef>

          <table name="gff_GeneDbxrefs"
                 displayName="Gene Exons"
                 queryRef="DataDumpQueries.GeneGffDbxrefs" inReportMaker="false">

              <columnAttribute displayName="Dbxref" name="gff_dbxref"/>
          </table>

          <table name="gff_GeneRnas"
                 displayName="Gene RNAs"
                 queryRef="DataDumpQueries.GeneRnas" internal="true" inReportMaker="false">
              <columnAttribute displayName="SeqId" name="gff_seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="gff_source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="gff_type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="gff_score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="gff_strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="gff_attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="gff_attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="description" name="gff_attr_description" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Locus Tag" name="gff_attr_locus_tag" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Size" name="gff_attr_size" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="gff_attr_parent" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Transcript Sequence" name="gff_transcript_sequence" internal="true" inReportMaker="false"/>
          </table>

          <table name="gff_GeneCdss"
                 displayName="Gene CDSs"
                 queryRef="DataDumpQueries.GeneCdss" inReportMaker="false">
              <columnAttribute displayName="SeqId" name="gff_seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="gff_source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="gff_type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="gff_score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="gff_strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="gff_attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="gff_attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="description" name="gff_attr_description" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Locus Tag" name="gff_attr_locus_tag" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Size" name="gff_attr_size" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="gff_attr_parent" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Coding Sequence" name="gff_coding_sequence" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Protein Sequence" name="gff_protein_sequence" internal="true" inReportMaker="false"/>
          </table>

          <table name="gff_GeneExons"
                 displayName="Gene Exons"
                 queryRef="DataDumpQueries.GeneExons" inReportMaker="false">

              <columnAttribute displayName="SeqId" name="gff_seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="gff_source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="gff_type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="gff_score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="gff_strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="gff_attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="gff_attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="description" name="gff_attr_description" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Locus Tag" name="gff_attr_locus_tag" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Size" name="gff_attr_size" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="gff_attr_parent" internal="true" inReportMaker="false"/>
          </table>


        </recordClass>

    </recordClassSet>

    <recordClassSet name="SequenceRecordClasses">

        <recordClass idPrefix=""
          name="SequenceRecordClass" type="Genomic Sequence"
          attributeOrdering="overview,otherInfo,dnaContext">

          <reporter name="tabular" displayName="Summary - Tab delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="gff3" displayName="Summary - GFF3"
                    implementation="org.apidb.apicommon.model.report.Gff3Reporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
          <reporter name="srt" displayName="FASTA"
                    implementation=""/>

        <attributeQueryRef ref="SequenceAttributes.Bfmv">
            <columnAttribute displayName="A Count" name="a_count"/>
            <columnAttribute displayName="C Count" name="c_count"/>
            <columnAttribute displayName="G Count" name="g_count"/>
            <columnAttribute displayName="T Count" name="t_count"/>
            <columnAttribute displayName="Other Count" name="other_count"/>
            <columnAttribute displayName="Length" name="length"/>
            <columnAttribute displayName="AT Percent" name="at_percent"/>
            <columnAttribute displayName="Organism" name="organism" internal="true"/>
            <columnAttribute displayName="Organism" name="formatted_organism" inReportMaker="false"/>
            <columnAttribute displayName="Description"
                             name="sequence_description"/>
            <columnAttribute name="genbank_accession" displayName="GenBank"
                             internal="true"/>
        </attributeQueryRef>

        <table name="Centromere"
               displayName="Centromere"
               queryRef="SequenceTables.Centromere">
            <columnAttribute name="start_min" displayName="Centromere Start"/>
            <columnAttribute name="end_max" displayName="Centromere End"/>
        </table>

        <table name="SequenceComments"
                 displayName="User Comments"
                 queryRef="SequenceTables.SequenceComments">
            <columnAttribute name="comment_id" internal="true"/>
            <columnAttribute name="stable_id" internal="true"/>
            <columnAttribute name="headline" internal="true"/>
			<linkAttribute name="headline_link"
							displayName="Headline"
							visible="$$headline$$">
				<url>
				<![CDATA[showRecord.do?name=UserCommentsRecordClasses.SequenceCommentsClass&project_id=&primary_key=$$stable_id$$#$$comment_id$$]]>
				</url>
			</linkAttribute>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
         </table>

         <linkAttribute name="GenbankRecord" visible="$$genbank_accession$$"
                        inReportMaker="false">
            <url>
               <![CDATA[http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&val=$$genbank_accession$$]]>
            </url>
         </linkAttribute>

          <textAttribute name="overview" displayName="Overview"
                         inReportMaker="false">
             <text>
                  <![CDATA[
                  Residue counts: <b>A</b>:$$a_count$$, <b>T</b>:$$t_count$$,
                  <b>C</b>:$$c_count$$, <b>G</b>:$$g_count$$,
                  <b>other</b>:$$other_count$$<br>
                  Length: $$length$$<br>
                  AT content: $$at_percent$$ percent
              ]]>
             </text>
         </textAttribute>

        <textAttribute name="dnaContext" displayName="Features"
                       inReportMaker="false">
           <text>
                <![CDATA[
                @CGI_URL@/gbrowse_img/plasmodb/?name=$$primaryKey$$;embed=1;type=GeneDensity;width=600;base=@CGI_URL@/gbrowse
                ]]>
           </text>
        </textAttribute>

        <textAttribute name="gbrowseLink" inReportMaker="false">
           <text>
                <![CDATA[
                @CGI_URL@/gbrowse/plasmodb/?name=$$primaryKey$$:1-$$length$$;enable=AnnotatedGenes
                ]]>
           </text>
        </textAttribute>

         <textAttribute name="otherInfo" displayName="Links to Other Web Pages" inReportMaker="false">
           <text>
                <![CDATA[
                    <!-- a href="@GENE_BY_CONTIG_URL@">Lookup Genes on this Contig</a><br -->
                    <form action="@CGI_URL@/contigSrt" method="get">
                    <table border="0" cellpadding="5" cellspacing="1">
                      <tr class="secondary3"><td>
                        <table border="0" cellpadding="0">
                        <tr><td colspan="2"><b>Retrieve this sequence</b>
                                <input name='ids' value='$$primaryKey$$' size='20' type='hidden' />
                            </td></tr>
                        <tr><td colspan="2">Nucleotide positions:
                                from <input type="text" name="start" value="1" maxlength="7" size="8"/>
                                to <input type="text" name="end" value="$$length$$" maxlength="7" size="8"/>
                            </td></tr>
                       <tr><td align="left"><input type="checkbox" name="revComp">Reverse complement</td>
                           <td align="right"><input type="submit" name='go' value='Go' /></td></tr>
                    </table>
                    </td></tr></table>
                    </form>
                ]]>
           </text>
        </textAttribute>

          <!-- attributes for GFF3 -->
          <attributeQueryRef ref="DataDumpQueries.SequenceGffAttrs">
              <columnAttribute displayName="SeqId" name="gff_seqid" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Data Source" name="gff_source" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Feature Type" name="gff_type" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Start" name="gff_fstart" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="End" name="gff_fend" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Score" name="gff_score" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Strand" name="gff_strand" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="ID" name="gff_attr_id" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Name" name="gff_attr_name" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="description" name="gff_attr_description" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Locus tag" name="gff_attr_locus_tag" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Molecule type" name="gff_attr_molecule_type" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Organism name" name="gff_attr_organism_name" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Translation table" name="gff_attr_translation_table" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Topology" name="gff_attr_topology" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Localization" name="gff_attr_localization" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Genome Size" name="gff_attr_size" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Sequence" name="gff_sequence" inReportMaker="false" internal="true"/>
          </attributeQueryRef>

          <table name="gff_SequenceDbxrefs"
                 displayName="Sequence DbXrefs"
                 queryRef="DataDumpQueries.SequenceGffDbxrefs" inReportMaker="false">
              <columnAttribute displayName="Dbxref" name="gff_dbxref"/>
          </table>

       </recordClass>
    </recordClassSet>

    <recordClassSet name="ArrayElementRecordClasses">
        <recordClass idPrefix="" name="ArrayElementRecordClass"
                     type="Array Element">

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

        <attributeQueryRef ref="ArrayElementAttributes.ProviderAndOrganism">
            <columnAttribute name="provider" displayName="Provider"
                             internal="false"/>
            <columnAttribute name="genus_species" displayName="genus_species"
                             internal="true"/>
            <columnAttribute name="organism" displayName="Organism"
                             internal="false"/>
            <columnAttribute name="sequence" displayName="Sequence"
                             internal="false"/>
        </attributeQueryRef>

        <table name="Genes"
               displayName="Mapped Genes"
               queryRef="ArrayElementTables.Genes">
            <columnAttribute name="source_id" internal="true"/>
            <linkAttribute name="gene" displayName="Gene" visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
        </table>

         <table name="GenomicLocations"
               displayName="Genomic Locations"
               queryRef="ArrayElementTables.GenomicLocations">
            <columnAttribute name="source_id" internal="true"/>
            <linkAttribute name="genomicSequence" displayName="Genomic Sequence" visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="min_subject_start" displayName="Start"/>
            <columnAttribute name="max_subject_end" displayName="End"/>
            <columnAttribute name="gbrowse_start" internal="true"/>
            <columnAttribute name="gbrowse_end" internal="true"/>
            <columnAttribute name="max_subject_end" displayName="End"/>
            <columnAttribute name="is_reversed" displayName="Reversed"/>
            <linkAttribute name="gbrowseLink" displayName="Genome Browser"
                           visible="view">
               <url>
                <![CDATA[
                @CGI_URL@/gbrowse/plasmodb/?name=$$source_id$$:$$gbrowse_start$$-$$gbrowse_end$$;enable=AnnotatedGenes
                ]]>
                </url>
            </linkAttribute>
        </table>

       </recordClass>
    </recordClassSet>


    <recordClassSet name="SnpRecordClasses">
        <recordClass idPrefix="" name="SnpRecordClass"
                     type="SNP">

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

        <attributeQueryRef ref="SnpAttributes.Bfmv">
              <columnAttribute displayName="Dataset" name="dataset"
                               internal="true" inReportMaker="true"/>
              <columnAttribute displayName="Dataset_hidden"
                               name="dataset_hidden" internal="true"
                               inReportMaker="false"/>
               <linkAttribute inReportMaker="false" displayName="SNP provider"
                              name="provider_link" visible="$$dataset$$">
                 <url>
                    <![CDATA[
                       showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=$$dataset_hidden$$&title=SNPs%20Summary
                        ]]>
                 </url>
              </linkAttribute>

              <columnAttribute displayName="Chromosome" name="seq_source_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Location" name="snp_location"/>
              <columnAttribute displayName="Position" name="start_min" internal="true"/>
              <columnAttribute displayName="Reference Strain" name="reference_strain" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference NA" name="reference_na" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference AA" name="reference_aa" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strains" name="strains" internal="false"/>
              <columnAttribute displayName="Left Flank" name="lflank"/>
              <columnAttribute displayName="3D7 Allele" name="allele" align="center"/>
              <columnAttribute displayName="Right Flank" name="rflank"/>
              <columnAttribute inReportMaker="true" displayName="Gene ID"
                               name="gene_source_id" internal="true"/>
               <linkAttribute inReportMaker="false" displayName="Gene ID"
                              name="linkedGeneId" visible="$$gene_source_id$$">
                 <url>
                    <![CDATA[
                       showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$gene_source_id$$
                        ]]>
                 </url>
              </linkAttribute>
              <columnAttribute displayName="Gene strand" name="gene_strand"/>
              <columnAttribute displayName="Coding" name="is_coding" align="center"/>
              <columnAttribute displayName="Position in CDS" name="position_in_CDS" align="center"/>
              <columnAttribute displayName="Position in protein" name="position_in_protein" align="center"/>
              <columnAttribute displayName="Non-synonymous" name="has_nonsynonymous_allele" align="center"/>
              <columnAttribute displayName="Strains (gene strand)" name="strains_gene_strand" internal="false" inReportMaker="true"/>
              <columnAttribute displayName="Left Flank (gene strand)" name="lflank_gene_strand"/>
              <columnAttribute displayName="3D7 Allele (gene strand)" name="allele_gene_strand" align="center"/>
              <columnAttribute displayName="Right Flank (gene strand)" name="rflank_gene_strand"/>
              <columnAttribute displayName="Major Allele Count" name="major_allele_count" align="center"/>
              <columnAttribute displayName="Minor Allele Count" name="minor_allele_count" align="center"/>
              <columnAttribute displayName="Major Allele" name="major_allele" align="center"/>
              <columnAttribute displayName="Minor Allele" name="minor_allele" align="center"/>
              <columnAttribute displayName="Major Product" name="major_product" align="center"/>
              <columnAttribute displayName="Minor Product" name="minor_product" align="center"/>
              <columnAttribute displayName="Organism" name="organism" internal="true" inReportMaker="true"/>
              <columnAttribute displayName="Organism" name="formatted_organism" inReportMaker="false" internal="false"/>
              <columnAttribute displayName="NCBI Taxon ID" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
        </attributeQueryRef>

         <textAttribute name="snp_overview" displayName="SNP Genomic Overview" inReportMaker="false" internal="true">
               <text>
                    <![CDATA[
                    <table>
                    <tr><td width="220"><b>Location:</b></td><td>$$snp_location$$</td></tr>
                    <tr><td width="220"><b>Reference:</b></td><td>Strain: $$reference_strain$$, Allele: $$reference_na$$ </td></tr>
                    <tr><td width="220"><b>Major Allele:</b></td><td>$$major_allele$$ ($$major_allele_count$$), Product: $$major_product$$ </td></tr>
                    <tr><td width="220"><b>Minor Allele:</b></td><td>$$minor_allele$$ ($$minor_allele_count$$), Product: $$minor_product$$ </td></tr>
		    <tr><td width="220"><b>Left Flank:</b></td><td><font class="fixed">$$lflank$$</font></td></tr>
		    <tr><td width="220"><b>$$reference_strain$$ Allele:</b></td><td> <font class="fixed">$$allele$$</font></td></tr>
		    <tr><td width="220"><b>Right Flank:</b></td><td><font class="fixed">$$rflank$$</font></td></tr>
                    <tr><td width="220"><b>Provider:</b></td><td><a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=$$dataset_hidden$$&title=SNPs%20Summary">$$dataset$$</a></td></tr>
                    </table>
                ]]>
               </text>
           </textAttribute>

           <textAttribute name="gene_context" displayName="Gene Context" inReportMaker="false" >
               <text>
                    <![CDATA[
                    <table>
                    <tr><td width="220"><b>Gene ID:</b></td><td><a href="showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$gene_source_id$$">$$gene_source_id$$</a></td></tr>
                    <tr><td width="220"><b>Gene Strand:</b></td><td>$$gene_strand$$</td></tr>
                    <tr><td width="220"><b>Coding?:</b></td><td>$$is_coding$$</td></tr>
                    <tr><td width="220"><b>Position in CDS:</b></td><td>$$position_in_CDS$$</td></tr>
                    <tr><td width="220"><b>Position in Protein:</b></td><td>$$position_in_protein$$</td></tr>
		    <tr><td width="220"><b>Left Flank (Gene Strand):</b></td><td><font class="fixed">$$lflank_gene_strand$$</font></td></tr>
		    <tr><td width="220"><b>$$reference_strain$$ Allele (Gene Strand):</b></td><td> <font class="fixed">$$allele_gene_strand$$</font></td></tr>
		    <tr><td width="220"><b>Right Flank (Gene Strand):</b></td><td><font class="fixed">$$rflank_gene_strand$$</font></td></tr>
                    </table>
                ]]>
               </text>
           </textAttribute>

          <table name="Strains"
                 displayName="Strains"
                 queryRef="SnpTables.Strains">
              <columnAttribute displayName="Strain" name="strain"/>
              <columnAttribute displayName="Type" name="phenotype"/>
              <columnAttribute displayName="Allele" name="allele" align="center"/>
              <columnAttribute displayName="Allele (gene strand)" name="allele_gene_strand" align="center"/>
              <columnAttribute displayName="Product" name="product" align="center"/>
          </table>

          <table name="Providers_other_SNPs"
                 displayName="Other SNPs at this location including combined SNPs"
                 queryRef="SnpTables.Providers">
              <columnAttribute name="source_id_link" internal="true"/>
              <linkAttribute inReportMaker="false" displayName="SNP ID"
                             name="linkedSourceId"
                             visible="$$source_id_link$$">
                 <url>
                    <![CDATA[
                       showRecord.do?name=SnpRecordClasses.SnpRecordClass&project_id=&primary_key=$$source_id_link$$
                        ]]>
                 </url>
              </linkAttribute>
              <columnAttribute displayName="Provider" name="name"/>
          </table>

       </recordClass>
    </recordClassSet>


    <recordClassSet name="EstRecordClasses">

        <!-- EstRecordClasses.EstRecordClass -->
        <recordClass idPrefix=""
          name="EstRecordClass" type="EST">

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>

            <attributeQueryRef ref="EstAttributes.Bfmv">
                <columnAttribute name="source_id"   inReportMaker="false" displayName="Accession" internal="true"/>
                <columnAttribute name="a_count"     inReportMaker="false" internal="true"/>
                <columnAttribute name="c_count"     inReportMaker="false" internal="true"/>
                <columnAttribute name="g_count"     inReportMaker="false" internal="true"/>
                <columnAttribute name="t_count"     inReportMaker="false" internal="true"/>
                <columnAttribute name="other_count" inReportMaker="false" internal="true"/>
                <columnAttribute name="length"      displayName="length" internal="false" align="center"/>
                <columnAttribute name="primer"      inReportMaker="false" internal="true"/>
                <columnAttribute name="dbest_name"  displayName="Library" internal="false"/>
                <columnAttribute name="vector"      displayName="Vector" internal="false"/>
                <columnAttribute name="stage"       displayName="Stage" internal="false"/>
                <columnAttribute name="organism"    displayName="Organism" internal="true"/>
                <columnAttribute name="formatted_organism"    displayName="Organism" internal="false" inReportMaker="false"/>
                <columnAttribute name="ncbi_tax_id" displayName="NCBI taxon" internal="true"/>
                <columnAttribute name="external_db_name"   inReportMaker="false" internal="true"/>
            </attributeQueryRef>

            <attributeQueryRef ref="EstAttributes.Sequence">
                <columnAttribute name="sequence" displayName="Sequence" internal="true"/>
            </attributeQueryRef>

            <attributeQueryRef ref="EstAttributes.Reference">
                <columnAttribute inReportMaker="false" name="author"      internal="true" />
                <columnAttribute inReportMaker="false" name="affiliation" internal="true" />
                <columnAttribute inReportMaker="false" name="address"     internal="true" />
            </attributeQueryRef>


            <table name="AlignmentInfo"
                   displayName="Alignments to genomic sequence"
                   queryRef="EstTables.AlignmentInfo">
                <columnAttribute inReportMaker="true"  name="accession" displayName="Accession"   internal="false" />
                <linkAttribute displayName="Genomic sequence" name="alignedcontig" visible="$$sequence_id$$"
                   inReportMaker="false" internal="false" >
                     <url>
                        <![CDATA[showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&project_id=&primary_key=$$sequence_id$$]]>
                     </url>
                </linkAttribute>
                <textAttribute inReportMaker="true" name="location" displayName="Location">
                  <text>
                    <![CDATA[
                      $$target_start$$ - $$target_end$$ ($$is_reversed$$)
                    ]]>
                  </text>
                </textAttribute>
                <columnAttribute inReportMaker="false"  name="context_start" internal="true" />
                <columnAttribute inReportMaker="false"  name="context_end"   internal="true" />
                <columnAttribute inReportMaker="true"  name="percent_identity" displayName="Percent identity"  internal="false" />
                <columnAttribute inReportMaker="true"  name="is_best_alignment" displayName="Best alignment?"  internal="false" />
                <columnAttribute inReportMaker="true"  name="is_consistent" displayName="Consistent?"  internal="false" />
                <columnAttribute inReportMaker="true"  name="sequence_id" displayName="Sequence"    internal="true" />
                <columnAttribute inReportMaker="true"  name="target_start" displayName="Start" internal="true" />
                <columnAttribute inReportMaker="true"  name="target_end"  displayName="End" internal="true" />
                <columnAttribute inReportMaker="true"  name="is_reversed" displayName="Strand" internal="true" />
                <linkAttribute displayName="Alignment" name="alignmentlink" visible="view"
                   inReportMaker="false" internal="false" >
                     <url>
                        <![CDATA[
                        @GBROWSE_BASE_URL@/cgi-bin/gbrowse/plasmo/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;width=550;label=Gene;label=EST;h_feat=$$accession$$
                        ]]>
                     </url>
                </linkAttribute>
            </table>


             <textAttribute name="overview" displayName="Overview" inReportMaker="false" internal="true">
               <text>
                    <![CDATA[
                    Library: $$dbest_name$$<br>
                    Primer: $$primer$$<br>
		    Vector: $$vector$$<br>
		    Stage:  $$stage$$<br>
                    Residue counts: <b>A</b>:$$a_count$$, <b>T</b>:$$t_count$$, <b>C</b>:$$c_count$$,
                    <b>G</b>:$$g_count$$, <b>other</b>:$$other_count$$<br>
                    Length: $$length$$<br>
                    Link out: <a href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?val=$$source_id$$">NCBI</a>
                ]]>
               </text>
           </textAttribute>

           <!-- custom record jsp page has a dependency on this attribute name. if you change here, change there -->
           <textAttribute name="reference" displayName="Sequence Attribution" inReportMaker="false" internal="true">
              <text>
                   <![CDATA[
                   <font size="-1">$$author$$<br>$$affiliation$$<br> $$address$$</font>
                   ]]>
              </text>
           </textAttribute>

       </recordClass>
    </recordClassSet>

    <recordClassSet name="OrfRecordClasses">

        <recordClass idPrefix=""
          name="OrfRecordClass" type="ORF">

            <reporter name="tabular" displayName="Summary - TAB Delimited"
                      implementation="org.gusdb.wdk.model.report.TabularReporter" />
            <reporter name="fullRecord" displayName="Detailed"
                      implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

            <attributeQueryRef ref="OrfAttributes.Bfmv">
                <columnAttribute name="nas_id" displayName="Sequence ID" internal="false"/>
                <!--columnAttribute name="orf_id" displayName="ORF ID" internal="false"/-->
                <columnAttribute name="orf_start" internal="true"/>
                <columnAttribute name="orf_end" internal="true"/>
                <columnAttribute name="orf_start_text" displayName="Start" internal="false" align="center"/>
                <columnAttribute name="orf_end_text" displayName="End" internal="false" align="center"/>
                <columnAttribute name="orf_strand" displayName="Strand" internal="false" align="center"/>
                <columnAttribute name="length" displayName="Length" internal="false" align="center"/>
                <columnAttribute name="organism" displayName="Organism" internal="true" inReportMaker="true"/>
                <columnAttribute name="formatted_organism" displayName="Organism" internal="false" inReportMaker="false"/>
            </attributeQueryRef>

            <attributeQueryRef ref="OrfAttributes.Sequence">
                <columnAttribute name="sequence" displayName="Sequence" internal="true" />
            </attributeQueryRef>

            <textAttribute name="orf_location_text" displayName="Location"
                           internal="false" inReportMaker="true">
                <text>
                    <![CDATA[
                       $$nas_id$$: $$orf_start_text$$ - $$orf_end_text$$ ($$orf_strand$$)
                    ]]>
               </text>
           </textAttribute>           

            <textAttribute name="overview" displayName="Overview"
                           internal="true" inReportMaker="false">
               <text>
                    <![CDATA[
                    Open Reading Frame $$primaryKey$$ from $$nas_id$$.<br>
                    Organism: <i>$$organism$$</i>
                    ]]>
               </text>
           </textAttribute>

        </recordClass>

    </recordClassSet>


    <recordClassSet name="InterproTermClasses">
        <recordClass idPrefix="" name="InterproTermClass" type="Ontology">

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>

            <table name="InterproTerms" displayName="InterPro Terms"
                   queryRef="UtilityTables.InterproTermList">
                <columnAttribute name="accession"/>
                <columnAttribute name="name"/>
                <columnAttribute name="description"/>
            </table>
        </recordClass>
    </recordClassSet>

    <!-- *************** -->
    <!-- model querySets -->
    <!-- *************** -->

    <!--
    A "query" obtains tabular values from a data source.  It has columns
    and parameters.  So far, SQL and web-service data sources are supported.

    Queries are used for different purposes: providing primary keys to a
    question; providing attributes and tables to a record; and, providing
    vocabularies to vocabulary parameters.

    A "query set" is a grouping of queries.  It is useful in organizing the
    model xml file.

    The full name of a query is of the form "set_name.name."
    -->

    <!-- Queries that retrieve attributes of Genes -->
    <!-- //////////  GENEPAGE GENE PAGE //////////// -->

    <querySet name="GeneAttributes">

        <sqlQuery name="GeneAlias" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <sql>
            <![CDATA[
                SELECT gene as source_id
                FROM apidb.GeneAlias
                WHERE alias = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="gene_type" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="product" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="start_min" sortingTable="apidb.geneattributes"/>
            <column name="end_max" sortingTable="apidb.geneattributes"/>
            <column name="start_min_text" sortingTable="apidb.geneattributes" sortingColumn="start_min"/>
            <column name="end_max_text" sortingTable="apidb.geneattributes" sortingColumn="end_max"/>
            <column name="transcript_length" sortingTable="apidb.geneattributes"/>
            <column name="cds_length" sortingTable="apidb.geneattributes"/>
            <column name="protein_length" sortingTable="apidb.geneattributes"/>
            <column name="context_start" sortingTable="apidb.geneattributes"/>
            <column name="context_end" sortingTable="apidb.geneattributes"/>
            <column name="strand_plus_minus" sortingTable="apidb.geneattributes" sortingColumn="strand"/>
            <column name="sequence_id" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="plasmocyc_db" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="plasmocyc_gene_id" sortingTable="apidb.geneattributes" sortingColumn="source_id"/>
            <column name="tm_count" sortingTable="apidb.geneattributes"/>
            <column name="so_id" sortingTable="apidb.geneattributes"/>
            <column name="so_term_name" sortingTable="apidb.geneattributes"/>
            <column name="so_term_definition" sortingTable="apidb.geneattributes"/>
            <column name="ontology_name" sortingTable="apidb.geneattributes"/>
            <column name="so_version" sortingTable="apidb.geneattributes"/>
            <column name="anticodon" sortingTable="apidb.geneattributes"/>
            <column name="molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="isoelectric_point" sortingTable="apidb.geneattributes"/>
            <column name="min_molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="max_molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="hydropathicity_gravy_score" sortingTable="apidb.geneattributes"/>
            <column name="aromaticity_score" sortingTable="apidb.geneattributes"/>
            <column name="external_db_name" sortingTable="apidb.geneattributes"/>
            <column name="external_db_version" sortingTable="apidb.geneattributes"/>
            <column name="ncbi_tax_id" sortingTable="apidb.geneattributes"/>
            <column name="species" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="genus_species" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="organism_full" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="organism" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="exon_count" sortingTable="apidb.geneattributes"/>
            <column name="strand" sortingTable="apidb.geneattributes"/>
            <column name="ec_numbers_string" sortingTable="apidb.geneattributes" sortingColumn="ec_numbers"/>
            <column name="ann_go_component" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_component"/>
            <column name="ann_go_process" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_process"/>
            <column name="ann_go_function" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_function"/>
            <column name="pred_go_component" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_component"/>
            <column name="pred_go_process" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_process"/>
            <column name="pred_go_function" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_function"/>
            <column name="der_min_level" sortingTable="apidb.geneattributes" sortingColumn="derisi_min_level"/>
            <column name="der_max_level" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_level"/>
            <column name="der_min_timing" sortingTable="apidb.geneattributes" sortingColumn="derisi_min_timing"/>
            <column name="der_max_timing" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_timing"/>
            <column name="der_max_pct" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_pct"/>
            <column name="winz_min_level" sortingTable="apidb.geneattributes" sortingColumn="winzeler_min_level"/>
            <column name="winz_max_level" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_level"/>
            <column name="winz_min_timing" sortingTable="apidb.geneattributes" sortingColumn="winzeler_min_timing"/>
            <column name="winz_max_timing" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_timing"/>
            <column name="winz_max_pct" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_pct"/>

            <sql>
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start, bfmv.context_end, 
                   bfmv.sequence_id, bfmv.organism as organism_full, bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version,
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1, INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1) AS genus_species,
                   REPLACE(bfmv.organism,'Plasmodium','P.') as organism,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - INSTR(bfmv.organism, ' ') - 1) AS species,
                   DECODE(bfmv.organism,
                          'Plasmodium falciparum 3D7', 'PLASMO', null)
                   AS plasmocyc_db,
                   UPPER(bfmv.source_id) AS plasmocyc_gene_id,
                   bfmv.strand,bfmv.ec_numbers as ec_numbers_string,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   bfmv.predicted_go_process as pred_go_process,
                   bfmv.derisi_max_level as der_max_level,
                   bfmv.derisi_min_level as der_min_level,
                   bfmv.derisi_min_timing as der_min_timing,
                   bfmv.derisi_max_timing as der_max_timing,
                   TO_CHAR(bfmv.derisi_max_pct * 100, '99.9') as der_max_pct,
                   bfmv.winzeler_max_level as winz_max_level,
                   bfmv.winzeler_min_level as winz_min_level,
                   bfmv.winzeler_min_timing as winz_min_timing,
                   bfmv.winzeler_max_timing as winz_max_timing,
                   TO_CHAR(bfmv.winzeler_max_pct * 100, '99.9') as winz_max_pct
            FROM apidb.GeneAttributes bfmv
               WHERE bfmv.source_id='$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ProteinSequence" displayName="Protein Sequence" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="protein_sequence"/>
            <sql>
            <![CDATA[
            SELECT gf.source_id,
                   tas.sequence AS protein_sequence
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.TranslatedAaSequence tas
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = tas.aa_sequence_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="TranscriptSequence" isCacheable="false"
                       displayName="RNA Sequence">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="transcript_sequence"/>
            <sql>
            <![CDATA[
              select gf.source_id, s.sequence as transcript_sequence
              from dots.genefeature gf, dots.transcript t, dots.splicednasequence s
              where gf.source_id = '$$primaryKey$$'
              and t.parent_id = gf.na_feature_id
              and s.na_sequence_id = t.na_sequence_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="CDS" isCacheable="false"
                       displayName="RNA Sequence">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="cds"/>
            <sql>
            <![CDATA[
              SELECT gf.source_id,
                     SUBSTR(s.sequence,
                            tf.translation_start,
                            tf.translation_stop - tf.translation_start + 1)
                       AS cds
              FROM dots.genefeature gf, dots.transcript t,
                   dots.splicednasequence s, dots.TranslatedAaFeature tf
              WHERE gf.source_id = '$$primaryKey$$'
                AND t.parent_id = gf.na_feature_id
                AND s.na_sequence_id = t.na_sequence_id
                AND t.na_feature_id = tf.na_feature_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ExpressionGraphs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="graph_derisi_winzeler" />
            <column name="graph_winzeler" />
            <column name="graph_3d7" />
            <column name="graph_hb3" />
            <column name="graph_dd2" />
            <column name="graph_waters"/>
            <column name="graph_gametocyte"/>
            <column name="graph_cowman"/>
            <sql>
            <![CDATA[
               SELECT '$$primaryKey$$' AS source_id,
                      NVL(MAX(graph_derisi_winzeler), 0) AS graph_derisi_winzeler,
                      NVL(MAX(graph_winzeler), 0) AS graph_winzeler,
                      NVL(MAX(graph_3d7), 0) AS graph_3d7,
                      NVL(MAX(graph_hb3), 0) AS graph_hb3,
                      NVL(MAX(graph_dd2), 0) AS graph_dd2,
                      NVL(MAX(graph_waters), 0) AS graph_waters,
                      NVL(MAX(graph_gametocyte), 0) AS graph_gametocyte,
                      NVL(MAX(graph_cowman), 0) AS graph_cowman
               FROM apidb.ExpressionGraphSummary egs
               WHERE egs.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

<!-- these are replaced by the bfmv
        <sqlQuery name="GeneAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="gene_type"/>
            <column name="product"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="length"/>
            <column name="strand"/>
            <column name="sequence_id"/>
            <column name="context_start"/>
            <column name="context_end"/>
            <sql>
            <![CDATA[
               SELECT gf.source_id,
                      REPLACE(so.term_name, '_', ' ') AS gene_type,
                      gf.product,
                      least(nl.start_min, nl.end_max) as start_min,
                      greatest(nl.start_min, nl.end_max) as end_max,
                      abs(nl.end_max - nl.start_min) as length,
                      greatest(0, least(nl.start_min, nl.end_max) - 5000)
                          as context_start,
                      least(ens.length, greatest(nl.start_min, nl.end_max) + 5000)
                          as context_end,
                      decode(nvl(nl.is_reversed, 0), 0, 'forward', 1, 'reverse',
                             nl.is_reversed) as strand,
                      ens.source_id as sequence_id
               FROM dots.GeneFeature gf, dots.NaLocation nl,
                    dots.ExternalNaSequence ens, sres.SequenceOntology so
               WHERE gf.source_id='$$primaryKey$$'
                 AND gf.na_feature_id = nl.na_feature_id
                 AND gf.na_sequence_id = ens.na_sequence_id
                 AND gf.sequence_ontology_id = so.sequence_ontology_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Organism" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
                <column name="source_id"/>
                <column name="organism"/>
                <column name="genus_species"/>
                <column name="plasmocyc_db"/>
                <column name="plasmocyc_gene_id"/>
           <sql>
            <![CDATA[
               SELECT gf.source_id, UPPER(gf.source_id) AS plasmocyc_gene_id,
                     tn.name as genus_species,
                     SUBSTR(tn.name, 1, 1) || '. '
                     || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) as organism,
                     DECODE(tn.name, 'Plasmodium falciparum 3D7', 'PLASMO', null) AS plasmocyc_db
               FROM dots.GeneFeature gf, dots.NaSequence s, sres.TaxonName tn
               WHERE gf.na_sequence_id = s.na_sequence_id
                 AND s.taxon_id = tn.taxon_id
                 AND tn.name_class = 'scientific name'
                 AND gf.source_id='$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Transmembrane" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
                <column name="source_id"/>
                <column name="tm_count"/>
            <sql>
            <![CDATA[
                SELECT gf.source_id, nvl(tm_domains, 0) as tm_count
                FROM dots.GeneFeature gf,
                     (SELECT source_id, max(tm_domains) AS tm_domains
                      FROM (SELECT gf.source_id, tmaf.aa_feature_id,
                                   COUNT(*) AS tm_domains
                            FROM dots.GeneFeature gf, dots.NaSequence ns,
                                 dots.Transcript t, dots.TranslatedAaFeature tlaf,
                                 dots.TransmembraneAaFeature tmaf, dots.AaLocation al
                            WHERE gf.na_sequence_id = ns.na_sequence_id
                              AND gf.na_feature_id = t.parent_id
                              AND t.na_feature_id = tlaf.na_feature_id
                              AND tlaf.aa_sequence_id = tmaf.aa_sequence_id
                              AND tmaf.aa_feature_id = al.aa_feature_id
                            GROUP BY gf.source_id, tmaf.aa_feature_id) tms
                      GROUP BY tms.source_id) max_tms
                WHERE gf.source_id = max_tms.source_id(+)
                 AND gf.source_id = '$$primaryKey$$'
           ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="SequenceOntology" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="so_id"/>
            <column name="so_term_name"/>
            <column name="so_term_definition"/>
            <column name="ontology_name"/>
            <column name="so_version"/>
            <sql>
            <![CDATA[
               SELECT gf.source_id,
                      so_id, term_name AS so_term_name,
                      definition AS so_term_definition,
                      ontology_name, so_version
               FROM sres.sequenceOntology so, dots.GeneFeature gf
               WHERE gf.sequence_ontology_id = so.sequence_ontology_id
                 AND gf.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Anticodon" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="anticodon"/>
            <sql>
            <![CDATA[
               SELECT gf.source_id, rt.anticodon
               FROM dots.GeneFeature gf, dots.RnaType rt
               WHERE gf.source_id = '$$primaryKey$$'
                 AND gf.na_feature_id = rt.parent_id(+)
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ExonCount" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="exon_count" />
            <sql>
            <![CDATA[
               SELECT gf.source_id, MAX(exons.exon_count) AS exon_count
               FROM dots.geneFeature gf,
                    (SELECT t.parent_id, count(*) AS exon_count
                     FROM dots.Transcript t, dots.ExonFeature ef
                     WHERE t.na_feature_id = ef.parent_id
                     GROUP BY t.parent_id, t.na_feature_id) exons
               WHERE exons.parent_id = gf.na_feature_id
                 AND gf.source_id = '$$primaryKey$$'
               GROUP BY gf.source_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="AaSequenceAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="isoelectric_point"/>
            <column name="min_molecular_weight"/>
            <column name="max_molecular_weight"/>
            <column name="hydropathicity_gravy_score"/>
            <column name="aromaticity_score"/>
            <sql>
            <![CDATA[
               SELECT gf.source_id,
                      asa.isoelectric_point, asa.min_molecular_weight,
                      asa.max_molecular_weight, asa.hydropathicity_gravy_score,
                      asa.aromaticity_score
               FROM dots.GeneFeature gf, dots.Transcript t,
                    dots.TranslatedAaFeature taf,
                    apidb.AaSequenceAttribute asa
               WHERE gf.source_id = '$$primaryKey$$'
                 AND gf.na_feature_id = t.parent_id
                 AND t.na_feature_id = taf.na_feature_id
                 AND taf.aa_sequence_id = asa.aa_sequence_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Binomial" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="binomial"/>
            <column name="species"/>
            <sql>
            <![CDATA[
                SELECT tn.name AS binomial,
                       substr(tn.name, instr(name, ' ')+1) AS species
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id in
                      (SELECT taxon_id
                       FROM sres.taxon
                       CONNECT BY taxon_id = prior parent_id
                       START WITH taxon_id =
                            (SELECT ens.taxon_id
                             FROM dots.GeneFeature gf, dots.ExternalNaSequence ens
                             WHERE gf.source_id = '$$primaryKey$$'
                               AND gf.na_sequence_id = ens.na_sequence_id))
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ExternalDbInfo" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="externalDbName"/>
            <column name="externalDbVersion"/>
            <sql>
            <![CDATA[
                SELECT gf.source_id, ed.name AS externalDbName,
                       edr.version AS externalDbVersion
                FROM dots.genefeature gf, sres.externaldatabase ed,
                     sres.externaldatabaserelease edr
                WHERE gf.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND gf.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>
-->
    </querySet>

<!-- //////////  GENEPAGE GENE PAGE //////////// -->


<!-- //////////  ESTPAGE EST PAGE //////////// -->
    <!-- Queries that retrieve attributes of ESTs -->
    <querySet name="EstAttributes">

        <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="a_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="c_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="g_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="t_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="other_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="length" sortingTable="apidb.EstAttributes"
                    lowerCase="false"/>
            <column name="primer" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="dbest_name" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="vector" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="stage" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="organism" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="formatted_organism" sortingTable="apidb.EstAttributes"
                    sortingColumn="organism" lowerCase="true"/>
            <column name="ncbi_tax_id" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="external_db_name" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.primer, bfmv.a_count,  bfmv.c_count, 
                  bfmv.g_count, bfmv.t_count, bfmv.other_count, bfmv.length, 
                  bfmv.dbest_name, bfmv.vector, bfmv.stage, bfmv.organism, 
                  bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.external_db_name
            FROM  apidb.EstAttributes bfmv
            WHERE bfmv.source_id = '$$primaryKey$$'
            ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="sequence" />
            <sql>
                <![CDATA[
                SELECT enas.source_id, enas.sequence
                FROM dots.externalnasequence enas
                WHERE enas.source_id = '$$primaryKey$$'
                ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="EstAttrs" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="sequence" />
            <column name="a_count" />
            <column name="c_count" />
            <column name="g_count" />
            <column name="t_count" />
            <column name="other_count" />
            <column name="length" />
            <column name="primer" />
            <column name="dbest_name" />
            <column name="vector" />
            <column name="stage" />
            <column name="organism" />
            <column name="extdbname" />
            <sql>
            <![CDATA[
           SELECT enas.source_id,
                   enas.sequence,
                   e.seq_primer as primer,
                   enas.a_count,
                   enas.c_count,
                   enas.g_count,
                   enas.t_count,
                   (length - (a_count + c_count + g_count + t_count)) as other_count,
                   enas.length,
                   l.dbest_name,
                   nvl(l.vector, 'unknown') as vector,
                   nvl(l.stage, 'unknown') as stage,
                   '<i>' || SUBSTR(tn.name, 1, 1) || '.&nbsp;' ||
                   SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism,
                   ed.name as extdbname
            FROM  dots.est e,
                  dots.externalnasequence enas,
                  dots.library l,
                  sres.taxonname tn,
                  sres.externaldatabase ed,
                  sres.externaldatabaserelease edr
            WHERE e.na_sequence_id = enas.na_sequence_id
            AND   e.library_id = l.library_id
            AND   enas.taxon_id = tn.taxon_id
            AND   tn.name_class='scientific name'
            AND   enas.external_database_release_id = edr.external_database_release_id
            AND   edr.external_database_id = ed.external_database_id
            AND   enas.source_id = '$$primaryKey$$'
            ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Reference" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="author" />
            <column name="affiliation" />
            <column name="address" />
            <sql>
            <![CDATA[
            SELECT e.accession as source_id,
                   c.name as author,
                   c.address1 as affiliation,
                   c.address2 as address
            FROM dots.est e, sres.contact c
            WHERE e.contact_id = c.contact_id
            AND e.accession = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>
    </querySet>
<!-- //////////  END ESTPAGE EST PAGE //////////// -->

<!-- //////////  ORFPAGE ORF PAGE //////////// -->
    <!-- Queries that retrieve attributes of Contigs -->
    <querySet name="OrfAttributes">

        <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="nas_id" sortingTable="apidb.OrfAttributes" />
            <!--column name="orf_id" sortingTable="apidb.OrfAttributes" sortingColumn="source_id" /-->
            <column name="length" sortingTable="apidb.OrfAttributes" />
            <column name="organism" sortingTable="apidb.OrfAttributes" />
            <column name="formatted_organism" sortingTable="apidb.OrfAttributes" sortingColumn="organism" />
            <column name="orf_start" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_start_text" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end_text" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_strand" sortingTable="apidb.OrfAttributes" sortingColumn="is_reversed" />
            <sql>
            <![CDATA[
                SELECT bfmv.source_id, bfmv.nas_id, bfmv.length, bfmv.organism, bfmv.ncbi_tax_id,
                       '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                       REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                      chr(38) || 'nbsp;') || '</i>'
                         AS formatted_organism,
                      bfmv.start_min as orf_start,bfmv.end_max as orf_end,
                      trim(to_char(bfmv.end_max,'999,999,999')) as orf_end_text,
                      trim(to_char(bfmv.start_min,'999,999,999')) as orf_start_text,
                      decode(bfmv.is_reversed,0,'+',1,'-',null) as orf_strand
                FROM apidb.OrfAttributes bfmv
                WHERE bfmv.source_id = '$$primaryKey$$'
        ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="sequence" />
            <sql>
            <![CDATA[
               select nf.source_id,ts.sequence
               from dots.translatedaasequence ts, dots.translatedaafeature tf, dots.nafeature nf
               where nf.source_id = '$$primaryKey$$'
               and nf.na_feature_id = tf.na_feature_id
               and ts.aa_sequence_id = tf.aa_sequence_id
            ]]>
           </sql>
        </sqlQuery>

<!-- replaced by BFMV
        <sqlQuery name="OrfAttrs" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="nas_id" />
            <column name="orf_id" />
            <column name="length" />
            <column name="organism" />
            <column name="sequence" />
            <sql>
            <![CDATA[
            SELECT taas.source_id,
                tn.name,
                enas.source_id as nas_id,
                taas.source_id as orf_id,
                taas.length,
                taas.sequence,
                '<i>' || SUBSTR(tn.name, 1, 1) || '.&nbsp;' ||
                 SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism
               FROM dots.externalNASequence enas,
                    dots.transcript t,
                    dots.translatedaafeature taaf,
                    dots.translatedaasequence taas,
                    sres.taxonname tn,
                    sres.sequenceontology so
              WHERE t.na_feature_id = taaf.na_feature_id
                AND taaf.aa_sequence_id = taas.aa_sequence_id
                AND enas.na_sequence_id = t.na_sequence_id
                AND enas.taxon_id = tn.taxon_id
                AND t.sequence_ontology_id = so.sequence_ontology_id
                AND so.term_name = 'ORF'
                AND tn.name_class='scientific name'
                AND taas.source_id = '$$primaryKey$$'
        ]]>
           </sql>
        </sqlQuery>
-->
    </querySet>
<!-- //////////  END ORFPAGE ORF PAGE //////////// -->


<!-- //////////  VOCABULARY //////////// -->

    <querySet name="VocabQueries">

        <!-- sqlQuery name="Organism">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM
               (SELECT tn.name AS term, t.taxon_id AS internal,
                       rownum AS idx
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id in
                      (SELECT taxon_id
                       FROM sres.taxon
                       CONNECT BY taxon_id = prior parent_id
                       START WITH taxon_id IN
                       (SELECT ens.taxon_id
                        FROM dots.ExternalNaSequence ens, dots.GeneFeature gf
                        WHERE gf.na_sequence_id = ens.na_sequence_id))
                UNION
                SELECT 'any' as term, -1 as internal,
                       0 as idx
                FROM dual)
            ORDER BY idx
            </sql>
        </sqlQuery -->

<!--
        <sqlQuery name="DisusedSpeciesName">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM
               (SELECT tn.name AS term, tn.name AS internal,
                       rownum AS idx
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id in
                      (SELECT taxon_id
                       FROM sres.taxon
                       CONNECT BY taxon_id = prior parent_id
                       START WITH taxon_id IN
                       (SELECT taxon_id
                        FROM dots.ExternalNaSequence))
                UNION
                SELECT 'any' as term, -1 as internal,
                       0 as idx
                FROM dual)
            ORDER BY idx
            </sql>
        </sqlQuery>
-->

        <!-- sqlQuery name="OldExactOrganism">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT tn.name AS term, t.taxon_id AS internal
                FROM sres.TaxonName tn, sres.taxon t
                WHERE tn.name_class='scientific name'
                  AND t.taxon_id = tn.taxon_id
                  AND t.rank = 'species'
                  AND t.taxon_id in
                      (SELECT taxon_id
                       FROM sres.taxon
                       CONNECT BY taxon_id = prior parent_id
                       START WITH taxon_id IN
                       (SELECT taxon_id
                        FROM dots.ExternalNaSequence))
                ORDER BY tn.name
            </sql>
        </sqlQuery -->

        <sqlQuery name="OrganismWithGenes">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                  SELECT orgs.term, (select apidb.tab_to_string(CAST(COLLECT(trim(to_char(taxon_id))) AS apidb.varchartab), ', ') as internal
                    FROM sres.taxon
                    CONNECT BY prior taxon_id = parent_id
                    START WITH taxon_id = orgs.internal_tax) as internal
                FROM (SELECT tn.name AS term, t.taxon_id AS internal_tax
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                      AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species' 
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens, dots.GeneFeature gf
                              WHERE gf.na_sequence_id = ens.na_sequence_id))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

        <sqlQuery name="OrganismWithSequences">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT tn.name AS term, t.taxon_id AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

        <sqlQuery name="OrganismWithEsts">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT tn.name AS term, t.taxon_id AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens, dots.Est e
                              WHERE e.na_sequence_id = ens.na_sequence_id))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

        <sqlQuery name="SpeciesName">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT tn.name AS term, tn.name AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens, dots.GeneFeature gf
                              WHERE gf.na_sequence_id = ens.na_sequence_id))) orgs,
                     (SELECT 'Plasmodium falciparum' AS term, 1 as rank from dual
                      UNION
                      SELECT 'Plasmodium vivax' AS term, 2 as rank from dual
                      UNION
                      SELECT 'Plasmodium yoelii' AS term, 3 as rank from dual) partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

        <sqlQuery name="PfOrganism">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT tn.name AS term, t.taxon_id AS internal,
                   rownum AS idx
            FROM sres.TaxonName tn, sres.taxon t
            WHERE tn.name_class='scientific name'
              AND t.taxon_id = tn.taxon_id
              AND t.rank = 'species'
              AND t.taxon_id in
                  (SELECT taxon_id
                   FROM sres.taxon
                   CONNECT BY taxon_id = prior parent_id
                   START WITH taxon_id IN
                   (SELECT taxon_id
                    FROM dots.ExternalNaSequence))
              AND tn.name LIKE '%falciparum%'
            </sql>
        </sqlQuery>

        <sqlQuery name="GeneTypes">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT REPLACE(REPLACE(REPLACE(term_name, 'non_protein_coding', 'misc RNA'), '_encoding', ''), '_', ' ')  AS term,
                   sequence_ontology_id AS internal
              FROM sres.SequenceOntology
              WHERE term_name IN ('protein_coding',
                                  'rRNA_encoding',
                                  'snRNA_encoding',
                                  'tRNA_encoding',
                                  'non_protein_coding')
            </sql>
        </sqlQuery>

        <sqlQuery name="IncludePseudogenes">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            select 'Yes' as term, 2 as idx, '0,1' as internal from dual
            UNION
            select 'No' as term, 1 as idx, '0' as internal from dual
            UNION
            select 'Pseudogenes Only' as term, 3 as idx, '1' as internal from dual
            ORDER BY idx
            </sql>
        </sqlQuery>


        <sqlQuery name="BaitOrPrey">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'bait' as term, 1 as idx,
                      '''' ||'bait'  || ''''  as internal FROM dual
               UNION
               SELECT 'prey' as term, 2 as idx,
                      '''' ||'prey'  || ''''  as internal FROM dual
/*             UNION
               SELECT 'either' as term, 3 as idx,
                      '''' ||'either' || '''' as internal FROM dual */
            )
            </sql>
        </sqlQuery>


        <sqlQuery name="inNotIn">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'does overlap with a gene' as term, 'INTERSECT' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'does not overlap with a gene' as term, 'MINUS' as internal, 2 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>

        <sqlQuery name="EstLibraries">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT REPLACE(dbest_name, ',', ' - ') AS term,
                       library_id AS internal
                FROM dots.library
                ORDER BY dbest_name
            </sql>
        </sqlQuery>

        <sqlQuery name="high_confidence_only">
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT * FROM (
               SELECT 'No' as term, '0,1' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'Yes' as term, '1' as internal, 2 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>
        
        <sqlQuery name="best_alignment_only">
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT * FROM (
               SELECT 'No' as term, '0,1' as internal, 2 as idx
               FROM dual
            UNION
                SELECT 'Yes' as term, '1' as internal, 1 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>

<sqlQuery name="Filter">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      'yes' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      'no' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
</sqlQuery>


        <sqlQuery name="BlastQueryType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'DNA' as term,
                      'dna' as internal FROM dual
               UNION
               SELECT 'Protein' as term,
                      'protein' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="BlastDatabaseTypeGene">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Nucleotide coding sequences (CDS)' as term,
                      'CDS' as internal FROM dual
               UNION
               SELECT 'Six frame translated CDSs' as term,
                      'CDS Translated' as internal FROM dual
               UNION
               SELECT 'Proteins' as term,
                      'proteins' as internal FROM dual
            )
            </sql>
        </sqlQuery -->

        <!-- sqlQuery name="BlastDatabaseTypeGenome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Genome' as term,
                      'genomic' as internal FROM dual
            )
            </sql>
        </sqlQuery -->

        <sqlQuery name="BlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT ' Choose one' AS term,
                      'Choose one' AS internal FROM dual
               UNION
               SELECT 'Transcripts' AS term,
                      'Transcripts' AS internal FROM dual
               UNION
               SELECT 'Translated Transcripts' AS term,
                      'Transcripts Translated' AS internal FROM dual
               UNION
               SELECT 'Proteins' AS term,
                      'proteins' AS internal FROM dual
               UNION
               SELECT 'Genome' AS term,
                      'genomic' AS internal FROM dual
                UNION
               SELECT 'Translated Genome' AS term,
                      'genomic Translated' AS internal FROM dual
               UNION
               SELECT 'ORF (Protein)' AS term,
                      'orfs' AS internal FROM dual
               UNION
               SELECT 'EST' AS term,
                      'ESTs' AS internal FROM dual
               UNION
               SELECT 'Translated EST' AS term,
                      'ESTs Translated' AS internal FROM dual

            )
            </sql>
        </sqlQuery>

        <sqlQuery name="GeneBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Transcripts' AS term,
                      'Transcripts' AS internal FROM dual
               UNION
               SELECT 'Translated Transcripts' AS term,
                      'Transcripts Translated' AS internal FROM dual
               UNION
               SELECT 'Proteins' AS term,
                      'proteins' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="SequenceBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Genome' AS term,
                      'genomic' AS internal FROM dual
               UNION
               SELECT 'Translated Genome' AS term,
                      'genomic Translated' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="EstBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'EST' AS term,
                      'ESTs' AS internal FROM dual
               UNION
               SELECT 'Translated EST' AS term,
                      'ESTs Translated' AS internal FROM dual

            )
            </sql>
        </sqlQuery>

        <sqlQuery name="OrfBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'ORF (Protein)' AS term,
                      'orfs' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="BlastDatabaseOrganism">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'P. falciparum' as term,
                      'Pfalciparum' as internal FROM dual
               UNION
               SELECT 'P. falciparum mitocondrial' as term,
                      'PfalciparumMito' as internal from dual
               UNION
               SELECT 'P. falciparum plastid' as term,
                      'PfalciparumPlastid' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'Pvivax' as internal FROM dual
               UNION
               SELECT 'P. yoelii' as term,
                      'Pyoelii' as internal FROM dual
               UNION
               SELECT 'P. berghei' as term,
                      'Pberghei' as internal FROM dual
               UNION
               SELECT 'P. chabaudi' as term,
                      'Pchabaudi' as internal FROM dual
               UNION
               SELECT 'P. gallinaceum' as term,
                      'Pgallinaceum' as internal FROM dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'Pknowlesi' as internal FROM dual
               UNION
               SELECT 'P. reichenowi' as term,
                      'Preichenowi' as internal FROM dual
               UNION
               SELECT 'any' as term,
                      'Plasmodium' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="BlastDatabaseOrganismWithGenes">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'P. falciparum' as term,
                      'Pfalciparum' as internal FROM dual
               UNION
               SELECT 'P. falciparum mitocondrial' as term,
                      'PfalciparumMito' as internal from dual
               UNION
               SELECT 'P. falciparum plastid' as term,
                      'PfalciparumPlastid' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'Pvivax' as internal FROM dual
               UNION
               SELECT 'P. yoelii' as term,
                      'Pyoelii' as internal FROM dual
               UNION
               SELECT 'P. berghei' as term,
                      'Pberghei' as internal FROM dual
               UNION
               SELECT 'P. chabaudi' as term,
                      'Pchabaudi' as internal FROM dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'Pknowlesi' as internal FROM dual
               UNION
               SELECT 'any' as term,
                      'Plasmodium' as internal FROM dual
            )
            </sql>
        </sqlQuery>

         <sqlQuery name="ObservedNotObserved">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'observed' as term,
                      '1' as internal FROM dual
               UNION
               SELECT 'not observed' as term,
                      '0' as internal FROM dual
               UNION
               SELECT 'do not care' as term,
                      'any' as internal FROM dual
            )
            </sql>
        </sqlQuery>

         <sqlQuery name="IncludeReichenowi">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'No' as term,
                      'foobar' as internal FROM dual
               UNION
               SELECT 'Yes' as term,
                      'Preich' as internal FROM dual
            )
            </sql>
        </sqlQuery>
        
         <sqlQuery name="no_yes_list">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'No' as term, 'no' as internal FROM dual
               UNION
               SELECT 'Yes' as term, 'yes' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="Confidence">
          <column name="internal"/>
          <column name="term"/>
          <sql>
           SELECT * FROM (
               SELECT 'High' as term,
                      '''' ||'Full Set On Blast Hit'  || ''''  as internal FROM dual
               UNION
               SELECT 'Medium' as term,
                      '''' ||'Full Set Not on Blast Hit'''||','||'''Not Full Set On Blast Hit' || ''''  as internal FROM dual
               UNION
               SELECT 'Low' as term,
                      '''' ||'Not Full Set Not on Blast Hit' || '''' as internal FROM dual)
          </sql>

        </sqlQuery>

        <sqlQuery name="SnpStrainA">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct strain_a as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord
	    from apidb.snpsummary
            where strain_a in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct strain_b as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord
	    from apidb.snpsummary
            where strain_b in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct strain_a as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord
	    from apidb.snpsummary
            where strain_a not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct strain_b as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.snpsummary
            where strain_b not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select 'foobar' as internal, '-----------' as term, 2 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStrainB">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct strain_a as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord
	    from apidb.snpsummary
            where strain_a in ('Preich', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct strain_b as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord
	    from apidb.snpsummary
            where strain_b in ('Preich', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct strain_a as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord
	    from apidb.snpsummary
            where strain_a not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct strain_b as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.snpsummary
            where strain_b not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select 'foobar' as internal, '-----------' as term, 2 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStrainM">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct '''' ||'3D7'|| '''' as internal, 'Pf-3D7' as term, 1.5 as ord
	    from dual
            union
	    select distinct '''' ||strain_a|| '''' as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord
	    from apidb.snpsummary
            where strain_a in ('Preich', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct '''' ||strain_b|| '''' as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord
	    from apidb.snpsummary
            where strain_b in ('Preich', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct '''' ||strain_a|| '''' as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord
	    from apidb.snpsummary
            where strain_a not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct '''' ||strain_b|| '''' as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.snpsummary
            where strain_b not in ('3D7', 'DD2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select '''' ||'foobar'|| '''' as internal, '-----------' as term, 2 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStat">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Non-Coding' as term,
	           'non_coding' as internal from dual
	    union
	    select 'Coding' as term,
	           'non_synonymous + synonymous' as internal from dual
	    union
	    select 'Non-Synonymous' as term,
	          'non_synonymous' as internal from dual
            union
	    select 'Synonymous' as term,
	           'synonymous' as internal from dual
            union
	    select 'Nonsense' as term,
	           'stop' as internal from dual
            union
	    select 'All SNPs' as term,
	           'total' as internal from dual
            </sql>
        </sqlQuery>

        <sqlQuery name="SnpSort">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Non-synonymous / Synonymous ratio' as term,
	           'dn_ds_ratio' as internal from dual
	    union
	    select 'Non-Coding SNPs' as term,
	           'non_coding' as internal from dual
	    union
	    select 'Non-Synonymous SNPs' as term,
	          'non_synonymous' as internal from dual
            union
	    select 'Synonymous SNPs' as term,
	           'synonymous' as internal from dual
            union
	    select 'Nonsense SNPs' as term,
	           'stop' as internal from dual
            union
	    select 'All SNPs' as term,
	           'total' as internal from dual
            union
	    select 'SNP density in CDS' as term,
	           'cds_snp_density' as internal from dual
            ORDER by term
            </sql>
        </sqlQuery>

        <sqlQuery name="SortOrder">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Descending' as term,
	           'DESC' as internal from dual
	    union
	    select 'Ascending' as term,
	           'ASC' as internal from dual
            ORDER by term DESC
            </sql>
        </sqlQuery>

       <sqlQuery name="Chromosome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM (
               SELECT 'chromosome 1' as term, 1 as ord,
                      '''MAL1''' as internal FROM dual
               UNION
               SELECT 'chromosome 2' as term, 2 as ord,
                      '''MAL2''' as internal FROM dual
               UNION
               SELECT 'chromosome 3' as term, 3 as ord,
                      '''MAL3''' as internal FROM dual
               UNION
               SELECT 'chromosome 4' as term, 4 as ord,
                      '''MAL4''' as internal FROM dual
               UNION
               SELECT 'chromosome 5' as term, 5 as ord,
                      '''MAL5''' as internal FROM dual
               UNION
               SELECT 'chromosome 6' as term, 6 as ord,
                      '''MAL6''' as internal FROM dual
               UNION
               SELECT 'chromosome 7' as term, 7 as ord,
                      '''MAL7''' as internal FROM dual
               UNION
               SELECT 'chromosome 8' as term, 8 as ord,
                      '''MAL8''' as internal FROM dual
               UNION
               SELECT 'chromosome 9' as term, 9 as ord,
                      '''MAL9''' as internal FROM dual
               UNION
               SELECT 'chromosome 10' as term, 10 as ord,
                      '''MAL10''' as internal FROM dual
               UNION
               SELECT 'chromosome 11' as term, 11 as ord,
                      '''MAL11''' as internal FROM dual
               UNION
               SELECT 'chromosome 12' as term, 12 as ord,
                      '''MAL12''' as internal FROM dual
               UNION
               SELECT 'chromosome 13' as term, 13 as ord,
                      '''MAL13''' as internal FROM dual
               UNION
               SELECT 'chromosome 14' as term, 14 as ord,
                      '''MAL14''' as internal FROM dual
               )
            ORDER BY ord
            </sql>
        </sqlQuery>


        <sqlQuery name="WatersProfileSets">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'HPE' as term,
                      'Waters HPE Percents Averaged' as internal FROM dual
               UNION
               SELECT 'HP' as term,
                      'Waters HP Percents Averaged' as internal FROM dual
               UNION
               SELECT 'Either' as term,
                      'Waters HP% Percents Averaged' as internal FROM dual
               )
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileSet">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Dev. Series HB3 (glass slide), DeRisi' as term,
                      'DeRisi HB3 Smoothed Averaged' as internal FROM dual
               UNION
               SELECT 'Dev. Series 3D7 (glass slide), DeRisi' as term,
                      'DeRisi 3D7 Smoothed Averaged' as internal FROM dual
               UNION
               SELECT 'Dev. Series Dd2 (glass slide), DeRisi' as term,
                      'DeRisi Dd2 Smoothed Averaged' as internal FROM dual
               UNION
               SELECT 'Any of the time courses' as term,
                      'DeRisi % Smoothed Averaged' as internal FROM dual
               )
            </sql>
        </sqlQuery>

        <sqlQuery name="MinOrMax">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Timing of maximal expression' as term,
                      'max' as internal
               FROM dual
               UNION
               SELECT 'Timing of minimal expression' as term,
                      'min' as internal
               FROM dual
               UNION
               SELECT 'Timing of both max and min expression' as term,
                      'both' as internal
               FROM dual
               )
            ORDER BY internal
            </sql>
        </sqlQuery>

        <sqlQuery name="Hours48">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal
            FROM (
               SELECT '1 hour' as term, 0 as ord,
                      '1' as internal FROM dual
               UNION
               SELECT '2 hours' as term, 1 as ord,
                      '2' as internal FROM dual
               UNION
               SELECT '3 hours' as term, 2 as ord,
                      '3' as internal FROM dual
               UNION
               SELECT '4 hours' as term, 3 as ord,
                      '4' as internal FROM dual
               UNION
               SELECT '5 hours' as term, 4 as ord,
                      '5' as internal FROM dual
               UNION
               SELECT '6 hours' as term, 5 as ord,
                      '6' as internal FROM dual
               UNION
               SELECT '7 hours' as term, 6 as ord,
                      '7' as internal FROM dual
               UNION
               SELECT '8 hours' as term, 7 as ord,
                      '8' as internal FROM dual
               UNION
               SELECT '9 hours' as term, 8 as ord,
                      '9' as internal FROM dual
               UNION
               SELECT '10 hours' as term, 9  as ord,
                      '10' as internal FROM dual
               UNION
               SELECT '11 hours' as term, 10 as ord,
                      '11' as internal FROM dual
               UNION
               SELECT '12 hours' as term, 11 as ord,
                      '12' as internal FROM dual
               UNION
               SELECT '13 hours' as term, 12 as ord,
                      '13' as internal FROM dual
               UNION
               SELECT '14 hours' as term, 13 as ord,
                      '14' as internal FROM dual
               UNION
               SELECT '15 hours' as term, 14 as ord,
                      '15' as internal FROM dual
               UNION
               SELECT '16 hours' as term, 15 as ord,
                      '16' as internal FROM dual
               UNION
               SELECT '17 hours' as term, 16 as ord,
                      '17' as internal FROM dual
               UNION
               SELECT '18 hours' as term, 17 as ord,
                      '18' as internal FROM dual
               UNION
               SELECT '19 hours' as term, 18 as ord,
                      '19' as internal FROM dual
               UNION
               SELECT '20 hours' as term, 19 as ord,
                      '20' as internal FROM dual
               UNION
               SELECT '21 hours' as term, 20 as ord,
                      '21' as internal FROM dual
               UNION
               SELECT '22 hours' as term, 21 as ord,
                      '22' as internal FROM dual
               UNION
               SELECT '23 hours' as term, 22 as ord,
                      '23' as internal FROM dual
               UNION
               SELECT '24 hours' as term, 23 as ord,
                      '24' as internal FROM dual
               UNION
               SELECT '25 hours' as term, 24 as ord,
                      '25' as internal FROM dual
               UNION
               SELECT '26 hours' as term, 25 as ord,
                      '26' as internal FROM dual
               UNION
               SELECT '27 hours' as term, 26 as ord,
                      '27' as internal FROM dual
               UNION
               SELECT '28 hours' as term, 27 as ord,
                      '28' as internal FROM dual
               UNION
               SELECT '29 hours' as term, 28 as ord,
                      '29' as internal FROM dual
               UNION
               SELECT '30 hours' as term, 29 as ord,
                      '30' as internal FROM dual
               UNION
               SELECT '31 hours' as term, 30 as ord,
                      '31' as internal FROM dual
               UNION
               SELECT '32 hours' as term, 31 as ord,
                      '32' as internal FROM dual
               UNION
               SELECT '33 hours' as term, 32 as ord,
                      '33' as internal FROM dual
               UNION
               SELECT '34 hours' as term, 33 as ord,
                      '34' as internal FROM dual
               UNION
               SELECT '35 hours' as term, 34 as ord,
                      '35' as internal FROM dual
               UNION
               SELECT '36 hours' as term, 35 as ord,
                      '36' as internal FROM dual
               UNION
               SELECT '37 hours' as term, 36 as ord,
                      '37' as internal FROM dual
               UNION
               SELECT '38 hours' as term, 37 as ord,
                      '38' as internal FROM dual
               UNION
               SELECT '39 hours' as term, 38 as ord,
                      '39' as internal FROM dual
               UNION
               SELECT '40 hours' as term, 39 as ord,
                      '40' as internal FROM dual
               UNION
               SELECT '41 hours' as term, 40 as ord,
                      '41' as internal FROM dual
               UNION
               SELECT '42 hours' as term, 41 as ord,
                      '42' as internal FROM dual
               UNION
               SELECT '43 hours' as term, 42 as ord,
                      '43' as internal FROM dual
               UNION
               SELECT '44 hours' as term, 43 as ord,
                      '44' as internal FROM dual
               UNION
               SELECT '45 hours' as term, 44 as ord,
                      '45' as internal FROM dual
               UNION
               SELECT '46 hours' as term, 45 as ord,
                      '46' as internal FROM dual
               UNION
               SELECT '47 hours' as term, 46 as ord,
                      '47' as internal FROM dual
               UNION
               SELECT '48 hours' as term, 47 as ord,
                      '48' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Hours24">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal
            FROM (
               SELECT '1 hour' as term, 0 as ord,
                      '1' as internal FROM dual
               UNION
               SELECT '2 hours' as term, 1 as ord,
                      '2' as internal FROM dual
               UNION
               SELECT '3 hours' as term, 2 as ord,
                      '3' as internal FROM dual
               UNION
               SELECT '4 hours' as term, 3 as ord,
                      '4' as internal FROM dual
               UNION
               SELECT '5 hours' as term, 4 as ord,
                      '5' as internal FROM dual
               UNION
               SELECT '6 hours' as term, 5 as ord,
                      '6' as internal FROM dual
               UNION
               SELECT '7 hours' as term, 6 as ord,
                      '7' as internal FROM dual
               UNION
               SELECT '8 hours' as term, 7 as ord,
                      '8' as internal FROM dual
               UNION
               SELECT '9 hours' as term, 8 as ord,
                      '9' as internal FROM dual
               UNION
               SELECT '10 hours' as term, 9  as ord,
                      '10' as internal FROM dual
               UNION
               SELECT '11 hours' as term, 10 as ord,
                      '11' as internal FROM dual
               UNION
               SELECT '12 hours' as term, 11 as ord,
                      '12' as internal FROM dual
               UNION
               SELECT '13 hours' as term, 12 as ord,
                      '13' as internal FROM dual
               UNION
               SELECT '14 hours' as term, 13 as ord,
                      '14' as internal FROM dual
               UNION
               SELECT '15 hours' as term, 14 as ord,
                      '15' as internal FROM dual
               UNION
               SELECT '16 hours' as term, 15 as ord,
                      '16' as internal FROM dual
               UNION
               SELECT '17 hours' as term, 16 as ord,
                      '17' as internal FROM dual
               UNION
               SELECT '18 hours' as term, 17 as ord,
                      '18' as internal FROM dual
               UNION
               SELECT '19 hours' as term, 18 as ord,
                      '19' as internal FROM dual
               UNION
               SELECT '20 hours' as term, 19 as ord,
                      '20' as internal FROM dual
               UNION
               SELECT '21 hours' as term, 20 as ord,
                      '21' as internal FROM dual
               UNION
               SELECT '22 hours' as term, 21 as ord,
                      '22' as internal FROM dual
               UNION
               SELECT '23 hours' as term, 22 as ord,
                      '23' as internal FROM dual
               UNION
               SELECT '24 hours' as term, 23 as ord,
                      '24' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="InductionFold">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal
            FROM (
               SELECT '-- None --' as term, 1 as ord,
                      '0' as internal FROM dual
               UNION
               SELECT '>= 2 fold induction' as term, 2 as ord,
                      '2' as internal FROM dual
               UNION
               SELECT '>= 4 fold induction' as term, 3 as ord,
                      '4' as internal FROM dual
               UNION
               SELECT '>= 8 fold induction' as term, 4 as ord,
                      '8' as internal FROM dual
               UNION
               SELECT '>= 16 fold induction' as term, 5 as ord,
                      '16' as internal FROM dual
               UNION
               SELECT '>= 32 fold induction' as term, 6 as ord,
                      '32' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Percentile">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT '-- None --' as term,
                      '0' as internal FROM dual
               UNION
               SELECT '>= 10th percentile' as term,
                      '10' as internal FROM dual
               UNION
               SELECT '>= 20th percentile' as term,
                      '20' as internal FROM dual
               UNION
               SELECT '>= 30th percentile' as term,
                      '30' as internal FROM dual
               UNION
               SELECT '>= 40th percentile' as term,
                      '40' as internal FROM dual
               UNION
               SELECT '>= 50th percentile' as term,
                      '50' as internal FROM dual
               UNION
               SELECT '>= 50th percentile' as term,
                      '50' as internal FROM dual
               UNION
               SELECT '>= 60th percentile' as term,
                      '60' as internal FROM dual
               UNION
               SELECT '>= 70th percentile' as term,
                      '70' as internal FROM dual
               UNION
               SELECT '>= 80th percentile' as term,
                      '80' as internal FROM dual
               UNION
               SELECT '>= 90th percentile' as term,
                      '90' as internal FROM dual
               )
            </sql>
        </sqlQuery>

        <sqlQuery name="PfGenomicSequence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT internal, term
              FROM (SELECT '''MAL1''' AS internal, 'chromosome 1' AS term, 1 AS ord
                    FROM dual
                      UNION
                    SELECT '''MAL2''' AS internal, 'chromosome 2' AS term, 2 AS ord
                    FROM dual
                      UNION
                     SELECT '''MAL3''' AS internal, 'chromosome 3' AS term, 3 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL4''' AS internal, 'chromosome 4' AS term, 4 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL5''' AS internal, 'chromosome 5' AS term, 5 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL6''' AS internal, 'chromosome 6' AS term, 6 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL7''' AS internal, 'chromosome 7' AS term, 7 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL8''' AS internal, 'chromosome 8' AS term, 8 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL9''' AS internal, 'chromosome 9' AS term, 9 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL10''' AS internal, 'chromosome 10' AS term, 10 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL11''' AS internal, 'chromosome 11' AS term, 11 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL12''' AS internal, 'chromosome 12' AS term, 12 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL13''' AS internal, 'chromosome 13' AS term, 13 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL14''' AS internal, 'chromosome 14' AS term, 14 AS ord
                    FROM dual
                     UNION
                    SELECT '''AJ276844''' AS internal,
                           'mitochondrial genome' AS term, 15 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95275''' AS internal, 'plastid IR-A' AS term, 16 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95276''' AS internal, 'plastid IR-B' AS term, 17 AS ord
                    FROM dual)
              ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="PfNonnuclearSequence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT internal, term
              FROM (SELECT '''AJ276844''' AS internal,
                           'mitochondrial genome' AS term, 15 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95275''' AS internal, 'plastid IR-A' AS term, 16 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95276''' AS internal, 'plastid IR-B' AS term, 17 AS ord
                    FROM dual)
              ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="PfGenomicSequenceOrNot">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT internal, term
              FROM (SELECT '''choose one''' AS internal, 'choose one' AS term, 0 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL1''' AS internal, 'chromosome 1' AS term, 1 AS ord
                    FROM dual
                      UNION
                    SELECT '''MAL2''' AS internal, 'chromosome 2' AS term, 2 AS ord
                    FROM dual
                      UNION
                     SELECT '''MAL3''' AS internal, 'chromosome 3' AS term, 3 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL4''' AS internal, 'chromosome 4' AS term, 4 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL5''' AS internal, 'chromosome 5' AS term, 5 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL6''' AS internal, 'chromosome 6' AS term, 6 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL7''' AS internal, 'chromosome 7' AS term, 7 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL8''' AS internal, 'chromosome 8' AS term, 8 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL9''' AS internal, 'chromosome 9' AS term, 9 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL10''' AS internal, 'chromosome 10' AS term, 10 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL11''' AS internal, 'chromosome 11' AS term, 11 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL12''' AS internal, 'chromosome 12' AS term, 12 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL13''' AS internal, 'chromosome 13' AS term, 13 AS ord
                    FROM dual
                     UNION
                    SELECT '''MAL14''' AS internal, 'chromosome 14' AS term, 14 AS ord
                    FROM dual
                     UNION
                    SELECT '''AJ276844''' AS internal,
                           'mitochondrial genome' AS term, 15 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95275''' AS internal, 'plastid IR-A' AS term, 16 AS ord
                    FROM dual
                     UNION
                    SELECT '''X95276''' AS internal, 'plastid IR-B' AS term, 17 AS ord
                    FROM dual)
              ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ExtraerythrocyticStages">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT name AS term, element_order AS internal
                FROM apidb.profileElementName
                WHERE name IN
                     ('Sporozoite', 'Gametocyte')
                UNION SELECT 'Either' AS term, 0 as internal FROM dual
                ORDER BY internal
            </sql>
        </sqlQuery>

        <sqlQuery name="IntraerythrocyticStages">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT name AS term, element_order AS internal
                FROM apidb.profileElementName
                WHERE name IN
                     ('Early Ring', 'Late Ring', 'Early Schizogony', 'Late Schizogony',
                     'Early Trophozoite', 'Late Trophozoite', 'Merozoite')
                UNION SELECT 'Any' AS term, 0 as internal FROM dual
                ORDER BY internal
            </sql>
        </sqlQuery>

        <sqlQuery name="Synchronization">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Sorbitol' AS term,
                      '''winzeler_cc_sorbPct''' AS internal, 1 AS ord FROM dual
               UNION
               SELECT 'Temperature' AS term,
                      '''winzeler_cc_tempPct''' AS internal, 2 AS ord FROM dual
               UNION
               SELECT 'Either' AS term,
                      '''winzeler_cc_sorbPct'', ''winzeler_cc_tempPct''' AS internal,
                      3 AS ord
               FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Localization">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Apicoplast' AS term,
                      'apicoplast' AS internal, 1 AS ord FROM dual
               UNION
               SELECT 'RBC membrane (Pexel motif)' AS term,
                      'pexel' AS internal, 2 AS ord FROM dual
               UNION
               SELECT 'RBC membrane (HT motif)' AS term,
                      'ht' AS internal, 3 AS ord
               FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="PhyleticIndentMap">
            <column name="internal"/>
            <column name="term"/>
            <sql><![CDATA[
         SELECT internal, term FROM (
 SELECT 'Archaea' AS term, '0' AS internal, 1 AS ord FROM dual
 UNION
   SELECT 'hal' AS term, '1' AS internal, 2 AS ord FROM dual
   UNION
   SELECT 'mja' AS term, '1' AS internal, 3 AS ord FROM dual
   UNION
   SELECT 'neq' AS term, '1' AS internal, 4 AS ord FROM dual
   UNION
   SELECT 'sso' AS term, '1' AS internal, 5 AS ord FROM dual
   UNION
 SELECT 'Bacteria' AS term, '0' AS internal, 6 AS ord FROM dual
 UNION
     SELECT 'aae' AS term, '1' AS internal, 8 AS ord FROM dual
     UNION
     SELECT 'ban' AS term, '1' AS internal, 9 AS ord FROM dual
     UNION
     SELECT 'cpe' AS term, '1' AS internal, 10 AS ord FROM dual
     UNION
     SELECT 'cpn' AS term, '1' AS internal, 11 AS ord FROM dual
     UNION
     SELECT 'cte' AS term, '1' AS internal, 12 AS ord FROM dual
     UNION
     SELECT 'det' AS term, '1' AS internal, 13 AS ord FROM dual
     UNION
     SELECT 'dra' AS term, '1' AS internal, 14 AS ord FROM dual
     UNION
     SELECT 'lmo' AS term, '1' AS internal, 15 AS ord FROM dual
     UNION
     SELECT 'mtu' AS term, '1' AS internal, 16 AS ord FROM dual
     UNION
     SELECT 'rba' AS term, '1' AS internal, 17 AS ord FROM dual
     UNION
     SELECT 'sau' AS term, '1' AS internal, 18 AS ord FROM dual
     UNION
     SELECT 'spn' AS term, '1' AS internal, 19 AS ord FROM dual
     UNION
     SELECT 'syn' AS term, '1' AS internal, 20 AS ord FROM dual
     UNION
     SELECT 'tma' AS term, '1' AS internal, 21 AS ord FROM dual
     UNION
     SELECT 'tpa' AS term, '1' AS internal, 22 AS ord FROM dual
     UNION
   SELECT 'Proteobacteria' AS term, '1' AS internal, 23 AS ord FROM dual
   UNION
     SELECT 'atu' AS term, '2' AS internal, 24 AS ord FROM dual
     UNION
     SELECT 'bsu' AS term, '2' AS internal, 25 AS ord FROM dual
     UNION
     SELECT 'bur' AS term, '2' AS internal, 26 AS ord FROM dual
     UNION
     SELECT 'cbu' AS term, '2' AS internal, 27 AS ord FROM dual
     UNION
     SELECT 'cje' AS term, '2' AS internal, 28 AS ord FROM dual
     UNION
     SELECT 'eco' AS term, '2' AS internal, 29 AS ord FROM dual
     UNION
     SELECT 'ftu' AS term, '2' AS internal, 30 AS ord FROM dual
     UNION
     SELECT 'gsu' AS term, '2' AS internal, 31 AS ord FROM dual
     UNION
     SELECT 'rso' AS term, '2' AS internal, 32 AS ord FROM dual
     UNION
     SELECT 'rty' AS term, '2' AS internal, 33 AS ord FROM dual
     UNION
     SELECT 'sfl' AS term, '2' AS internal, 34 AS ord FROM dual
     UNION
     SELECT 'sty' AS term, '2' AS internal, 35 AS ord FROM dual
     UNION
     SELECT 'vch' AS term, '2' AS internal, 36 AS ord FROM dual
     UNION
     SELECT 'wsu' AS term, '2' AS internal, 37 AS ord FROM dual
     UNION
     SELECT 'ype' AS term, '2' AS internal, 38 AS ord FROM dual
     UNION
 SELECT 'Eukaryota' AS term, '0' AS internal, 39 AS ord FROM dual
 UNION
     SELECT 'ddi' AS term, '1' AS internal, 41 AS ord FROM dual
     UNION
     SELECT 'ehi' AS term, '1' AS internal, 42 AS ord FROM dual
     UNION
     SELECT 'gla' AS term, '1' AS internal, 43 AS ord FROM dual
     UNION
   SELECT 'Alveolates' AS term, '1' AS internal, 52 AS ord FROM dual
   UNION
     SELECT 'Ciliates' AS term, '2' AS internal, 53 AS ord FROM dual
     UNION
       SELECT 'tth' AS term, '3' AS internal, 54 AS ord FROM dual
       UNION
     SELECT 'Apicomplexa' AS term, '2' AS internal, 55 AS ord FROM dual
     UNION
       SELECT 'Coccidia' AS term, '3' AS internal, 56 AS ord FROM dual
       UNION
         SELECT 'cho' AS term, '4' AS internal, 57 AS ord FROM dual
         UNION
         SELECT 'cpa' AS term, '4' AS internal, 58 AS ord FROM dual
         UNION
         SELECT 'tgo' AS term, '4' AS internal, 59 AS ord FROM dual
         UNION
       SELECT 'Haemosporida' AS term, '3' AS internal, 61 AS ord FROM dual
       UNION
         SELECT 'pbe' AS term, '4' AS internal, 62 AS ord FROM dual
         UNION
         SELECT 'pch' AS term, '4' AS internal, 62 AS ord FROM dual
         UNION
         SELECT 'pfa' AS term, '4' AS internal, 64 AS ord FROM dual
         UNION
         SELECT 'pvi' AS term, '4' AS internal, 65 AS ord FROM dual
         UNION
         SELECT 'pyo' AS term, '4' AS internal, 66 AS ord FROM dual
         UNION
         SELECT 'pkn' AS term, '4' AS internal, 67 AS ord FROM dual
         UNION
       SELECT 'Piroplasmida' AS term, '3' AS internal, 68 AS ord FROM dual
       UNION
         SELECT 'the' AS term, '4' AS internal, 69 AS ord FROM dual
         UNION
         SELECT 'tan' AS term, '4' AS internal, 70 AS ord FROM dual
         UNION
   SELECT 'Kinetoplastida' AS term, '1' AS internal, 71 AS ord FROM dual
   UNION
     SELECT 'lma' AS term, '2' AS internal, 80 AS ord FROM dual
     UNION
     SELECT 'tbr' AS term, '2' AS internal, 81 AS ord FROM dual
     UNION
     SELECT 'tcr' AS term, '2' AS internal, 82 AS ord FROM dual
     UNION
   SELECT 'Plants/Algae' AS term, '1' AS internal, 82.1 AS ord FROM dual
   UNION
     SELECT 'ath' AS term, '2' AS internal, 82.2 AS ord FROM dual
     UNION
     SELECT 'cre' AS term, '2' AS internal, 82.3 AS ord FROM dual
     UNION
     SELECT 'cme' AS term, '2' AS internal, 82.4 AS ord FROM dual
     UNION
     SELECT 'gth' AS term, '2' AS internal, 82.5 AS ord FROM dual
     UNION
     SELECT 'osa' AS term, '2' AS internal, 82.6 AS ord FROM dual
     UNION
     SELECT 'ota' AS term, '2' AS internal, 82.7 AS ord FROM dual
     UNION
     SELECT 'tps' AS term, '2' AS internal, 82.8 AS ord FROM dual
     UNION
   SELECT 'Fungi' AS term, '1' AS internal, 83 AS ord FROM dual
   UNION
     SELECT 'ago' AS term, '2' AS internal, 84 AS ord FROM dual
     UNION
     SELECT 'aor' AS term, '2' AS internal, 85 AS ord FROM dual
     UNION
     SELECT 'cgl' AS term, '2' AS internal, 86 AS ord FROM dual
     UNION
     SELECT 'cne' AS term, '2' AS internal, 87 AS ord FROM dual
     UNION
     SELECT 'dha' AS term, '2' AS internal, 88 AS ord FROM dual
     UNION
     SELECT 'ecu' AS term, '2' AS internal, 89 AS ord FROM dual
     UNION
     SELECT 'kla' AS term, '2' AS internal, 90 AS ord FROM dual
     UNION
     SELECT 'ncr' AS term, '2' AS internal, 91 AS ord FROM dual
     UNION
     SELECT 'pha' AS term, '2' AS internal, 92 AS ord FROM dual
     UNION
     SELECT 'sce' AS term, '2' AS internal, 93 AS ord FROM dual
     UNION
     SELECT 'sma' AS term, '2' AS internal, 94 AS ord FROM dual
     UNION
     SELECT 'spo' AS term, '2' AS internal, 95 AS ord FROM dual
     UNION
     SELECT 'yli' AS term, '2' AS internal, 96 AS ord FROM dual
     UNION
   SELECT 'Animals' AS term, '1' AS internal, 97 AS ord FROM dual
   UNION
     SELECT 'Nematodes' AS term, '2' AS internal, 98 AS ord FROM dual
     UNION
       SELECT 'bma' AS term, '3' AS internal, 99 AS ord FROM dual
       UNION
       SELECT 'cel' AS term, '3' AS internal, 100 AS ord FROM dual
       UNION
       SELECT 'cbr' AS term, '3' AS internal, 101 AS ord FROM dual
       UNION
     SELECT 'Arthropoda' AS term, '2' AS internal, 102 AS ord FROM dual
     UNION
       SELECT 'aed' AS term, '3' AS internal, 103 AS ord FROM dual
       UNION
       SELECT 'aga' AS term, '3' AS internal, 104 AS ord FROM dual
       UNION
       SELECT 'ame' AS term, '3' AS internal, 105 AS ord FROM dual
       UNION
       SELECT 'dme' AS term, '3' AS internal, 106 AS ord FROM dual
       UNION
     SELECT 'Vertebrates' AS term, '2' AS internal, 107 AS ord FROM dual
     UNION
       SELECT 'Bony Fish' AS term, '3' AS internal, 108 AS ord FROM dual
       UNION
         SELECT 'cin' AS term, '4' AS internal, 109 AS ord FROM dual
         UNION
         SELECT 'dre' AS term, '4' AS internal, 110 AS ord FROM dual
         UNION
         SELECT 'fru' AS term, '4' AS internal, 111 AS ord FROM dual
         UNION
         SELECT 'tni' AS term, '4' AS internal, 112 AS ord FROM dual
         UNION
       SELECT 'Tetrapoda' AS term, '3' AS internal, 113 AS ord FROM dual
       UNION
         SELECT 'Birds' AS term, '4' AS internal, 114 AS ord FROM dual
         UNION
           SELECT 'gga' AS term, '5' AS internal, 115 AS ord FROM dual
           UNION
         SELECT 'Mammals' AS term, '4' AS internal, 116 AS ord FROM dual
         UNION
             SELECT 'hsa' AS term, '5' AS internal, 117 AS ord FROM dual
             UNION
             SELECT 'mmu' AS term, '5' AS internal, 118 AS ord FROM dual
             UNION
             SELECT 'rno' AS term, '5' AS internal, 119 AS ord FROM dual
)
            ORDER BY ord
]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="PhyleticTermMap">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
 SELECT 'Halobacterium sp. NRC-1' as internal, 'hal' as term FROM dual
   UNION
 SELECT 'Methanococcus jannaschii DSSM 2661' as internal, 'mja' as term FROM dual
   UNION
 SELECT 'Sulfolobus solfataricus P2' as internal, 'sso' as term FROM dual
   UNION
 SELECT 'Nanoarchaeum equitans Kin4-M' as internal, 'neq' as term FROM dual
   UNION
 SELECT 'Aquifex aeolicus VF5' as internal, 'aae' as term FROM dual
   UNION
 SELECT 'Thermotoga maritima MSB8' as internal, 'tma' as term FROM dual
   UNION
 SELECT 'Dehalococcoides ethenogenes 195' as internal, 'det' as term FROM dual
   UNION
 SELECT 'Deinococcus radiodurans R1' as internal, 'dra' as term FROM dual
   UNION
 SELECT 'Treponema pallidum subsp. pallidum str. Nichols' as internal, 'tpa' as term FROM dual
   UNION
 SELECT 'Chlorobium tepidum TLS' as internal, 'cte' as term FROM dual
   UNION
 SELECT 'Rhodopirellula baltica SH_1' as internal, 'rba' as term FROM dual
   UNION
 SELECT 'Chlamydophila pneumoniae CWL029' as internal, 'cpn' as term FROM dual
   UNION
 SELECT 'Synechococcus sp. WH8102' as internal, 'syn' as term FROM dual
   UNION
 SELECT 'Mycobacterium tuberculosis H37Rv' as internal, 'mtu' as term FROM dual
   UNION
 SELECT 'Bacillus anthracis Ames' as internal, 'ban' as term FROM dual
   UNION
 SELECT 'Wolinella succinogenes DSM 1740' as internal, 'wsu' as term FROM dual
   UNION
 SELECT 'Geobacter sulfurreducens PCA' as internal, 'gsu' as term FROM dual
   UNION
 SELECT 'Agrobacterium tumefaciens C58 Uwash' as internal, 'atu' as term FROM dual
   UNION
 SELECT 'Ralstonia solanacearum GMI1000' as internal, 'rso' as term FROM dual
   UNION
 SELECT 'Escherichia coli K12' as internal, 'eco' as term FROM dual
   UNION
 SELECT 'Entamoeba histolytica' as internal, 'ehi' as term FROM dual
   UNION
 SELECT 'Dictyostelium discoideum' as internal, 'ddi' as term FROM dual
   UNION
 SELECT 'Cyanodioschyzon merolae 10D' as internal, 'cme' as term FROM dual
   UNION
 SELECT 'Thalassiosira pseudonana' as internal, 'tps' as term FROM dual
   UNION
 SELECT 'Arabidopsis thaliana' as internal, 'ath' as term FROM dual
   UNION
 SELECT 'Oryza sativa' as internal, 'osa' as term FROM dual
   UNION
 SELECT 'Saccharomyces cerevisiae S288C' as internal, 'sce' as term FROM dual
   UNION
 SELECT 'Schizosaccharomyces pombe' as internal, 'spo' as term FROM dual
   UNION
 SELECT 'Yarrowia lipolytica CLIB99' as internal, 'yli' as term FROM dual
   UNION
 SELECT 'Kluyveromyces lactis CLIB210' as internal, 'kla' as term FROM dual
   UNION
 SELECT 'Debaryomyces hansenii CBS767' as internal, 'dha' as term FROM dual
   UNION
 SELECT 'Candida glabrate CBS138' as internal, 'cgl' as term FROM dual
   UNION
 SELECT 'Encephalitozoon cuniculi' as internal, 'ecu' as term FROM dual
   UNION
 SELECT 'Cryptococcus neoformans' as internal, 'cne' as term FROM dual
   UNION
 SELECT 'Ashbya gossypii' as internal, 'ago' as term FROM dual
   UNION
 SELECT 'Neurospora crassa OR74A' as internal, 'ncr' as term FROM dual
   UNION
 SELECT 'Caenorhabditis elegans' as internal, 'cel' as term FROM dual
   UNION
 SELECT 'Caenorhabditis briggsae' as internal, 'cbr' as term FROM dual
   UNION
 SELECT 'Drosophila melanogaster' as internal, 'dme' as term FROM dual
   UNION
 SELECT 'Anopheles gambiae PEST' as internal, 'aga' as term FROM dual
   UNION
 SELECT 'Theileria parva' as internal, 'the' as term FROM dual
   UNION
 SELECT 'Toxoplasma gondii' as internal, 'tgo' as term FROM dual
   UNION
 SELECT 'Cryptosporidium parvum Iowa (Type2)' as internal, 'cpa' as term FROM dual
   UNION
 SELECT 'Cryptosporidium hominis TU502 (Type 1)' as internal, 'cho' as term FROM dual
   UNION
 SELECT 'Plasmodium falciparum 3D7' as internal, 'pfa' as term FROM dual
   UNION
 SELECT 'Plasmodium yoelii 17XNL' as internal, 'pyo' as term FROM dual
   UNION
 SELECT 'Plasmodium knowlesi' as internal, 'pkn' as term FROM dual
   UNION
 SELECT 'Plasmodium vivax' as internal, 'pvi' as term FROM dual
   UNION
 SELECT 'Plasmodium berghei' as internal, 'pbe' as term FROM dual
   UNION
 SELECT 'Plasmodium chabaudi' as internal, 'pch' as term FROM dual
   UNION
 SELECT 'Ciona intestinalis' as internal, 'cin' as term FROM dual
   UNION
 SELECT 'Fugu rubripes' as internal, 'fru' as term FROM dual
   UNION
 SELECT 'Tetraodon nigroviridis' as internal, 'tni' as term FROM dual
   UNION
 SELECT 'Danio rerio' as internal, 'dre' as term FROM dual
   UNION
 SELECT 'Gallus gallus' as internal, 'gga' as term FROM dual
   UNION
 SELECT 'Mus musculus' as internal, 'mmu' as term FROM dual
   UNION
 SELECT 'Rattus norvegicus' as internal, 'rno' as term FROM dual
   UNION
 SELECT 'Homo sapiens' as internal, 'hsa' as term FROM dual
   UNION
 SELECT 'Aedes aegypti' as internal, 'aed' as term FROM dual
   UNION
 SELECT 'Apis mellifera' as internal, 'ame' as term FROM dual
   UNION
 SELECT 'Aspergillus oryzae' as internal, 'aor' as term FROM dual
   UNION
 SELECT 'Brugia malayi' as internal, 'bma' as term FROM dual
   UNION
 SELECT 'Brucella suis 1330' as internal, 'bsu' as term FROM dual
   UNION
 SELECT 'Burkholderia mallei ATCC 23344' as internal, 'bur' as term FROM dual
   UNION
 SELECT 'Coxiella burnetii RSA 493' as internal, 'cbu' as term FROM dual
   UNION
 SELECT 'Campylobacter jejuni subsp. jejuni NCTC 11168' as internal, 'cje' as term FROM dual
   UNION
 SELECT 'Clostridium perfringens str. 13' as internal, 'cpe' as term FROM dual
   UNION
 SELECT 'Chlamydomonas reinhardtii' as internal, 'cre' as term FROM dual
   UNION
 SELECT 'Francisella tularensis subsp. tularensis SCHU S4' as internal, 'ftu' as term FROM dual
   UNION
 SELECT 'Giardia lamblia ATCC 50803' as internal, 'gla' as term FROM dual
   UNION
 SELECT 'Guillardia theta' as internal, 'gth' as term FROM dual
   UNION
 SELECT 'Leishmania major' as internal, 'lma' as term FROM dual
   UNION
 SELECT 'Listeria monocytogenes EGD-e' as internal, 'lmo' as term FROM dual
   UNION
 SELECT 'Ostreococcus tauri' as internal, 'ota' as term FROM dual
   UNION
 SELECT 'Phanerochaete chrysosporium' as internal, 'pha' as term FROM dual
   UNION
 SELECT 'Rickettsia typhi str. Wilmington' as internal, 'rty' as term FROM dual
   UNION
 SELECT 'Staphylococcus aureus subsp. aureus Mu50' as internal, 'sau' as term FROM dual
   UNION
 SELECT 'Shigella flexneri 2a str. 301' as internal, 'sfl' as term FROM dual
   UNION
 SELECT 'Schistosoma mansoni' as internal, 'sma' as term FROM dual
   UNION
 SELECT 'Streptococcus pneumoniae TIGR4' as internal, 'spn' as term FROM dual
   UNION
 SELECT 'Salmonella enterica subsp. enterica serovar Typhi str. CT18' as internal, 'sty' as term FROM dual
   UNION
 SELECT 'Theileria annulata' as internal, 'tan' as term FROM dual
   UNION
 SELECT 'Trypanosoma brucei' as internal, 'tbr' as term FROM dual
   UNION
 SELECT 'Trypanosoma cruzi' as internal, 'tcr' as term FROM dual
   UNION
 SELECT 'Tetrahymena thermophila' as internal, 'tth' as term FROM dual
   UNION
 SELECT 'Vibrio cholerae O1 biovar eltor str. N16961' as internal, 'vch' as term FROM dual
   UNION
 SELECT 'Yersinia pestis CO92' as internal, 'ype' as term FROM dual)
            </sql>
        </sqlQuery>

        <sqlQuery name="MotifDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM
               (SELECT 'Pfalciparum/PfalciparumAnnotatedProteins_plasmoDB-5.3.fasta' AS internal,
                       'P. falciparum' AS term,
                       1 AS idx FROM dual
                UNION
                SELECT 'Pvivax/PvivaxAnnotatedProteins_plasmoDB-5.3.fasta' AS internal,
                       'P. vivax' AS term,
                       2 AS idx FROM dual
                UNION
                SELECT 'Pyoelii/PyoeliiAnnotatedProteins_plasmoDB-5.3.fasta' AS internal,
                       'P. yoelii' AS term,
                       3 AS idx FROM dual
                UNION
                SELECT 'Pberghei/PbergheiAnnotatedProteins_plasmoDB-5.3.fasta' AS internal,
                       'P. berghei' AS term,
                       4 AS idx FROM dual
                UNION
                SELECT 'Pchabaudi/PchabaudiAnnotatedProteins_plasmoDB-5.3.fasta' AS internal,
                       'P. chabaudi' AS term,
                       5 AS idx FROM dual
		)
            ORDER BY idx
            </sql>
        </sqlQuery>

        <sqlQuery name="MotifOrfDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM
               (SELECT 'Pfalciparum/PfalciparumOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. falciparum' AS term,
                       1 AS idx FROM dual
                UNION
                SELECT 'Pvivax/PvivaxOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. vivax' AS term,
                       2 AS idx FROM dual
                UNION
                SELECT 'Pyoelii/PyoeliiOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. yoelii' AS term,
                       3 AS idx FROM dual
                UNION
                SELECT 'Pberghei/PbergheiOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. berghei' AS term,
                       4 AS idx FROM dual
                UNION
                SELECT 'Pchabaudi/PchabaudiOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. chabaudi' AS term,
                       5 AS idx FROM dual
                UNION
                SELECT 'Pgallinaceum/PgallinaceumOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. gallinaceum' AS term,
                       6 AS idx FROM dual
                UNION
                SELECT 'Pknowlesi/PknowlesiOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. knowlesi' AS term,
                       7 AS idx FROM dual
                UNION
                SELECT 'Preichenowi/PreichenowiOrfs_plasmoDB-5.3.fasta' AS internal,
                       'P. reichenowi' AS term,
                       8 AS idx FROM dual
		)
            ORDER BY idx
            </sql>
        </sqlQuery>

        <sqlQuery name="MetabolicPathways">
            <column name="internal"/>
            <column name="term"/>
            <sql>
             SELECT DISTINCT dr.primary_identifier AS internal,
                    TRIM(REPLACE(REPLACE(decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier),'"',''), CHR(191),'')) AS term
             FROM sres.DbRef dr, sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
             WHERE dr.external_database_release_id = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name = 'Links to Pathway Maps'
               AND dr.primary_identifier != 'qualityControl'
             ORDER BY term
            </sql>
        </sqlQuery>

        <sqlQuery name="Mr4Reagents">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal FROM
                  (SELECT reagent_type AS term, reagent_type AS internal,
                          rownum AS ord
                   FROM
                     (SELECT DISTINCT lower(dr.secondary_identifier)
                                AS reagent_type
                      FROM sres.DbRef dr,
                           sres.ExternalDatabaseRelease edr,
                           sres.ExternalDatabase ed
                      WHERE dr.external_database_release_id
                            = edr.external_database_release_id
                        AND edr.external_database_id = ed.external_database_id
                        AND ed.name = 'MR4DBxRefs'
                      ORDER BY lower(dr.secondary_identifier))
                      UNION SELECT 'any' AS term, 'any' AS internal, 0 AS ord
                            FROM dual)
                ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="MassSpecStage">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'any' AS term,
                      'any' AS internal, 1 AS ord FROM dual
               UNION
               SELECT 'Troph/Schizont' AS term,
                      'FWTrophSchizont' AS internal, 2 AS ord FROM dual
               UNION
               SELECT 'iRBC Membrane' AS term,
                      'iRBCmembrane' AS internal, 3 AS ord FROM dual
               UNION
               SELECT 'Gametocyte' AS term,
                      'gametocyte' AS internal, 4 AS ord FROM dual
               UNION
               SELECT 'Merozoite' AS term,
                      'merozoite' AS internal, 5 AS ord FROM dual
               UNION
               SELECT 'Sporozoite' AS term,
                      'sporozoite' AS internal, 6 AS ord FROM dual
               UNION
               SELECT 'Trophozoite' AS term,
                      'trophozoite' AS internal, 7 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="WhichEnd">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term,
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term,
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord)
            </sql>
        </sqlQuery>

        <sqlQuery name="WhichEnd2">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term,
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term,
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord DESC)
            </sql>
        </sqlQuery>

        <sqlQuery name="ProteinDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'GenBank' AS term,
                      '''NRDB_gb_dbXRefBySeqIdentity''' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'RefSeq' AS term,
                      '''NRDB_ref_dbXRefBySeqIdentity''' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT 'Swiss-Prot' AS term,
                      '''NRDB_sp_dbXRefBySeqIdentity''' AS internal,
                      4 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Clades">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT tn.name AS term, taxon_id AS internal
                FROM sres.taxonname tn
                WHERE tn.name IN
                      ('Archaea', 'Eukaryota', 'Apicomplexa', 'Chordata',
                       'Bacteria')
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileDistanceMethod">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Euclidean Distance' AS term,
                      'euclidean_distance' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'Pearson Correlation' AS term,
                      'pearson_correlation' AS internal,
                      2 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileSearchGoal">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'most similar' AS term,
                      'similar' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'least similar' AS term,
                      'dissimilar' AS internal,
                      2 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileProfileSet">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '3D7' AS term,
                      'DeRisi 3D7 Smoothed Averaged' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'Dd2' AS term,
                      'DeRisi Dd2 Smoothed Averaged' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'HB3' AS term,
                      'DeRisi HB3 Smoothed Averaged' AS internal,
                      3 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileTimeShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'allow' AS term,
                      '1' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'not allow' AS term,
                      '0' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileScaleData">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'scale to [0..1]' AS term,
                      '1' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'not scale' AS term,
                      '0' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileMinShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '0 hour' AS term,
                      '0' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT '1 hour' AS term,
                      '1' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT '2 hours' AS term,
                      '2' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT '3 hours' AS term,
                      '3' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT '4 hours' AS term,
                      '4' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT '5 hours' AS term,
                      '5' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT '6 hours' AS term,
                      '6' AS internal,
                      7 AS ord FROM dual
               UNION
               SELECT '7 hours' AS term,
                      '7' AS internal,
                      8 AS ord FROM dual
               UNION
               SELECT '8 hours' AS term,
                      '8' AS internal,
                      9 AS ord FROM dual
               UNION
               SELECT '9 hours' AS term,
                      '9' AS internal,
                      10 AS ord FROM dual
               UNION
               SELECT '10 hours' AS term,
                      '10' AS internal,
                      11 AS ord FROM dual
               UNION
               SELECT '11 hours' AS term,
                      '11' AS internal,
                      12 AS ord FROM dual
               UNION
               SELECT '12 hours' AS term,
                      '12' AS internal,
                      13 AS ord FROM dual
               UNION
               SELECT '13 hours' AS term,
                      '13' AS internal,
                      14 AS ord FROM dual
               UNION
               SELECT '14 hours' AS term,
                      '14' AS internal,
                      15 AS ord FROM dual
               UNION
               SELECT '15 hours' AS term,
                      '15' AS internal,
                      16 AS ord FROM dual
               UNION
               SELECT '16 hours' AS term,
                      '16' AS internal,
                      17 AS ord FROM dual
               UNION
               SELECT '17 hours' AS term,
                      '17' AS internal,
                      18 AS ord FROM dual
               UNION
               SELECT '18 hours' AS term,
                      '18' AS internal,
                      19 AS ord FROM dual
               UNION
               SELECT '19 hours' AS term,
                      '19' AS internal,
                      20 AS ord FROM dual
               UNION
               SELECT '20 hours' AS term,
                      '20' AS internal,
                      21 AS ord FROM dual
               UNION
               SELECT '21 hours' AS term,
                      '21' AS internal,
                      22 AS ord FROM dual
               UNION
               SELECT '22 hours' AS term,
                      '22' AS internal,
                      23 AS ord FROM dual
               UNION
               SELECT '23 hours' AS term,
                      '23' AS internal,
                      24 AS ord FROM dual
               UNION
               SELECT '24 hours' AS term,
                      '24' AS internal,
                      25 AS ord FROM dual
               UNION
               SELECT '25 hours' AS term,
                      '25' AS internal,
                      26 AS ord FROM dual
               UNION
               SELECT '26 hours' AS term,
                      '26' AS internal,
                      27 AS ord FROM dual
               UNION
               SELECT '27 hours' AS term,
                      '27' AS internal,
                      28 AS ord FROM dual
               UNION
               SELECT '28 hours' AS term,
                      '28' AS internal,
                      29 AS ord FROM dual
               UNION
               SELECT '29 hours' AS term,
                      '29' AS internal,
                      30 AS ord FROM dual
               UNION
               SELECT '30 hours' AS term,
                      '30' AS internal,
                      31 AS ord FROM dual
               UNION
               SELECT '31 hours' AS term,
                      '31' AS internal,
                      32 AS ord FROM dual
               UNION
               SELECT '32 hours' AS term,
                      '32' AS internal,
                      33 AS ord FROM dual
               UNION
               SELECT '33 hours' AS term,
                      '33' AS internal,
                      34 AS ord FROM dual
               UNION
               SELECT '34 hours' AS term,
                      '34' AS internal,
                      35 AS ord FROM dual
               UNION
               SELECT '35 hours' AS term,
                      '35' AS internal,
                      36 AS ord FROM dual
               UNION
               SELECT '36 hours' AS term,
                      '36' AS internal,
                      37 AS ord FROM dual
               UNION
               SELECT '37 hours' AS term,
                      '37' AS internal,
                      38 AS ord FROM dual
               UNION
               SELECT '38 hours' AS term,
                      '38' AS internal,
                      39 AS ord FROM dual
               UNION
               SELECT '39 hours' AS term,
                      '39' AS internal,
                      40 AS ord FROM dual
               UNION
               SELECT '40 hours' AS term,
                      '40' AS internal,
                      41 AS ord FROM dual
               UNION
               SELECT '41 hours' AS term,
                      '41' AS internal,
                      42 AS ord FROM dual
               UNION
               SELECT '42 hours' AS term,
                      '42' AS internal,
                      43 AS ord FROM dual
               UNION
               SELECT '43 hours' AS term,
                      '43' AS internal,
                      44 AS ord FROM dual
               UNION
               SELECT '44 hours' AS term,
                      '44' AS internal,
                      45 AS ord FROM dual
               UNION
               SELECT '45 hours' AS term,
                      '45' AS internal,
                      46 AS ord FROM dual
               UNION
               SELECT '46 hours' AS term,
                      '46' AS internal,
                      47 AS ord FROM dual
               UNION
               SELECT '47 hours' AS term,
                      '47' AS internal,
                      48 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileMaxShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '0 hour' AS term,
                      '0' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT '1 hour' AS term,
                      '1' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT '2 hours' AS term,
                      '2' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT '3 hours' AS term,
                      '3' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT '4 hours' AS term,
                      '4' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT '5 hours' AS term,
                      '5' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT '6 hours' AS term,
                      '6' AS internal,
                      7 AS ord FROM dual
               UNION
               SELECT '7 hours' AS term,
                      '7' AS internal,
                      8 AS ord FROM dual
               UNION
               SELECT '8 hours' AS term,
                      '8' AS internal,
                      9 AS ord FROM dual
               UNION
               SELECT '9 hours' AS term,
                      '9' AS internal,
                      10 AS ord FROM dual
               UNION
               SELECT '10 hours' AS term,
                      '10' AS internal,
                      11 AS ord FROM dual
               UNION
               SELECT '11 hours' AS term,
                      '11' AS internal,
                      12 AS ord FROM dual
               UNION
               SELECT '12 hours' AS term,
                      '12' AS internal,
                      13 AS ord FROM dual
               UNION
               SELECT '13 hours' AS term,
                      '13' AS internal,
                      14 AS ord FROM dual
               UNION
               SELECT '14 hours' AS term,
                      '14' AS internal,
                      15 AS ord FROM dual
               UNION
               SELECT '15 hours' AS term,
                      '15' AS internal,
                      16 AS ord FROM dual
               UNION
               SELECT '16 hours' AS term,
                      '16' AS internal,
                      17 AS ord FROM dual
               UNION
               SELECT '17 hours' AS term,
                      '17' AS internal,
                      18 AS ord FROM dual
               UNION
               SELECT '18 hours' AS term,
                      '18' AS internal,
                      19 AS ord FROM dual
               UNION
               SELECT '19 hours' AS term,
                      '19' AS internal,
                      20 AS ord FROM dual
               UNION
               SELECT '20 hours' AS term,
                      '20' AS internal,
                      21 AS ord FROM dual
               UNION
               SELECT '21 hours' AS term,
                      '21' AS internal,
                      22 AS ord FROM dual
               UNION
               SELECT '22 hours' AS term,
                      '22' AS internal,
                      23 AS ord FROM dual
               UNION
               SELECT '23 hours' AS term,
                      '23' AS internal,
                      24 AS ord FROM dual
               UNION
               SELECT '24 hours' AS term,
                      '24' AS internal,
                      25 AS ord FROM dual
               UNION
               SELECT '25 hours' AS term,
                      '25' AS internal,
                      26 AS ord FROM dual
               UNION
               SELECT '26 hours' AS term,
                      '26' AS internal,
                      27 AS ord FROM dual
               UNION
               SELECT '27 hours' AS term,
                      '27' AS internal,
                      28 AS ord FROM dual
               UNION
               SELECT '28 hours' AS term,
                      '28' AS internal,
                      29 AS ord FROM dual
               UNION
               SELECT '29 hours' AS term,
                      '29' AS internal,
                      30 AS ord FROM dual
               UNION
               SELECT '30 hours' AS term,
                      '30' AS internal,
                      31 AS ord FROM dual
               UNION
               SELECT '31 hours' AS term,
                      '31' AS internal,
                      32 AS ord FROM dual
               UNION
               SELECT '32 hours' AS term,
                      '32' AS internal,
                      33 AS ord FROM dual
               UNION
               SELECT '33 hours' AS term,
                      '33' AS internal,
                      34 AS ord FROM dual
               UNION
               SELECT '34 hours' AS term,
                      '34' AS internal,
                      35 AS ord FROM dual
               UNION
               SELECT '35 hours' AS term,
                      '35' AS internal,
                      36 AS ord FROM dual
               UNION
               SELECT '36 hours' AS term,
                      '36' AS internal,
                      37 AS ord FROM dual
               UNION
               SELECT '37 hours' AS term,
                      '37' AS internal,
                      38 AS ord FROM dual
               UNION
               SELECT '38 hours' AS term,
                      '38' AS internal,
                      39 AS ord FROM dual
               UNION
               SELECT '39 hours' AS term,
                      '39' AS internal,
                      40 AS ord FROM dual
               UNION
               SELECT '40 hours' AS term,
                      '40' AS internal,
                      41 AS ord FROM dual
               UNION
               SELECT '41 hours' AS term,
                      '41' AS internal,
                      42 AS ord FROM dual
               UNION
               SELECT '42 hours' AS term,
                      '42' AS internal,
                      43 AS ord FROM dual
               UNION
               SELECT '43 hours' AS term,
                      '43' AS internal,
                      44 AS ord FROM dual
               UNION
               SELECT '44 hours' AS term,
                      '44' AS internal,
                      45 AS ord FROM dual
               UNION
               SELECT '45 hours' AS term,
                      '45' AS internal,
                      46 AS ord FROM dual
               UNION
               SELECT '46 hours' AS term,
                      '46' AS internal,
                      47 AS ord FROM dual
               UNION
               SELECT '47 hours' AS term,
                      '47' AS internal,
                      48 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="CaseIndependence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      '-i' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      ' ' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="WholeWords">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      'true' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      'false' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="TextSearchDatasets">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Gene product' AS term,
                      'PlasmoDB_product.txt' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'Gene notes' AS term,
                      'PlasmoDB_notes.txt' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'User comments' AS term,
                      'PlasmoDB_comments.txt' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'Protein domain names and descriptions' AS term,
                      'PlasmoDB_interpro.txt' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT 'Similar proteins (BLAST hits v. NRDB)' AS term,
                      'PlasmoDB_blast.txt' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT 'EC descriptions' AS term,
                      'PlasmoDB_ec.txt' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT 'GO terms and definitions' AS term,
                      'PlasmoDB_go.txt' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT 'Metabolic pathway names and descriptions' AS term,
                      'PlasmoDB_metpaths.txt' AS internal,
                      7 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="DomainDatabase">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT DISTINCT ed.name AS term,
                            edr.external_database_release_id AS internal
            FROM sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE dr.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND dr.db_ref_id IN
                  (SELECT draf.db_ref_id
                   FROM dots.DomainFeature df, dots.DbRefAaFeature draf,
                        core.AlgorithmInvocation ainv,
                        core.AlgorithmImplementation aimp
                   WHERE df.aa_feature_id = draf.aa_feature_id
                     AND df.row_alg_invocation_id = ainv.algorithm_invocation_id
                     AND ainv.algorithm_implementation_id
                         = aimp.algorithm_implementation_id
                     AND aimp.executable
                         = 'ApiCommonData::Load::Plugin::InsertInterproscanResults')
            UNION
              SELECT ' Choose one:' AS term, -1 AS internal
              FROM dual
            ORDER BY term
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="DomainAccession">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT DISTINCT dr.primary_identifier AS internal,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS term
                FROM dots.DbRefAaFeature draf, sres.DbRef dr
                WHERE draf.db_ref_id = dr.db_ref_id
            </sql>
        </sqlQuery -->

        <sqlQuery name="DayAndStrain">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT pen.profile_element_name_id AS internal,
                   DECODE(ps.name, 'winzeler_NF54_pct', 'Strain NF54',
                                   'winzeler_3D7_pct', 'Strain 3D7',
                                   'winzeler_3D7_MACpct', 'Strain 3D7 (MACS-purified)',
                          ps.name)
                   ||  REPLACE(pen.name, 'Day', ' Day ') AS term
            FROM apidb.profileSet ps, apidb.profileElementName pen
            WHERE ps.name IN ('winzeler_3D7_MACpct', 'winzeler_3D7_pct','winzeler_NF54_pct')
              AND ps.profile_set_id = pen.profile_set_id
            ORDER BY ps.name, pen.element_order
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="Localization">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT DECODE(ed.name,
                              'subcellular motif from Cowman',
                                  'RBC membrane (Pexel motif)',
                              'subcellular motif from Haldar',
                                  'RBC membrane (HT motif)',
                              'apicoplast data from 4.4', 'Apicoplast')
                           AS term,
                       edr.external_database_release_id AS internal
                FROM sres.ExternalDatabase ed,
                     sres.ExternalDatabaseRelease edr
                WHERE ed.external_database_id = edr.external_database_id
                  AND ed.name IN ('subcellular motif from Cowman',
                                  'subcellular motif from Haldar',
                                  'apicoplast data from 4.4')
                ORDER BY edr.external_database_release_id DESC
            </sql>
        </sqlQuery -->

        <sqlQuery name="cowmanSample">
            <column name="internal"/>
            <column name="term"/>
            <sql>
SELECT distinct lg.name AS term, 
   lg.logical_group_id AS internal 
  FROM STUDY.Study s, RAD.StudyAssay sa, RAD.AssayAnalysis aa, RAD.analysis a,
      RAD.Protocol p, RAD.AnalysisInput ai, RAD.LogicalGroup lg
  WHERE s.name in ('Molecular mechanism for switching of P.falciparum invasion pathways into human erythrocytes',
            'P.falciparum strain 3D7, SIR2 knockout',
            'Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions')
  AND p.name = 'R Expression Statistics'
  AND sa.study_id = s.study_id
  AND aa.assay_id = sa.assay_id
  AND a.analysis_id = aa.analysis_id
  AND a.protocol_id = p.protocol_id
  AND ai.analysis_id = a.analysis_id
  AND lg.logical_group_id = ai.logical_group_id
            </sql>
        </sqlQuery>

        <sqlQuery name="diffExprComparisons">
            <column name="internal"/>
            <column name="term"/>
            <sql> SELECT * FROM (
            SELECT '3D7 SIR2 KO 8hr  --  3D7 WT 8hr'
                AS term,
                   '3D7 SIR2 KO 8hr*3D7 WT 8hr'
                AS internal, 1 as idx
                FROM dual
            UNION
            SELECT 'D10 WT 48hr  --  3D7 WT 48hr'
                AS term,
                   'D10 WT 48hr*3D7 WT 48hr'
                AS internal, 2 as idx
                FROM dual
            UNION
            SELECT '3D7 PfRh2b KO 48hr  --  3D7 WT 48hr'
                AS term,
                   '3D7 PfRh2b KO 48hr*3D7 WT 48hr'
                AS internal, 3 as idx
                FROM dual
             ) 
            ORDER BY idx
           </sql>
        </sqlQuery>

        <sqlQuery name="regulated_dir">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'down-regulated' as term, '-' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'up-regulated' as term, '' as internal, 2 as idx
                FROM dual
            ) 
            ORDER BY idx
           </sql>
        </sqlQuery>

     </querySet>

<!-- ////////// END VOCABULARY //////////// -->

<!-- //////////  TABLE QUERIES //////////// -->
    <querySet name="GeneTables">

    <sqlQuery name="TwoChannelDifferentialExpression" isCacheable='false'>
       <paramRef ref="params.primaryKey"/>
       <column name="studyName" />
       <column name="fold_change" />
       <column name="confidence" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
          SELECT lg.name as studyName,
	      max(to_char(de.fold_change, '999.99')) as fold_change,
              max(to_char(de.confidence,'99.99')) as confidence
            FROM Rad.LogicalGroup lg,
                 Rad.AnalysisInput ai,
                 Rad.Analysis a, 
                 RAD.DifferentialExpression de, 
                 Rad.ShortOligoFamily sof,
                 Rad.Protocol p, 
                 Rad.ProtocolParam pp, 
                 Rad.AnalysisParam ap,
                 ApiDB.GeneAlias ga
            WHERE lg.name = 'DOZI mutant vs. Wild Type - Loess Normalized Analyses'
             AND ai.logical_group_id = lg.logical_group_id 
             AND a.analysis_id = ai.analysis_id
             AND de.analysis_id = a.analysis_id
             AND sof.composite_element_id = de.row_id
             AND sof.source_id is not null
             AND ga.gene = '$$primaryKey$$'
             AND ga.alias = sof.source_id
             AND p.name = 'PaGE'
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND pp.name = 'reference_condition'
             AND ap.protocol_param_id = pp.protocol_param_id
             AND a.analysis_id = ap.analysis_id
             GROUP BY lg.name
        ]]>
       </sql>
    </sqlQuery>

        <sqlQuery name="SNPs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="strain_a_query"/>
            <column name="strain_b_query"/>
            <column name="strain_a_disp"/>
            <column name="strain_b_disp"/>
            <column name="gene_source_id"/>
            <column name="num_non_synonymous"/>
            <column name="num_synonymous"/>
            <column name="num_nonsense"/>
            <column name="num_non_coding"/>
            <column name="cds_snp_density"/>
            <column name="num_total"/>

            <sql>
            <![CDATA[
              SELECT
              source_id as gene_source_id,
              'Pf-' || replace(strain_a,' ','%20') as strain_a_query,
              CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-'|| replace(strain_b,' ','%20') END  as strain_b_query,
              CASE WHEN strain_b = 'Preich' THEN 'Sp. Pf-'||strain_a ELSE strain_a END as strain_a_disp,
              CASE WHEN strain_b = 'Preich' THEN 'Sp. P.reichenowi' ELSE strain_b END as strain_b_disp,
              CASE WHEN strain_b = 'Preich' THEN 0 ELSE total END as ord, cds_length,
	      round(non_synonymous / CASE synonymous
	         WHEN 0 THEN 1
		 ELSE synonymous end, 2) as dn_ds_ratio,
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,
              stop as num_nonsense,non_coding as num_non_coding,total as num_total,
              round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density
	      FROM apidb.snpsummary
	      WHERE source_id = '$$primaryKey$$'
              ORDER BY ord desc
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Notes" displayName="Notes" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_string"/>
            <sql>
            <![CDATA[
            SELECT nfc.comment_string
            FROM dots.naFeatureComment nfc, dots.GeneFeature nf
            WHERE nf.source_id='$$primaryKey$$'
              AND nf.na_feature_id = nfc.na_feature_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="UserComments" displayName="User Comments" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
			<column name="comment_id"/>
			<column name="stable_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id, c.stable_id,
                     NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.GeneFeature gf
              WHERE u.email = c.email
                    AND c.comment_target_id = 'gene'
                    AND c.stable_id = gf.source_id
                    AND gf.source_id = '$$primaryKey$$'
			  ORDER BY c.comment_date DESC
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="EcNumber" displayName="EC Numbers" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="ec_number" />
            <column name="source"/>
            <column name="ec_description"/>
            <column name="expasy_url" />
            <sql>
            <![CDATA[
            SELECT distinct asec.evidence_code AS source, ec.ec_number,
                   ec.description as ec_description,
                   'http://us.expasy.org/cgi-bin/enzyme-search-ec?field1='
                   ||ec_number_1
                   || decode(ec_number_2, null, null,
                             chr(38) || 'field2='||ec_number_2)
                   || decode(ec_number_3, null, null,
                             chr(38) || 'field3='||ec_number_3)
                   || decode(ec_number_4, null, null,
                             chr(38) || 'field4='||ec_number_4)
                   as expasy_url
            FROM dots.GeneFeature gf,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Aliases" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="alias"/>
            <sql>
            <![CDATA[
            SELECT distinct ng.name AS alias
            FROM dots.GeneFeature gf, dots.NaFeatureNaGene nfng, dots.NaGene ng
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = nfng.na_feature_id
              AND nfng.na_gene_id = ng.na_gene_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="InteractionsAsPrey" isCacheable="false"
                  displayName="Gene As Prey">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="prey_number_of_baits"/>
            <sql>
            <![CDATA[
            SELECT bf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.prey_number_of_baits
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE pf.source_id='$$primaryKey$$'
             AND pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="InteractionsAsBait" isCacheable="false"
                  displayName="Gene As Bait">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="bait_number_of_preys"/>
            <sql>
            <![CDATA[
            SELECT pf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.bait_number_of_preys
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE bf.source_id='$$primaryKey$$'
             AND pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

    <sqlQuery name="Y2hInteractions" isCacheable="false"
              displayName="Y2H Protein Interaction Data">
        <paramRef ref="params.primaryKey"/>
        <column name="source_id"/>
        <column name="bait_start"/>
        <column name="bait_end"/>
        <column name="prey_start"/>
        <column name="prey_end"/>
        <column name="times_observed" />
        <column name="number_of_searches"/>
        <column name="prey_number_of_baits"/>
        <column name="bait_number_of_preys"/>
        <column name="bait_or_prey"/>
        <sql>
            <![CDATA[
               SELECT pf.source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, NULL AS prey_number_of_baits,
                       bait_number_of_preys, 'bait' as bait_or_prey
                FROM dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens, apidb.GeneInteraction gi
                WHERE bf.source_id = '$$primaryKey$$'
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND pf.na_sequence_id = ens.na_sequence_id
                UNION
                SELECT bf.source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, prey_number_of_baits,
                       NULL AS bait_number_of_preys, 'prey' as bait_or_prey
                FROM dots.GeneFeature bf, dots.GeneFeature pf,
                     dots.ExternalNaSequence ens,  apidb.GeneInteraction gi
                WHERE pf.source_id = '$$primaryKey$$'
                  AND bf.na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.na_feature_id
                  AND bf.na_sequence_id = ens.na_sequence_id
           ]]>
       </sql>
    </sqlQuery>

        <sqlQuery name="GoTerms" displayName="GO Terms" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="is_not"/>
            <column name="go_id"/>
            <column name="ontology"/>
            <column name="go_term_name"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="lowercase_evidence_code"/>
            <sql>
            <![CDATA[
            SELECT gts.is_not, gts.go_id, gts.ontology, gts.go_term_name,
                    gts.source, gts.evidence_code,
                    lower(gts.evidence_code) AS lowercase_evidence_code
            FROM apidb.GoTermSummary gts
            WHERE gts.source_id = '$$primaryKey$$'
            ORDER BY gts.ontology, gts.go_id
            ]]>
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="PhyleticProfiles" isCacheable="false"
                  displayName="Phyletic Profiles">
            <paramRef ref="params.primaryKey"/>
            <linkColumn name="profile_link" displayName="Gene"
                           visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$source_id$$]]>
                 </url>
            </linkColumn>
            <column name="source_id" internal="true"/>
            <column name="product" displayName="Product"/>
            <column name="mutual_information_score"
            <sql>
            <![CDATA[
            SELECT gf2.source_id, gf2.product,
                   mis.mutual_information_score/10000 as mutual_information_score
            from dots.GeneFeature gf1, dots.PhylogeneticProfile pp1,
                 dots.MutualInformationScore mis, dots.PhylogeneticProfile pp2,
                 dots.GeneFeature gf2
            where gf1.source_id = '$$primaryKey$$'
              and gf1.na_feature_id = pp1.na_feature_id
              and pp1.phylogenetic_profile_id = mis.primary_profile_id
              and mis.secondary_profile_id = pp2.phylogenetic_profile_id
              and pp2.na_feature_id = gf2.na_feature_id
            order by mis.mutual_information_score desc
            ]]>
            </sql>
        </sqlQuery -->

        <sqlQuery name="Orthologs" displayName="Plasmodium Orthologs"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="species"/>
            <column name="product"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT gf2.source_id, tn.name as species, gf2.product
            FROM dots.GeneFeature gf1, dots.SequenceSequenceGroup ssg1,
                 dots.SequenceSequenceGroup ssg2, dots.GeneFeature gf2,
                 dots.ExternalNaSequence ens, core.TableInfo ti,
                 sres.TaxonName tn
            WHERE gf1.source_id = '$$primaryKey$$'
              AND gf1.na_feature_id = ssg1.sequence_id
              AND ssg1.source_table_id = ti.table_id
              AND ssg1.sequence_group_id = ssg2.sequence_group_id
              AND ssg2.source_table_id = ti.table_id
              AND ssg2.sequence_id = gf2.na_feature_id
              AND gf2.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id = tn.taxon_id
              AND tn.name_class = 'scientific name'
              AND ti.name = 'GeneFeature'
              AND gf2.source_id != gf1.source_id
            ORDER BY tn.name, gf2.source_id
            ]]>
            </sql>
        </sqlQuery>

<!-- replaced by ProteinDatabase
        <sqlQuery name="Genbank" displayName="GenBank Records"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="genbank_accession"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT dr.primary_identifier AS genbank_accession
            FROM dots.SplicedNaSequence sns, dots.dbrefNaSequence drns,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                  sres.ExternalDatabase ed
            WHERE sns.source_id = '$$primaryKey$$'
              AND sns.na_sequence_id = drns.na_sequence_id
              AND drns.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'GenBank'
            ORDER BY dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>
-->

        <sqlQuery name="ArrayElements" displayName="Mapped Array Elements"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="array_source_id"/>
            <column name="array_provider"/>
            <sql>
            <![CDATA[
               SELECT ens.source_id as array_source_id,
                      ed.name as array_provider
               FROM dots.Similarity s, dots.Transcript t, dots.GeneFeature gf,
                    sres.ExternalDatabase ed,
                    sres.ExternalDatabaseRelease edr,
                    dots.ExternalNaSequence ens,
                    core.TableInfo ti1, core.TableInfo ti2
               WHERE gf.source_id = '$$primaryKey$$'
                 AND t.parent_id = gf.na_feature_id
                 AND ed.external_database_id = edr.external_database_id
                 AND edr.external_database_release_id = ens.external_database_release_id
                 AND ens.na_sequence_id = s.query_id
                 AND 'ExternalNASequence' = ti1.name
                 AND ti1.table_id = s.query_table_id
                 AND 'Transcript' = ti2.name
                 AND ti2.table_id = s.subject_table_id
                 AND t.na_feature_id = s.subject_id
            ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="MetabolicPathways" displayName="Metabolic Pathways"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="pathway_id"/>
            <column name="pathway_name"/>
            <column name="activity"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT dr.primary_identifier AS pathway_id,
                            decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier, dr.lowercase_secondary_identifier) AS pathway_name,
                            dr.remark as activity
            FROM dots.GeneFeature gf,
                 dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
            AND gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'Links to Pathway Maps'
            ORDER BY dr.primary_identifier
            ]]>
            </sql>

        </sqlQuery>

        <sqlQuery name="ProteinExpression" displayName="Protein Expression Profile"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="profile_element"/>
            <column name="element_value"/>
            <sql>
            <![CDATA[
            SELECT REPLACE(pen.name, '_', ' ') as profile_element,
                   DECODE(pe.value, 1, 'yes', 'no') as element_value
            FROM apidb.profileElementName pen,
                 apidb.profileElement pe,
                 apidb.profile p,
                 apidb.profileSet ps
            WHERE p.source_id = '$$primaryKey$$'
            AND ps.name = 'berghei_proteomic_Sinden'
            AND ps.profile_set_id = p.profile_set_id
	    AND ps.profile_set_id = pen.profile_set_id
            AND p.profile_id = pe.profile_id
	    AND pen.element_order = pe.element_order
            ORDER BY pen.element_order
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Mr4Reagents" displayName="MR4 Reagents"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="atcc_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
                SELECT dbr.primary_identifier AS atcc_number,
                       dbr.secondary_identifier AS reagent_type,
                       dbr.remark
                FROM dots.GeneFeature gf,
                     dots.DbRefAAFeature df,
                     dots.Transcript t,
                     dots.TranslatedAAFeature taf,
                     sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE gf.source_id = '$$primaryKey$$'
                  AND t.parent_id = gf.na_feature_id
                  AND taf.na_feature_id = t.na_feature_id
                  AND df.aa_feature_id = taf.aa_feature_id
                  AND dbr.db_ref_id = df.db_ref_id
                  AND ed.name = 'MR4DBxRefs'
                  AND edr.external_database_id = ed.external_database_id
                  AND dbr.external_database_release_id
                      = edr.external_database_release_id
                ORDER BY dbr.secondary_identifier, dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="MassSpec" displayName="Mass Spec.-based Expression Evidence"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="developmental_stage"/>
            <column name="algorithm"/>
            <column name="seq_coverage"/>
            <column name="number_of_spans"/>
            <column name="sequence_count"/>
            <column name="spectrum_count"/>
            <sql>
            <![CDATA[
               SELECT mss.developmental_stage,
                      'Sequest' as algorithm, 
                      mss.aa_seq_percent_covered as seq_coverage,
                      mss.number_of_spans, mss.sequence_count, mss.spectrum_count
               FROM dots.TranslatedAaFeature taf, dots.genefeature gf, 
                    dots.transcript t, apidb.MassSpecSummary mss
               WHERE gf.source_id = '$$primaryKey$$'
                 AND t.parent_id = gf.na_feature_id
                 AND taf.na_feature_id = t.na_feature_id
                 AND mss.aa_sequence_id = taf.aa_sequence_id
               ORDER by mss.developmental_stage
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ProteinDatabase" displayName="Protein Database"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="accession"/>
            <column name="gi"/>
            <column name="dataset"/>
            <column name="accession_url"/>
            <column name="gi_url"/>
            <sql>
            <![CDATA[
                SELECT dr.primary_identifier AS accession,
                       dr.secondary_identifier AS gi,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity', 'GenBank',
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                           'Protein Data Bank',
                                       'NRDB_ref_dbXRefBySeqIdentity', 'RefSeq',
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                           'Swiss-Prot',
                                       ed.name) AS dataset,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.rcsb.org/pdb/navbarsearch.do?newSearch=yes&isAuthorSearch=no&radioset=All&inputQuickSearch='
                                         || dr.primary_identifier
                                         || '&image.x=0&image.y=0&image=Search',
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                       'http://srs.ebi.ac.uk/srsbin/cgi-bin/wgetz?-newId+[swissprot-AllText:'
                                         || dr.primary_identifier || '*]+-view+UniprotView+-page+qResult',
                                       ed.name) AS accession_url,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       ed.name) AS gi_url
                FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE gf.source_id = '$$primaryKey$$'
                  AND gf.na_feature_id = drnf.na_feature_id
                  AND drnf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                        = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
      /* gets its own section     'NRDB_pdb_dbXRefBySeqIdentity', */
                                  'NRDB_ref_dbXRefBySeqIdentity',
                                  'NRDB_sp_dbXRefBySeqIdentity')
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="3dPreds" displayName="Protein Structure Predictions"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="search_term"/>
            <column name="pdb_template"/>
            <sql>
            <![CDATA[
            SELECT gf.source_id as search_term, dr.primary_identifier as pdb_template
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
            ]]>
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="PdbSimilarities"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="pdb_chain"/>
            <column name="pdb_id"/>
            <column name="pvalue_mant"/>
            <column name="pvalue_exp"/>
            <column name="taxon"/>
            <column name="pdb_title"/>
            <column name="percent_identity"/>
            <column name="percent_plasmo_coverage"/>
            <sql>
            <![CDATA[
                SELECT eas.source_id AS pdb_chain, eas.description AS pdb_title,
                       substr(eas.source_id, 1,
                              instr(eas.source_id, '_', -1) - 1)
                         AS pdb_id,
                       s.pvalue_mant, s.pvalue_exp, tn.name AS taxon,
                    ROUND( (s.number_identical / s.total_match_length) * 100)
                        AS percent_identity,
                    ROUND( (s.total_match_length / tas.length) * 100)
                        AS percent_plasmo_coverage
                FROM dots.TranslatedAaFeature taf,
                     dots.TranslatedAaSequence tas, core.TableInfo tas_ti,
                     dots.Similarity s, core.TableInfo eas_ti,
                     dots.ExternalAaSequence eas,
                     sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,
                     sres.TaxonName tn
                WHERE taf.aa_sequence_id = tas.aa_sequence_id
                  AND tas_ti.name = 'TranslatedAASequence'
                  AND tas_ti.table_id = s.query_table_id
                  AND s.query_id = tas.aa_sequence_id
                  AND eas_ti.name = 'ExternalAASequence'
                  AND eas_ti.table_id = s.subject_table_id
                  AND s.subject_id = eas.aa_sequence_id
                  AND eas.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = 'PDB protein sequences'
                  AND taf.source_id = '$$primaryKey$$'
                  AND eas.taxon_id = tn.taxon_id
                  AND tn.name_class = 'scientific name'
                ORDER BY s.score DESC
            ]]>
            </sql>
        </sqlQuery -->

        <sqlQuery name="PdbSimilarities"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="pdb_chain"/>
            <column name="pdb_id"/>
            <column name="pvalue_mant"/>
            <column name="pvalue_exp"/>
            <column name="taxon"/>
            <column name="pdb_title"/>
            <column name="percent_identity"/>
            <column name="percent_plasmo_coverage"/>
            <sql>
            <![CDATA[
                SELECT ps.pdb_chain, ps.pdb_title, ps.pdb_id, ps.pvalue_mant,
                       ps.pvalue_exp, ps.taxon, ps.percent_identity,
                       ps.percent_plasmo_coverage
                FROM apidb.PdbSimilarity ps
                WHERE ps.source_id = '$$primaryKey$$'
                ORDER BY ps.score DESC
            ]]>
            </sql>
        </sqlQuery>

<!--
        <sqlQuery name="Epitopes"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
                SELECT dr.primary_identifier AS iedb_id,
                        al.start_min||'-'||al.end_max AS location,
                        mas.sequence, tn.name,
                 DECODE(ef.type, 'Not Full Set Not on Blast Hit', 'Low',
                              'Not Full Set On Blast Hit', 'Medium',
                              'Full Set Not on Blast Hit', 'Medium',
                              'Full Set On Blast Hit', 'High',
                              'unknown epitope type') AS confidence
                FROM dots.GeneFeature gf, dots.Transcript t,
                     dots.TranslatedAaFeature taf, dots.MotifAaSequence mas,
                     dots.TranslatedAaSequence tas, dots.EpitopeFeature ef,
                     dots.AaLocation al, dots.AaSequenceDbRef asdr,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed, Sres.TaxonName tn
                WHERE gf.source_id = '$$primaryKey$$'
                  AND t.parent_id = gf.na_feature_id
                  AND taf.na_feature_id = t.na_feature_id
                  AND taf.aa_sequence_id = tas.aa_sequence_id
                  AND tas.aa_sequence_id = ef.aa_sequence_id
                  AND ef.aa_feature_id = al.aa_feature_id
                  AND ef.motif_aa_sequence_id = mas.aa_sequence_id
                  AND mas.aa_sequence_id = asdr.aa_sequence_id
                  AND asdr.db_ref_id = dr.db_ref_id
                  AND mas.taxon_id = tn.taxon_id
                  AND tn.name_class = 'scientific name'
                  AND ef.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = 'Links to IEDB epitopes'
                ORDER BY DECODE(ef.type, 'Not Full Set Not on Blast Hit', 1,
                              'Not Full Set On Blast Hit', 2,
                              'Full Set Not on Blast Hit', 2,
                              'Full Set On Blast Hit', 3,
                              4) desc,start_min, end_max
            ]]>
            </sql>
        </sqlQuery>
-->

        <sqlQuery name="Epitopes"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
                SELECT es.iedb_id, es.location, es.sequence, es.name,
                       es.confidence
                FROM apidb.EpitopeSummary es
                WHERE es.source_id = '$$primaryKey$$'
                ORDER BY DECODE(es.confidence, 'Low', 1,
                              'Medium', 2,
                              'High', 3,
                              4) desc,es.location
            ]]>
            </sql>
        </sqlQuery>

    </querySet>

    <querySet name="SequenceAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="a_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="c_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="g_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="t_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="other_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="length" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="at_percent" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="organism" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="formatted_organism"
                    sortingTable="apidb.SequenceAttributes"
                    sortingColumn="organism" lowerCase="true"/>
            <column name="sequence_description"
                    sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="genbank_accession"
                    sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <sql>
            <![CDATA[
                SELECT bfmv.source_id, bfmv.a_count, bfmv.c_count,
                    bfmv.g_count, bfmv.t_count, bfmv.other_count,
                    bfmv.length, bfmv.at_percent, bfmv.organism,
                    '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                    REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                   chr(38) || 'nbsp;') || '</i>'
                      AS formatted_organism,
                    bfmv.ncbi_tax_id, bfmv.sequence_description,
                    bfmv.genbank_accession, bfmv.database_name,
                    bfmv.database_version
              FROM apidb.SequenceAttributes bfmv
              WHERE bfmv.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

<!-- superceded by SequenceAttributes.Bfmv
        <sqlQuery name="SequenceAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="a_count" />
            <column name="c_count" />
            <column name="g_count" />
            <column name="t_count" />
            <column name="other_count" />
            <column name="length" />
            <column name="at_percent"/>
            <column name="organism"/>
            <column name="sequence_description"/>
            <sql>
            <![CDATA[
            SELECT enas.source_id,
            enas.a_count,
            enas.c_count,
            enas.g_count,
            enas.t_count,
            (enas.length - (enas.a_count + enas.c_count + enas.g_count + enas.t_count)) as other_count,
            enas.length,
            to_char((enas.a_count + enas.t_count) / enas.length * 100, '99.99')
                 as at_percent,
            '<i>' || SUBSTR(tn.name, 1, 1) || '.' || chr(38) || 'nbsp;' ||
                 SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism,
            enas.description AS sequence_description
            FROM dots.externalnasequence enas, sres.taxonname tn
            WHERE enas.taxon_id = tn.taxon_id
            AND tn.name_class = 'scientific name'
            AND enas.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="GenbankAccession" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="genbank_accession"/>
            <sql>
            <![CDATA[
                SELECT ens.source_id, dr.primary_identifier AS genbank_accession
                FROM dots.ExternalNaSequence ens, dots.dbrefNaSequence drns,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE ens.source_id = '$$primaryKey$$'
                  AND ens.na_sequence_id = drns.na_sequence_id
                  AND drns.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = 'GenBank'
             ]]>
           </sql>
        </sqlQuery>
-->

        <sqlQuery name="Attribution" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="short_name"/>
            <sql>
            <![CDATA[
                SELECT ens.source_id,
                       decode(ed.name,
                              'Jane Carlton P. vivax chromosomes', 'TIGR',
                              'Sanger P. reichenowi contigs', 'Sanger',
                              'Jane Carlton P. yoelii chromosomes', 'TIGR',
                              'P. berghei genome', 'Sanger',
                              'Sanger P. gallinaceum contigs', 'Sanger',
                              'Sanger P. falciparum chromosomes', 'Sanger',
                              'Sanger P. knowlesi contigs', 'Sanger',
                              'P. chabaudi genome', 'Sanger',
                              'P. falciparum mitochondrial genome', 'LSHTM',
                              'P. falciparum plastid-like DNA', 'NIMR',
                              ed.name) AS short_name
                FROM dots.ExternalNaSequence ens,
                     sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE ens.source_id = '$$primaryKey$$'
                  AND ens.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
             ]]>
           </sql>
        </sqlQuery>

    </querySet>

    <querySet name="SequenceTables">

        <sqlQuery name="Centromere" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="start_min" />
            <column name="end_max" />
            <sql>
            <![CDATA[
            SELECT nl.start_min, nl.end_max
            FROM dots.ExternalNaSequence ens, dots.Miscellaneous m,
                 dots.NaLocation nl, sres.SequenceOntology so
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.na_sequence_id = m.na_sequence_id
              AND m.na_feature_id = nl.na_feature_id
              AND m.sequence_ontology_id = so.sequence_ontology_id
              AND so.term_name = 'centromere'
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="SequenceComments" displayName="User Comments" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_id"/>
            <column name="stable_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id, c.stable_id,
                     NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
					 u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.ExternalNaSequence ens
              WHERE u.email = c.email
                    AND c.comment_target_id = 'genome'
                    AND c.stable_id = ens.source_id
                    AND ens.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

    </querySet>


    <querySet name="ArrayElementAttributes">
        <sqlQuery name="ProviderAndOrganism" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="provider"/>
            <column name="genus_species"/>
            <column name="sequence"/>
            <column name="organism"/>
            <sql>
            <![CDATA[
            SELECT ens.source_id, ed.name as provider, ens.sequence,
                   tn.name as genus_species,
                   SUBSTR(tn.name, 1, 1) || '. '
                   || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) as organism
            FROM sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr,
                 dots.ExternalNASequence ens, sres.TaxonName tn
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND tn.taxon_id = ens.taxon_id
              AND tn.name_class = 'scientific name'
             ]]>
           </sql>
      </sqlQuery>

    </querySet>

    <querySet name="ArrayElementTables">

        <sqlQuery name="Genes" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <sql>
            <![CDATA[
              SELECT t.source_id
              FROM dots.Similarity s, dots.Transcript t,
                   dots.ExternalNaSequence ens,
                   core.TableInfo ti1, core.TableInfo ti2
              WHERE ens.source_id = '$$primaryKey$$'
                AND ens.na_sequence_id = s.query_id
                AND 'ExternalNASequence' = ti1.name
                AND ti1.table_id = s.query_table_id
                AND 'Transcript' = ti2.name
                AND ti2.table_id = s.subject_table_id
                AND t.na_feature_id = s.subject_id
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="GenomicLocations" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="min_subject_start" />
            <column name="max_subject_end" />
            <column name="gbrowse_start" />
            <column name="gbrowse_end" />
            <column name="is_reversed" />
            <sql>
            <![CDATA[
              SELECT ens2.source_id, s.min_subject_start, s.max_subject_end,
                     s.is_reversed,
                     s.min_subject_start - 25000 as gbrowse_start,
                     s.min_subject_start + 25000 as gbrowse_end
              FROM dots.Similarity s,
                   dots.ExternalNaSequence ens1,
                   core.TableInfo ti1,
                   sres.ExternalDatabase ed2,
                   sres.ExternalDatabaseRelease edr2,
                   dots.ExternalNaSequence ens2,
                   core.TableInfo ti2
              WHERE ens1.source_id = '$$primaryKey$$'
                AND ens1.na_sequence_id = s.query_id
                AND 'ExternalNASequence' = ti1.name
                AND ti1.table_id = s.query_table_id
                AND ed2.name in ('Sanger P. falciparum chromosomes',
                                 'Jane Carlton P. yoelii chromosomes')
                AND ed2.external_database_id = edr2.external_database_id
                AND edr2.external_database_release_id = ens2.external_database_release_id
                AND ens2.na_sequence_id = s.subject_id
                AND 'ExternalNASequence' = ti2.name
                AND ti2.table_id = s.subject_table_id
             ]]>
           </sql>
        </sqlQuery>

    </querySet>

    <querySet name="SnpAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="dataset" sortingTable="apidb.SnpAttributes"
                    lowerCase="true"/>
            <column name="dataset_hidden" sortingTable="apidb.SnpAttributes"
                    sortingColumn="dataset" lowerCase="true"/>
            <column name="seq_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="snp_location" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="start_min" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="is_coding" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_CDS" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_protein" sortingTable="apidb.SnpAttributes" />
            <column name="has_nonsynonymous_allele" sortingTable="apidb.SnpAttributes" />
            <column name="gene_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="gene_strand" sortingTable="apidb.SnpAttributes" />
            <column name="strains"  sortingTable="apidb.SnpAttributes" />
            <column name="strains_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="strains" lowerCase="true"/>
            <column name="lflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="allele" sortingTable="apidb.SnpAttributes" sortingColumn="reference_na" lowerCase="true"/>
            <column name="rflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="lflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="lflank" lowerCase="true"/>
            <column name="allele_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="allele" lowerCase="true"/>
            <column name="rflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="rflank" lowerCase="true"/>
            <column name="organism" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="formatted_organism" sortingTable="apidb.SnpAttributes" sortingColumn="organism" />
            <column name="ncbi_tax_id" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="minor_product" sortingTable="apidb.SnpAttributes" />
            <column name="major_product" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele" sortingTable="apidb.SnpAttributes" />
            <column name="reference_na" sortingTable="apidb.SnpAttributes" />
            <column name="reference_aa" sortingTable="apidb.SnpAttributes" />
            <column name="reference_strain" sortingTable="apidb.SnpAttributes" />
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.dataset,
                  DECODE(bfmv.dataset,
                         'NIH SNPs', 'Su_SNPs',
                         'Broad SNPs', 'Broad_SNPs',
                         'Sanger falciparum SNPs', 'sangerItGhanaSnps',
                         'Sanger reichenowi SNPs', 'sangerReichenowiSnps',
                         'PlasmoDB combined SNPs', 'plasmoDbCombinedSnps',
                         bfmv.dataset) AS dataset_hidden,
                  bfmv.seq_source_id, bfmv.start_min, bfmv.reference_strain,
                  bfmv.reference_na, bfmv.is_coding, bfmv.position_in_CDS,
                  bfmv.position_in_protein, bfmv.reference_aa, bfmv.has_nonsynonymous_allele,
                  bfmv.gene_source_id, bfmv.gene_strand, bfmv.lflank,
                  bfmv.rflank, bfmv.reference_na as allele, bfmv.organism, bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.minor_allele_count, bfmv.major_allele_count,bfmv.minor_product,
                  bfmv.major_product,bfmv.major_allele,bfmv.minor_allele,bfmv.strains,bfmv.strains_revcomp,
                  bfmv.seq_source_id || ': ' || trim(to_char(bfmv.start_min,'99,999,999')) as snp_location,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.rflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.lflank  END as lflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.lflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.rflank  END as rflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.reference_na) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.reference_na END as allele_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN bfmv.strains_revcomp 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.strains END as strains_gene_strand
       FROM   apidb.SnpAttributes bfmv
       WHERE  bfmv.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

<!-- superceded by SnpAttributes.Bfmv
        <sqlQuery name="SnpAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
              <column name="dataset"/>
              <column name="dataset_hidden"/>
              <column name="seq_source_id"/>
              <column name="start_min"/>
              <column name="is_coding"/>
              <column name="position_in_CDS"/>
              <column name="position_in_protein"/>
              <column name="has_nonsynonymous_allele"/>
              <column name="gene_source_id"/>
              <column name="gene_strand"/>
              <column name="description"/>
              <column name="lflank"/>
              <column name="allele"/>
              <column name="rflank"/>
            <sql>
            <![CDATA[
           SELECT
              snp.source_id as source_id,
              CASE WHEN ed.name = 'Su SNPs' THEN 'NIH SNPs'
              ELSE ed.name END as dataset,
              CASE WHEN ed.name = 'Su SNPs' THEN 'Su_SNPs'
              WHEN ed.name = 'Broad SNPs' THEN 'Broad_SNPs'
              WHEN ed.name = 'Sanger falciparum SNPs' THEN 'sangerItGhanaSnps'
              WHEN ed.name = 'Sanger reichenowi SNPs' THEN 'sangerReichenowiSnps'
              WHEN ed.name = 'PlasmoDB combined SNPs' THEN 'plasmoDbCombinedSnps'
              END as dataset_hidden,
              s.source_id as seq_source_id,
              snp_loc.start_min,
              snp.reference_strain,
              snp.reference_na,
              DECODE(snp.is_coding, 0, 'no', 1, 'yes') AS is_coding,
              snp.position_in_CDS,
              snp.position_in_protein,
              CASE WHEN gene_info.is_reversed = 1 THEN snp.strains_revcomp ELSE snp.strains END as description,
              snp.reference_aa,

              DECODE(snp.has_nonsynonymous_allele, 0, 'no', 1, 'yes') AS has_nonsynonymous_allele,
              gene_info.source_id as gene_source_id,
              DECODE(gene_info.is_reversed, 0, 'forward', 1, 'reverse') AS gene_strand,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min + 1)) ELSE DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min - 50) END as lflank,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,1,snp_loc.start_min)) ELSE DBMS_LOB.SUBSTR(s.sequence,1,snp_loc.start_min) END as allele,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min - 50)) ELSE DBMS_LOB.SUBSTR(s.sequence,50, snp_loc.start_min + 1) END as rflank
       FROM   dots.ExternalNaSequence s,
              dots.SnpFeature snp,
              dots.NaLocation snp_loc,
              sres.ExternalDatabase ed,
              sres.ExternalDatabaseRelease edr,
              (select gene.source_id, gene_loc.is_reversed, gene.na_feature_id
               FROM dots.GeneFeature gene, dots.NaLocation gene_loc
               WHERE gene.na_feature_id = gene_loc.na_feature_id) gene_info
       WHERE  snp.source_id = '$$primaryKey$$'
         AND  edr.external_database_release_id = snp.external_database_release_id
         AND  ed.external_database_id = edr.external_database_id
         AND  s.na_sequence_id = snp.na_sequence_id
         AND  snp_loc.na_feature_id = snp.na_feature_id
         AND  gene_info.na_feature_id(+) = snp.parent_id
             ]]>
           </sql>
        </sqlQuery>
-->

    </querySet>

    <querySet name="SnpTables">

        <sqlQuery name="Strains" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="strain"/>
            <column name="allele"/>
            <column name="allele_gene_strand"/>
            <column name="phenotype"/>
            <column name="product"/>
            <sql>
            <![CDATA[
       SELECT    var.strain, var.allele,
                 CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(var.allele) 
                      WHEN gene_info.source_id is null THEN ''
                      ELSE var.allele END as allele_gene_strand,
                 var.phenotype,
                 var.product
       FROM  dots.SnpFeature snp,
             dots.SeqVariation var,
             (select gene.source_id, gene_loc.is_reversed, gene.na_feature_id
               FROM dots.GeneFeature gene, dots.NaLocation gene_loc
               WHERE gene.na_feature_id = gene_loc.na_feature_id) gene_info
       WHERE snp.source_id = '$$primaryKey$$'
        AND  var.parent_id = snp.na_feature_id
        AND gene_info.na_feature_id(+) = snp.parent_id
        ORDER BY var.strain
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Providers" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id_link"/>
            <column name="name"/>
            <sql>
            <![CDATA[
               SELECT sb.source_id as source_id_link,
               DECODE(ed.name,'Broad SNPs','Broad','Sanger falciparum SNPs','WTSI','Su SNPs','NIH', 'PlasmoDB combined SNPs', 'PlasmoDB','Sanger reichenowi SNPs','WTSI') as name
               FROM  dots.SnpFeature sa, dots.snpfeature sb, dots.nalocation la, dots.nalocation lb,
                     sres.externaldatabase ed, sres.externaldatabaserelease edr
               WHERE sa.source_id = '$$primaryKey$$'
                AND sa.na_feature_id = la.na_feature_id
                and sb.na_feature_id = lb.na_feature_id
                and sa.na_sequence_id = sb.na_sequence_id
                and la.start_min = lb.start_min
                and sb.source_id != '$$primaryKey$$'
                and sb.external_database_release_id = edr.external_database_release_id
                and edr.external_database_id = ed.external_database_id
             ]]>
           </sql>
        </sqlQuery>

    </querySet>


    <querySet name="EstTables">

        <!-- EstTables.AlignmentInfo -->
        <sqlQuery name="AlignmentInfo"  isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <column name="accession" />
            <column name="sequence_id" />
            <column name="target_start" />
            <column name="target_end" />
            <column name="context_start" />
            <column name="context_end" />
            <column name="percent_identity" />
            <column name="is_consistent" />
            <column name="is_best_alignment" />
            <column name="is_reversed" />
            <sql>
            <![CDATA[
            SELECT enas.source_id as sequence_id,
                   e.accession,
                   blat.target_start,
                   blat.target_end,
                   blat.target_start - 10000 as context_start,
                   blat.target_end + 10000 as context_end,
                   decode(blat.is_best_alignment,0,'No',1,'Yes',blat.is_best_alignment) as is_best_alignment, 
                   decode(blat.is_consistent,0,'No',1,'Yes',blat.is_consistent) as is_consistent, 
                   decode(blat.is_reversed,0,'+',1,'-',blat.is_reversed) as is_reversed, 
                   blat.percent_identity
            FROM   dots.blatalignment blat,
                   dots.est e,
                   dots.externalnasequence enas
            WHERE  blat.query_na_sequence_id = e.na_sequence_id
              AND  blat.target_na_sequence_id = enas.na_sequence_id
              AND  e.accession = '$$primaryKey$$'
            ORDER BY blat.is_best_alignment desc, blat.is_consistent desc, blat.percent_identity desc
            ]]>
            </sql>
        </sqlQuery>
    </querySet>


    <querySet name="UserCommentTables">
		<sqlQuery name="GeneComments">
			<paramRef ref="params.primaryKey"/>
		    <column name="comment_id"/>
            <column name="headline"/>
			<column name="content"/>
			<column name="location_string"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <column name="project_name_version"/>
            <column name="review_status_id"/>
			<sql>
			<![CDATA[
              SELECT DISTINCT
                        c.comment_id,
                        NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                        c.content,
                        c.location_string,
                        (u.first_name || ' ' || u.last_name) AS user_name,
                        u.organization,
                        c.comment_date,
                        (c.project_name || ' ' || c.project_version) as project_name_version,
                        c.review_status_id
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.GeneFeature gf
              WHERE u.email = c.email
                AND c.comment_target_id='gene'
                AND c.stable_id = gf.source_id
                AND gf.source_id = '$$primaryKey$$'
                AND c.review_status_id != 'rejected'
              ORDER BY c.comment_date DESC
			  ]]>
			</sql>
		</sqlQuery>

		<sqlQuery name="SequenceComments">
			<paramRef ref="params.primaryKey"/>
		    <column name="comment_id"/>
            <column name="headline"/>
			<column name="content"/>
			<column name="location_string"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <column name="project_name_version"/>
            <column name="review_status_id"/>
			<sql>
			<![CDATA[
              SELECT DISTINCT
              		c.comment_id,
              		NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
              		c.content,
              		c.location_string,
              		(u.first_name || ' ' || u.last_name) AS user_name,
              		u.organization,
		            c.comment_date,
		            (c.project_name || ' ' || c.project_version) as project_name_version,
		            c.review_status_id
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.ExternalNaSequence ens
              WHERE u.email = c.email
			  		AND c.comment_target_id='genome'
                    AND c.stable_id = ens.source_id
                    AND ens.source_id = '$$primaryKey$$'
                    AND c.review_status_id != 'rejected'
			  ORDER BY c.comment_date DESC
			  ]]>
			</sql>
		</sqlQuery>
	</querySet>

    <querySet name="UserCommentAttributes">
        <sqlQuery name="UserComments" displayName="User Comments" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
			<column name="comment_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id,
			  		NVL(c.headline, SUBSTR(c.content,0,20)|| '...') AS headline,
			  		 (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.GeneFeature gf
              WHERE u.email = c.email
                    AND c.stable_id = gf.source_id
                    AND gf.source_id = '$$primaryKey$$'
                    AND c.review_status_id != 'rejected'
			  ORDER BY c.comment_date DESC
            ]]>
            </sql>
        </sqlQuery>
    </querySet>

    <querySet name="UtilityTables">
        <sqlQuery name="InterproTermList" isCacheable="true">
            <paramRef ref="params.primaryKey"/>
            <column name="accession"/>
            <column name="name"/>
            <column name="description"/>
            <sql>
                SELECT DISTINCT dr.primary_identifier AS accession,
                                dr.primary_identifier AS name,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS description
                FROM dots.DbRefAaFeature draf, sres.DbRef dr,
                     sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
                WHERE draf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = '$$primaryKey$$'
            </sql>
        </sqlQuery>
    </querySet>


<!-- //////////  END TABLE QUERIES //////////// -->




<!-- //////////  PARAMETERS //////////// -->

    <!-- parameters used by queries -->
    <paramSet name="params">

        <stringParam name="primaryKey"
                     prompt="Primary Key"
                     help="primary key"/>

        <stringParam name="min_mutual_information_score"
                     prompt="Minimum mutual information score"
                     help="Enter the minimum mutual information score to report similarities.  The score range is from 0.472 to 1.67"
                     substitute="yes"
                     default="0.47"/>

        <stringParam name="min_num_query_matches"
                     prompt="Minimum number of query matches"
                     help="Enter the minimum number of queries you want to match to your genes.  If you input 5 genes ids for your query and enter 5 minimum number of queries then the only genes returned would be ones that all 5 querids match"
                     substitute="yes"
                     default="1"/>

        <stringParam name="locus_tag"
                     prompt="Gene ID"
                     help="Gene IDs (locus tags) are quite different for each species. We use the gene IDs provided by the sequence generator. (Examples: PF11_0344, AAB36701.1, NP_701203.1)."
                     sample="PF11_0344, PY01656, Pv092275"
                     substitute="yes"
                     default="PF11_0344"/>

        <!--datasetParam name="locus_tag"
                     prompt="Gene ID"
                     help="Gene IDs (locus tags) are quite different for each species. We use the gene IDs provided by the sequence generator. (Examples: PF11_0344, AAB36701.1, NP_701203.1)."
                     default="PF11_0344"/-->

        <!-- stringParam name="y2h_locus_tag"
                     prompt="Gene ID"
                     help="Gene ID's (locus tags) are quite different for each species. We use the gene ID's provided by the sequence generator. (Examples: PF11_0344, PY01656, Pv092275)"
                     sample="PF11_0344, PY01656, Pv092275"
                     substitute="yes"
                     default="PFL0275w"/ -->

        <!-- stringParam name="phyletic_locus_tag"
                     prompt="Gene ID"
                     help="Gene ID's (locus tags) are quite different for each species. We use the gene ID's provided by the sequence generator. (Examples: PF11_0344, PY01656, Pv092275)"
                     sample="PF11_0344, PY01656, Pv092275"
                     substitute="yes"
                     default="PY03942"/ -->

        <stringParam name="ec_number_pattern"
                     prompt="EC Number"
                     help="Enzyme Commission numbers describe enzymes hierarchically by the class of rections they catalize."
                     sample="(Examples: 2.7.7.6, 3.5.1.31"
                     substitute="yes"
                     default="2.7.7.-"/>

        <stringParam name="num_exons_gte"
                     prompt="Exon Count >="
                     help="Which genes in &#60;i&#62; Plasmodium &#60;/i&#62; are annotated as containing introns? One easy way to do this search is to look for genes
with more
than one annotated exon. Enter a minimum of exons you would like to search for as an integer, e.g. '3'."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>

 <stringParam name="num_exons_lte"
                     prompt="Exon Count &lt;="
                     help="Enter a maximum number of exons you would like to search for as an integer, e.g. '3'."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="20"/>

        <stringParam name="bp_overlap_gte"
                     prompt="Base Overlap >="
                     help="Overlap of expressed sequence tag (EST) alignments with annotated genes is a useful approach to verify gene predictions. In general,
the specificity of this evidence is proportional to the overlap length."
                     sample="(Example: 100)"
                     substitute="yes"
                     default="100"/>

        <flatVocabParam name="cowmanSample"
                     prompt="Study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>

        <flatVocabParam name="diffMeanExpr_reference"
                     prompt="Reference study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>

        <flatVocabParam name="diffMeanExpr_comparitor"
                     prompt="Comparison study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>

        <stringParam name="confidence"
                     prompt="Confidence >= "
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="0.8"/>

        <stringParam name="fold_change"
                     prompt="Fold change >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="2"/>

        <flatVocabParam name="regulated_dir"
                     prompt="Direction"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.regulated_dir"/>

        <stringParam name="percentile"
                     prompt="Percentile >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="90"/>

        <stringParam name="min_tm"
                     prompt="Minimum Number of Transmembrane Domains"
                     help="Proteins may have none, one or more transmembrane domains. Please enter a minimum number of predicted transmembrane domains to start your search."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>

        <stringParam name="min_sigp_sum_score"
                     prompt="Minimum SignalP conclusion score"
                     help="SignalP provides four scores and a conclusion for each such that the conclusion  is 1 if the score meets a certain criteria and 0 otherwise.  The SignalP summary conclusion is the sum of the four conclusions generated by SignalP, thus four is the highest score possible.  We consider a summary conclusion score of three to be significant"
                     substitute="yes"
                     default="3"/>

        <stringParam name="max_tm"
                     prompt="Maximum Number of Transmembrane Domains"
                     help="Proteins may have none, one or more transmembrane domains. Please enter a maximum number of predicted transmembrane domains to start your search."
                     sample="(Example: 5)"
                     substitute="yes"
                     default="5"/>

        <stringParam name="extDbName"
                     prompt="External Database Name"
                     help="The name of an external database as found in GUS"/>

        <stringParam name="extDbRlsVer"
                     prompt="External Database Release Version"
                     help="The version of an external database release as found in GUS"/>

        <stringParam name="sequence"
                     prompt="Sequence ID"
                     help="Sequence IDs for &#60;i&#62; P. falciparum &#60;/i&#62; chromosomes are
'MAL1' through 'MAL14.'  Sequence IDs for &#60;i&#62; P. yoelii &#60;/i&#62; contigs begin with 'MALPY'.  Sequence IDs for &#60;i&#62; P. vivax &#60;/i&#62; contigs begin with 'ctg_'.  Wild cards are permitted in this search, i.e. use MALPY* to ask for all &#60;i&#62; P.
vivax &#60;/i&#62; sequences."
                     sample="(Examples: MAL4, ctg_4094)"
                     substitute="yes"
                     default="MAL4"/>

        <!-- flatVocabParam name="old_organism"
                     prompt="Plasmodium species"
                     help="Select an organism."
                     multiPick="false"
                     queryRef="VocabQueries.Organism"/ -->

        <flatVocabParam name="organism"
                     prompt="Plasmodium species"
                     help="Select one or more organisms."
                     multiPick="true"
                     queryRef="VocabQueries.OrganismWithGenes"/>

        <flatVocabParam name="organism_with_sequences"
                     prompt="Plasmodium species"
                     help="Select one or more organisms."
                     multiPick="true"
                     queryRef="VocabQueries.OrganismWithSequences"/>

        <flatVocabParam name="organism_with_ests"
                     prompt="Plasmodium species"
                     help="Select one or more organisms."
                     multiPick="true"
                     queryRef="VocabQueries.OrganismWithEsts"/>

        <flatVocabParam name="pf_organism"
                     prompt="Plasmodium species"
                     help="Select an organism."
                     multiPick="false"
                     queryRef="VocabQueries.PfOrganism"/>

        <flatVocabParam name="species_name"
                     prompt="Plasmodium species"
                     help="Select one or more organisms."
                     multiPick="true"
                     queryRef="VocabQueries.SpeciesName"/>

        <flatVocabParam name="libraryId"
                     prompt="EST Library"
                     help="Select a clone library."
                     multiPick="true"
                     queryRef="VocabQueries.EstLibraries"/>

        <flatVocabParam name="best_alignment_only"
                     prompt="Best alignments only"
                     help="Select yes to return only those EST alignments that are the best alignment for the EST.  Many of the ESTs align at multiple positions in the genome.  Selecting yes will consider only those alignments that are the best for each EST"
                     multiPick="false"
                     queryRef="VocabQueries.best_alignment_only"/>

        <flatVocabParam name="high_confidence_only"
                     prompt="Consistent alignments only"
                     help="Select yes to return only those EST alignments that are consistent.  We define define consistent as having >= 95% identity (the majority have >= 99%) and aligning the EST sequence in a manner that is consistent with a gene model.  Ie, there can be gaps (representing introns) in the target genomic sequence but not in the EST query."
                     multiPick="false"
                     queryRef="VocabQueries.high_confidence_only"/>

        <flatVocabParam name="inNotIn"
                     prompt="EST"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.inNotIn"/>

        <flatVocabParam name="whole_words"
                     prompt="Match only whole words?"
                     help="Select whether to reject text matches that start or end in the middle of a word"
                     multiPick="false"
                     queryRef="VocabQueries.WholeWords"/>

        <flatVocabParam name="geneType"
                     prompt="Gene type"
                     help="Select a gene type."
                     multiPick="true"
                     queryRef="VocabQueries.GeneTypes"/>

        <flatVocabParam name="includePseudogenes"
                     prompt="Include Pseudogenes"
                     help="Choose whether to include pseudogenes in your query results."
                     multiPick="false"
                     queryRef="VocabQueries.IncludePseudogenes"/>

        <stringParam name="protein_id"
                     prompt="NestedRecord Param"
                     help="Only used in a nested record"/>

        <stringParam name="plasmodb_dataset"
                     visible="false"
                     prompt="PlasmoDB dataset"
                     help="PlasmoDB dataset"/>

        <historyParam name="historyId"
                     prompt="History ID"
                     help="The number in the left column of My Query History"/>

        <stringParam name="min_percent_identity"
                     prompt="Percent identity >="
                     default="90"
                     help='You can specify a minimum percent identity of the alignment between the EST and genomic DNA.  We only store alignments with >= 90% identity'/>

        <stringParam name="min_percent_est_aligned"
                     prompt="Percent of EST bases aligned >="
                     default="20"
                     help='Enter the minimum percentage of bases in the EST sequence that are aligned to genomic DNA in this alignment.'/>

        <stringParam name="go_term"
                     prompt="GO Term or GO ID"
                     default="catalytic activity"
                     help='Enter a GO ID (e.g. \"GO:0003824\") or GO Term (e.g. \"catalytic activity\").  Asterisks can be used as wildcard characters in a GO Term (e.g. \"*kinase*\"'/>

        <stringParam name="pfam_term"
                     prompt="Pfam Family ID or Description"
                     default="IMP dehydrogenase / GMP reductase domain"
                     help='Enter a Pfam accession number (e.g. \"PF00478\") or definition (\"NPR nonapeptide repeat\") .  Asterisks can be used as wildcard characters in a Pfam definition (e.g. \"Ribosomal*\"'/>

        <flatVocabParam name="bait_or_prey"
                     prompt="Specified protein is bait or prey"
                     help="Optionally specifiy whether given protein is bait or prey"
                     multiPick="false"
                     queryRef="VocabQueries.BaitOrPrey"/>

        <stringParam name="min_observed"
                     prompt="Restrict by the minimum number of times this interaction was found"
                     help="Restrict by the minimum number of times this interaction was found"
                     default="1"/>

        <stringParam name="min_searches"
                     prompt="Restrict by the minimum number of searches that found this interaction"
                     help="Restrict by the minimum number of searches that found this interaction"
                     default="1"/>

        <stringParam name="max_results"
                     prompt="Maximum number of results"
                     help="Upper limit on the number of results returned by the query"
                     default="5"/>

        <flatVocabParam name="BlastQueryType"
                     prompt="Query sequence type"
                     help="The type of the query sequence (eg. DNA, protein)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastQueryType"/>

        <!-- flatVocabParam name="BlastDatabaseTypeGene"
                     prompt="BLAST target database type"
                     help="The type of the target database (eg CDS, translated CDS, Protein)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseTypeGene"/ -->

        <!-- flatVocabParam name="BlastDatabaseTypeGenome"
                     prompt="BLAST target database type"
                     help="The type of the target database (eg Genome)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseTypeGenome"/ -->

        <flatVocabParam name="BlastDatabaseType"
                     prompt="Target"
                     help="The type of the target database (eg CDS, translated CDS, Protein)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseType"/>

        <flatVocabParam name="BlastDatabaseOrganism"
                     prompt="Organism"
                     help="Organism(s) from which the sequences in the BLAST database originated"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseOrganism"/>

        <stringParam name="BlastQuerySequence"
                     prompt="Input Sequence"
                     help="BLAST Input Sequence"
                     length="4000"
                     sample=""/>


       <flatVocabParam name="-filter"
                    id="-filter"
                    prompt="Low complexity filter"
                    queryRef="VocabQueries.Filter"
                    help="Set the low complexity filter. WUBLAST's default behavior is not to use this filter. NCBIBLAST's is to use it. When filter is set to 'yes' WUBLAST uses seg; NCBIBLAST uses dust for blastn, seg otherwise."
                    default="yes"/>


        <stringParam name="-e"
                     prompt="Expectation value"
                     help="Expected number of hits by chance"
                     default="0.05"
                     sample="1e-10"/>

        <stringParam name="-v"
                     prompt="Maximum descriptions (V)"
                     help="Number of one-line descriptions to show"
                     default="50"/>

        <stringParam name="-b"
                     prompt="Maximum alignments (B)"
                     help="Number of alignments to show"
                     default="50"/>

       <stringParam name="dn_ds_ratio_upper"
                     prompt="Non-synonymous / synonymous SNP ratio &lt;= "
                     help="Upper Bound on the ratio of non-synonymous to synonymous coding snps"
                     default="100"/>

      <stringParam name="dn_ds_ratio_lower"
                     prompt="Non-synonymous / synonymous SNP ratio >= "
                     help="Lower Bound on the ratio of non-synonymous to synonymous coding snps"
                     default="0"/>

      <stringParam name="min_num_coding_snps"
                     prompt="Number of coding SNPs >= "
                     help="Lower Bound on the number of coding snps"
                     default="0"/>

       <stringParam name="occurrences_upper"
                     prompt="Number of SNPs of above class &lt;= "
                     help="Upper Bound on the number of SNPs of the selected class"
                     default="1000"/>

      <stringParam name="occurrences_lower"
                     prompt="Number of SNPs of above class >= "
                     help="Lower Bound on the number of SNPs of the selected class"
                     default="0"/>

      <stringParam name="major_allele_max"
                     prompt="Frequency of major allele &lt;= "
                     help="Upper Bound on the number of strains that have the major allele"
                     default="20"/>

      <stringParam name="major_allele_min"
                     prompt="Frequency of major allele >= "
                     help="Lower Bound on the number strains that have the major allele"
                     default="1"/>

      <stringParam name="minor_allele_max"
                     prompt="Frequency of minor allele &lt;= "
                     help="Upper Bound on the number of strains that have the minor allele"
                     default="20"/>

      <stringParam name="minor_allele_min"
                     prompt="Frequency of minor allele >= "
                     help="Lower Bound on the number of strains that have the minor allele"
                     default="1"/>

      <stringParam name="snp_density"
                     prompt="SNPs per KB (CDS) >= "
                     help="Find genes containing a density of coding snps > this parameter. Density is expressed in number of snps / KB of coding sequence"
                     default="0"/>

       <flatVocabParam name="chromosome"
                     prompt="Chromosome"
                     help=""
                     multiPick="true"
                     queryRef="VocabQueries.Chromosome"/>

       <flatVocabParam name="chromosome_single"
                     prompt="Chromosome"
                     help="Pick a P. falciparum chromosome"
                     multiPick="false"
                     queryRef="VocabQueries.Chromosome"/>

       <flatVocabParam name="snp_strain_a"
		     prompt="Reference"
                     help="Choose a reference from the list of strains.  Strains below the ---------- were sequenced at low or specific coverage"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainA"/>

       <flatVocabParam name="snp_strain_b"
		     prompt="Comparator"
                     help="Choose a comparator from the list to compare to your reference.  Strains below the ---------- were sequenced at low or specific coverage"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainB"/>

       <flatVocabParam name="snp_strain_m"
		     prompt="Comparator(s)"
                     help="Choose a comparator(s) from the list to compare to your reference.  Strains below the ---------- were sequenced at low or specific coverage"
                     multiPick="true"
                     queryRef="VocabQueries.SnpStrainM"/>

       <flatVocabParam name="include_reichenowi"
		     prompt="Include P. reichenowi"
                     help="Click yes to include P. reichenowi snps in this query.  P.r snps were generated by alignment of P. reichenowi sequence with the P falciparum 3D7 reference sequence.  Note, if you want to only query reichenowi, you must click 'None' in the P. falciparum strains select list."
                     multiPick="false"
                     queryRef="VocabQueries.IncludeReichenowi"/>

       <flatVocabParam name="include_only_queries"
		     prompt="Restrict to queries only"
                     help="Click yes to to restrict the results returned to only those genes which have been input as query ids.  This allows you to determine the relatedness of your query set" 
                     multiPick="false"
                     queryRef="VocabQueries.no_yes_list"/>

       <flatVocabParam name="snp_stat"
		     prompt="SNP Class"
                     help="Choose the class of SNP you want to query on ... choose minumum and maximum numbers below"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStat"/>

       <flatVocabParam name="snp_order"
		     prompt="Sort by"
                     help="Results will be sorted on this column in descending order"
                     multiPick="false"
                     queryRef="VocabQueries.SnpSort"/>

       <flatVocabParam name="sort_order"
		     prompt="Sort direction"
                     help="Results will be sorted ascending or descending order"
                     multiPick="false"
                     queryRef="VocabQueries.SortOrder"/>

        <flatVocabParam name="profileSet"
                     prompt="Microarray time course(s) to query"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.ProfileSet"/>

        <flatVocabParam name="waters_profilesets"
                     prompt="Microarray time course(s) to query"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.WatersProfileSets"/>

        <flatVocabParam name="minOrMax"
                     prompt="Query based on"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.MinOrMax"/>

        <flatVocabParam name="maxExprHour"
                     prompt="Timing of maximal expression"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours48"/>

         <flatVocabParam name="maxPlusMinusHours"
                     prompt="Maximal expression time plus or minus"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours24"/>

        <flatVocabParam name="minExprHour"
                     prompt="Timing of minimum expression"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours48"/>

        <flatVocabParam name="minPlusMinusHours"
                     prompt="Minimum expression time plus or minus"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours24"/>

        <flatVocabParam name="inductionFold"
                     prompt="Induction ratio cut-off"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.InductionFold"/>

        <flatVocabParam name="expressionPct"
                     prompt="Maximum percentile cut-off"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Percentile"/>

        <flatVocabParam name="pfGenomicSequence"
                     prompt="Genomic Sequence"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.PfGenomicSequence"/>

        <flatVocabParam name="pfNonnuclearSequence"
                     prompt="Genomic Sequence"
                     help=""
                     multiPick="true"
                     queryRef="VocabQueries.PfNonnuclearSequence"/>

        <flatVocabParam name="pfGenomicSequenceMultipick"
                     prompt="Genomic Sequence"
                     help=""
                     multiPick="true"
                     queryRef="VocabQueries.PfGenomicSequence"/>

        <flatVocabParam name="pfGenomicSequenceOrNot"
                     prompt="P. falciparum Genomic Sequence"
                     help=""
                     multiPick="false"
                     default="choose one"
                     queryRef="VocabQueries.PfGenomicSequenceOrNot"/>

        <stringParam name="genomicSequence"
                     prompt="Genomic Sequence ID"
                     help="ID of genomic sequence to search for genes (e.g. ctg_7202)"
                     sample="(Examples: MAL4, ctg_4094)"/>

        <stringParam name="start_location"
                     prompt="Start Location"
                     help="Lower bound on nucleotide range to search for gene"
                     default="1"/>

        <stringParam name="end_location"
                     prompt="End Location"
                     help="Upper bound on nucleotide range to search for gene.  Use a number larger than the sequence length to search to the end of the sequence."
                     default="10000000000"/>

        <stringParam name="min_expression_percentile"
                     prompt="Minimum expression percentile"
                     help="Lower bound on expression percentile."
                     default="50"/>

        <stringParam name="max_expression_percentile"
                     prompt="Maximum expression percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="r_min_expression_percentile"
                     prompt="Rings min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="r_max_expression_percentile"
                     prompt="Rings max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="yt_min_expression_percentile"
                     prompt="Early trophs min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="yt_max_expression_percentile"
                     prompt="Early trophs max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="ys_min_expression_percentile"
                     prompt="Early schizont min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="ys_max_expression_percentile"
                     prompt="Early schizont max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="ms_min_expression_percentile"
                     prompt="Late schizont min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="ms_max_expression_percentile"
                     prompt="Late schizont max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <flatVocabParam name="extraerythrocytic_stages"
                     prompt="Extraerythrocytic Lifecycle Stage"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.ExtraerythrocyticStages"/>

        <flatVocabParam name="intraerythrocytic_stages"
                     prompt="Intraerythrocytic Lifecycle Stage"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.IntraerythrocyticStages"/>

        <flatVocabParam name="synchronization"
                     prompt="Synchronization"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Synchronization"/>

        <flatVocabParam name="localization"
                     prompt="Localization"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Localization"/>

        <stringParam name="ortholog_pattern"
                     prompt="Ortholog pattern"
                     help="This will be generated by clicking the species tree nodes."
                     default=""/>

        <flatVocabParam name="phyletic_indent_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticIndentMap"/>

        <flatVocabParam name="phyletic_term_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticTermMap"/>

        <flatVocabParam name="metabolic_pathway"
                     prompt="Metabolic Pathway"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.MetabolicPathways"/>

        <flatVocabParam name="mr4_reagent_type"
                     prompt="Reagent Type"
                     help="Choose a reagent type"
                     multiPick="false"
                     queryRef="VocabQueries.Mr4Reagents"/>

        <flatVocabParam name="Dataset"
                        prompt="Organism"
                        help="Choose one or more organisms to search with the given motif"
			multiPick="true"
                        queryRef="VocabQueries.MotifDataset"/>

        <stringParam name="Expression"
                     prompt="Pattern"
                     help="Enter a Perl regular expression describing the desired motif.  Example: 'CC6+RK' searches for two consecutive cysteine residues followed by a stretch of hydrophobic amino acids followed by the aminoacids arginine and lysine."
                     sample="(Example: CC6+RK)"
                     default="CC6+RK"/>

        <stringParam name="min_isoelectric_point"
                     prompt="Min Isoelectric Point"
                     help="Lower bound for the protein isoelectric point"
                     default="6"/>

        <stringParam name="max_isoelectric_point"
                     prompt="Max Isoelectric Point"
                     help="Upper bound for the protein isoelectric point"
                     default="10"/>

        <stringParam name="min_molecular_weight"
                     prompt="Min Molecular Weight (Daltons)"
                     help="Lower bound for the protein molecular weight"
                     default="10000"/>

        <stringParam name="max_molecular_weight"
                     prompt="Max Molecular Weight (Daltons)"
                     help="Upper bound for the protein molecular weight"
                     default="50000"/>

        <stringParam name="profile_pattern"
                     visible="false"
                     prompt="Profile Pattern"
                     help="Example: '%hsa:N%pfa:Y%'"
                     default="%hsa:N%pfa:Y%"/>

        <stringParam name="included_species"
                     prompt="Included Species"
                     help="List of included species (for documentation only)"/>

        <stringParam name="excluded_species"
                     prompt="Excluded Species"
                     help="List of excluded species (for documentation only)"/>

        <stringParam name="min_exportpred_score"
                     prompt="Minimum ExportPred Score"
                     help="mininum requirement of score by ExportPred algorithm"
                     default="10"/>

        <flatVocabParam name="asexual_blood_stages_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Asexual blood stages"/>
        <flatVocabParam name="gametocytes_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Gametocytes"/>
        <flatVocabParam name="ookinetes_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Ookinetes"/>
        <flatVocabParam name="oocysts_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Oocysts"/>
        <flatVocabParam name="sporozoites_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Sporozoites"/>
        <stringParam name="min_interaction"
                     prompt="Minimum Likelihood Score"
                     help="Set a minimum for the likelihood of interaction"
                     substitute="yes"
                     default="2"/>

        <flatVocabParam name="mass_spec_stage"
                     prompt="Lifecycle Stage"
                     help="Select a lifecycle stage from the list provided."
                     multiPick="false"
                     queryRef="VocabQueries.MassSpecStage"/>

        <stringParam name="min_seq_coverage"
                     prompt="Minimum Percent Sequence Coverage"
                     help="Use this parameter to set a minimum amount of (amino acid) sequence coverage for the mass spec-predicted peptides. For example, setting this parameter to 10 will return only those genes whose proteins are at least 10% covered by mass spec.-predicted peptides. In the current dataset the average percent coverage is about 9%, and the maximum is about 90%. Note that even if this parameter is set to 0%, only genes with at least some mass spec. predictions for the specified stage will be returned. In other words, it never returns proteins with 0% coverage, only those with strictly > 0%."
                     substitute="yes"
                     default="0"/>

        <stringParam name="min_span_count"
                     prompt="Minimum Number of Spans"
                     help="Use this parameter to set a minimum for the number of nonoverlapping regions (spans) that must be found in the mass spec. data for a gene (and the specified lifecycle stage). Only genes with at least this many spans are returned"
                     substitute="yes"
                     default="2"/>

        <stringParam name="min_spectrum_count"
                     prompt="Minimum Number of Spectra"
                     help="Use this parameter to set a minimum for the number of mass spectra found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment."
                     substitute="yes"
                     default="1"/>

        <stringParam name="genbank_accession"
                     prompt="GenBank Accession Number"
                     help="Enter a GenBank Accession number"
                     substitute="yes"
                     default="1575532"/>

        <stringParam name="distanceFromTelomere"
	             prompt="Maximum Distance from Telomere"
		     help="Enter an upper bound on the distance."
		     substitute="yes"
		     default="30000"/>

        <stringParam name="percentLowComplexity"
	             prompt="Percent of Low Complexity in Protein"
		     help="Enter an lower bound on the percent of low complexity."
		     substitute="yes"
		     default="30"/>

        <stringParam name="max_centromere_distance"
                     prompt="Maximum Distance from Centromere"
                     help="Enter an upper bound on the distance"
                     substitute="yes"
                     default="10000"/>

        <stringParam name="start_point"
                     prompt="Start at"
                     help="Select the distance (in nucleotides) to the start"
                     substitute="yes"
                     default="1"/>

        <flatVocabParam name="start_from"
                     prompt="Start Location"
                     help="Select whether to measure the start point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd"/>

        <stringParam name="end_point"
                     prompt="End Location (0 = end)"
                     help="Select the distance (in nucleotides) for the end location.  Note that 0 equals the end so you can get genes right up to the end of the sequence"
                     substitute="yes"
                     default="0"/>

        <flatVocabParam name="end_from"
                     prompt="From"
                     help="Select whether to measure the end point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd2"/>

        <flatVocabParam name="protein_dataset"
                     prompt="Protein Dataset"
                     help=""
                     multiPick="true"
                     queryRef="VocabQueries.ProteinDataset"/>

        <stringParam name="pvalue_cutoff"
                     prompt="BLAST P-value less than 10 to the"
                     help="Only consider BLAST similarities with a P-value less than ten to the given power."
                     substitute="yes"
                     default="-20"/>

        <flatVocabParam name="clades"
                     prompt="PDB Proteins from"
                     help="Select one or more clades."
                     multiPick="true"
                     queryRef="VocabQueries.Clades"/>

        <stringParam name="accession"
                     prompt="Accession number"
                     help="Enter a GenBank, RefSeq, or SwissProt accession number"
                     substitute="yes"
                     default="CAD50836.1"/>

        <stringParam name="min_coil"
                     prompt="Minimum percent coil"
                     help="Choose a lower bound on the coil percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of coil will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_coil"
                     prompt="Maximum percent coil"
                     help="Choose a upper bound on the coil percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of coil will be returned."
                     substitute="yes"
                     default="100"/>

        <stringParam name="min_strand"
                     prompt="Minimum percent strand"
                     help="Choose a lower bound on the strand percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of strand will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_strand"
                     prompt="Maximum percent strand"
                     help="Choose a upper bound on the strand percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of strand will be returned."
                     substitute="yes"
                     default="100"/>

        <stringParam name="min_helix"
                     prompt="Minimum percent helix"
                     help="Choose a lower bound on the helix percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of helix will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_helix"
                     prompt="Maximum percent helix"
                     help="Choose a upper bound on the helix percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of helix will be returned."
                     substitute="yes"
                     default="100"/>

        <stringParam name="ProfileGeneId"
                     prompt="Gene Id"
                     help="The Gene Id"
                     substitute="yes"
                     default="PF11_0344"/>

        <flatVocabParam name="ProfileDistanceMethod"
                     prompt="Distance Method"
                     help="The method used to calculate the similarity distance"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileDistanceMethod"/>

        <stringParam name="ProfileNumToReturn"
                     prompt="# of Matches"
                     help="The number of genes in the result"
                     substitute="yes"
                     default="50"/>

        <flatVocabParam name="ProfileSearchGoal"
                     prompt="Search Goal"
                     help="The searching goal of the profile similarity query"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileSearchGoal"/>

        <flatVocabParam name="ProfileProfileSet"
                     prompt="Strain"
                     help="Choose the strain of the profile to search against"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileProfileSet"/>

        <flatVocabParam name="ProfileTimeShift"
                     prompt="Time Shift"
                     help="Whether to allow time shifting or not"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileTimeShift"/>

        <flatVocabParam name="ProfileScaleData"
                     prompt="Scale Result"
                     help="Whether to scale result data into [0..1] or not"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileScaleData"/>

        <flatVocabParam name="ProfileMinShift"
                     prompt="Min Shift"
                     help="The minimum allowed time shift"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileMinShift"/>

        <flatVocabParam name="ProfileMaxShift"
                     prompt="Max Shift"
                     help="The maximum allowed time shift"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileMaxShift"/>

        <stringParam name="text_expression"
                     prompt="Text term"
                     help="Enter a regular expression describing the text term(s) to search for.  Example: membrane"
                     sample="(Example: membrane)"
                     default="membrane"/>

        <flatVocabParam name="case_independent"
                     prompt="Ignore capitalization?"
                     help="Use this parameter to control whether to include text that matches except for capitalization (e.g. treat 'DNA', 'Dna', and 'dna' as all equal)."
                     multiPick="false"
                     queryRef="VocabQueries.CaseIndependence"/>

        <flatVocabParam name="datasets"
                     prompt="Fields"
                     help="Choose which text fields to search."
                     multiPick="true"
                     queryRef="VocabQueries.TextSearchDatasets"/>

        <stringParam name="max_pvalue"
                     prompt="Max p-value exponent (BLAST Hits v. NRDB)"
                     help="Only applicable to the 'Similar proteins' field.  Use this to filter away BLAST hits that are below a threshold of significance, so you only search the descriptions of significantly similar proteins."
                     default="-30"/>

        <stringParam name="e_value"
                     prompt="E value &lt;="
                     help="Enter the maximum E value allowed to report domain matches."
                     default="0.05"/>

        <flatVocabParam name="domain_database"
                     prompt="Domain Database"
                     help="Choose one of the constituent databases of InterPro."
                     multiPick="false"
                     queryRef="VocabQueries.DomainDatabase"/>

        <!-- flatVocabParam name="domain_accession"
                     prompt="Domain Accession"
                     help="Choose an accession number from an InterPro database."
                     multiPick="false"
                     queryRef="VocabQueries.DomainAccession"/ -->

        <stringParam name="domain_accession"
                     prompt="Domain"
                     help="Start typing and then choose a domain from the list of domains that come up. As you type the list gets narrowed to match only those entries that match what you have typed."/>

        <flatVocabParam name="day_and_strain"
                     prompt="Day of Gametocytogenesis and Strain"
                     help="Choose one or more strain/day combination"
                     multiPick="true"
                     queryRef="VocabQueries.DayAndStrain"/>

        <datasetParam name="ds_gene_ids"
                     prompt="Gene id input set"
                     help="input a comma delimited set of gene ids, or upload a file"
                     default="PF11_0344"
                     />
     </paramSet>

    <paramSet name="GeneBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.GeneBlastDatabaseType"/>

        <flatVocabParam name="BlastDatabaseOrganism"
                     prompt="Organism"
                     help="Organism(s) from which the sequences in the BLAST database originated"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseOrganismWithGenes"/>
     </paramSet>

    <paramSet name="SequenceBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.SequenceBlastDatabaseType"/>
     </paramSet>

    <paramSet name="OrfBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.OrfBlastDatabaseType"/>
     </paramSet>

    <paramSet name="EstBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.EstBlastDatabaseType"/>
     </paramSet>

    <paramSet name="OrfMotifSearchParams">
        <flatVocabParam name="Dataset"
                        prompt="Organism"
                        help="Choose one or more organisms to search with the given motif"
			multiPick="true"
                        queryRef="VocabQueries.MotifOrfDataset"/>
     </paramSet>

    <paramSet name="epitopeParams">
        <flatVocabParam name="confidence"
                        prompt="Confidence"
                        help="Epitopes are mapped to genes in PlasmoDB using high quality BLAST similarities (percent identity >= 97%) between the GenBank proteins listed on IEDB and the proteins found in PlasmoDB, and exact string matching.  Confidence levels are assigned to each set of epitopes based on the quality of this mapping.  A high confidence is assigned to a set where all of the epitopes are found on a given BLAST hit.  A medium confidence is assigned to a set where either some, but not all, of the epitopes in a set are found on a given BLAST hit, or where all of the epitopes in a set are found in a given protein, but the protein was not identified as a match by BLAST.  A low confidence is assigned to sets where some, but not all, of the epitopes are found in a given protein, but the protein was not identified by BLAST.  Choose one or more assigned confidence levels to search for epitopes in."
                        multiPick="true"
                        queryRef="VocabQueries.Confidence"/>
    </paramSet>

    <paramSet name="idQueryParams">
        <stringParam name="locus_tag"
                     prompt="Gene ID"
                     help="Enter an ID, such as a sequencing-center gene ID. The search is case insensitive, so capitalization does not matter. Asterisks can be used as wild cards (e.g. ' PF11_* ').  Genes whose IDs have changed can be found by either the old or the new ID. GI numbers (e.g. 23508535), Entrez Protein Locus IDs (e.g. NP_701204.1), PDB IDs (e.g. 1HN6), or GenBank IDs (e.g. AAB36701.1) can also be used."
                     sample="PF11_0344, PY01656, Pv092275"
                     substitute="yes"
                     default="PF11_0344"/>

        <stringParam name="orf_id"
                     prompt="ORF ID"
                     help="Enter an ORF ID"
                     sample="MAL1-1-10639-11520, MAL1-1-105160-105438"
                     substitute="yes"
                     default="MAL1-1-10639-11520"/>

        <stringParam name="est_id"
                     prompt="EST ID"
                     help="Enter an EST ID (Accession Number)"
                     sample="AU087658, BQ739759, N98084"
                     substitute="yes"
                     default="AU087658"/>

        <stringParam name="snp_id"
                     prompt="SNP ID"
                     help="Enter an SNP ID"
                     sample="CombinedSNP.MAL11.3000, WTSI_PFAL.GHANA1.0.MAL10.1384630.1384630.0"
                     substitute="yes"
                     default="CombinedSNP.MAL11.3000"/>
     </paramSet>


    <!-- Definitions of Xml sources -->

    <!-- xml question sets -->
    <xmlQuestionSet name="XmlQuestions"
                 displayName="Data contents from XML data sources">

        <description>
          Data contents from XML data sources
        </description>

        <xmlQuestion name="ComingSoon"
                  displayName="PlasmoDB Upcoming Features"
                  recordClassRef="XmlRecordClasses.ComingSoonRecord"
                  xmlDataURL="plasmodbComingSoon.xml">
            <description>
                Coming soon.
            </description>
        </xmlQuestion>


        <xmlQuestion name="News"
                  displayName="PlasmoDB News"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="plasmodbNews.xml">
            <description>
                Retrieve news from XML data source
            </description>
        </xmlQuestion>

        <xmlQuestion name="NewsRss"
                  displayName="PlasmoDB News RSS Feed"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="plasmodbNews.xml">
            <description>
                Retrieve news from XML data source and feed to RSS
            </description>
        </xmlQuestion>

<!--
        <xmlQuestion name="DidYouKnow"
                  displayName="Did you know..."
                  recordClassRef="XmlRecordClasses.DidYouKnowRecord"
                  xmlDataURL="plasmodbDidYouKnow.xml">
            <description>
                Did you knows of the PlasmoDB website
            </description>
        </xmlQuestion>
-->

        <xmlQuestion name="Methods"
                  displayName="Methods"
                  recordClassRef="XmlRecordClasses.Methods"
                  xmlDataURL="plasmodbMethods.xml">
            <description>
                Methods used by PlasmoDB
            </description>
        </xmlQuestion>

        <xmlQuestion name="DataSources"
                  displayName="Data Sources for PlasmoDB"
                  recordClassRef="XmlRecordClasses.DataSourcesRecord"
                  xmlDataURL="plasmoResources-pubmed.xml"
                  xslURL="resources2records.xsl">
            <description>
                Data sources of PlasmoDB.
            </description>
        </xmlQuestion>

        <xmlQuestion name="About"
                  displayName="More About PlasmoDB"
                  recordClassRef="XmlRecordClasses.AboutPlasmoDBRecord"
                  xmlDataURL="plasmodbAbout.xml">
            <description>
                Things one might want to know about PlasmoDB.
            </description>
        </xmlQuestion>

        <xmlQuestion name="FAQ"
                  displayName="Frequently Asked Questions (FAQ)"
                  recordClassRef="XmlRecordClasses.FAQRecord"
                  xmlDataURL="plasmodbFAQ.xml">
            <description>
                Frequently asked questions.
            </description>
        </xmlQuestion>

        <xmlQuestion name="Tutorials"
                  displayName="Tutorials"
                  recordClassRef="XmlRecordClasses.TutorialsRecord"
                  xmlDataURL="tutorials.xml">
            <description>
                Tutorials.
            </description>
        </xmlQuestion>

        <xmlQuestion name="ExternalLinks"
                  displayName="Useful Links"
                  recordClassRef="XmlRecordClasses.ExternalLinksRecord"
                  xmlDataURL="plasmodbExternalLinks.xml">
            <description>
               Related Sites
            </description>
        </xmlQuestion>

    </xmlQuestionSet>

    <!-- xml record class set -->
    <xmlRecordClassSet name="XmlRecordClasses">


        <xmlRecordClass
        	name="NewsRecord"
        	type="News"
        	idPrefix="NEWS."
        	delimiter="@">
            <xmlAttribute name="headline"/>
            <xmlAttribute name="date"/>
            <xmlAttribute name="item"/>
            <xmlAttribute name="tag"/>
         </xmlRecordClass>

        <xmlRecordClass
        	name="ComingSoonRecord"
        	type="ComingSoon"
        	idPrefix="CS."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="tag"/>
            <xmlTable name="list">
              <xmlAttribute name="headline"/>
              <xmlAttribute name="item"/>
            </xmlTable>
         </xmlRecordClass>

<!--
         <xmlRecordClass
        	name="DidYouKnowRecord"
        	type="DidYouKnow"
        	idPrefix="DYK."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="text"/>
            <xmlAttribute name="image"/>
         </xmlRecordClass>
-->

         <xmlRecordClass
        	name="Methods"
        	type="Methods"
        	idPrefix="MTHD."
        	delimiter="@">
             <xmlAttribute name="name" displayName="Method"/>
             <xmlAttribute name="input" displayName="Input"/>
             <xmlAttribute name="output" displayName="Output"/>
             <xmlAttribute name="descrip" displayName="Details"/>
             <xmlTable name="tools" displayName="Tools">
                 <xmlAttribute name="name" displayName="Tool"/>
                 <xmlAttribute name="version" displayName="Version"/>
                 <xmlAttribute name="params" displayName="Parameters"/>
                 <xmlAttribute name="url" displayName="URL"/>
                 <xmlAttribute name="pubmedIds" displayName="PubMed&nbsp;IDs"/>
                 <xmlAttribute name="credits" displayName="Credits"/>
             </xmlTable>
         </xmlRecordClass>

        <xmlRecordClass name="DataSourcesRecord"
        	type="PlasmoDB Data Source"
        	idPrefix="DS."
        	delimiter="@">
            <xmlAttribute name="resource"/>
            <xmlAttribute name="version"/>
            <xmlAttribute name="publicUrl"/>
            <xmlAttribute name="organisms"/>
            <xmlAttribute name="category"/>
            <xmlAttribute name="description"/>
            <xmlAttribute name="display"/>
            <xmlTable name="publications">
               <xmlAttribute name="pmid"/>
               <xmlAttribute name="pmauthors"/>
               <xmlAttribute name="pmtitle"/>
               <xmlAttribute name="pmdetails"/>
            </xmlTable>
         </xmlRecordClass>

        <xmlRecordClass
        	name="AboutPlasmoDBRecord"
        	type="About"
        	idPrefix="ABOUT."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="text"/>
            <xmlAttribute name="tag"/>
         </xmlRecordClass>

        <xmlRecordClass
        	name="FAQRecord"
        	type="FAQ"
        	idPrefix="FAQ."
        	delimiter="@">
            <xmlAttribute name="didYouKnow"/>
            <xmlAttribute name="question"/>
            <xmlAttribute name="answer"/>
            <xmlAttribute name="tag"/>
            <xmlAttribute name="category"/>
         </xmlRecordClass>

        <xmlRecordClass
        	name="TutorialsRecord"
        	type="Tutorial"
        	idPrefix="Tut."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="description"/>
            <xmlAttribute name="projects"/>
            <xmlAttribute name="fileName"/>
            <xmlAttribute name="duration"/>
            <xmlAttribute name="size"/>
        </xmlRecordClass>

        <xmlRecordClass
        	name="ExternalLinksRecord"
        	type="ExternalLinks"
        	idPrefix="EL."
        	delimiter="@">
            <xmlTable name="relatedLinks" displayName="Related Links">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="generalInfo" displayName="General Information">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="chromosomeMaps" displayName="Chromosome Maps">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="blastTools" displayName="BLAST Tools">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="otherDbSearches" displayName="Other database searches">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="pfSeqCenters" displayName="Plasmodium falciparum Sequencing Centers">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="otherSeqCenters" displayName="Other Plasmodium spp. Sequencing Centers">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="plasmoDbs" displayName="Plasmodium Sequence Databases">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="vectorDbs" displayName="Vector Databases">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="malariaBio" displayName="Malaria Biology">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="malariaGeneral" displayName="Malaria General">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="funding" displayName="Funding">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
         </xmlRecordClass>

    </xmlRecordClassSet>
    
    <groupSet name="paramGroups">
        
        <group name="advancedParams" displayName="Advanced Parameters" displayType="ShowHide">
            <description>
                <![CDATA[
                ]]>
            </description>
        </group>
    </groupSet>

</wdkModel>
