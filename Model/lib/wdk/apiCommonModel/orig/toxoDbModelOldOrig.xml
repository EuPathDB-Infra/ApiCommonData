<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE xml [
  <!ENTITY nbsp "&#160;">
  <!ENTITY lt   "&#60;">
  <!ENTITY gt   "&#62;">
]>

<wdkModel name="toxoDbModel" displayName="ToxoDB" version="4.2">

<!-- ******************* -->
<!-- model introduction  -->
<!-- ******************* -->
<introduction></introduction>

<!-- ************ -->
<!-- questionSets -->
<!-- ************ -->

<!--
A question is "a query that returns a list of records."  (Regular queries
return columns and rows.)  They are formed by pairing a query with a
record class.  The query must be one that returns one column containing
a list of primary keys.  The record class must be one that expects as
a primary key the type of key returned by the query.

A question set is a grouping of questions.  It may be used in the
user interface to present the enclosed questions in one choice box.
-->


<!-- questions that return Gene records -->
<questionSet name="GeneQuestions"
             displayName="Search genes">

    <description>
      Find Genes
    </description>

    <question name="GenesByLocation"
         category="Genomic Position"
         displayName="Chromosomal Location"
         queryRef="GeneFeatureIds.GenesByGenomicRegion"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that are located in a specified genomic region.
        </summary>
	<description>
	  <![CDATA[
          Find genes that are located in a specified genomic region.<br><br>
          Either select a <i>T. gondii</i> chromosome from the pull-down menu <b>or</b> 
          enter a sequence ID of a chromosome (e.g. "VIIa") or a scaffold (e.g. "TGG_995305"). <br>
	  The Start and End locations correspond to the coordinates of the gene(s) on the chromosome.
            ]]>
        </description>
    </question>

    <question name="GenesByNonnuclearLocation"
         category="Genomic Position"
         displayName="Non-nuclear Chromosomal Location"
         queryRef="GeneFeatureIds.GenesByNonnuclearGenomicRegion"
         summaryAttributesList="location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that are located in a specified genomic region, other than the nucleus.
        </summary>
        <description>
          <![CDATA[
          Find genes that are located in a specified non-nuclear region of the genome.<br><br>
          ]]>
        </description>
    </question>

    <question name="GenesByGeneType"
         category="Gene Attributes"

         displayName="Gene Type"
              queryRef="GeneFeatureIds.GenesByGeneType"
              summaryAttributesList="location_text,product,is_pseudo"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by type (eg, protein coding, tRNA, pseudogenes, etc).
        </summary>
        <description>
            <![CDATA[
            Find genes by type.<br><br>
            Gene type assignments are based on the gene annotations from TIGR.
            ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="is_pseudo" displayName="Pseudogene" align="center"/>
        </dynamicAttributes>
    </question>


    <question name="GenesBySnps"
              category="Population Biology"
              displayName="Snp Characteristics"
              queryRef="GeneFeatureIds.GenesBySnps"
              summaryAttributesList="product,total_snps,num_non_synonymous,num_synonymous,num_nonsense,num_noncoding,dn_ds_ratio,cds_snp_density"
              sortingAttributesList="total_snps desc,cds_snp_density desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
	 Find genes which have SNPs meeting specific criteria (Non-synonymous / synonymous SNP ratio, SNP density, etc).
        </summary>
        <description>
            <![CDATA[
	     Search for T. <I>gondii</I> genes by SNP density, the number of SNPs of different classes, ratio of non-synonymous to synonymous, etc. 
             Note that if you don't care about one of the parameters, don't change the defaults
             on that parameter and you will get all genes that contain SNPs between the reference and 
             comparator strains irrespective of that parameter.  
            ]]>
        </description>

	<dynamicAttributes>
	     <columnAttribute name="total_snps" displayName="Total SNPs" align="center"/> 
	     <columnAttribute name="cds_snp_density" displayName="SNPs per Kb (CDS)" align="center"/>
	     <columnAttribute name="dn_ds_ratio" displayName="Non-syn/syn SNP ratio" align="center"/>
	     <columnAttribute name="num_synonymous" displayName="Synonymous SNPs" align="center"/>
	     <columnAttribute name="num_non_synonymous" displayName="Non-synonymous SNPs" align="center"/>
	     <columnAttribute name="num_nonsense" displayName="Nonsense SNPs" align="center"/>
	     <columnAttribute name="num_noncoding" displayName="Non-coding SNPs" align="center"/>
	</dynamicAttributes>

    </question>

    <question name="GenesByExonCount"
         category="Gene Attributes"
              displayName="Exon Count"
              queryRef="GeneFeatureIds.GenesByExonCount"
              summaryAttributesList="location_text,product,exon_count"
              sortingAttributesList="exon_count desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes having the given number of exons.
        </summary>
        <description>
            <![CDATA[
	    Find genes having the given number of exons.
          <br><br>
            Exon numbers are based on annotated gene models from TIGR.
            ]]>
        </description>
    </question>

    <question name="GenesByIsoelectricPoint"
         category="Predicted Proteins"
         displayName="Isoelectric Point"
         queryRef="GeneFeatureIds.GenesByIsoelectricPoint"
         summaryAttributesList="location_text,product,isoelectric_point"
         sortingAttributesList="isoelectric_point asc, location_text asc"
	 recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes whose protein product has an isoelectric point in a range that you specify.        
        </summary>
        <description>
             <![CDATA[
             Find genes whose protein product has an isoelectric point in the specified range.
             ]]>
        </description>
    </question>

    <question name="GenesByMolecularWeight"
         category="Predicted Proteins"
         displayName="Molecular Weight"
	 queryRef="GeneFeatureIds.GenesByMolecularWeight"
	 summaryAttributesList="location_text,product,molecular_weight"
         sortingAttributesList="molecular_weight asc, location_text asc"
	 recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes whose unmodified protein product has a molecular weight in a range that you specify.
        </summary>
        <description>
             <![CDATA[
             Find genes whose unmodified protein product has a molecular weight
             in a range that you specify.<br><br>
             Molecular weights are machine calculated from the raw translation
             and do not take into account any protein or residue modifications.
             For translations containing ambiguous amino acid codes (B, Z, X)
             we calculate the average of the upper and lower bound of the
             molecular weight.
             ]]>
        </description>
    </question>

    <question name="GenesBySimilarity" 
              displayName="BLAST" 
              category="Similarity/Pattern"
              queryRef="GeneFeatureIds.GenesBySimilarity"
              summaryAttributesList="product,Header,TabularRow,Alignment,Footer"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes that have BLAST similarity to your input sequence.
        </summary>
        <description>
            <![CDATA[
            Find genes that have BLAST similarity to your input sequence. The
            search uses <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI
            BLAST</a>.
            ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="TabularRow" displayName="Blast summary"
                             inReportMaker="false"/>
            <columnAttribute name="Alignment" displayName="Blast alignment"
                             inReportMaker="false"/>
            <columnAttribute name="Header" displayName="Blast header"
                             inReportMaker="false"/>
            <columnAttribute name="Footer" displayName="Blast footer"
                             inReportMaker="false"/>
        </dynamicAttributes>
    </question>


    <question name="GenesByMotifSearch"
         displayName="Protein Motif Pattern"
         category="Similarity/Pattern"
         queryRef="GeneFeatureIds.GenesByMotifSearch"
         summaryAttributesList="location_text,product,Locations,MatchCount,Sequence"
         sortingAttributesList="MatchCount desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes whose protein product contains a motif pattern that you
            specify, e.g. "two cysteines followed by 2 or 3 charged residues
            and a hydrophobic stretch of 6-8 amino acids".                                          
         </summary>
         <description>
           <![CDATA[
             Find genes whose protein product contains a motif pattern that
             you specify., e.g. "CC6+RK", which means "two cysteines followed
             by one or more hydrophobic amino acids, followed by arginine,
             then lysine". The pattern need not be well conserved. If 
             you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.  
             <br><br>

             Another example is the pattern of the
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">
             Pexel motif</a>, which can be represented as "R.L.[EQD]", meaning
             "an arginine, then any amino acid, then a leucine, then any amino
             acid, then either an aspartic acid, a glutamic acid, or a
             glutamine".
             <br><br>

             The pattern need not be well conserved. If you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.
             <br><br>

             Specify the pattern with a (Perl style) "regular expression".  
             (Regular expressions are more powerful than PROSITE patterns.)
             For a description of how to create regular expressions,
             please see the <a href="/@WEBAPP_NAME@/regexp.jsp">Regular
             Expression Tutorial</a>.<br><br>

             The following codes can be used to represent classes of amino
             acids.
		<table border columns=3>
                   <TR>
                      <TD><B>Property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>
          ]]>
         </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" displayName="Match Locations" align="center"/>
           <columnAttribute name="MatchCount" displayName="Match Count" align="center"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>

    <!-- question name="GenesByPfamDomain"
         category="Similarity/Pattern"
         displayName="Pfam"
              queryRef="GeneFeatureIds.GenesByPfamDomain"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes containing a given Pfam domain, family or repeat.
        </summary>
        <description>
            <![CDATA[
            Find genes containing a given Pfam domain, family or repeat.  Type
            a Pfam name, accession or description. Use the
            <a href="http://www.sanger.ac.uk/Software/Pfam/browse/top_twenty.shtml">Pfam
            browser</a> to search Pfam if you are not sure. 
            ]]>
        </description>
    </question -->

    <question name="GenesByEcNumber"
              category="Putative Function"
              displayName="EC Number"
              queryRef="GeneFeatureIds.GenesByEcNumber"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find genes by assigned Enzyme Commission (EC) number.        
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find genes by their 
            <a href="http://www.chem.qmul.ac.uk/iubmb/enzyme/">Enzyme
            Commission</a> (EC) number.  Use '-' in place of numbers to denote
            partial EC Numbers, for example, '2.7.7.-'.<br><br>

            E.C. number annotation for <i>Toxoplasma gondii</i> are from
            <a href="http://www.tigr.org/~ipaulsen">Ian Paulsen</a> (TIGR)
            ]]>
        </description>
    </question>

    <question name="GenesByGoTerm"
              category="Putative Function"
              displayName="GO Term"
              queryRef="GeneFeatureIds.GenesByGoTerm"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by Gene Ontology (GO) term for molecular function,
            biological process or subcellular localization. 
        </summary>
        <description>
            <![CDATA[
            Find genes by Gene Ontology (GO) term for molecular function,
            biological process or subcellular localization.  The search finds
            genes with the GO term you specify and genes with terms that are
            specializations of your term (is-a).  For a list of GO terms, try
            the <a href="http://www.godatabase.org/cgi-bin/amigo/go.cgi">AmiGO</a>
            browser.  For GO IDs, include the GO prefix as in "GO:0003824."
            <br><br>

	    GO term annotation was provided by the sequencing and annotation
	    centers (<a href="http://www.tigr.org">TIGR</a>), and was inferred 
	    from similarity to protein domains from the
	    <a href="http://www.ebi.ac.uk/interpro/">InterPro</a> databases.
            ]]>
        </description>
    </question>

    <question name="GenesByMetabolicPathway"
         displayName="Metabolic Pathway"
         category="Putative Function"
         queryRef="GeneFeatureIds.GenesByMetabolicPathway"
         summaryAttributesList="location_text,product,met_pathways"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes involved in a specific metabolic pathway.
        </summary>
        <description>
            <![CDATA[
            Find genes involved in a specific metabolic pathway.<br><br>

            Metabolic Pathway Reconstruction  for <i> T. gondii</i> is
            available on the KEGG Pathway site
            <a href="http://roos-compbio2.bio.upenn.edu/~fengchen/pathway/">here</a>.
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="met_pathways" displayName="Metabolic Pathways"/>
	</dynamicAttributes>
    </question>

    <question name="GenesByTransmembraneDomains"
              category="Cellular Location"
              displayName="Transmembrane Domain Count"
              queryRef="GeneFeatureIds.GenesByTransmembraneDomains"
              summaryAttributesList="location_text,product,tm_count"
              sortingAttributesList="tm_count asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes with at least a given number of transmembrane domains.
        </summary>
        <description>
            <![CDATA[
            Find genes with at least a given number of transmembrane domains.
            <br><br>

            Transmembrane domains were predicted using TMHMM2.0a. TMHMM  is
            described in
            <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=pubmed&cmd=Retrieve&dopt=AbstractPlus&list_uids=11152613">
            <!-- Anders Krogh and Bjorn Larsson, Gunnar von Heijne,
            and Erik L.L. Sonnhammer: Predicting Transmembrane Protein
            Topology with a Hidden Markov Model: Application to Complete
            Genomes.-->
            J. Mol. Biol. 305:567-580, 2001.</a>
            ]]>
        </description>
    </question>

    <question name="GenesWithSignalPeptide"
              category="Cellular Location"
              displayName="Predicted Signal Peptide"
              queryRef="GeneFeatureIds.GenesWithSignalPeptide"
	      summaryAttributesList="location_text,product,sigp_sum_score"
	      sortingAttributesList="sigp_sum_score desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes that are predicted to encode a signal peptide.  
        </summary>
        <description>
            <![CDATA[
            Find genes that are predicted to encode a signal peptide.<br><br>

            The predictions are made with the
            <a href="http://www.cbs.dtu.dk/services/SignalP/">SignalP</a>
            program. 
            ]]>
        </description>
        <dynamicAttributes>
             <columnAttribute name="sigp_sum_score" displayName="Summary score" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesWithEpitopes" 
        category="Other Attributes"
        displayName="Epitope Presence"
        queryRef="GeneFeatureIds.GenesWithEpitopes" 
        summaryAttributesList="product,organism,location_text,count,confidence"
        sortingAttributesList="organism desc,location_text desc, count desc, confidence asc"
        recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
                Find <i>Toxoplasma</i> genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune Epitope Database and Analysis Resource</a>. 
              ]]>
        </summary>
        <description>
            <![CDATA[
                Find genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune 
                Epitope Database and Analysis Resource</a><sup>1</sup> (IEDB). <br>
                The epitopes have been remapped from the original Epitope Source Accession Number 
                provided by IEDB to the corresponding gene identifiers used in ToxoDB.
                <p><hr><p>
                <font size='-1'>
                <sup>1</sup>Peters B, Sidney J, Bourne P, Bui HH, Buus S, Doh G, Fleri W, 
                Kronenberg M, Kubo R, Lund O, Nemazee D, Ponomarenko JV, Sathiamurthy M, Schoenberger S, 
                Stewart S, Surko P, Way S, Wilson S, Sette A. 
                <a href="http://biology.plosjournals.org/perlserv/?request=get-document&amp;doi=10.1371/journal.pbio.0030091">The immune epitope database and analysis resource: from vision to blueprint. 
                PLoS Biol. 2005 Mar;3(3):e91</a>
                 </font>
              ]]>
        </description>
        <dynamicAttributes>
            <columnAttribute name="count" displayName="Epitope Count" align="center"/>
            <columnAttribute name="confidence" displayName="Confidence" align="center"/>
        </dynamicAttributes>
    </question>
    
    <question name="GenesByOrthologPattern"
              category="Evolution"
              displayName="Orthology Phylogenetic Profile"
              queryRef="GeneFeatureIds.GenesByOrthologPattern"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes that have a specified orthology-based phylogenetic profile. 
        </summary>
        <description>
            <![CDATA[
             Find genes that have a specified orthology-based phylogenetic profile. The phylogenetic profile of a gene is a series of 87 "present" or "absent" calls, reflecting the presence or absence of a putative ortholog in 87 genomes.
           <br><br>

            An
            <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a>
            analysis of the proteins of 87 species, including <i>Toxoplasma
            gondii</i>,
            placed each protein in an ortholog group. From a <i>Toxoplasma</i>
            gene perspective, the other species that are included in that
            gene's ortholog group can be thought of as a phylogenetic profile.
            <br><br>

            Use this query to define a pattern
            across those ortholog groups, and find genes that match that
            pattern.  The pattern is a specification, for each species, of
            "include", "exclude", or "don't care."  Click on the
            radio button next to a species to toggle through the three states.
            (A 
            <img src="images/yes.gif" alt="include"> means
            "include", an <img src="images/no.gif" alt="exclude"> means "exclude" 
            and <img src="images/dc.gif" alt="don't care"> means "don't care".)   
            <br> <br>
            For example, to find genes
            that are present in Apicomplexa but not in humans, click on Apicomplexa until you see
            a <img src="images/yes.gif" alt="include"> and click on <i>Homo
            sapiens</i> until you see an
            <img src="images/no.gif" alt="exclude">.
            <br> <br>
            Note that this query can take some time because of the large number
            of combinations of possible presence/absence calls.
            ]]>
        </description>
    </question>

    <question name="GeneByLocusTag"
              category="Other Attributes"
              displayName="List of IDs"
              queryRef="GeneFeatureIds.GeneByLocusTag"
              summaryAttributesList="location_text,product,gene_type"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find a gene by its ID. 
        </summary>
        <description>
            <![CDATA[
            Find a gene by its ID. The search is case insensitive.
            Asterisks can be used as wild cards (e.g. ' 46.m* ').
            ]]>
        </description>
    </question>

     <question name="GeneBySingleLocusTag"
         category="Other Attributes"
         displayName="ID"
              queryRef="GeneFeatureIds.GeneBySingleLocusTag"
              summaryAttributesList="organism,location_text,product,gene_type"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find a gene by its ID.
        </summary>
        <description>
           <![CDATA[
            Find a gene by its ID. The search is case insensitive.
            Asterisks can be used as wild cards (e.g. ' 46.m* ').
          ]]>
        </description>
    </question>


    <question name="GenesByTextSearch"
              category="Other Attributes"
              displayName="Keyword (search product name, notes, etc.)"
              queryRef="GeneFeatureIds.GenesByTextSearch"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes with a text search against their product name, notes, GO, EC, Domains, NRDB, or metabolic pathways.
        </summary>
        <description>
            <![CDATA[
             Find genes by searching text annotations.
             Specify the search pattern with a "regular expression".
             For example: "red.*ase" will match "reductase", and (if the
             "match only whole words" parameter is turned off) "predicted
             lactate dehydrogenase".<br><br>
             For a description of how to create regular expressions,
             please see the <a href="regexp.jsp">Regular Expression Tutorial</a>.
            ]]>
        </description>
    </question>


    <question name="GenesByTaxon"
         category="Other Attributes"
         displayName="Taxon"
         queryRef="GeneFeatureIds.GenesByTaxon"
              summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes of Toxoplasma species.
        </summary>
        <description>
           <![CDATA[
            Find genes of Toxoplasma gondii.
          ]]>
        </description>
    </question>

    <question name="GenesByInterproDomain"
              category="Similarity/Pattern"
              displayName="Interpro Domain"
              queryRef="GeneFeatureIds.GenesByProteinDomain"
              summaryAttributesList="product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes containing a given protein domain.
        </summary>
        <description>
            <![CDATA[
            Find genes which have been determined by the InterProScan program
            to contain a given domain from one of the domain databases which
            together compose the InterPro database.
            ]]>
        </description>
    </question>

    <question name="GenesByESTOverlap"
              category="Transcript Expression"
              displayName="EST evidence"
              queryRef="GeneFeatureIds.GenesByESTOverlap" 
              summaryAttributesList="location_text,product,number_of_ests"
              sortingAttributesList="number_of_ests desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes with evidence of expression based on expressed sequence tags (ESTs)
        </summary>
        <description>
            <![CDATA[
             Find genes with evidence of expression based on expressed sequence tags (ESTs).
             For example:  What <i>T. gondii</i> genes map to ESTs from the ME49 Tachyzoite library?
               NOTE: you can visualize the EST alignments by clicking on the 
	       "View this sequence in the genome browser" link and turning on the EST Alignments track.
            ]]>
        </description>
        <dynamicAttributes>
             <columnAttribute name="number_of_ests" displayName="Number of ESTs" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="GenesByDifferentialExpression"
              category="Transcript Expression"
              displayName="Differential Expression"
              queryRef="GeneFeatureIds.GenesByDifferentialExpression" 
              summaryAttributesList="product,location_text,fold_change,confidence"
              sortingAttributesList="fold_change desc,confidence desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by differential expression analysis
        </summary>
        <description>
            <![CDATA[
             Find genes whose expression was found to be up-regulated or down-regulated 
	    in a particular microarray study based upon 
            <a href="http://www.cbil.upenn.edu/PaGE/">PaGE</a> differential expression analysis.	    
	     <BR>&nbsp;<BR>
	     <center>
	     <table border="1" width="90%"
	     <thead><tr><td><b>Experiment</b></td><td><b>Description</b></td></thead>
	     <tr><td>Effects of Glucose Starvation in Toxoplasma gondii</td>
	         <td>Wildtype RH tachyzoites were grown in high glucose and no glucose conditions 
		     to determine the effects of glucose starvation on transcription.</td></tr>
	     <tr><td>Expression profiling of three archetypal T. gondii lineages</td>
	         <td>Determination of  strain-specific differential expression by profiling 
		 wildtype tachyzoites from the RH, Prugniaud and CTG strains of T. gondii</td></tr>
	     </table>
	     </center>
	     <BR>
	     For further information on the strains, refer to: <BR>
	     Howe, D. K., and L. D. Sibley. 1995. Toxoplasma gondii comprises three clonal lineages:
	     correlation of parasite genotype with human disease. J. Infect. Dis. 172:1561-1566 
	     <BR>&nbsp;<BR>
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold Change" align="center"/>
	     <columnAttribute name="confidence" displayName="Confidence" align="center"/>
	</dynamicAttributes>
    </question>


    <question name="GenesByExpressionPercentile"
              category="Transcript Expression"
              displayName="Expression Percentile"
              queryRef="GeneFeatureIds.GenesByExpressionPercentile" 
              summaryAttributesList="product,percentile"
              sortingAttributesList="percentile desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by expression percentile analysis
        </summary>
        <description>
            <![CDATA[
	    Find genes which are expressed over a given percentile in a particular strain.
	     <BR>
	     For further information on the strains, refer to: <BR>
	     Howe, D. K., and L. D. Sibley. 1995. Toxoplasma gondii comprises three clonal lineages:
	     correlation of parasite genotype with human disease. J. Infect. Dis. 172:1561-1566 
	     <BR>&nbsp;<BR>
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="percentile" displayName="Percentile" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="GenesByMassSpec"
              category="Protein Expression"
              displayName="Mass Spec. Evidence"
              queryRef="GeneFeatureIds.GenesByMassSpec" 
              summaryAttributesList="location_text,product,sum_sequence_count,sum_spectrum_count"
              sortingAttributesList="sum_sequence_count desc,sum_spectrum_count desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find &lt;i&gt;Toxoplasma&lt;/i&gt; genes that have evidence of expression 
             based on peptides identified ..
              </summary>
              <description>
              <![CDATA[
             <p>
             Find <i>Toxoplasma</i> genes that have evidence of protein expression based on Mass Spec analyses.
             <p>See the related <a href="showQuestion.do?questionFullName=OrfQuestions.OrfsByMassSpec"><b>ORFs with Mass Spec. Evidence</b></a> query to find genomic open reading frames which have mapped MS/MS peptides that do not correspond to current gene models.
             <p>
             <sup>1</sup> <i>Proteomics data from JM Wastling, SJ Sanderson, D Xia, J Yates, H Prieto.</i> Contact: Jonathan Wastling for details (j.wastling@liv.ac.uk)<br>
             Mass spectrometry data were obtained from one-dimensional gel LC-MS/MS and MudPIT analysis of Toxoplasma gondii tachyzoites. 6,546 protein hits were obtained resulting in 2217 non-redundant protein identifications. A further 318 hits were obtained to sequences which matched 226 predicted open reading frames for which no gene model currently exists.  Additionally, 163 gene predictions were hit that did not have an overlapping gene model to which at least 50% of the peptides could be mapped.  In total these protein identifications from one stage represent nearly one third of the entire predicted proteome of T. gondii.
             <p>
             <sup>2</sup><i>Hu K, Johnson J, Florens L, Fraunholz M, Suravajjala S, 
	     DiLullo C, Yates JR, Roos DS, Murray JM. (2006) 
	     Cytoskeletal Components of an Invasion Machine - The Apical Complex of Toxoplasma gondii. 
	     PLoS Pathog <b>2</b>:121-138.</i><br>
             1,887 protein hits were obtained resulting in 1,166 non-redundant protein identifications. A further 498 hits were obtained to sequences which matched 446 predicted open reading frames for which no gene model currently exists.  
             <p><p>
             Taken together, these two datasets result in 8,433 protein hits to 2,436 non-redundant Toxoplasma proteins and 816 hits to 634 non-redundant ORFs that contain peptides that couldn't be mapped to annotated proteins. 
             With the additional evidence from the predicted gene models, nearly 40% of the predicted proteome from T. gondii is represented.  The data provide evidence that often corroborates the annotated gene models and in some instances the peptides mapping to ORFs and predicted gene models provide evidence for alternatives to the current annotations.
             ]]>
             </description>
	<dynamicAttributes>
	     <columnAttribute name="sum_sequence_count" displayName="Number of Peptide Sequences" align="center"/>
	     <columnAttribute name="sum_spectrum_count" displayName="Number of Spectra" align="center"/>
	</dynamicAttributes>
    </question>

</questionSet>


<!-- questions that return Sequence records -->

<questionSet name="GenomicSequenceQuestions"
             displayName="Search genomic sequences">

    <description>
      Find Sequences
    </description>

    <question name="SequenceBySourceId"
              displayName="Genomic Sequence ID"
              category="Other Attributes"
              queryRef="SequenceIds.SequenceBySourceId"
              summaryAttributesList=""
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <description>
            <![CDATA[
            Genomic sequence records are returned for <i>Toxoplasma gondii</i>.
            ]]>
        </description>
    </question>

    <question name="SequencesByTaxon"
         displayName="Taxon"
              queryRef="SequenceIds.SequencesByTaxon"
              summaryAttributesList="organism"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <summary>
          Find chromosomes or scaffolds.
        </summary>
        <description>
           <![CDATA[
          Find <i>T. gondiii</i> chromosomes or contigs.
          ]]>
        </description>
    </question>

    <question name="SequencesBySimilarity" 
              displayName="BLAST"
              category="Similarity/Pattern"
              queryRef="SequenceIds.SequencesBySimilarity"
              summaryAttributesList="Header,TabularRow,Alignment,Footer"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <summary>
            <![CDATA[
            Find <i>Toxoplasma</i> genomic sequences that have BLAST similarity to your input sequence. 
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find <i>Toxoplasma</i> genomic sequences that have BLAST similarity
            to your input sequence. The search uses
            <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
            ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="Blast summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="Blast alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="Blast header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="Blast footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>

<!-- questions that return EST records -->
<questionSet name="EstQuestions"
             displayName="Find ESTs by">

    <description>
      Find ESTs
    </description>
    
    <question name="EstBySourceId"
	      displayName="ID"
	      queryRef="EstIds.EstBySourceId"
	      summaryAttributesList="organism,dbest_name"
	      recordClassRef="EstRecordClasses.EstRecordClass">
        <summary>
	Find ESTs by ID
	</summary>

	<description>
	  <![CDATA[
	    Find ESTs by ID
	  ]]>
	</description>
    </question>
    
    <!-- EstQuestions.EstsByLocation -->
    <question name="EstsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="EstIds.EstsByLocation"
              summaryAttributesList="dbest_name,est_location"
              sortingAttributesList="est_location asc"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <summary>
            Find ESTs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ESTs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the EST(s) on the chromosome.
            ]]>
        </description>
        <dynamicAttributes>
          <columnAttribute name="est_location" displayName="EST location(s)"/>
        </dynamicAttributes>
    </question>

    <!-- EstQuestions.EstsByLibrary -->
    <question name="EstsByLibrary"
              category="Other Attributes"
              displayName="EST by library"
              queryRef="EstIds.EstsByLibrary" 
              summaryAttributesList="dbest_name"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs by Library Name</description>
    </question>

    <!-- EstQuestions.EstsWithGeneOverlap -->
    <question name="EstsWithGeneOverlap" 
         displayName="ESTs by Extent of Gene Overlap"
         category="Genomic Position"
         queryRef="EstIds.EstsWithGeneOverlap" 
         summaryAttributesList="dbest_name,gene_ids,est_locations"
         sortingAttributesList="est_locations asc"
	 recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs that Overlap a Gene..</description>
        <dynamicAttributes>
            <columnAttribute name="est_locations" displayName="EST location(s)"/>
            <columnAttribute name="gene_ids" displayName="Gene(s)"/>
        </dynamicAttributes>
    </question>

    <question name="EstsBySimilarity"
         displayName="BLAST" 
         queryRef="EstIds.EstsBySimilarity"
         summaryAttributesList="organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="EstRecordClasses.EstRecordClass">
         <summary>
           <![CDATA[
             Find <i>Toxoplasma gondii</i> ESTs that have BLAST similarity to your input sequence. 
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find <i>Toxoplasma gondii</i> ESTs that have BLAST similarity to
             your input sequence. The search uses <a
             href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>

<!-- questions that return Orf records -->
<questionSet name="OrfQuestions"
             displayName="Find Orfs by">

    <description>
      Find ORFs
    </description>

    <question name="OrfByOrfId"
              displayName="ID"
              queryRef="OrfIds.OrfByOrfId"
              summaryAttributesList=""
              recordClassRef="OrfRecordClasses.OrfRecordClass">

        <summary>
        Find ORFs by locus tags
        </summary>

        <description>
            <![CDATA[
            Find ORFs by locus tags, such as "Ia-1-1000180-1000404"
            ]]>
        </description>
    </question>

    <!-- OrfQuestions.OrfsByLocation -->
    <question name="OrfsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="OrfIds.OrfsByLocation" 
              summaryAttributesList="orf_location_text,length"
              sortingAttributesList="orf_location_text asc "
              recordClassRef="OrfRecordClasses.OrfRecordClass">
        <summary>
            Find ORFs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ORFs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the ORF(s) on the chromosome.
            ]]>
        </description>
    </question>

    <!-- OrfQuestions.OrfsByMassSpec -->
    <question name="OrfsByMassSpec"
              category="Other Attributes"
              displayName="Mass Spec. Evidence"
              queryRef="OrfIds.OrfsByMassSpec" 
              summaryAttributesList="orf_location_text,sum_sequence_count,sum_spectrum_count"
              sortingAttributesList="sum_sequence_count desc,sum_spectrum_count desc"
              recordClassRef="OrfRecordClasses.OrfRecordClass">
              <summary>
              Find &lt;i&gt;Toxoplasma&lt;/i&gt; open reading frames that have evidence of expression 
             <!--based on peptides identified in sporozoites by MS/MS analysis-->.
              </summary>
              <description>
              <![CDATA[
             <p>
             Find <i>Toxoplasma</i> genes that have evidence of protein expression based on Mass Spec analyses.
             <p>See the related <a href="showQuestion.do?questionFullName=GeneQuestions.GenesByMassSpec"><b>Genes with Mass Spec. Evidence</b></a> query to find gene models which have mapped MS/MS peptides.
             <p>
             <sup>1</sup> <i>Proteomics data from JM Wastling, SJ Sanderson, D Xia, J Yates, H Prieto.</i> Contact: Jonathan Wastling for details (j.wastling@liv.ac.uk)<br>
             Mass spectrometry data were obtained from one-dimensional gel LC-MS/MS and MudPIT analysis of Toxoplasma gondii tachyzoites. 6,546 protein hits were obtained resulting in 2217 non-redundant protein identifications. A further 318 hits were obtained to sequences which matched 226 predicted open reading frames for which no gene model currently exists.  Additionally, 163 gene predictions were hit that did not have an overlapping gene model to which at least 50% of the peptides could be mapped.  In total these protein identifications from one stage represent nearly one third of the entire predicted proteome of T. gondii.
             <p>
             <sup>2</sup><i>Hu K, Johnson J, Florens L, Fraunholz M, Suravajjala S, 
	     DiLullo C, Yates JR, Roos DS, Murray JM. (2006) 
	     Cytoskeletal Components of an Invasion Machine - The Apical Complex of Toxoplasma gondii. 
	     PLoS Pathog <b>2</b>:121-138.</i><br>
             1,887 protein hits were obtained resulting in 1,166 non-redundant protein identifications. A further 498 hits were obtained to sequences which matched 446 predicted open reading frames for which no gene model currently exists.  
             <p><p>
             Taken together, these two datasets result in 8,433 protein hits to 2,436 non-redundant Toxoplasma proteins and 816 hits to 634 non-redundant ORFs that contain peptides that couldn't be mapped to annotated proteins. 
             With the additional evidence from the predicted gene models, nearly 40% of the predicted proteome from T. gondii is represented.  The data provide evidence that often corroborates the annotated gene models and in some instances the peptides mapping to ORFs and predicted gene models provide evidence for alternatives to the current annotations.
             ]]>
         </description>
	<dynamicAttributes>
	     <columnAttribute name="sum_sequence_count" displayName="Number of Peptide Sequences" align="center"/>
	     <columnAttribute name="sum_spectrum_count" displayName="Number of Spectra" align="center"/>
	</dynamicAttributes>

    </question>


    <question name="OrfsBySimilarity"
         displayName="BLAST" 
         queryRef="OrfIds.OrfsBySimilarity"
         summaryAttributesList="organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
         <summary>
           <![CDATA[
             Find <i>Toxoplasma gondii</i> ORFs that have BLAST similarity to your input sequence. 
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find <i>Toxoplasma gondii</i> ORFs that have BLAST similarity to your
             input sequence. The search uses <a
             href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

    <question name="OrfsByMotifSearch"
         displayName="Motif Pattern"
         category="Similarity/Pattern"
         queryRef="OrfIds.OrfsByMotifSearch"
         summaryAttributesList="Locations,MatchCount,Sequence"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
        <summary>
             Find ORFs whose translation contains a motif pattern that
             you specify, e.g. "two cysteines followed by one or more
             hydrophobic amino acids, followed by arginine, then lysine".
         </summary>
         <description>
           <![CDATA[
             Find ORFs whose translation contains a motif pattern that 
             you specify., e.g. "CC6+RK", which means "two cysteines followed
             by one or more hydrophobic amino acids, followed by arginine,
             then lysine".
             <br><br>

             Another example is the pattern of the
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">
             Pexel motif</a>, which can be represented as "R.L.[EQD]", meaning
             "an arginine, then any amino acid, then a leucine, then any amino
             acid, then either an aspartic acid, a glutamic acid, or a
             glutamine".
             <br><br>

             The pattern need not be well conserved. If you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.
             <br><br>

             Specify the pattern with a (Perl style) "regular expression".
             (Regular expressions are more powerful than PROSITE patterns.)
             For a description of how to create regular expressions,
             please see the <a href="regexp.jsp">Regular Expression Tutorial</a>.
             <br><br>

             The following codes can be used to represent classes of amino acids.
		<table border columns=3>
                   <TR>
                      <TD><B>AA property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>
          ]]>
         </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" inReportMaker="false"/>
           <columnAttribute name="MatchCount" displayName="Match Count"
                            inReportMaker="false"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>

</questionSet>

<questionSet name="SnpQuestions"
             displayName="Find SNPs by">
     <description>
         "Find SNPs"
     </description>
     
     <question name="SnpBySourceId"
               displayName="ID"
               queryRef="SnpsBy.SnpBySourceId"
	       summaryAttributesList=""
	       recordClassRef="SnpRecordClasses.SnpRecordClass">
          <summary>
            Find SNPs by ID
          </summary>
	  <description>
	    <![CDATA[
            Find SNPs by ID, for example: "SNP_Ia_17864"
	    ]]>
	  </description>
      </question>
      
     <question name="SnpsByGeneId"
              category="Gene"
              displayName="Gene ID"
              queryRef="SnpsBy.SnpsByGeneId"
              summaryAttributesList="snp_location,linkedGeneId, ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find SNPs that are located in a specified gene.
        </summary>
	<description>
            <![CDATA[
              Find SNPs between any two strains that are contained within a gene.
	      <br> SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=ME49_SNPs,AmitAlignmentSnps&title=SNPs%20Summary ">Wastling and Roos</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes>
    </question>

    <question name="SnpsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="SnpsBy.SnpsByLocation"
              summaryAttributesList="snp_location,linkedGeneId,ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find SNPs by chromosomal location
        </summary>
	<description>
            <![CDATA[
              Find SNPs between any two strains by chromosomal location.
	      <br> SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=ME49_SNPs,AmitAlignmentSnps&title=SNPs%20Summary ">Wastling and Roos</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes>
    </question>

</questionSet>

<!-- questions for use in data dumps -->

<questionSet name="DataDumpQuestions"
             displayName="Data Dumping Questions"
             internal="yes">

    <description>
      These questions are intended for generating data dumps
    </description>

    <question name="GeneGffQuestion"
         displayName="Find genes to dump"
              queryRef="DataDumpQueries.GeneGffQuery"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>Find all genes to dump</description>
    </question>

    <question name="SequenceGffQuestion"
         displayName="Find chromosomes to dump"
              queryRef="DataDumpQueries.SequenceGffQuery"
              recordClassRef="SequenceRecordClasses.SequenceRecordClass">
        <description>Find all genes to dump</description>
    </question>

</questionSet>

<!-- questions for internal use -->

<questionSet name="InternalQuestions"
             displayName="Internal Questions"
             internal="yes">

     <!-- InternalQuestions.GenesByMassSpecEvidence -->
     <!-- This is a dummy question, not meant to be used directly.
          The InternalQuestions.GenesByMassSpecEvidence.jsp page
          redirects to showQuestion.do?questionFullName=GeneQuestions.GenesByMassSpec.
          This is for compatibility with the unified query grid and plasmo's
          need to handle multiple MS questions.
      -->
    <question name="GenesByMassSpecEvidence" displayName="Mass spectrometry evidence"
              queryRef="GeneFeatureIds.GenesByTaxon"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
        </description>
    </question>


    <question name="GenesByMicroarrayEvidence" displayName="Microarray evidence"
              queryRef="GeneFeatureIds.GenesByExpressionPercentile" 
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           Find genes based on transcript expression data from microarray experiments.
        </description>
    </question>


    <question name="UnifiedBlast"
         displayName="BLAST" 
         queryRef="EstIds.UnifiedBlast"
         summaryAttributesList="organism,Header,TabularRow,Alignment,Footer"
         recordClassRef="EstRecordClasses.EstRecordClass">

<!--         queryRef="UnifiedQueries.BlastSimilarity"  -->
<!--         summaryAttributesList="Header,TabularRow,Alignment,Footer"  -->
<!--         recordClassRef="GeneRecordClasses.GeneRecordClass"> -->
         <summary>
           <![CDATA[
             Search any ToxoDB dataset by BLAST similarity to your input
             sequence. 
            ]]>
        </summary>
         <description>
           <![CDATA[
             Find genes, genomic sequences, ESTs, or ORFs that have BLAST
             similarity to your input sequence. 
             <p>The search uses
             <a href="http://www.ncbi.nlm.nih.gov/BLAST/">NCBI BLAST</a>.
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="BLAST summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="BLAST alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="BLAST header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="BLAST footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>

</questionSet>


<!-- Querys that return Gene primary keys (for use in questions). -->

<!-- Querys that return Gene primary keys (for use in questions). -->
<querySet name="GeneFeatureIds">

    <sqlQuery name="GenesByTaxon" displayName="by taxon"
              isCacheable="true">
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT gf.source_id
                FROM DoTS.GeneFeature gf, 
		     sres.externalDatabase ed, sres.externalDatabaseRelease edr
                WHERE gf.na_sequence_id IN
                      (SELECT ens.na_sequence_id
                       FROM dots.VirtualSequence ens
                       WHERE ens.taxon_id in ($$organism$$))
                  AND gf.source_id IS NOT NULL
		  AND gf.external_database_release_id=edr.external_database_release_id
		  AND edr.external_database_id = ed.external_database_id
		  AND ed.name in ('Chromosome Map - David Sibley', 'Roos Lab T. gondii apicoplast')
                ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <!-- GeneFeatureIds.GenesWithEpitopes -->
    <sqlQuery name="GenesWithEpitopes" displayName="By Gene ID" isCacheable='true'>
        <paramRef ref="params.organism"/>
        <paramRef ref="epitopeParams.confidence"/>
        <column name="source_id" />
        <column name="confidence" />
        <column name="count" />
        <sql>
            <![CDATA[
        SELECT gf.source_id, count(ef.source_id) AS count,
           DECODE(
             MAX(
               DECODE(ef.type, 'Not Full Set Not on Blast Hit', 1,
                      'Not Full Set On Blast Hit', 2,
                      'Full Set Not on Blast Hit', 2,
                      'Full Set On Blast Hit', 3,
                       4)),
               1, 'Low',
               2, 'Medium',
               3, 'High',
               4, 'unknown epitope type') AS confidence
        FROM dots.TranslatedAaSequence tas, dots.EpitopeFeature ef,
             dots.AaLocation al, sres.ExternalDatabaseRelease edr,
             sres.ExternalDatabase ed, dots.GeneFeature gf,
             dots.TranslatedAaFeature taf, dots.Transcript t,
             dots.MotifAaSequence mas, dots.VirtualSequence vs
        WHERE tas.aa_sequence_id = ef.aa_sequence_id
          AND ef.aa_feature_id = al.aa_feature_id
          AND ef.motif_aa_sequence_id = mas.aa_sequence_id
          AND tas.aa_sequence_id = taf.aa_sequence_id
          AND taf.na_feature_id = t.na_feature_id
          AND t.parent_id = gf.na_feature_id
          AND gf.na_sequence_id = vs.na_sequence_id
          AND vs.taxon_id in ($$organism$$)
          AND ef.external_database_release_id
              = edr.external_database_release_id
          AND edr.external_database_id = ed.external_database_id
          AND ed.name = 'Links to IEDB epitopes'
          AND ef.type IN ($$confidence$$)
        GROUP BY gf.source_id
        ORDER BY gf.source_id
           ]]>
        </sql>
    </sqlQuery> 
    
    <sqlQuery name="GeneByLocusTag" displayName="by Gene ID" isCacheable="true">
        <paramRef ref="params.ds_gene_ids"/>
        <column name="source_id"/>
        <sql>
             <![CDATA[
            SELECT DISTINCT tg.source_id
            FROM apidb.ToxodbGenes tg,  @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
            WHERE ds.dataset_id = $$ds_gene_ids$$
              AND tg.source_id LIKE REGEXP_REPLACE(REPLACE(LOWER(ds.dataset_value),
                                                       '*', '%'),
                                               '[[:space:]]', '')
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="GeneBySingleLocusTag" displayName="by Gene ID" isCacheable="true">
        <paramRef ref="params.locus_tag"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT DISTINCT tg.source_id
            FROM apidb.ToxodbGenes tg
            WHERE tg.source_id LIKE LOWER(REPLACE('$$locus_tag$$', '*', '%'))
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesBySnps"
              isCacheable="true">
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_b"/>
        <paramRef ref="params.snp_stat" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.snp_density" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="cds_snp_density"/>
        <column name="dn_ds_ratio"/>
        <column name="num_synonymous"/>
        <column name="num_non_synonymous"/>
        <column name="num_noncoding"/>
        <column name="num_nonsense"/>
        <column name="total_snps"/>
        <sql>
            <![CDATA[
              SELECT ss.source_id,
	           round(non_synonymous / CASE synonymous 
	                      WHEN 0 THEN 1 
				  ELSE synonymous end, 2) as dn_ds_ratio,
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,
              non_coding as num_noncoding, stop as num_nonsense,  
              cds_length,round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density,
              total as total_snps
	      FROM apidb.SNPSUMMARY ss
	      WHERE ((strain_a = '$$snp_strain_a$$' and strain_b = '$$snp_strain_b$$' )
                    or  (strain_a = '$$snp_strain_b$$' and strain_b = '$$snp_strain_a$$'))	   
	      AND non_synonymous / CASE synonymous 
	                          WHEN 0 THEN 1 
				  ELSE synonymous end >= $$dn_ds_ratio_lower$$
	      AND non_synonymous / CASE synonymous 
	                          WHEN 0 THEN 1 
				  ELSE synonymous end <= $$dn_ds_ratio_upper$$
              AND $$snp_stat$$ >= $$occurrences_lower$$
	      AND $$snp_stat$$ <= $$occurrences_upper$$
              AND (non_synonymous + synonymous) / cds_length * 1000 >= $$snp_density$$
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByEcNumber" displayName="by EC Number" isCacheable="true">
        <paramRef ref="params.ec_number_pattern"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
         SELECT distinct gf.source_id
         FROM dots.GeneFeature gf, dots.VirtualSequence vs,
              dots.Transcript t, dots.translatedAaFeature taf,
              dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
         WHERE vs.na_sequence_id = gf.na_sequence_id
           AND gf.na_feature_id = t.parent_id
           AND t.na_feature_id = taf.na_feature_id
           AND taf.aa_sequence_id = asec.aa_sequence_id
           AND asec.enzyme_class_id = ec.enzyme_class_id
           AND ec.ec_number LIKE REPLACE(REPLACE('$$ec_number_pattern$$',' ',''),
                                         '-', '%')
         ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <!-- sqlQuery name="GenesByTextSearch" displayName="by annotated keyword" isCacheable="true">
        <description>
            Find Genes by annotated keyword
        </description>
        <paramRef ref="params.keyword"/>
        <column name="source_id"  />
        <sql>
            <![CDATA[
            SELECT kw.source_id
            FROM (SELECT tg.source_id
                 FROM apidb.ToxodbGenes tg, dots.VirtualSequence vs
                 WHERE LOWER(product) LIKE '%' ||
                         REPLACE(LOWER('$$keyword$$'), '*', '%') || '%'
                 AND tg.na_sequence_id = vs.na_sequence_id
                 UNION
                 SELECT tg.source_id
                 FROM apidb.ToxodbGenes tg, dots.NaFeatureComment nfc
                 WHERE LOWER(comment_string) LIKE '%' ||
                         REPLACE(LOWER('$$keyword$$'), '*', '%') || '%'
                   AND tg.na_feature_id = nfc.na_feature_id) kw
            ORDER BY kw.source_id
           ]]>
       </sql>
    </sqlQuery -->

    <sqlQuery name="GenesByExonCount" displayName="by exon count" isCacheable="true">
        <description>
            Find genes with a transcript with at least the given number of exons
        </description>
        <paramRef ref="params.num_exons_gte"/>
        <paramRef ref="params.num_exons_lte"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
             SELECT source_id
             FROM apidb.GeneAttributes
             WHERE exon_count BETWEEN $$num_exons_gte$$ AND $$num_exons_lte$$
            ]]>
       </sql>
<!-- old and slow:
       <sql>
            <![CDATA[
            SELECT tg.source_id
            FROM apidb.ToxodbGenes tg, dots.VirtualSequence ns, dots.nalocation l,
                 (SELECT t.parent_id, count(*) AS exon_count 
                  FROM dots.Transcript t, dots.ExonFeature ef, dots.rnafeatureexon rfe
                  WHERE t.na_feature_id = rfe.rna_feature_id
                  and ef.na_feature_id = rfe.exon_feature_id
                  GROUP BY t.parent_id, t.na_feature_id
                  HAVING COUNT(*) >= $$num_exons_gte$$ and count(*) <= $$num_exons_lte$$) exons
            WHERE exons.parent_id = tg.na_feature_id
              AND tg.na_sequence_id = ns.na_sequence_id
	      AND tg.na_feature_id = l.na_feature_id
            ORDER BY ns.source_id,l.start_min
           ]]>
       </sql>
-->
    </sqlQuery>

    <sqlQuery name="GenesByTransmembraneDomains" displayName="With Transmembrane Domains" isCacheable="true">
        <description>
            Find genes whose proteins are predicted to include a transmembrane domain
        </description>
        <paramRef ref="params.min_tm"/>
        <paramRef ref="params.max_tm"/>
        <column name="source_id"  />
        <sql>
            <![CDATA[
            SELECT tg.source_id
            FROM apidb.ToxodbGenes tg, dots.NaSequence ns,
                 (SELECT t.parent_id, COUNT(*) AS tm_count 
                  FROM dots.Transcript t, dots.TranslatedAaFeature tlaf,
                       dots.TransmembraneAaFeature tmaf, dots.AaLocation al
                  WHERE t.na_feature_id = tlaf.na_feature_id
                    AND tlaf.aa_sequence_id = tmaf.aa_sequence_id
                    AND tmaf.aa_feature_id = al.aa_feature_id 
                  GROUP BY t.parent_id, t.na_feature_id, tlaf.aa_feature_id
                  HAVING COUNT(*) >= $$min_tm$$ AND COUNT(*) <= $$max_tm$$) tms
            WHERE tms.parent_id = tg.na_feature_id
              AND tg.na_sequence_id = ns.na_sequence_id
            ORDER BY tm_count, tg.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGeneType" displayName="by Gene Type"
              isCacheable="true">
        <paramRef ref="params.geneType"/>
        <paramRef ref="params.includePseudogenes"/>
        <column name="source_id" />
        <column name="is_pseudo" />
        <sql>
            <![CDATA[
            SELECT DISTINCT tg.source_id, decode(tg.is_pseudo,0,'No',1,'Yes') as is_pseudo
            FROM apidb.ToxodbGenes tg, dots.VirtualSequence vs
            WHERE tg.sequence_ontology_id IN ($$geneType$$)
              AND tg.na_sequence_id = vs.na_sequence_id
              AND tg.is_pseudo in ($$includePseudogenes$$)
            ORDER BY tg.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGoTerm" displayName="by GO term"
              isCacheable="true">
        <description>
            Find genes with a given Gene Ontology (GO) term
        </description>
        <paramRef ref="params.go_term"/>
        <column name="source_id" />
        <sql>
            <![CDATA[
            SELECT distinct(gf.source_id)
            FROM dots.VirtualSequence vs, dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf,
                 dots.GoAssociation ga, sres.GoTerm gp,
                 sres.GoRelationship gr, core.TableInfo ti,
                 sres.GoRelationshipType grt
            WHERE vs.na_sequence_id = gf.na_sequence_id
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = ga.row_id
              AND ga.table_id = ti.table_id
              AND ti.name = 'TranslatedAASequence'
              AND ga.go_term_id = gr.child_term_id
              AND gr.parent_term_id = gp.go_term_id
              AND (gp.go_id = '$$go_term$$'
                   OR gp.name LIKE REPLACE('$$go_term$$', '*', '%'))
              AND gr.go_relationship_type_id = grt.go_relationship_type_id
              AND grt.name = 'closure'
            ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <!-- sqlQuery name="GenesByPfamDomain" displayName="by Pfam domain"
              isCacheable="true">
        <description>
            Find genes with a given Pfam domain
        </description>
        <paramRef ref="params.pfam_term"/>
        <paramRef ref="params.pfam_list"/>
        <column name="source_id" />
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id
            FROM dots.VirtualSequence vs, dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.DomainFeature df, dots.PfamEntry pe
            WHERE vs.na_sequence_id = gf.na_sequence_id
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = df.aa_sequence_id
              AND df.pfam_entry_id = pe.pfam_entry_id
              AND df.e_value <= 0.05
              AND (pe.accession LIKE '$$pfam_term$$.%'
                   OR pe.definition LIKE REPLACE('$$pfam_term$$', '*', '%'))
            ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery -->

    <sqlQuery name="GenesWithSignalPeptide" displayName="with signal peptide"
              isCacheable="true">
        <description>
            Genes with a predicted signal peptide
        </description>
        <paramRef ref="params.min_sigp_sum_score" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="sigp_sum_score"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT tg.source_id,
	         (spf.maxy_conclusion + spf.maxc_conclusion + spf.maxs_conclusion + spf.means_conclusion ) as sigp_sum_score
            FROM dots.VirtualSequence vs, apidb.ToxodbGenes tg, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.SignalPeptideFeature spf
            WHERE vs.na_sequence_id = tg.na_sequence_id
              AND tg.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = spf.aa_sequence_id
              AND (spf.maxy_conclusion +
                   spf.maxc_conclusion +
                   spf.maxs_conclusion +
                   spf.means_conclusion ) >= $$min_sigp_sum_score$$ 
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByGenomicRegion"
              displayName="by  genomic location" isCacheable="true">
        <paramRef ref="params.chromosome_single"/>
        <paramRef ref="params.genomic_sequence"/>
        <paramRef ref="params.start_location"/>
        <paramRef ref="params.end_location"/>
        <column name="source_id"  />
        <sql>
            <![CDATA[
	    SELECT distinct tg.source_id
             FROM apidb.ToxodbGenes tg, dots.naLocation nl, dots.VirtualSequence vs,
                  apidb.scaffold_map sm
            WHERE nl.na_feature_id = tg.na_feature_id
              AND nl.end_max >= $$start_location$$
              AND (nl.start_min <= $$end_location$$ OR $$end_location$$ = 0)
              AND tg.na_sequence_id = sm.virtual_na_sequence_id
              AND ( sm.virtual_source_id = '$$chromosome_single$$' 
	      	  OR sm.virtual_source_id = '$$genomic_sequence$$'
                  OR sm.piece_source_id = '$$genomic_sequence$$')
            ORDER BY tg.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByNonnuclearGenomicRegion"
              displayName="by non-nuclear genomic location" isCacheable="true">
        <paramRef ref="params.non_nuclear_sequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <column name="source_id"  />
        <sql>
            <![CDATA[
	    SELECT distinct tg.source_id
             FROM apidb.ToxodbGenes tg, dots.VirtualSequence vs,
                  dots.nalocation nl
            WHERE nl.na_feature_id = tg.na_feature_id
              AND nl.end_max >= $$start_point$$
              AND (nl.start_min <= $$end_point$$ OR $$end_point$$ = 0)
              AND tg.na_sequence_id = vs.na_sequence_id
              AND vs.source_id = $$non_nuclear_sequence$$
            ORDER BY tg.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByIsoelectricPoint"
              displayName="by Isoelectric Point" isCacheable="true">
        <description>
            Find genes with protein products whose isoelectric point is in
            the given range
        </description>
        <paramRef ref="params.min_isoelectric_point"/>
        <paramRef ref="params.max_isoelectric_point"/>
        <column name="source_id"/>
        <column name="isoelectric_point"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT asa.isoelectric_point, tg.source_id
            FROM apidb.ToxodbGenes tg, dots.Transcript t,
                 dots.TranslatedAaFeature taf, apidb.AaSequenceAttribute asa,
                 dots.NaSequence ns
            WHERE asa.isoelectric_point BETWEEN $$min_isoelectric_point$$
                                            AND $$max_isoelectric_point$$
              AND tg.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = asa.aa_sequence_id
              AND tg.na_sequence_id = ns.na_sequence_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByMolecularWeight" displayName="by Molecular Weight"
              isCacheable="true">
        <description>
            Find genes with protein products whose molecular weight is in the given range
        </description>
        <paramRef ref="params.min_molecular_weight"/>
        <paramRef ref="params.max_molecular_weight"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT tg.source_id
            FROM apidb.ToxodbGenes tg, dots.Transcript t,
                 dots.TranslatedAaFeature taf, apidb.AaSequenceAttribute asa,
                 dots.NaSequence ns
            WHERE asa.min_molecular_weight <= $$max_molecular_weight$$
              AND asa.max_molecular_weight >= $$min_molecular_weight$$
              AND tg.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = asa.aa_sequence_id
              AND tg.na_sequence_id = ns.na_sequence_id
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="GenesByOrthologPattern" displayName="by Ortholog Pattern"
              isCacheable="true">
        <paramRef ref="params.profile_pattern"/>
        <paramRef ref="params.included_species"/>
        <paramRef ref="params.excluded_species"/>
        <paramRef ref="params.organism"/>
        <paramRef ref="params.phyletic_indent_map"/>
        <paramRef ref="params.phyletic_term_map"/>
        <column name="source_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT DISTINCT gf.source_id, ns.taxon_id
            FROM apidb.PhylogeneticProfile pp, dots.GeneFeature gf, dots.NaSequence ns
            WHERE pp.profile_string LIKE '$$profile_pattern$$'
              AND pp.source_id = gf.source_id
              AND gf.na_sequence_id = ns.na_sequence_id
            ORDER BY ns.taxon_id, gf.source_id
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="GenesByMetabolicPathway" displayName="by Metabolic Pathway"
              isCacheable="true">
        <paramRef ref="params.metabolic_pathway"/>
        <column name="source_id"/>
        <column name="met_pathways"/>
        <sql>
            <![CDATA[
              SELECT gf.source_id,
	        apidb.tab_to_string(CAST(COLLECT(distinct decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier)) AS apidb.varchartab), ', ') as met_pathways
              FROM dots.GeneFeature gf, dots.Transcript t, dots.DbRefaaFeature draf, 
	       sres.DbRef dr, dots.TranslatedAaFeature taf,
               (SELECT idraf.aa_feature_id
                FROM dots.DbRefaaFeature idraf, sres.DbRef idr
                WHERE 
                idr.primary_identifier = '$$metabolic_pathway$$'
                AND  idraf.db_ref_id = idr.db_ref_id) internal
            WHERE internal.aa_feature_id = draf.aa_feature_id
            AND gf.na_feature_id = t.parent_id
            AND t.na_feature_id = taf.na_feature_id
            AND taf.aa_feature_id = draf.aa_feature_id
            AND draf.db_ref_id = dr.db_ref_id
            GROUP BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByProteinDomain"
              isCacheable="true">
        <paramRef ref="params.domain_database"/>
        <paramRef ref="params.domain_accession"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.TranslatedAaSequence tas,
                 dots.DomainFeature df, dots.DbRefAaFeature draf,
                 sres.DbRef dr
            WHERE t.parent_id = gf.na_feature_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = tas.aa_sequence_id
              AND tas.aa_sequence_id = df.aa_sequence_id
              AND df.aa_feature_id = draf.aa_feature_id
              AND draf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = $$domain_database$$
              AND dr.primary_identifier
                  = substr('$$domain_accession$$', 1, instr('$$domain_accession$$'||':', ':')-1)
            ORDER BY gf.source_id
            ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="GenesBySimilarity" displayName="BLAST" 
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="GeneBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

    <wsQuery name="GenesByMotifSearch" displayName="Motif Search"
             processName="org.apidb.apicomplexa.wsfplugin.motifsearch.MotifSearchPlugin">
       <paramRef ref="params.Expression"/>
       <paramRef ref="params.Dataset"/>
       <wsColumn name="source_id" width="32" wsName="GeneID"/>
       <wsColumn name="Locations" width="3999"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="3999"/>
    </wsQuery>

    <wsQuery name="GenesByTextSearch" displayName="Text term"
             processName="org.apidb.apicomplexa.wsfplugin.textsearch.TextSearchPlugin">
       <paramRef ref="params.text_expression"/>
       <paramRef ref="params.case_independent"/>
       <paramRef ref="params.whole_words"/>
       <paramRef ref="params.max_pvalue"/>
       <paramRef ref="params.datasets"/>
       <!-- not for toxo: paramRef ref="params.species_name"/ -->
       <wsColumn name="source_id" width="32" wsName="GeneID"/>
    </wsQuery>


    <!-- GeneFeatureIds.GenesByESTOverlap -->
    <sqlQuery name="GenesByESTOverlap" displayName="By EST Overlap" isCacheable='true'>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <column name="source_id" />
       <column name="number_of_ests" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT gf.source_id,count(*) as number_of_ests
            FROM dots.genefeature gf,
                 dots.nalocation nal,
                 dots.blatalignment blat,
                 dots.assemblysequence asbl,
                 dots.est e,
		 sres.externalDatabase ed, 
		 sres.externalDatabaseRelease edr
            WHERE gf.na_feature_id = nal.na_feature_id
            AND gf.na_sequence_id =  blat.target_na_sequence_id
            AND (blat.target_end - nal.start_max) >= $$bp_overlap_gte$$
            AND (nal.end_min - blat.target_start) >= $$bp_overlap_gte$$
            AND (query_end - query_start) >= $$bp_overlap_gte$$
            AND blat.max_target_gap < 10000
            AND blat.is_consistent in ($$high_confidence_only$$)
            AND blat.is_best_alignment in ($$best_alignment_only$$)
            AND blat.percent_identity >= $$min_percent_identity$$
            AND blat.query_na_sequence_id = asbl.na_sequence_id
            AND ((blat.query_bases_aligned / (asbl.sequence_end - asbl.sequence_start + 1)) * 100) >= $$min_percent_est_aligned$$
            AND blat.query_na_sequence_id = e.na_sequence_id
            AND e.library_id in ($$libraryId$$)
	    AND gf.external_database_release_id=edr.external_database_release_id
	    AND edr.external_database_id = ed.external_database_id
	    AND ed.name = 'Chromosome Map - David Sibley'
            GROUP BY gf.source_id
            ]]>
          </sql>
    </sqlQuery>   

    <sqlQuery name="GenesByDifferentialExpression" displayName="By Differential Expression" isCacheable='true'>
       <paramRef ref="params.exprnsample"/>
       <paramRef ref="params.confidence"/>
       <paramRef ref="params.fold_change"/>
       <paramRef ref="params.regulated_dir"/>
       <column name="source_id" />
       <column name="confidence" />
       <column name="fold_change" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
	    SELECT sof.source_id, 
	      max(round(de.fold_change, 2)) as fold_change,
              max(round(de.confidence, 2)) as confidence
            FROM RAD.DifferentialExpression de, Rad.ShortOligoFamily sof,
                 Rad.Analysis a, Rad.AnalysisInput aia, Rad.AnalysisInput aib,
		 Rad.LogicalGroup lga, Rad.LogicalGroup lgb,
                 Rad.Protocol p, Rad.ProtocolParam pp, Rad.AnalysisParam ap
            WHERE sof.composite_element_id = de.row_id
             AND a.analysis_id = de.analysis_id
             AND a.analysis_id = aia.analysis_id
             AND a.analysis_id = aib.analysis_id
             AND aia.logical_group_id = lga.logical_group_id 
             AND aib.logical_group_id = lgb.logical_group_id
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND ap.protocol_param_id = pp.protocol_param_id
             AND ap.analysis_id = a.analysis_id
             AND pp.name = 'reference_condition'
             AND p.name = 'PaGE'
	     AND lga.name = regexp_replace('$$exprnsample$$', ' vs.*','')             
	     AND lgb.name = regexp_replace('$$exprnsample$$', '.*vs. ','')     
             AND de.confidence >= $$confidence$$
             AND ($$regulated_dir$$ (de.fold_change) >= $$fold_change$$)
             GROUP BY sof.source_id
            ]]>
          </sql>
    </sqlQuery>   


    <sqlQuery name="GenesByExpressionPercentile" displayName="By Expression Percentile" isCacheable='true'>
       <paramRef ref="params.sample"/>
       <paramRef ref="params.percentile"/>
       <column name="source_id" />
       <column name="percentile" />
       <sql>
           <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
	    SELECT 
                 sof.source_id, 
                 max(to_char(de.percentile,'99.99')) as percentile
            FROM RAD.ExpressionProfile de, Rad.ShortOligoFamily sof,
                 Rad.Analysis a, Rad.AnalysisInput aia, 
		 Rad.LogicalGroup lga,
                 Rad.Protocol p, Rad.ProtocolParam pp, Rad.AnalysisParam ap
            WHERE sof.composite_element_id = de.row_id
             AND a.analysis_id = de.analysis_id
             AND a.analysis_id = aia.analysis_id
             AND aia.logical_group_id = lga.logical_group_id 
             AND a.protocol_id = p.protocol_id
             AND pp.protocol_id = p.protocol_id
             AND ap.protocol_param_id = pp.protocol_param_id
             AND ap.analysis_id = a.analysis_id
             AND p.name = 'R Expression Statistics'
             AND lga.name = '$$sample$$'
             AND de.percentile >= $$percentile$$
             GROUP BY sof.source_id
             ORDER BY sof.source_id
            ]]>
          </sql>
    </sqlQuery>   

    <sqlQuery name="GenesByMassSpec" displayName="By Mass Spec. Evidence" isCacheable='true'>
        <paramRef ref="params.organism"/>
        <paramRef ref="params.ms_assay"/>
        <paramRef ref="params.min_sequence_count"/>
        <paramRef ref="params.min_spectrum_count"/>
        <column name="source_id" />
        <column name="sum_sequence_count" />
        <column name="sum_spectrum_count" />
        <sql>
            <![CDATA[
            select distinct gf.source_id, seq.sum_sequence_count, spec.sum_spectrum_count
            from apidb.massspecsummary mss, 
                 dots.translatedaafeature taaf, dots.transcript t, dots.genefeature gf,
		 sres.externalDatabase ed, sres.externalDatabaseRelease edr,
            (select intseq.aa_sequence_id,count(*) as sum_sequence_count 
              from (select mss.aa_sequence_id, count(*) as sum_seq_ct
                from apidb.massspecsummary mss,
                     dots.massspecfeature msf,
                     dots.aalocation aal,
                     sres.externaldatabase ed,
                     sres.externaldatabaserelease edr
                where mss.mass_spec_summary_id = msf.source_id
                  and msf.aa_feature_id = aal.aa_feature_id
                  and msf.external_database_release_id = edr.external_database_release_id
                  and edr.external_database_id = ed.external_database_id
                  and ed.name in ($$ms_assay$$)
                group by mss.aa_sequence_id,aal.start_min,aal.end_max ) intseq
                group by intseq.aa_sequence_id
                having count(*) >= $$min_sequence_count$$
            ) seq,
            (select mss.aa_sequence_id, sum(spectrum_count) as sum_spectrum_count
                from apidb.massspecsummary mss,
                     sres.externaldatabase ed,
                     sres.externaldatabaserelease edr
                where mss.external_database_release_id = edr.external_database_release_id
                  and edr.external_database_id = ed.external_database_id
                  and ed.name in ($$ms_assay$$)
                group by mss.aa_sequence_id
                having sum(spectrum_count) >= $$min_spectrum_count$$
            ) spec
            where mss.aa_sequence_id = taaf.aa_sequence_id
            and taaf.na_feature_id = t.na_feature_id
            and t.parent_id = gf.na_feature_id
	    and gf.external_database_release_id = edr.external_database_release_id
	    and edr.external_database_id = ed.external_database_id
	    and ed.name = 'Chromosome Map - David Sibley'
            and mss.aa_sequence_id = seq.aa_sequence_id
            and mss.aa_sequence_id = spec.aa_sequence_id
           ]]>
       </sql>
    </sqlQuery>   

</querySet>


<!-- Querys that return sequence primary keys (for use in questions). -->
<querySet name="SequenceIds">

    <sqlQuery name="SequenceBySourceId" displayName="by Source ID" isCacheable="true">
        <description>
            Find A Genomic Sequence by ID
        </description>
        <paramRef ref="params.sequence"/>
        <column name="source_id"  />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT distinct source_id
            FROM dots.VirtualSequence
            WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$sequence$$',' ',''), '*', '%'))
           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="SequencesByTaxon" displayName="by Source ID" isCacheable="true">
        <paramRef ref="params.organism"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
                SELECT DISTINCT vs.source_id
                FROM dots.VirtualSequence vs, sres.SequenceOntology so
                WHERE vs.taxon_id IN (SELECT taxon_id FROM sres.taxon
                                       CONNECT BY parent_id = prior taxon_id
                                       START WITH taxon_id in ($$organism$$))
                  AND vs.sequence_ontology_id = so.sequence_ontology_id
                  AND (so.term_name = 'chromosome' OR so.term_name = 'supercontig')
                ORDER BY vs.source_id
            ]]>
       </sql>
    </sqlQuery>

    <wsQuery name="SequencesBySimilarity" displayName="BLAST" 
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="SequenceBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

</querySet>

<!-- Querys that return EST primary keys (for use in questions). -->
<querySet name="EstIds">
    
    <sqlQuery name="EstBySourceId" displayName="ID" isCacheable="true">
        <paramRef ref="idQueryParams.est_id"/>
        <column name="source_id"/>
        <sql>
          <![CDATA[
            SELECT est.accession AS source_id
            FROM dots.Est est
            WHERE LOWER(accession) LIKE LOWER(REPLACE(REPLACE('$$est_id$$',' ',''), '*', '%'))
          ]]>
    </sql>
    </sqlQuery>
    
    <sqlQuery name="EstsByLocation" displayName="ESTs by  genomic location" isCacheable="true">
        <paramRef ref="params.chromosome_single"/>
        <paramRef ref="params.genomic_sequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
        <column name="source_id"/>
        <column name="est_location"/>
        <sql>
            <![CDATA[
            SELECT est.accession as source_id,
                   apidb.tab_to_string(CAST(COLLECT(etn.source_id || ':' || trim(to_char(blat.target_start,'999,999,999')) || '-' || trim(to_char(blat.target_end,'999,999,999')) || '(' || decode(blat.is_reversed,0,'+',1,'-',null) || ')') AS apidb.varchartab), ', ') AS est_location	    FROM  dots.BlatAlignment blat, 
	          dots.AssemblySequence asbl, 
		  dots.Est est, 
		  dots.VirtualSEQUENCE etn
            WHERE blat.query_na_sequence_id = asbl.na_sequence_id 
	    AND   blat.target_na_sequence_id = etn.na_sequence_id 
	    AND   est.na_sequence_id = asbl.na_sequence_id 
	    AND   blat.target_start >= $$start_point$$
	    AND   (blat.target_end <= $$end_point$$ OR $$end_point$$ = 0)
	    AND   etn.external_database_release_id = blat.target_external_db_release_id
	    AND   (blat.target_end - blat.target_start ) < 10000 
            AND   blat.is_consistent in ($$high_confidence_only$$)
            AND   blat.is_best_alignment in ($$best_alignment_only$$)
            AND   blat.percent_identity >= $$min_percent_identity$$
            AND   (blat.query_bases_aligned / (asbl.sequence_end - asbl.sequence_start + 1) * 100) >= $$min_percent_est_aligned$$
	    AND   (etn.source_id IN ('$$chromosome_single$$')
                   OR lower(etn.source_id) = lower('$$genomicSequence$$'))
            AND blat.target_start >= $$start_point$$ 
            AND (blat.target_end <= $$end_point$$ OR $$end_point$$ = 0)
	    GROUP BY est.accession
           ]]>
       </sql>
    </sqlQuery>

    <!-- EstIds.EstsByLibrary -->
    <sqlQuery name="EstsByLibrary" displayName="ESTs by library name" isCacheable='true'>
        <paramRef ref="params.libraryId"/>
        <column name="source_id" />
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
            SELECT enas.source_id 
            FROM dots.externalnasequence enas, dots.est e
            WHERE enas.na_sequence_id = e.na_sequence_id
            AND e.library_id in ($$libraryId$$)
           ]]>
       </sql>
    </sqlQuery>   

    <!-- EstIdsEstsWithGeneOverlap -->
    <sqlQuery name="EstsWithGeneOverlap" displayName="ESTs that overlap genes" isCacheable='true'>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte"/>
       <paramRef ref="params.inNotIn"/>
       <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <column name="source_id" />
       <column name="gene_ids" />
       <column name="est_locations" />
        <sql>
            <![CDATA[
            SELECT accession as source_id,
                   apidb.tab_to_string(CAST(COLLECT(source_id || ':' || trim(to_char(target_start,'999,999,999')) || '-' || trim(to_char(target_end,'999,999,999')) || '(' || decode(is_reversed,0,'+',1,'-',null) || ')') AS apidb.varchartab), ', ') AS est_locations,
                   apidb.tab_to_string(CAST(COLLECT(gene_id) AS apidb.varchartab), ', ') AS gene_ids 
	    FROM (
                SELECT e.est_id, enas.source_id, blat.target_start, blat.target_end, blat.is_reversed,
                       gf.source_id as gene_id, blat.blat_alignment_id, e.accession
                FROM dots.genefeature gf, core.tableinfo info,
                     dots.nalocation nal, dots.blatalignment blat, 
                     dots.est e, dots.virtualsequence enas, dots.assemblysequence asbl,
		     sres.externalDatabase ed, sres.externalDatabaseRelease edr 
                WHERE gf.na_feature_id = nal.na_feature_id 
                AND gf.na_sequence_id = enas.na_sequence_id 
		AND gf.external_database_release_id=edr.external_database_release_id
		AND edr.external_database_id = ed.external_database_id
		AND ed.name = 'Chromosome Map - David Sibley'
                AND enas.na_sequence_id = blat.target_na_sequence_id 
                AND e.na_sequence_id = blat.QUERY_NA_SEQUENCE_ID 
                AND (blat.TARGET_END - nal.start_max) >= $$bp_overlap_gte$$  
                AND (nal.end_min - blat.TARGET_START) >= $$bp_overlap_gte$$  
                AND (query_end - query_start) >= $$bp_overlap_gte$$  
                AND blat.is_best_alignment in ($$best_alignment_only$$) 
                AND blat.is_consistent in ($$high_confidence_only$$)
                AND blat.percent_identity >= $$min_percent_identity$$
                AND blat.query_table_id = info.table_id
                AND info.name = 'AssemblySequence'
                AND blat.query_na_sequence_id = asbl.na_sequence_id
		AND ((blat.query_bases_aligned / (asbl.sequence_end - asbl.sequence_start + 1)) * 100) >= $$min_percent_est_aligned$$
                AND e.library_id in ($$libraryId$$)
            ) 
            GROUP BY accession
           ]]>
       </sql>
    </sqlQuery>   

    <wsQuery name="EstsBySimilarity" displayName="BLAST" 
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="EstBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

    <wsQuery name="UnifiedBlast" displayName="BLAST"
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>
</querySet>

<querySet name="OrfIds">

    <sqlQuery name="OrfByOrfId" displayName="ID" isCacheable="true">
        <paramRef ref="idQueryParams.orf_id"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
	        SELECT DISTINCT m.source_id
                FROM dots.Miscellaneous m, sres.sequenceontology so
                WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$orf_id$$',' ',''), '*', '%'))
                AND m.sequence_ontology_id= so.sequence_ontology_id
                AND so.term_name='ORF'
            ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="OrfsByLocation" displayName="ORFs by  genomic location" isCacheable="true">
        <paramRef ref="params.chromosome_single"/>
        <paramRef ref="params.genomic_sequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <column name="source_id"/>
        <column name="orf_location"/>
        <sql>
            <![CDATA[
	    SELECT m.source_id,
	       vs.source_id || ':' || trim(to_char(nal.start_min,'999,999,999')) || '-' || trim(to_char(nal.end_max,'999,999,999')) || '(' || decode(nal.is_reversed,0,'+',1,'-',null) || ')' as orf_location
	    FROM dots.VirtualSequence vs, dots.Miscellaneous m, dots.TranslatedAaFeature taaf,
	         dots.TranslatedAaSequence tas, sres.SequenceOntology so, dots.NaLocation nal
	    WHERE m.na_feature_id = taaf.na_feature_id
	    AND taaf.aa_sequence_id = tas.aa_sequence_id
	    AND vs.na_sequence_id = m.na_sequence_id
	    AND (vs.source_id = '$$chromosome_single$$'
                   OR lower(vs.source_id) = lower('$$genomic_sequence$$'))
	    AND m.sequence_ontology_id = so.sequence_ontology_id
	    AND m.na_feature_id = nal.na_feature_id
	    AND so.term_name = 'ORF'
	    AND nal.end_max >= $$start_point$$  
	    AND (nal.start_min <= $$end_point$$ OR $$end_point$$ = 0)

           ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="OrfsByMassSpec" displayName="By Mass Spec. Evidence" isCacheable='true'>
        <paramRef ref="params.organism"/>
        <paramRef ref="params.ms_assay"/>
        <paramRef ref="params.min_sequence_count"/>
        <paramRef ref="params.min_spectrum_count"/>
        <!--column name="orf_id" /-->
        <column name="source_id" />
        <column name="sum_sequence_count" />
        <column name="sum_spectrum_count" />
        <sql>
            <![CDATA[
                select distinct misc.source_id, seq.sum_sequence_count, spec.sum_spectrum_count
            from apidb.massspecsummary mss, dots.translatedaafeature taaf,  
                 dots.miscellaneous misc, sres.sequenceontology o,
            (select intseq.aa_sequence_id,count(*) as sum_sequence_count 
              from (select mss.aa_sequence_id, count(*) as sum_seq_ct
                from apidb.massspecsummary mss,
                     dots.massspecfeature msf,
                     dots.aalocation aal,
                     sres.externaldatabase ed,
                     sres.externaldatabaserelease edr
                where mss.mass_spec_summary_id = msf.source_id
                  and msf.aa_feature_id = aal.aa_feature_id
                  and msf.external_database_release_id = edr.external_database_release_id
                  and edr.external_database_id = ed.external_database_id
                  and ed.name in ($$ms_assay$$)
                group by mss.aa_sequence_id,aal.start_min,aal.end_max ) intseq
                group by intseq.aa_sequence_id
                having count(*) >= $$min_sequence_count$$
            ) seq,
            (select mss.aa_sequence_id, sum(spectrum_count) as sum_spectrum_count
                from apidb.massspecsummary mss,
                     sres.externaldatabase ed,
                     sres.externaldatabaserelease edr
                where mss.external_database_release_id = edr.external_database_release_id
                  and edr.external_database_id = ed.external_database_id
                  and ed.name in ($$ms_assay$$)
                group by mss.aa_sequence_id
                having sum(spectrum_count) >= $$min_spectrum_count$$
            ) spec
            where mss.aa_sequence_id = taaf.aa_sequence_id
            and taaf.na_feature_id = misc.na_feature_id
            and misc.sequence_ontology_id = o.sequence_ontology_id
            and o.term_name = 'ORF'
            and mss.aa_sequence_id = seq.aa_sequence_id
            and mss.aa_sequence_id = spec.aa_sequence_id
            ]]>
       </sql>
    </sqlQuery>   


    <wsQuery name="OrfsBySimilarity" displayName="BLAST" 
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="OrfBlastDbParams.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="60" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>

    <wsQuery name="OrfsByMotifSearch" displayName="Motif Search"
             processName="org.apidb.apicomplexa.wsfplugin.motifsearch.MotifSearchPlugin">
       <paramRef ref="params.Expression"/>
       <paramRef ref="OrfMotifSearchParams.Dataset"/>
       <wsColumn name="source_id" width="60" wsName="GeneID"/>
       <wsColumn name="Locations" width="3999"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="3999"/>
    </wsQuery>

</querySet>

<!-- Querys that return SNP source_ids (for use in questions). -->
<querySet name="SnpsBy">

      <sqlQuery name="SnpBySourceId" displayName="ID" isCacheable="true">
          <paramRef ref="idQueryParams.snp_id"/>
	  <column name="source_id"/>
	  <sql>
	    <![CDATA[
	      SELECT sf.source_id AS source_id
	      FROM dots.SnpFeature sf
	      WHERE LOWER(source_id) LIKE LOWER(REPLACE(REPLACE('$$snp_id$$',' ',''), '*', '%'))
	    ]]>
	  </sql>
      </sqlQuery>

      <sqlQuery name="SnpsByGeneId" displayName="SNPs by Gene ID" isCacheable="true">
        <paramRef ref="params.ds_gene_ids"/>
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_m"/>
        <column name="source_id"/>
        <column name="snp_location"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="prot_pos"/>
        <column name="ref_product"/>
        <column name="comp_products"/>
        <sql>
            <![CDATA[
SELECT snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
FROM                 
  (SELECT hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  FROM   dots.SeqVariation sva, dots.SeqVariation svb, dots.NALocation l,                               
    dots.VirtualSequence nas,dots.NALocation gene_loc,
    (SELECT distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
     FROM dots.GeneFeature gf, dots.SnpFeature sf, dots.SeqVariation isva, dots.SeqVariation isvb, 
        sres.ExternalDatabase ed,sres.ExternalDatabaseRelease edr,apidb.GeneId gi, @LOGIN_SCHEMA@dataset_values@LOGIN_DBLINK@ ds
      WHERE ds.dataset_id = $$ds_gene_ids$$
      AND gi.id = lower(ds.dataset_value)
      AND gf.source_id = gi.gene 
      AND gf.na_feature_id = sf.parent_id                               
      AND edr.external_database_release_id = sf.external_database_release_id                               
      AND edr.external_database_id = ed.external_database_id                               
      AND ed.name in ('Genomic Sequence SNPs','Genetic Markers - David Sibley','John Boothroyd lab at Stanford') 
      AND sf.na_feature_id = isva.parent_id                               
      AND sf.na_feature_id = isvb.parent_id                               
      AND isva.strain = '$$snp_strain_a$$'                               
      AND isvb.strain in ('$$snp_strain_m$$')
      AND isva.allele != isvb.allele ) hits
  WHERE hits.na_sequence_id = nas.na_sequence_id
    AND hits.gene_na_feature_id = gene_loc.na_feature_id
    AND hits.snp_na_feature_id = l.na_feature_id
    AND hits.snp_na_feature_id = sva.parent_id 
    AND hits.snp_na_feature_id = svb.parent_id 
    AND sva.strain = '$$snp_strain_a$$'                               
    AND svb.strain in ('$$snp_strain_a$$','$$snp_strain_m$$')                             
    ) snpq                              
GROUP BY snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
           ]]>
       </sql>
    </sqlQuery>

       <sqlQuery name="SnpsByLocation" displayName="SNPs by chromosomal location" isCacheable="true">
          <paramRef ref="params.chromosome_single"/>
          <paramRef ref="params.start_point"/>
          <paramRef ref="params.end_point"/>
          <paramRef ref="params.snp_strain_a"/>
          <paramRef ref="params.snp_strain_m"/>
          <column name="source_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>
        <sql>
            <![CDATA[
SELECT snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab), ', ') as comp_alleles,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab), ', ') as comp_products,                
  apidb.tab_to_string(CAST(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab), ', ') as phenotype,                  
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as ref_strain,              
  apidb.tab_to_string(CAST(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab), ', ') as comp_strains 
FROM                 
  (SELECT hits.source_id as source_id,hits.seq_source_id || ':' || trim(to_char(hits.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b, gf.source_id as gene
  FROM  dots.SeqVariation sva, dots.SeqVariation svb, dots.NALocation gene_loc, dots.GeneFeature gf,
    (SELECT distinct isf.na_feature_id as na_feature_id, isf.source_id, isf.parent_id,
      nas.source_id as seq_source_id,l.start_min,isf.position_in_protein
     FROM sres.ExternalDatabase ed,sres.ExternalDatabaseRelease edr,dots.SeqVariation isva, dots.NALocation l,
          dots.VirtualSequence nas, dots.SeqVariation isvb, dots.SnpFeature isf    
     WHERE nas.source_id = '$$chromosome_single$$'
      AND isf.na_sequence_id = nas.na_sequence_id
      AND edr.external_database_release_id = isf.external_database_release_id
      AND edr.external_database_id = ed.external_database_id   
      AND ed.name in ('Genomic Sequence SNPs','Genetic Markers - David Sibley','John Boothroyd lab at Stanford')
      AND isf.na_feature_id = l.na_feature_id
      AND l.end_max >= $$start_point$$
      AND (l.start_min <= $$end_point$$ OR $$end_point$$ = 0)
      AND isf.na_feature_id = isva.parent_id                               
      AND isf.na_feature_id = isvb.parent_id                               
      AND isva.strain = '$$snp_strain_a$$'                               
      AND isvb.strain in ('$$snp_strain_m$$')
      AND isva.allele != isvb.allele ) hits 
  WHERE  hits.parent_id = gf.na_feature_id(+)
    AND gf.na_feature_id = gene_loc.na_feature_id(+)    
    AND hits.na_feature_id = sva.parent_id 
    AND hits.na_feature_id = svb.parent_id 
    AND sva.strain = '$$snp_strain_a$$'
    AND svb.strain in ('$$snp_strain_a$$','$$snp_strain_m$$')
    ) snpq                              
GROUP BY snpq.source_id,snpq.gene,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
           ]]>
       </sql>

    </sqlQuery>


</querySet>

<!-- this query isn't meant to be run.  It's here so its custom query form can
     be displayed.  That form will run _other_ queries, through some
     JavaScript chicanery  -->
<querySet name="UnifiedQueries">
    <wsQuery name="BlastSimilarity" displayName="BLAST" 
             processName="org.apidb.apicomplexa.wsfplugin.ncbiblast.NcbiBlastPlugin">
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastDatabaseType"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
       <paramRef ref="params.-filter"/>

       <wsColumn name="source_id" width="32" wsName="Identifier"/>
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>
</querySet>

<!-- Queries that retrieve attributes or tables for data dumping records -->

<querySet name="DataDumpQueries">

    <sqlQuery name="GeneGffQuery" isCacheable="true">
        <paramRef ref="params.organism"/>
        <column name="gene_id"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
                SELECT DISTINCT gf.source_id AS gene_id
                FROM DoTS.GeneFeature tg
                WHERE tg.na_sequence_id in
                      (SELECT na_sequence_id
                       FROM dots.VirtualSequence ens)
                  AND tg.source_id IS NOT NULL
            ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffQuery" isCacheable="true">
        <paramRef ref="params.organism_with_sequences"/>
        <column name="seqid"/>
        <sql>
            <!-- use CDATA because query includes angle brackets -->
            <![CDATA[
                SELECT DISTINCT ens.source_id AS seqid
                FROM dots.VirtualSequence ens, sres.SequenceOntology so
                WHERE ens.sequence_ontology_id = so.sequence_ontology_id
                AND so.term_name = 'chromosome'
                AND ens.taxon_id IN (SELECT taxon_id FROM sres.taxon
                                       CONNECT BY parent_id = prior taxon_id
                                       START WITH taxon_id in ($$organism_with_sequences$$))
            ]]>
        </sql>
    </sqlQuery>


    <sqlQuery name="GeneGffAttrs">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <sql>
            select tg.source_id,
                   ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'gene' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   tg.source_id as gff_attr_id,
                   tg.source_id as gff_attr_name,
                   tg.product as gff_attr_description,
                   tg.source_id as gff_attr_locus_tag,
                   (greatest(nl.start_min, nl.end_max) - least(nl.start_min, nl.end_max) + 1) as gff_attr_size
            from apidb.ToxodbGenes tg, 
                 DoTS.NaLocation nl, 
                 DoTS.VirtualSequence ens
            where tg.source_id = '$$primaryKey$$'
              and tg.na_feature_id = nl.na_feature_id
              and tg.na_sequence_id = ens.na_sequence_id
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffDbxrefs" isCacheable="false">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_dbxref"/>
        <sql>
           SELECT gf.source_id,
                   'taxon:' || t.ncbi_tax_id AS gff_dbxref
            FROM dots.GeneFeature gf, dots.NaSequence ns, sres.Taxon t
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_sequence_id = ns.na_sequence_id
              AND ns.taxon_id = t.taxon_id
           UNION
            SELECT gf.source_id,
                   'EC:' || ec.ec_number AS gff_dbxref
            FROM dots.GeneFeature gf,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
           UNION
            SELECT gf.source_id,
                   'NCBI_gi:' || dr.secondary_identifier AS gff_dbxref
            FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = drnf.na_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                    = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
                              'NRDB_ref_dbXRefBySeqIdentity',
                              'NRDB_sp_dbXRefBySeqIdentity')
           UNION
            SELECT gf.source_id,
                   'PDB:' || dr.primary_identifier AS gff_dbxref
            FROM dots.aafeature aaf, dots.GeneFeature gf, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'Predicted protein structures'
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneRnas" displayName="Constituent RNAs">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_transcript_sequence"/>
        <sql>
            select ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'mRNA' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   tg.source_id as gff_attr_parent,
                   'mRNA.' || rna.source_id as gff_attr_id,
                   rna.source_id as gff_attr_name,
                   rna.product as gff_attr_description,
                   rna.source_id as gff_attr_locus_tag,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size,
                   s.sequence as gff_transcript_sequence
            from apidb.ToxodbGenes tg, 
                 DoTS.Transcript rna, 
                 DoTS.NaLocation nl,
                 DoTS.VirtualSequence ens,
                 dots.splicednasequence s
            where tg.source_id = '$$primaryKey$$'
            and tg.na_feature_id = rna.parent_id
            and rna.na_feature_id = nl.na_feature_id
            and tg.na_sequence_id = ens.na_sequence_id
            and s.na_sequence_id = rna.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneCdss" displayName="Constituent CDSs">
        <paramRef ref="params.primaryKey"/>
        <column name="seqid"/>
        <column name="source"/>
        <column name="type"/>
        <column name="fstart"/>
        <column name="fend"/>
        <column name="score"/>
        <column name="strand"/>
        <column name="phase"/>
        <column name="attr_id"/>
        <column name="attr_parent"/>
        <sql>
            select ens.source_id as seqid,
                   'ApiDB' as source,
                   'CDS' as type,
                   ef.coding_start as fstart,
                   ef.coding_end as fend,
                   '.' as score,
                   decode(nl.is_reversed, 1, '-', '+') as strand,
                   decode(ef.reading_frame, NULL, '.', ef.reading_frame) as phase,
                   'mRNA.' || rna.na_feature_id as attr_parent,
                   'CDS.' || ef.na_feature_id as attr_id
            from apidb.ToxodbGenes tg, DoTS.Transcript rna, DoTS.ExonFeature ef,
                 DoTS.NaLocation nl, DoTS.VirtualSequence ens
            where tg.source_id = '$$primaryKey$$'
            and tg.na_feature_id = rna.parent_id
            and rna.na_feature_id = ef.parent_id
            and ef.na_feature_id = nl.na_feature_id
            and tg.na_sequence_id = ens.na_sequence_id
            order by ef.coding_start asc, ef.coding_end asc
        </sql>
    </sqlQuery>

       <sqlQuery name="GeneExons" displayName="Constituent exons">
        <paramRef ref="params.primaryKey"/>
        <column name="seqid"/>
        <column name="source"/>
        <column name="type"/>
        <column name="fstart"/>
        <column name="fend"/>
        <column name="score"/>
        <column name="strand"/>
        <column name="phase"/>
        <column name="attr_id"/>
        <column name="attr_parent"/>
        <sql>
            select ens.source_id as seqid,
                   'ApiDB' as source,
                   'exon' as type,
                   nl.start_min as fstart,
                   nl.end_max as fend,
                   '.' as score,
                   decode(nl.is_reversed, 1, '-', '+') as strand,
                   decode(ef.reading_frame, NULL, '.', ef.reading_frame) as phase,
                   'mRNA.' || rna.na_feature_id as attr_parent,
                   'exon.' || ef.na_feature_id as attr_id
            from apidb.ToxodbGenes tg, DoTS.Transcript rna, DoTS.ExonFeature ef,
                 DoTS.NaLocation nl, DoTS.VirtualSequence ens
            where tg.source_id = '$$primaryKey$$'
            and tg.na_feature_id = rna.parent_id
            and rna.na_feature_id = ef.parent_id
            and ef.na_feature_id = nl.na_feature_id
            and tg.na_sequence_id = ens.na_sequence_id
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffAttrs" displayName="Sequence Gff Attributes">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_molecule_type"/>
        <column name="gff_attr_organism_name"/>
        <column name="gff_attr_translation_table"/>
        <column name="gff_attr_topology"/>
        <column name="gff_attr_localization"/>
        <column name="gff_attr_size"/>
        <column name="gff_sequence"/>
        <sql>
            select ens.source_id,
                   ens.source_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'supercontig' as gff_type,
                   1 as gff_fstart,
                   ens.length as gff_fend,
                   '.' as gff_score,
                   '+' as sgff_trand,
                   '.' as gff_phase,
                   ens.source_id as gff_attr_id,
                   ens.source_id as gff_attr_name,
                   ens.description as gff_attr_description,
                   ens.source_id as gff_attr_locus_tag,
                   'dsDNA' as gff_attr_molecule_type,
                   'Toxoplasma gondii' as gff_attr_organism_name,
                   11 as gff_attr_translation_table,
                   'linear' as gff_attr_topology,
                   'nuclear' as gff_attr_localization,
                   ens.length as gff_attr_size,
                   ens.sequence as sequence
            from DoTS.VirtualSequence ens
            where ens.source_id = '$$primaryKey$$'
        </sql>
    </sqlQuery>

    <sqlQuery name="SequenceGffDbxrefs" isCacheable="false">
        <paramRef ref="params.primaryKey"/>
        <column name="gff_dbxref"/>
        <sql>
            SELECT ens.source_id,
                   'taxon:' || t.ncbi_tax_id AS gff_dbxref
            FROM dots.VirtualSequence ens, sres.Taxon t
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.taxon_id = t.taxon_id
/*           UNION
            SELECT ens.source_id, so.so_id AS gff_dbxref
            FROM dots.VirtualSequence ens, sres.SequenceOntology so
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.sequence_ontology_id = so.sequence_ontology_id
*/           UNION
            SELECT ens.source_id,
                   'GenBank:' || dr.primary_identifier AS thingie
            FROM dots.VirtualSequence ens, dots.dbrefNaSequence drns,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.na_sequence_id = drns.na_sequence_id
              AND drns.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'GenBank'
        </sql>
    </sqlQuery>

</querySet>



    <!-- *************** -->
    <!-- recordClassSets -->
    <!-- *************** -->

    <!--
    A "record" is an object that gathers together data about an entity in the
    database.  The entity is defined as data associated with a primary key,
    and data in the record is based on that key. The data comes in three forms:
    attributes, text attributes and tables.  An attribute is a single value
    that describes the entity, such as "size."  A text attribute is similar,
    but the value is created by defining a text string and optionally embedding
    into that string the values of other attributes.  A table is a value
    in the form of columns and rows, such as a table describing related
    publications.

    A record class is a template for creating records from a given primary key.
    It includes "attribute queries," "table queries" and "text attributes."

    An attribute query must have only one parameter, the primary key.  It must
    return exactly zero or one rows.  The columns in the query are interpreted
    as attributes of the record.

    A text attribute has a body of text with the values of other attributes
    optionally embedded in it.  The other attribute values are referred to
    as variables of the form "$$name_of_attribute$$".

    A table query must have only one parameter, the primary key.  It may
    return any number of rows (but typically not a huge number).  The result
    of the query is interpreted as being a table that

    A "record set" is a grouping of records. It is useful in organizing the
    model xml file.

    The full name of a record is is of the form "set_name.name."
    -->


    <recordClassSet name="UserCommentsRecordClasses">
        <recordClass idPrefix=""
          name="GeneCommentsClass" type="GeneComments">
          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="UserCommentTables.GeneComments">
            <columnAttribute name="comment_id" displayName="Comment ID"/>
            <columnAttribute name="headline" displayName="Headline"/>
            <columnAttribute name="content" displayName="Comment"/>
            <columnAttribute name="location_string" displayName="Location(s)"/>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
            <columnAttribute name="project_name_version" displayName="Version"/>
            <columnAttribute name="review_status_id" displayName="Review Status"/>
          </table>
        </recordClass>

        <recordClass idPrefix=""
          name="SequenceCommentsClass" type="SequenceComments">
          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="UserCommentTables.SequenceComments">
            <columnAttribute name="comment_id" displayName="Comment ID"/>
            <columnAttribute name="headline" displayName="Headline"/>
            <columnAttribute name="content" displayName="Comment"/>
            <columnAttribute name="location_string" displayName="Location(s)"/>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
            <columnAttribute name="project_name_version" displayName="Version"/>
            <columnAttribute name="review_status_id" displayName="Review Status"/>
          </table>
        </recordClass>

    </recordClassSet>


    <recordClassSet name="GeneRecordClasses">

        <recordClass idPrefix=""
          name="GeneRecordClass" type="Gene"
          attributeOrdering="dnaContext">
          
          <reporter name="tabular" displayName="Summary - tab delimited"
	            implementation="org.gusdb.wdk.model.report.TabularReporter" />
          <reporter name="gff3" displayName="Summary - GFF3"
                    implementation="org.apidb.apicommon.model.report.Gff3Reporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
 
           <reporter name="srt" displayName="Sequence - configurable FASTA"
                    implementation=""/>

         <attributeQueryRef ref="GeneAttributes.Bfmv">
            <columnAttribute displayName="External Source" internal="true"
                             name="external_db_name"/>
            <columnAttribute displayName="Genomic Sequence ID"
                             name="sequence_id"/>
             <textAttribute name="location_text" displayName="Location">
              <text>
                  <![CDATA[
                  $$sequence_id$$: $$start_min_text$$ - $$end_max_text$$ ($$strand_plus_minus$$)
                  ]]>
              </text>
            </textAttribute>

            <columnAttribute name="strand" displayName="Gene Strand" internal="false"/>
            <columnAttribute displayName="Gene Type" name="gene_type" internal="false"/>
            <columnAttribute name="exon_count" displayName="Number of Exons" internal="false"
                             inReportMaker="true"/>
            <columnAttribute displayName="Transcript Length" name="transcript_length" internal="false"/>
            <columnAttribute displayName="CDS Length" name="cds_length" internal="false"/>
            <columnAttribute name="product" displayName="Product" internal="false"/>
            <columnAttribute displayName="Protein Length" name="protein_length" internal="false"/>
            <columnAttribute displayName="Number of Transmembrane Domains" internal="false"
                             inReportMaker="true" name="tm_count" align="center"/>
            <columnAttribute displayName="Molecular Weight" name="molecular_weight" align="center"/>
            <columnAttribute name="isoelectric_point" displayName="Isoelectric Point" align="center"/>

            <columnAttribute name="ec_numbers_string" displayName="EC Numbers"/>
            <columnAttribute name="ann_go_function" displayName="Annotated GO Function"/>
            <columnAttribute name="ann_go_process" displayName="Annotated GO Process"/>
            <columnAttribute name="ann_go_component" displayName="Annotated GO Component"/>
            <columnAttribute name="pred_go_function" displayName="Predicted GO Function"/>
            <columnAttribute name="pred_go_process" displayName="Predicted GO Process"/>
            <columnAttribute name="pred_go_component" displayName="Predicted GO Component"/>

            <columnAttribute name="pru" displayName="Pru strain expression"/>
            <columnAttribute name="veg" displayName="VEG strain expression"/>
            <columnAttribute name="rh" displayName="RH strain expression"/>
            <columnAttribute name="rh_no_glucose" displayName="No-glucose expression"/>
            <columnAttribute name="rh_high_glucose" displayName="High-glucose expression"/>

            <textAttribute name="rhGlucose" displayName="RH in Glucose expr profile graph"
                           inReportMaker="false" truncateTo="100000" sortable="false">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Roos::RHinGlucose::Ver1&id=$$primaryKey$$&model=toxo&fmt=png&thumb=1" alt=""/>
                ]]>
            </text>
            </textAttribute>

            <textAttribute name="3strains" displayName="3 Clonal Lineages expr profile graph"
                        inReportMaker="false" truncateTo="100000" sortable="false">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Roos::ThreeClonalStrains::Ver1&id=$$primaryKey$$&model=toxo&fmt=png&thumb=1" alt=""/>
                ]]>
            </text>
            </textAttribute>

            <!-- internal=true atts -->
            <columnAttribute name="min_molecular_weight" displayName="Min Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="max_molecular_weight" displayName="Max Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="hydropathicity_gravy_score" displayName="Hydropathicity Gravy Score" internal="true" inReportMaker="false"/>
            <columnAttribute name="aromaticity_score" displayName="Aromaticity" internal="true" inReportMaker="false"/>
            <columnAttribute name="species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Strand" name="strand_plus_minus" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_start" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_end" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism_full" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="genus_species" name="genus_species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Taxonomy Id" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="ToxoCYC DB Name" name="toxocyc_db" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="ToxoCYC Gene ID" name="toxocyc_gene_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="External DB Version" name="external_db_version" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Id" name="so_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Name" name="so_term_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Definition" internal="true" name="so_term_definition" inReportMaker="false"/>
            <columnAttribute displayName="Ontology Name" name="ontology_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Version" name="so_version" internal="true" inReportMaker="false"/>
            <columnAttribute name="anticodon" displayName="Anticodon" internal="true" inReportMaker="false"/>
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.ProteinSequence">
            <columnAttribute displayName="Predicted Protein Sequence"
                             name="protein_sequence"/>
          </attributeQueryRef>
          
          <attributeQueryRef ref="GeneAttributes.TranscriptSequence">
            <columnAttribute displayName="Predicted RNA/mRNA Sequence (introns spliced out)"
                    name="transcript_sequence"/>
          </attributeQueryRef>
          
          <attributeQueryRef ref="GeneAttributes.CDS">
            <columnAttribute displayName="Coding Sequence"
                    name="cds"/>
          </attributeQueryRef>

          <table name="UserComments"
                 displayName="User Comments"
                 queryRef="GeneTables.UserComments">
            <columnAttribute name="comment_id" internal="true"/>
            <columnAttribute name="stable_id" internal="true"/>
            <columnAttribute name="headline" internal="true"/>
            <linkAttribute name="headline_link"
                            displayName="Headline"
                            visible="$$headline$$">
                <url>
                <![CDATA[showRecord.do?name=UserCommentsRecordClasses.GeneCommentsClass&project_id=&primary_key=$$stable_id$$#$$comment_id$$]]>
                </url>
            </linkAttribute>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
          </table>

          <table name="SNPs"
                 displayName="SNPs Summary"
                 queryRef="GeneTables.SNPs">
            <columnAttribute internal="true" name="strain_a_query"/>
            <columnAttribute internal="true" name="strain_b_query"/>
            <columnAttribute internal="true" name="strain_a_disp"/>
            <columnAttribute internal="true" name="strain_b_disp"/>
            <columnAttribute internal="true" name="gene_source_id"/>
            <linkAttribute name="LinkForStrainComparison" 
                           displayName="Strains"
                           visible="$$strain_a_disp$$ vs $$strain_b_disp$$">
                 <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=SnpQuestions.SnpsByGeneId&myProp%28locus_tag%29=$$gene_source_id$$&myMultiProp%28snp_strain_a%29=$$strain_a_query$$&myMultiProp%28snp_strain_b%29=$$strain_b_query$$&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>


            <columnAttribute displayName="CDS SNP Density" name="cds_snp_density"/>
            <columnAttribute displayName="Non-synonymous" name="num_non_synonymous"/>
            <columnAttribute displayName="Synonymous" name="num_synonymous"/>
            <columnAttribute displayName="Nonsense" name="num_nonsense"/>
            <columnAttribute displayName="Non-coding" name="num_non_coding"/>
            <columnAttribute displayName="Total" name="num_total"/>
          </table>

                    
          <table name="EcNumber"
                 displayName="EC Number"
                 queryRef="GeneTables.EcNumber">
            <columnAttribute name="ec_number" internal="true"/>
            <linkAttribute name="ec_number_link" 
                           displayName="EC Number"
                           visible="$$ec_number$$">
                 <url>
                    <![CDATA[$$expasy_url$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="Source" name="source"/>
            <columnAttribute displayName="EC Description" name="ec_description"/>
            <columnAttribute name="expasy_url" internal="true"/>
          </table>
          
          <table name="GoTerms"
                 displayName="GO Terms"
                 queryRef="GeneTables.GoTerms">
            <columnAttribute displayName="Is Not" name="is_not"/>
            <columnAttribute name="go_id" internal="true"/>
            <columnAttribute displayName="Ontology" name="ontology"/>
            <linkAttribute name="go_id_link" displayName="GO ID" visible="$$go_id$$">
                 <url>
                    <![CDATA[http://www.godatabase.org/cgi-bin/amigo/go.cgi?action=query&view=query&query=+$$go_id$$&search_constraint=terms]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="GO Term Name" name="go_term_name"/>
            <columnAttribute displayName="Source" name="source"/>
            <columnAttribute name="evidence_code" internal="true"/>
            <columnAttribute name="lowercase_evidence_code" internal="true"/>
            <linkAttribute name="evidence_code_link"
                           displayName="Evidence Code"
                           visible="$$evidence_code$$">
                 <url>
                    <![CDATA[http://www.geneontology.org/GO.evidence.shtml#$$lowercase_evidence_code$$]]>
                 </url>
            </linkAttribute>
          </table>
          

          <table name="PfamDomains"
                 displayName="Pfam Domains"
                 queryRef="GeneTables.PfamDomains">
            <linkAttribute name="pfam_link" displayName="Accession"
                           visible="$$accession$$">
                 <url>
                    <![CDATA[http://www.sanger.ac.uk/cgi-bin/Pfam/getacc?$$accession_base$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="Definition" name="definition"/>
            <columnAttribute displayName="Start" name="start_min"/>
            <columnAttribute displayName="End" name="end_max"/>
            <columnAttribute name="accession" internal="true"/>
            <columnAttribute name="accession_base" internal="true"/>
          </table>
          

          <table name="Orthologs"
                 displayName="Toxoplasma Orthologs"
                 queryRef="GeneTables.Orthologs">
            <columnAttribute name="source_id" internal="true"/>
            <linkAttribute name="gene" displayName="Gene" visible="$$source_id$$">
                 <url>
                    <![CDATA[showRecord.do?name=GeneRecordClasses.GeneRecordClass&primary_key=$$source_id$$]]>
                 </url>
            </linkAttribute>
            <columnAttribute displayName="Product" name="product"/>
          </table>
          

          <table name="MetabolicPathways"
                 displayName="Metabolic Pathways"
                 queryRef="GeneTables.MetabolicPathways">
            <columnAttribute name="pathway_id" internal="true"/>
            <columnAttribute name="pathway_name" internal="true"/>
            <linkAttribute name="pathway" displayName="Pathway"
                        visible="$$pathway_name$$">
                 <url>
                    <![CDATA[http://roos-compbio2.bio.upenn.edu/~fengchen/pathway/$$pathway_id$$.html]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="activity" displayName="Activity"/>
          </table>

          <table name="TaskComments"
                 displayName="Toxoplasma Genome Sequencing Project Annotation"
                 queryRef="GeneTables.TaskComments">
            <columnAttribute name="comment_string" displayName="TASK Annotation"/>
          </table>

            <table name="Epitopes"
                displayName="Epitopes from IEDB"
                queryRef="GeneTables.Epitopes">
                <columnAttribute name="iedb_id" internal="true"/>
                <linkAttribute name="iedb_link" displayName="Epitope"
                    visible="$$iedb_id$$">
                    <url>
                        <![CDATA[
                    http://www.immuneepitope.org/httpQuery.do?dispatch=runquery&eid=$$iedb_id$$
                    ]]>
                    </url>
                </linkAttribute>
                <columnAttribute name="sequence" displayName="Sequence"/>
                <columnAttribute name="location" displayName="Location on Protein"/>
                <columnAttribute name="name" displayName="Strain"/>
                <columnAttribute name="confidence" displayName="Confidence"/>
            </table>


         <linkAttribute name="ToxoCyc" visible="View"
                        internal="true" inReportMaker="false">
            <url>
               <![CDATA[
                     http://apicyc.apidb.org/$$toxocyc_db$$/NEW-IMAGE?type=GENE&object=$$toxocyc_gene_id$$
                     ]]>
            </url>
         </linkAttribute>

          <table name="Notes"
                 displayName="Notes"
                 queryRef="GeneTables.Notes">
            <columnAttribute displayName="Note" name="comment_string"/>
          </table>
      
          <textAttribute name="overview" displayName="Overview"
                         internal="true" inReportMaker="false">
             <text>
                  <![CDATA[
                     $$organism$$ $$gene_type$$ on <a href="showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&project_id=&primary_key=$$sequence_id$$">$$sequence_id$$</a> from $$start_min_text$$ to $$end_max_text$$
                  ]]>
             </text>
         </textAttribute>

         <textAttribute name="dnaContext" displayName="Genomic Context" internal="true" inReportMaker="false">
            <text>
                <![CDATA[
                @CGI_URL@/gbrowse_img/toxodb/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;embed=1;type=AnnotatedGenes+AlignmentSNPs;options=AlignmentSNPs+2;h_feat=$$primaryKey$$@thistle;width=600;hmap=dnaContextMap;base=@CGI_URL@/gbrowse
                ]]>
            </text>
         </textAttribute>

         <textAttribute name="gbrowseLink" inReportMaker="false">
            <text>
                 <![CDATA[
                @CGI_URL@/gbrowse/toxodb/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;enable=AnnotatedGenes;h_feat=$$primaryKey$$@thistle
                ]]>
            </text>
         </textAttribute>

         <textAttribute name="proteinFeatures" displayName="Protein Features" internal="true"
                        inReportMaker="false">
            <text>
                 <![CDATA[
                 @CGI_URL@/gbrowse_img/toxodbaa/?name=$$primaryKey$$;embed=1;width=600;hmap=proteinFeatureMap;base=@CGI_URL@/gbrowse
                 ]]>
            </text>
         </textAttribute>

          <attributeQueryRef ref="DataDumpQueries.GeneGffAttrs">
              <columnAttribute displayName="SeqId" name="seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="score" internal="true" inReportMaker="false"/>
<!--           <columnAttribute displayName="Strand" name="strand" internal="true" inReportMaker="false"/>  -->
              <columnAttribute displayName="Reading Frame" name="phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="description" name="attr_description" internal="true" inReportMaker="false"/>
          </attributeQueryRef>
          
          <table name="gff_GeneDbxrefs"
                 displayName="Gene Exons"
                 queryRef="DataDumpQueries.GeneGffDbxrefs" inReportMaker="false">

              <columnAttribute displayName="Dbxref" name="gff_dbxref"/>
          </table>

          <table name="GeneRnas"
                 displayName="Gene RNAs"
                 queryRef="DataDumpQueries.GeneRnas">
              <columnAttribute displayName="SeqId" name="gff_seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="gff_source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="gff_type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="gff_fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="End" name="gff_fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="gff_score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="gff_strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Name" name="gff_attr_name" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Description" name="gff_attr_description" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="gff_attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="gff_attr_parent" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Locus_Tag" name="gff_attr_locus_tag" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Size" name="gff_attr_size" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Transcript Sequence"
                               name="gff_transcript_sequence" internal="true"
                               inReportMaker="false"/>
          </table>
          
          <table name="GeneCdss"
                 displayName="Gene CDSs"
                 queryRef="DataDumpQueries.GeneCdss">
              <columnAttribute displayName="SeqId" name="seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="End" name="fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="attr_parent" internal="true" inReportMaker="false"/>
          </table>
          
          <table name="GeneExons"
                 displayName="Gene Exons"
                 queryRef="DataDumpQueries.GeneExons">
          
              <columnAttribute displayName="SeqId" name="seqid" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Data Source" name="source" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Feature Type" name="type" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Start" name="fstart" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="End" name="fend" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Score" name="score" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strand" name="strand" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reading Frame" name="phase" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="ID" name="attr_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Parent" name="attr_parent" internal="true" inReportMaker="false"/>
          </table>

        </recordClass>

    </recordClassSet>

    <recordClassSet name="SequenceRecordClasses">

        <recordClass idPrefix=""
          name="SequenceRecordClass" type="Genomic Sequence"
          attributeOrdering="overview,otherInfo,dnaContext">

        <reporter name="tabular" displayName="TAB Delimited" implementation="org.gusdb.wdk.model.report.TabularReporter" />
        <reporter name="fullRecord" displayName="Full Records" implementation="org.gusdb.wdk.model.report.FullRecordReporter" />
        <reporter name="gff3" displayName="GFF3" implementation="org.apidb.apicommon.model.report.Gff3Reporter" />
 
        <attributeQueryRef ref="SequenceAttributes.Bfmv">
            <columnAttribute displayName="A Count" name="a_count"/>
            <columnAttribute displayName="C Count" name="c_count"/>
            <columnAttribute displayName="G Count" name="g_count"/>
            <columnAttribute displayName="T Count" name="t_count"/>
            <columnAttribute displayName="Other Count" name="other_count"/>
            <columnAttribute displayName="Length" name="length"/>
            <columnAttribute displayName="AT Percent" name="at_percent"/>
            <columnAttribute displayName="Organism" name="organism"/>
            <columnAttribute displayName="External DB Name"
                             name="externalDbName" inReportMaker="false"/>
            <columnAttribute displayName="External DB Version"
                             name="externalDbVersion" inReportMaker="false"/>
        </attributeQueryRef>


          <table name="SequenceComments"
                 displayName="User Comments"
                 queryRef="SequenceTables.SequenceComments">
            <columnAttribute name="comment_id" internal="true"/>
            <columnAttribute name="stable_id" internal="true"/>
            <columnAttribute name="headline" internal="true"/>
            <linkAttribute name="headline_link"
                            displayName="Headline"
                            visible="$$headline$$">
                <url>
                <![CDATA[showRecord.do?name=UserCommentsRecordClasses.SequenceCommentsClass&project_id=&primary_key=$$stable_id$$#$$comment_id$$]]>
                </url>
            </linkAttribute>
            <columnAttribute name="user_name" displayName="Made by"/>
            <columnAttribute name="organization" displayName="Affiliation"/>
            <columnAttribute name="comment_date" displayName="Date"/>
         </table>
        
          <textAttribute name="overview" displayName="Overview"
                         inReportMaker="false">
             <text>
                  <![CDATA[
                  Residue counts: <b>A</b>:$$a_count$$, <b>T</b>:$$t_count$$,
                  <b>C</b>:$$c_count$$, <b>G</b>:$$g_count$$,
                  <b>other</b>:$$other_count$$<br>
                  Length: $$length$$<br>
                  AT content: $$at_percent$$ percent
              ]]>
             </text>
         </textAttribute>

        <textAttribute name="dnaContext" displayName="Features"
                       inReportMaker="false">
           <text>
                <![CDATA[
                @CGI_URL@/gbrowse_img/toxodb/?name=$$primaryKey$$;embed=1;type=AnnotatedGenes;width=600;base=@CGI_URL@/gbrowse
                ]]>
           </text>
        </textAttribute>

        <textAttribute name="gbrowseLink" inReportMaker="false">
           <text>
                <![CDATA[
                @CGI_URL@/gbrowse/toxodb/?name=$$primaryKey$$:1-$$length$$;enable=AnnotatedGenes
                ]]>
           </text>
        </textAttribute>

         <textAttribute name="otherInfo" displayName="Links to Other Web Pages" inReportMaker="false">
           <text>
                <![CDATA[
                    <!-- a href="@GENE_BY_CONTIG_URL@">Lookup Genes on this Contig</a><br -->
                    <form action="@CGI_URL@/contigSrt" method="get">
                    <table border="0" cellpadding="5" cellspacing="1">
                      <tr class="secondary3"><td>
                        <table border="0" cellpadding="0">
                        <tr><td colspan="2"><b>Retrieve this sequence</b>
                                <input name='ids' value='$$primaryKey$$' size='20' type='hidden' />
                            </td></tr>
                        <tr><td colspan="2">Nucleotide positions:
                                from <input type="text" name="start" value="1" maxlength="7" size="8"/>
                                to <input type="text" name="end" value="$$length$$" maxlength="7" size="8"/>
                            </td></tr>
                       <tr><td align="left"><input type="checkbox" name="revComp">Reverse complement</td>
                           <td align="right"><input type="submit" name='go' value='Go' /></td></tr>
                    </table>
                    </td></tr></table>
                    </form>
                ]]>
           </text>
        </textAttribute>

          <attributeQueryRef ref="DataDumpQueries.SequenceGffAttrs">
              <columnAttribute displayName="SeqId" name="gff_seqid" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Data Source" name="gff_source" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Feature Type" name="gff_type" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Start" name="gff_fstart" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="End" name="gff_fend" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Score" name="gff_score" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Strand" name="gff_strand" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Reading Frame" name="gff_phase" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="ID" name="gff_attr_id" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Name" name="gff_attr_name" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="description" name="gff_attr_description" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Locus tag" name="gff_attr_locus_tag" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Molecule type" name="gff_attr_molecule_type" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Organism name" name="gff_attr_organism_name" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Translation table" name="gff_attr_translation_table" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Topology" name="gff_attr_topology" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Localization" name="gff_attr_localization" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Genome Size" name="gff_attr_size" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="Sequence" name="gff_sequence" inReportMaker="false" internal="true"/>
          </attributeQueryRef>
          
          <table name="gff_SequenceDbxrefs"
                 displayName="Sequence DbXrefs"
                 queryRef="DataDumpQueries.SequenceGffDbxrefs" inReportMaker="false">
              <columnAttribute displayName="Dbxref" name="gff_dbxref"/>
          </table>

       </recordClass>
    </recordClassSet>

    <recordClassSet name="SnpRecordClasses">
        <recordClass idPrefix="" name="SnpRecordClass"
                     type="SNP">

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

        <attributeQueryRef ref="SnpAttributes.Bfmv">
              <columnAttribute displayName="Dataset" name="dataset" internal="true" inReportMaker="true"/>
              <columnAttribute displayName="Dataset_hidden" name="dataset_hidden" internal="true" inReportMaker="false"/>
               <linkAttribute inReportMaker="false" displayName="SNP provider" name="provider_link" visible="$$dataset$$">
                 <url>
                    <![CDATA[
                       showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=$$dataset_hidden$$&title=SNPs%20Summary
                        ]]>
                 </url>
              </linkAttribute>

              <columnAttribute displayName="Chromosome" name="seq_source_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Location" name="snp_location"/>
              <columnAttribute displayName="Position" name="start_min" internal="true"/>
              <columnAttribute displayName="Reference Strain" name="reference_strain" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference NA" name="reference_na" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference AA" name="reference_aa" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strains" name="strains" internal="false"/>
              <columnAttribute displayName="Left Flank" name="lflank"/>
              <columnAttribute displayName="3D7 Allele" name="allele" align="center"/>
              <columnAttribute displayName="Right Flank" name="rflank"/>
              <columnAttribute inReportMaker="true" displayName="Gene ID"
                               name="gene_source_id" internal="true"/>
               <linkAttribute inReportMaker="false" displayName="Gene ID"
                              name="linkedGeneId" visible="$$gene_source_id$$">
                 <url>
                    <![CDATA[
                       showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$gene_source_id$$
                        ]]>
                 </url>
              </linkAttribute>
              <columnAttribute displayName="Gene strand" name="gene_strand"/>
              <columnAttribute displayName="Coding" name="is_coding" align="center"/>
              <columnAttribute displayName="Position in CDS" name="position_in_CDS" align="center"/>
              <columnAttribute displayName="Position in protein" name="position_in_protein" align="center"/>
              <columnAttribute displayName="Non-synonymous" name="has_nonsynonymous_allele" align="center"/>
              <columnAttribute displayName="Strains (gene strand)" name="strains_gene_strand" internal="false" inReportMaker="true"/>
              <columnAttribute displayName="Left Flank (gene strand)" name="lflank_gene_strand"/>
              <columnAttribute displayName="3D7 Allele (gene strand)" name="allele_gene_strand" align="center"/>
              <columnAttribute displayName="Right Flank (gene strand)" name="rflank_gene_strand"/>
              <columnAttribute displayName="Major Allele Count" name="major_allele_count" align="center"/>
              <columnAttribute displayName="Minor Allele Count" name="minor_allele_count" align="center"/>
              <columnAttribute displayName="Major Allele" name="major_allele" align="center"/>
              <columnAttribute displayName="Minor Allele" name="minor_allele" align="center"/>
              <columnAttribute displayName="Major Product" name="major_product" align="center"/>
              <columnAttribute displayName="Minor Product" name="minor_product" align="center"/>
              <columnAttribute displayName="Organism" name="organism" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Organism" name="formatted_organism" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="NCBI Taxon ID" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
        </attributeQueryRef>

         <textAttribute name="snp_overview" displayName="SNP Genomic Overview" inReportMaker="false" >
               <text>
                    <![CDATA[
                    <table>
                    <tr><td width="220"><b>Location:</b></td><td>$$snp_location$$</td></tr>
                    <tr><td width="220"><b>Reference:</b></td><td>Strain: $$reference_strain$$, Allele: $$reference_na$$ </td></tr>
                    <tr><td width="220"><b>Major Allele:</b></td><td>$$major_allele$$ ($$major_allele_count$$), Product: $$major_product$$ </td></tr>
                    <tr><td width="220"><b>Minor Allele:</b></td><td>$$minor_allele$$ ($$minor_allele_count$$), Product: $$minor_product$$ </td></tr>
		    <tr><td width="220"><b>Left Flank:</b></td><td><font class="fixed">$$lflank$$</font></td></tr>
		    <tr><td width="220"><b>$$reference_strain$$ Allele:</b></td><td> <font class="fixed">$$allele$$</font></td></tr>
		    <tr><td width="220"><b>Right Flank:</b></td><td><font class="fixed">$$rflank$$</font></td></tr>
                    <tr><td width="220"><b>Provider:</b></td><td><a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=$$dataset_hidden$$&title=SNPs%20Summary">$$dataset$$</a></td></tr>
                    </table>
                ]]>
               </text>
           </textAttribute>

           <textAttribute name="gene_context" displayName="Gene Context" inReportMaker="false" >
               <text>
                    <![CDATA[
                    <table>
                    <tr><td width="220"><b>Gene ID:</b></td><td><a href="showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$gene_source_id$$">$$gene_source_id$$</a></td></tr>
                    <tr><td width="220"><b>Gene Strand:</b></td><td>$$gene_strand$$</td></tr>
                    <tr><td width="220"><b>Coding?:</b></td><td>$$is_coding$$</td></tr>
                    <tr><td width="220"><b>Position in CDS:</b></td><td>$$position_in_CDS$$</td></tr>
                    <tr><td width="220"><b>Position in Protein:</b></td><td>$$position_in_protein$$</td></tr>
		    <tr><td width="220"><b>Left Flank (Gene Strand):</b></td><td><font class="fixed">$$lflank_gene_strand$$</font></td></tr>
		    <tr><td width="220"><b>$$reference_strain$$ Allele (Gene Strand):</b></td><td> <font class="fixed">$$allele_gene_strand$$</font></td></tr>
		    <tr><td width="220"><b>Right Flank (Gene Strand):</b></td><td><font class="fixed">$$rflank_gene_strand$$</font></td></tr>
                    </table>
                ]]>
               </text>
           </textAttribute>

          <table name="Strains"
                 displayName="Strains"
                 queryRef="SnpTables.Strains">
              <columnAttribute displayName="Strain" name="strain"/>
              <columnAttribute displayName="Type" name="phenotype"/>
              <columnAttribute displayName="Allele" name="allele" align="center"/>
              <columnAttribute displayName="Allele (gene strand)" name="allele_gene_strand" align="center"/>
              <columnAttribute displayName="Product" name="product" align="center"/>
          </table>

          <table name="Providers_other_SNPs"
                 displayName="Other SNPs at this location including combined SNPs"
                 queryRef="SnpTables.Providers">
              <columnAttribute name="source_id_link" internal="true"/>
              <linkAttribute inReportMaker="false" displayName="SNP ID"
                             name="linkedSourceId"
                             visible="$$source_id_link$$">
                 <url>
                    <![CDATA[
                       showRecord.do?name=SnpRecordClasses.SnpRecordClass&project_id=&primary_key=$$source_id_link$$
                        ]]>
                 </url>
              </linkAttribute>
              <columnAttribute displayName="Provider" name="name"/>
          </table>

       </recordClass>
    </recordClassSet>

    <recordClassSet name="EstRecordClasses">

        <!-- EstRecordClasses.EstRecordClass -->
        <recordClass idPrefix="" 
          name="EstRecordClass" type="EST">

            <reporter name="tabular" displayName="TAB Delimited" implementation="org.gusdb.wdk.model.report.TabularReporter" />
            <reporter name="fullRecord" displayName="Full Records" implementation="org.gusdb.wdk.model.report.FullRecordReporter" />
   
            <attributeQueryRef ref="EstAttributes.Bfmv">
                <columnAttribute name="source_id"   inReportMaker="false"  internal="true" /> 
                <columnAttribute name="a_count"     inReportMaker="false"  internal="true" /> 
                <columnAttribute name="c_count"     inReportMaker="false"  internal="true" /> 
                <columnAttribute name="g_count"     inReportMaker="false"  internal="true" /> 
                <columnAttribute name="t_count"     inReportMaker="false"  internal="true" /> 
                <columnAttribute name="other_count" inReportMaker="false"  internal="true" /> 
                <columnAttribute name="length"      displayName="length"   internal="false" /> 
                <columnAttribute name="primer"      inReportMaker="false"  internal="true" /> 
                <columnAttribute name="dbest_name"  displayName="Library"  internal="false" /> 
                <columnAttribute name="vector"      displayName="Vector"   internal="false" /> 
                <columnAttribute name="stage"       displayName="Stage"    internal="false" /> 
                <columnAttribute name="organism"    displayName="Organism" internal="true" /> 
                <columnAttribute name="extdbname"   inReportMaker="false"  internal="true" /> 
            </attributeQueryRef>

            <attributeQueryRef ref="EstAttributes.Sequence">
                <columnAttribute name="sequence"    displayName="Sequence" internal="true"/>
            </attributeQueryRef>
            
            <attributeQueryRef ref="EstAttributes.Reference">
                <columnAttribute inReportMaker="false" name="author"      internal="true" />
                <columnAttribute inReportMaker="false" name="affiliation" internal="true" />
                <columnAttribute inReportMaker="false" name="address"     internal="true" />
            </attributeQueryRef>
            

            <table name="AlignmentInfo" 
                   displayName="Alignments to &lt;i&gt;T. gondii&lt;/i&gt; chromosomes/scaffolds"
                   queryRef="EstTables.AlignmentInfo">  

                <columnAttribute inReportMaker="true"  name="accession" displayName="Accession"   internal="false" />
                <linkAttribute displayName="Chromosome/Scaffold" name="alignedcontig" visible="$$sequence_id$$">
                     <url>
                        <![CDATA[showRecord.do?name=SequenceRecordClasses.SequenceRecordClass&project_id=&primary_key=$$sequence_id$$]]>
                     </url>
                </linkAttribute>
                <textAttribute inReportMaker="true" name="location" displayName="Location">
                  <text>
                    <![CDATA[
                      $$target_start$$ - $$target_end$$ ($$is_reversed$$)
                    ]]>
                  </text>
                </textAttribute>
                <columnAttribute inReportMaker="false"  name="context_start" internal="true" />
                <columnAttribute inReportMaker="false"  name="context_end"   internal="true" />
                <columnAttribute inReportMaker="true"  name="percent_identity" displayName="Percent identity"  internal="false" />
                <columnAttribute inReportMaker="true"  name="is_best_alignment" displayName="Best alignment?"  internal="false" />
                <columnAttribute inReportMaker="true"  name="is_consistent" displayName="Consistent?"  internal="false" />
                <columnAttribute inReportMaker="true"  name="sequence_id" displayName="Sequence"    internal="true" />
                <columnAttribute inReportMaker="true"  name="target_start" displayName="Start" internal="true" />
                <columnAttribute inReportMaker="true"  name="target_end"  displayName="End" internal="true" />
                <columnAttribute inReportMaker="true"  name="is_reversed" displayName="Strand" internal="true" />
                <linkAttribute displayName="Alignment" name="alignmentlink" visible="view"
                   inReportMaker="false" internal="false" >
                     <url>
                        <![CDATA[
                        @GBROWSE_BASE_URL@/cgi-bin/gbrowse/plasmo/?name=$$sequence_id$$%3A$$context_start$$-$$context_end$$;width=550;label=Gene;label=EST;h_feat=$$accession$$
                        ]]>
                     </url>
                </linkAttribute>
            </table>
            

             <textAttribute name="overview" displayName="Overview" inReportMaker="false">
               <text>
                    <![CDATA[
                    Library: $$dbest_name$$<br>
                    Primer: $$primer$$<br>
		    Vector: $$vector$$<br>
		    Stage:  $$stage$$<br>
                    Residue counts: <b>A</b>:$$a_count$$, <b>T</b>:$$t_count$$, <b>C</b>:$$c_count$$, 
                    <b>G</b>:$$g_count$$, <b>other</b>:$$other_count$$<br>
                    Length: $$length$$<br>
                    Link out: <a href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?val=$$source_id$$">NCBI</a>
                ]]>
               </text>
           </textAttribute>
           
           <!-- custom record jsp page has a dependency on this attribute name. if you change here, change there -->
           <textAttribute name="reference" displayName="Sequence Attribution" inReportMaker="false">
              <text>
                   <![CDATA[
                   <font size="-1">$$author$$<br>$$affiliation$$<br> $$address$$</font>
                   ]]>
              </text>
           </textAttribute>
              
              
       </recordClass>
    </recordClassSet>

    <recordClassSet name="OrfRecordClasses">

      <!-- OrfRecordClasses.OrfRecordClass -->
      <recordClass idPrefix="" 
          name="OrfRecordClass" type="ORF">

	<reporter name="tabular" displayName="Summary - TAB Delimited"
                      implementation="org.gusdb.wdk.model.report.TabularReporter" />
        <reporter name="fullRecord" displayName="Detailed"
                      implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

	<attributeQueryRef ref="OrfAttributes.Bfmv">
	  <columnAttribute name="nas_id" displayName="Sequence ID" internal="false"/>
          <!--columnAttribute name="orf_id" displayName="ORF ID" internal="false"/-->
          <columnAttribute name="orf_start" internal="true"/>
          <columnAttribute name="orf_end" internal="true"/>
          <columnAttribute name="orf_start_text" displayName="Start" internal="false"/>
          <columnAttribute name="orf_end_text" displayName="End" internal="false"/>
          <columnAttribute name="orf_strand" displayName="Strand" internal="false"/>
          <columnAttribute name="length" displayName="Length" internal="false"/>
          <columnAttribute name="organism" displayName="Species" internal="true" inReportMaker="false"/>
          <columnAttribute name="formatted_organism" displayName="Organism" internal="false"/>
	</attributeQueryRef>

        <attributeQueryRef ref="OrfAttributes.Sequence">
          <columnAttribute name="sequence" displayName="Sequence" />
        </attributeQueryRef>

	<textAttribute name="orf_location_text" displayName="Location"
		       internal="false" inReportMaker="true">
          <text>
	      <![CDATA[
                 $$nas_id$$: $$orf_start_text$$ - $$orf_end_text$$ ($$orf_strand$$)
	      ]]>
          </text>
        </textAttribute>           

        <textAttribute name="overview" displayName="Overview"
                       internal="true" inReportMaker="false">
          <text>
	      <![CDATA[
                 Open Reading Frame $$orf_id$$ from $$nas_id$$.<br>
                 Organism: <i>$$organism$$</i>
	      ]]>
          </text>
        </textAttribute>           
        
      </recordClass>
    </recordClassSet>
 

    <recordClassSet name="ProteinRecordClasses">

        <recordClass idPrefix=""
            name="ProteinRecordClass" type="Protein"
            attributeOrdering="product">

            <reporter name="tabular" displayName="TAB Delimited" implementation="org.gusdb.wdk.model.report.TabularReporter" />
            <reporter name="fullRecord" displayName="Full Records" implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

            <attributeQueryRef ref="ProteinAttributes.ProteinAttrs">
                <columnAttribute name="product" displayName="Product"/>
            </attributeQueryRef>
            
            <attributeQueryRef ref="ProteinAttributes.Organism">
                <columnAttribute displayName="Organism" name="organism" internal="false"/>
                <columnAttribute displayName="genus_species" name="genus_species" internal="true"/>
            </attributeQueryRef>
            
            <attributeQueryRef ref="ProteinAttributes.Sequence">
                <columnAttribute name="sequence"/>
            </attributeQueryRef>
                        
            <table name="TransmembraneDomains"
                   displayName="Transmembrane Domains"
                   queryRef="ProteinTables.TransmembraneDomains">
                <columnAttribute name="start_min"/>
                <columnAttribute name="end_max"/>
            </table>
            
        </recordClass>
    </recordClassSet>


    <recordClassSet name="InterproTermClasses">
        <recordClass idPrefix="" name="InterproTermClass" type="Ontology">

          <reporter name="tabular" displayName="TAB Delimited" implementation="org.gusdb.wdk.model.report.TabularReporter" />
          <reporter name="fullRecord" displayName="Full Records" implementation="org.gusdb.wdk.model.report.FullRecordReporter" />

            <table name="InterproTerms" displayName="InterPro Terms"
                   queryRef="UtilityTables.InterproTermList">
                <columnAttribute name="accession"/>
                <columnAttribute name="name"/>
                <columnAttribute name="description"/>
            </table>
        </recordClass>
    </recordClassSet>

    <!-- *************** -->
    <!-- model querySets -->
    <!-- *************** -->

    <!--
    A "query" obtains tabular values from a data source.  It has columns
    and parameters.  So far, only SQL data sources are supported, but others,
    such as flat files are coming.

    Queries are used for different purposes: providing primary keys to a
    question; providing attributes and tables to a record; and, providing
    vocabularies to vocabulary parameters.

    A "query set" is a grouping of queries.  It is useful in organizing the
    model xml file.

    The full name of a query is of the form "set_name.name."
    -->

    <!-- Queries that retrieve attributes of Genes -->
    <!-- //////////  GENEPAGE GENE PAGE //////////// -->


    <querySet name="GeneAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" sortingTable="apidb.GeneAttributes"
                    lowerCase="true"/>
            <column name="gene_type" sortingTable="apidb.GeneAttributes"
                    lowerCase="true"/>
            <column name="product" sortingTable="apidb.GeneAttributes"
                    lowerCase="true"/>
            <column name="start_min" sortingTable="apidb.GeneAttributes"/>
            <column name="end_max" sortingTable="apidb.GeneAttributes"/>
            <column name="start_min_text"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="start_min"/>
            <column name="end_max_text" sortingTable="apidb.GeneAttributes"
                    sortingColumn="end_max"/>
            <column name="transcript_length"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="cds_length" sortingTable="apidb.GeneAttributes"/>
            <column name="protein_length"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="context_start"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="context_end" sortingTable="apidb.GeneAttributes"/>
            <column name="strand_plus_minus"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="strand"/>
            <column name="sequence_id" sortingTable="apidb.GeneAttributes"
                    lowerCase="true"/>
            <column name="toxocyc_db" sortingTable="apidb.geneattributes" 
		    sortingColumn="organism"/>
            <column name="toxocyc_gene_id" sortingTable="apidb.geneattributes" 
		    sortingColumn="source_id"/>
            <column name="tm_count" sortingTable="apidb.GeneAttributes"/>
            <column name="so_id" sortingTable="apidb.GeneAttributes"/>
            <column name="so_term_name"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="so_term_definition"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="ontology_name"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="so_version" sortingTable="apidb.GeneAttributes"/>
            <column name="anticodon" sortingTable="apidb.GeneAttributes"/>
            <column name="molecular_weight"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="isoelectric_point"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="min_molecular_weight"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="max_molecular_weight"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="hydropathicity_gravy_score"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="aromaticity_score"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="external_db_name"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="external_db_version"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="ncbi_tax_id" sortingTable="apidb.GeneAttributes"/>
            <column name="species" sortingTable="apidb.GeneAttributes"
                    sortingColumn="organism"/>
            <column name="genus_species" sortingTable="apidb.GeneAttributes"
                    sortingColumn="organism"/>
            <column name="organism_full" sortingTable="apidb.GeneAttributes"
                    sortingColumn="organism"/>
            <column name="organism" sortingTable="apidb.GeneAttributes"
                    sortingColumn="organism"/>
            <column name="exon_count" sortingTable="apidb.GeneAttributes"/>
            <column name="strand" sortingTable="apidb.GeneAttributes"/>
            <column name="ec_numbers_string"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="ec_numbers"/>
            <column name="ann_go_component"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="annotated_go_component"/>
            <column name="ann_go_process"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="annotated_go_process"/>
            <column name="ann_go_function"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="annotated_go_function"/>
            <column name="pred_go_component"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="predicted_go_component"/>
            <column name="pred_go_process"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="predicted_go_process"/>
            <column name="pred_go_function"
                    sortingTable="apidb.GeneAttributes"
                    sortingColumn="predicted_go_function"/>
            <column name="pru"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="veg"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="rh"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="rh_no_glucose"
                    sortingTable="apidb.GeneAttributes"/>
            <column name="rh_high_glucose"
                    sortingTable="apidb.GeneAttributes"/>
            <sql>
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start, bfmv.context_end, 
                   bfmv.sequence_id, bfmv.organism as organism_full, bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version,
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1)
                     AS genus_species,
                   REPLACE(bfmv.organism,'Toxoplasma','T.') as organism,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2)
                          - INSTR(bfmv.organism, ' ') - 1) AS species,
                   'TOXO' AS toxocyc_db,
                   UPPER(bfmv.source_id) AS toxocyc_gene_id,
                   bfmv.strand,bfmv.ec_numbers as ec_numbers_string,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   bfmv.predicted_go_process as pred_go_process,
                   bfmv.pru, bfmv.veg, bfmv.rh, bfmv.rh_no_glucose,
                   bfmv.rh_high_glucose
            FROM apidb.GeneAttributes bfmv
               WHERE bfmv.source_id='$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="ProteinSequence" displayName="Protein Sequence" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="protein_sequence"/>
            <sql>
            <![CDATA[
            SELECT gf.source_id,
                   tas.sequence AS protein_sequence
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.TranslatedAaSequence tas
            WHERE gf.source_id='$$primaryKey$$'
              AND t.parent_id = gf.na_feature_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = tas.aa_sequence_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="TranscriptSequence" isCacheable="false"
                       displayName="RNA Sequence">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="transcript_sequence"/>
            <sql>
            <![CDATA[
              select gf.source_id, s.sequence as transcript_sequence
              from dots.genefeature gf, dots.transcript t, dots.splicednasequence s
              where gf.source_id = '$$primaryKey$$'
              and t.parent_id = gf.na_feature_id
              and s.na_sequence_id = t.na_sequence_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="CDS" isCacheable="false"
                       displayName="RNA Sequence">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="cds"/>
            <sql>
            <![CDATA[
              SELECT gf.source_id,
                     SUBSTR(s.sequence,
                            tf.translation_start,
                            tf.translation_stop - tf.translation_start + 1)
                       AS cds
              FROM dots.genefeature gf, dots.transcript t,
                   dots.splicednasequence s, dots.TranslatedAaFeature tf
              WHERE gf.source_id = '$$primaryKey$$'
                AND t.parent_id = gf.na_feature_id
                AND s.na_sequence_id = t.na_sequence_id
                AND t.na_feature_id = tf.na_feature_id
            ]]>
            </sql>
        </sqlQuery>

    </querySet>
<!-- //////////  GENEPAGE GENE PAGE //////////// -->

<!-- //////////  SNPPAGE EST PAGE //////////// -->
    <querySet name="SnpAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="dataset" sortingTable="apidb.SnpAttributes"
                    lowerCase="true"/>
            <column name="dataset_hidden" sortingTable="apidb.SnpAttributes"
                    sortingColumn="dataset" lowerCase="true"/>
            <column name="seq_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="snp_location" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="start_min" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="is_coding" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_CDS" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_protein" sortingTable="apidb.SnpAttributes" />
            <column name="has_nonsynonymous_allele" sortingTable="apidb.SnpAttributes" />
            <column name="gene_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="gene_strand" sortingTable="apidb.SnpAttributes" />
            <column name="strains"  sortingTable="apidb.SnpAttributes" />
            <column name="strains_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="strains" lowerCase="true"/>
            <column name="lflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="allele" sortingTable="apidb.SnpAttributes" sortingColumn="reference_na" lowerCase="true"/>
            <column name="rflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="lflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="lflank" lowerCase="true"/>
            <column name="allele_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="allele" lowerCase="true"/>
            <column name="rflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="rflank" lowerCase="true"/>
            <column name="organism" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="formatted_organism" sortingTable="apidb.SnpAttributes" sortingColumn="organism" />
            <column name="ncbi_tax_id" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="minor_product" sortingTable="apidb.SnpAttributes" />
            <column name="major_product" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele" sortingTable="apidb.SnpAttributes" />
            <column name="reference_na" sortingTable="apidb.SnpAttributes" />
            <column name="reference_aa" sortingTable="apidb.SnpAttributes" />
            <column name="reference_strain" sortingTable="apidb.SnpAttributes" />
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.dataset,
                  DECODE(bfmv.dataset,
                         'SNPs from alignments of GT1, VEG and RH (AmitAlignmentSnps)', 'Genomic Sequence SNPs',
                         'John Boothroyd lab at Stanford (ME49_SNPs)', 'EST-based SNPs',
                         'Genetic Markers - David Sibley (GeneticMarkers_Sibley)', 'GeneticMarkers_Sibley',
                         bfmv.dataset) AS dataset_hidden,
                  bfmv.seq_source_id, bfmv.start_min, bfmv.reference_strain,
                  bfmv.reference_na, bfmv.is_coding, bfmv.position_in_CDS,
                  bfmv.position_in_protein, bfmv.reference_aa, bfmv.has_nonsynonymous_allele,
                  bfmv.gene_source_id, bfmv.gene_strand, bfmv.lflank,
                  bfmv.rflank, bfmv.reference_na as allele, bfmv.organism, bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.minor_allele_count, bfmv.major_allele_count,bfmv.minor_product,
                  bfmv.major_product,bfmv.major_allele,bfmv.minor_allele,bfmv.strains,bfmv.strains_revcomp,
                  bfmv.seq_source_id || ': ' || trim(to_char(bfmv.start_min,'99,999,999')) as snp_location,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.rflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.lflank  END as lflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.lflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.rflank  END as rflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.reference_na) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.reference_na END as allele_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN bfmv.strains_revcomp 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.strains END as strains_gene_strand
       FROM   apidb.SnpAttributes bfmv
       WHERE  bfmv.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

<!-- superceded by SnpAttributes.Bfmv
        <sqlQuery name="SnpAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
              <column name="dataset"/>
              <column name="dataset_hidden"/>
              <column name="seq_source_id"/>
              <column name="start_min"/>
              <column name="is_coding"/>
              <column name="position_in_CDS"/>
              <column name="position_in_protein"/>
              <column name="has_nonsynonymous_allele"/>
              <column name="gene_source_id"/>
              <column name="gene_strand"/>
              <column name="description"/>
              <column name="lflank"/>
              <column name="allele"/>
              <column name="rflank"/>
            <sql>
            <![CDATA[   
            SELECT        
              snp.source_id as source_id,
              CASE WHEN ed.name = 'Genomic Sequence SNPs' THEN 'SNPs from alignments of GT1, VEG and RH'
              WHEN ed.name = 'John Boothroyd lab at Stanford' THEN 'EST-based SNPs'
              WHEN ed.name = 'Genetic Markers - David Sibley' THEN 'Genetic Markers'
              ELSE ed.name END as dataset,
              CASE WHEN ed.name = 'Genomic Sequence SNPs' THEN 'AmitAlignmentSnps'
              WHEN ed.name = 'John Boothroyd lab at Stanford' THEN 'ME49_SNPs'
              WHEN ed.name = 'Genetic Markers - David Sibley' THEN 'GeneticMarkers_Sibley'
              ELSE ed.name END as dataset_hidden,
              s.source_id as seq_source_id,
              snp_loc.start_min,
              snp.reference_strain,
              snp.reference_na,
              DECODE(snp.is_coding, 0, 'no', 1, 'yes') AS is_coding,
              snp.position_in_CDS,
              snp.position_in_protein,
              CASE WHEN gene_info.is_reversed = 1 THEN snp.strains_revcomp ELSE snp.strains END as description,
              snp.reference_aa,
              DECODE(snp.has_nonsynonymous_allele, 0, 'no', 1, 'yes') AS has_nonsynonymous_allele,
              gene_info.source_id as gene_source_id,
              DECODE(gene_info.is_reversed, 0, 'forward', 1, 'reverse') AS gene_strand,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min + 1)) ELSE DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min - 50) END as lflank,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,1,snp_loc.start_min)) ELSE DBMS_LOB.SUBSTR(s.sequence,1,snp_loc.start_min) END as allele,
              CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(DBMS_LOB.SUBSTR(s.sequence,50,snp_loc.start_min - 50)) ELSE DBMS_LOB.SUBSTR(s.sequence,50, snp_loc.start_min + 1) END as rflank
       FROM   dots.VirtualSequence s,
              dots.SnpFeature snp,
              dots.NaLocation snp_loc,
              sres.ExternalDatabase ed,
              sres.ExternalDatabaseRelease edr, 
              (select gene.source_id, gene_loc.is_reversed, gene.na_feature_id
               FROM dots.GeneFeature gene, dots.NaLocation gene_loc
               WHERE gene.na_feature_id = gene_loc.na_feature_id) gene_info
       WHERE  snp.source_id = '$$primaryKey$$'
         AND  edr.external_database_release_id = snp.external_database_release_id
         AND  ed.external_database_id = edr.external_database_id
         AND  s.na_sequence_id = snp.na_sequence_id
         AND  snp_loc.na_feature_id = snp.na_feature_id
         AND  gene_info.na_feature_id(+) = snp.parent_id
             ]]>
           </sql>
        </sqlQuery>
-->

        <sqlQuery name="Sequence" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="lflank"/>
            <column name="allele"/>
            <column name="rflank"/>
            <sql>
            <![CDATA[    
            select SUBSTR(nas.sequence,l.start_min - 50,50) as lflank,
            SUBSTR(nas.sequence,l.start_min,1) as allele,
            SUBSTR(nas.sequence,l.start_min + 1,50) as rflank
            from  dots.virtualsequence nas, dots.snpfeature sf, dots.nalocation l
            where sf.source_id = '$$primaryKey$$'
            and sf.na_sequence_id = nas.na_sequence_id
            and l.na_feature_id = sf.na_feature_id
             ]]>
           </sql>
        </sqlQuery>
    </querySet>

    <querySet name="SnpTables">
        <sqlQuery name="Strains" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="strain"/>
            <column name="allele"/>
            <column name="phenotype"/>
            <column name="product"/>
            <sql>
            <![CDATA[    
               SELECT    var.strain,
                 CASE WHEN gene_info.is_reversed = 1 THEN apidb.reverse_complement(var.allele) ELSE var.allele END as allele,
                 var.phenotype,
                 var.product
       FROM  dots.SnpFeature snp,
             dots.SeqVariation var,
             (select gene.source_id, gene_loc.is_reversed, gene.na_feature_id
               FROM dots.GeneFeature gene, dots.NaLocation gene_loc
               WHERE gene.na_feature_id = gene_loc.na_feature_id) gene_info
       WHERE snp.source_id = '$$primaryKey$$'
        AND  var.parent_id = snp.na_feature_id
        AND gene_info.na_feature_id(+) = snp.parent_id
        ORDER BY var.strain
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Providers" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id_link"/>
            <column name="name"/>
            <sql>
            <![CDATA[    
               SELECT    '<a href="showRecord.do?name=SnpRecordClasses.SnpRecordClass&project_id=&primary_key='||sb.source_id || '">'||sb.source_id ||'</a>' as source_id_link,
               ed.name as name
               FROM  dots.SnpFeature sa, dots.snpfeature sb, dots.nalocation la, dots.nalocation lb,
                     sres.externaldatabase ed, sres.externaldatabaserelease edr
               WHERE sa.source_id = '$$primaryKey$$'
                AND sa.na_feature_id = la.na_feature_id
                and sb.na_feature_id = lb.na_feature_id
                and sa.na_sequence_id = sb.na_sequence_id
                and la.start_min = lb.start_min
                and sb.external_database_release_id = edr.external_database_release_id
                and edr.external_database_id = ed.external_database_id
             ]]>
           </sql>
        </sqlQuery>

    </querySet>

<!-- //////////  ESTPAGE EST PAGE //////////// -->
    <!-- Queries that retrieve attributes of ESTs -->
    <querySet name="EstAttributes">

        <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>   
            <column name="source_id" sortingTable="apidb.EstAttributes"/>
            <column name="a_count" sortingTable="apidb.EstAttributes"/>
            <column name="c_count" sortingTable="apidb.EstAttributes"/>
            <column name="g_count" sortingTable="apidb.EstAttributes"/>
            <column name="t_count" sortingTable="apidb.EstAttributes"/>
            <column name="other_count" sortingTable="apidb.EstAttributes"/>
            <column name="length" sortingTable="apidb.EstAttributes"/>
            <column name="primer" sortingTable="apidb.EstAttributes"/>
            <column name="dbest_name" sortingTable="apidb.EstAttributes"/>
            <column name="vector" sortingTable="apidb.EstAttributes"/>
            <column name="stage" sortingTable="apidb.EstAttributes"/>
            <column name="organism" sortingTable="apidb.EstAttributes"/>
            <column name="extdbname" sortingColumn="database_name"
                    sortingTable="apidb.EstAttributes"/>
            <sql> 
            <![CDATA[           
                SELECT bfmv.source_id, bfmv.a_count, bfmv.c_count,
                       bfmv.g_count, bfmv.t_count, bfmv.other_count,
                       bfmv.length, bfmv.primer, bfmv.dbest_name, bfmv.vector,
                       bfmv.stage, bfmv.organism,
                       bfmv.external_db_name AS extdbname
                FROM apidb.EstAttributes bfmv
                WHERE bfmv.source_id = '$$primaryKey$$'
            ]]>
           </sql>
        </sqlQuery>
           
        <sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>   
            <column name="source_id" />
            <column name="sequence" />
            <sql> 
            <![CDATA[
                SELECT ens.source_id, ens.sequence
                FROM dots.ExternalNasequence ens, dots.Est e
                WHERE ens.source_id = '$$primaryKey$$'
                  AND e.na_sequence_id = ens.na_sequence_id
            ]]>
           </sql>
        </sqlQuery>
           
        <!-- EstAttributes.Reference -->
        <sqlQuery name="Reference" isCacheable='true'>
            <paramRef ref="params.primaryKey"/> 
            <column name="source_id" />
            <column name="author" />
            <column name="affiliation" />
            <column name="address" />
            <sql>
            <![CDATA[           
            SELECT e.accession as source_id,
                   c.name as author, 
                   c.address1 as affiliation, 
                   c.address2 as address
            FROM dots.est e, sres.contact c
            WHERE e.contact_id = c.contact_id
            AND e.accession = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>
    </querySet>
<!-- //////////  END ESTPAGE EST PAGE //////////// -->

<!-- //////////  ORFPAGE ORF PAGE //////////// -->
    <!-- Queries that retrieve attributes of Contigs -->
    <querySet name="OrfAttributes">

        <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/> 
            <column name="nas_id"  sortingTable="apidb.OrfAttributes" />
            <!--column name="orf_id" sortingTable="apidb.OrfAttributes" sortingColumn="source_id" /-->
            <column name="length" sortingTable="apidb.OrfAttributes" />
            <column name="organism" sortingTable="apidb.OrfAttributes" />
            <column name="formatted_organism" sortingTable="apidb.OrfAttributes" sortingColumn="organism" />
            <column name="orf_start" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_start_text" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end_text" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_strand" sortingTable="apidb.OrfAttributes" sortingColumn="is_reversed" />
            <sql> 
            <![CDATA[           
                SELECT bfmv.source_id, bfmv.nas_id, bfmv.length, bfmv.organism, bfmv.ncbi_tax_id,
                       '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                       REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                      chr(38) || 'nbsp;') || '</i>'
                         AS formatted_organism,
                      bfmv.start_min as orf_start,bfmv.end_max as orf_end,
                      trim(to_char(bfmv.end_max,'999,999,999')) as orf_end_text,
                      trim(to_char(bfmv.start_min,'999,999,999')) as orf_start_text,
                      decode(bfmv.is_reversed,0,'+',1,'-',null) as orf_strand
                FROM apidb.OrfAttributes bfmv
                WHERE bfmv.source_id = '$$primaryKey$$'
        ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.primaryKey"/> 
            <column name="sequence"/>
            <sql> 
            <![CDATA[           
                SELECT t.source_id, tas.sequence
                FROM dots.VirtualSequence vs,
                     dots.Miscellaneous t,
                     dots.TranslatedAaFeature taf,
                     dots.TranslatedAaSequence tas,
                     sres.SequenceOntology so
                WHERE t.na_feature_id = taf.na_feature_id
                  AND taf.aa_sequence_id = tas.aa_sequence_id
                  AND vs.na_sequence_id = t.na_sequence_id 
                  AND t.sequence_ontology_id = so.sequence_ontology_id
                  AND so.term_name = 'ORF'
                  AND t.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>

    </querySet>
<!-- //////////  END ORFPAGE ORF PAGE //////////// -->


<!-- //////////  VOCABULARY //////////// -->

    <querySet name="VocabQueries">

        <sqlQuery name="WhichEnd">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term, 
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term, 
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord)
            </sql>
        </sqlQuery>

        <sqlQuery name="WhichEnd2">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term, 
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term, 
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord DESC)
            </sql>
        </sqlQuery>

        <sqlQuery name="Confidence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT * FROM (
                SELECT 'High' as term,
                '''' ||'Full Set On Blast Hit'  || ''''  as internal FROM dual
                UNION
                SELECT 'Medium' as term,
                '''' ||'Full Set Not on Blast Hit'''||','||'''Not Full Set On Blast Hit' || ''''  as internal FROM dual
                UNION
                SELECT 'Low' as term,
                '''' ||'Not Full Set Not on Blast Hit' || '''' as internal FROM dual)
            </sql>
        </sqlQuery>
        
       <sqlQuery name="SnpStrain">
          <column name="internal"/>
          <column name="term"/>
          <sql>
            select 'RH (type I; chr IA and IB only)' as term, 
	           'RH' as internal from dual
	    union
	    select 'ME49 (type II)' as term, 
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 
	           'VEG' as internal from dual
            union
	    select 'GT1 (type I)' as term, 
	           'GT1' as internal from dual
	    order by term
          </sql>
        </sqlQuery>

 <sqlQuery name="SnpStrainA">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select 'ME49 (type II)' as term, 2 as ord,
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 3 as ord,
	           'VEG' as internal from dual
            union
	    select 'GT1 (type I)' as term, 1 as ord,
	           'GT1' as internal from dual
	    order by ord
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStrainB">
          <column name="internal"/>
          <column name="term"/>
          <sql>
            select 'RH (type I; chr IA and IB only)' as term, 4 as ord,
	           'RH' as internal from dual
	    union
	    select 'ME49 (type II)' as term, 2 as ord,
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 3 as ord,
	           'VEG' as internal from dual
	    order by ord
          </sql>
        </sqlQuery>

 <sqlQuery name="SnpStrainM">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select 'ME49 (type II)' as term, 2 as ord,
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 1 as ord,
	           'VEG' as internal from dual
            union
	    select 'GT1 (type I)' as term, 3 as ord,
	           'GT1' as internal from dual
	    order by ord
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStat">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Non-Coding' as term, 
	           'non_coding' as internal from dual
	    union
	    select 'Coding' as term, 
	           'non_synonymous + synonymous' as internal from dual
	    union
	    select 'Non-Synonymous' as term, 
	          'non_synonymous' as internal from dual
            union
	    select 'Synonymous' as term, 
	           'synonymous' as internal from dual
            union
	    select 'Nonsense' as term, 
	           'stop' as internal from dual
            union
	    select 'All SNPs' as term,
	           'total' as internal from dual
            </sql>
        </sqlQuery>

        <sqlQuery name="SnpSort">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            select 'Non-synonymous / Synonymous ratio' as term, 
	           'dn_ds_ratio' as internal from dual
	    union
	    select 'Non-Coding SNPs' as term, 
	           'non_coding' as internal from dual
	    union
	    select 'Non-Synonymous SNPs' as term, 
	          'non_synonymous' as internal from dual
            union
	    select 'Synonymous SNPs' as term, 
	           'synonymous' as internal from dual
            union
	    select 'Nonsense SNPs' as term, 
	           'stop' as internal from dual
            union
	    select 'All SNPs' as term,
	           'total' as internal from dual
            union
	    select 'SNP density in CDS' as term,
	           'cds_snp_density' as internal from dual
            ORDER by term
            </sql>
        </sqlQuery>

        <sqlQuery name="SortOrder">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Descending' as term, 
	           'DESC' as internal from dual
	    union
	    select 'Ascending' as term, 
	           'ASC' as internal from dual
            ORDER by term DESC
            </sql>
        </sqlQuery>

        <sqlQuery name="Organism">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT tn.name AS term, t.taxon_id AS internal,
                    rownum AS idx
            FROM sres.TaxonName tn, sres.taxon t
            WHERE tn.name_class='scientific name'
              AND t.taxon_id = tn.taxon_id
              AND t.rank = 'species'
              AND t.taxon_id in
                   (SELECT taxon_id
                    FROM sres.taxon
                    CONNECT BY taxon_id = prior parent_id
                    START WITH taxon_id IN
                    (SELECT taxon_id
                     FROM dots.VirtualSequence))
            </sql>
        </sqlQuery>

        <sqlQuery name="PfamTermList" isCacheable='true'>
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT distinct pe.definition as term, 'x' as internal
            FROM   dots.pfamentry pe,
                   dots.domainfeature df
            WHERE df.pfam_entry_id = pe.pfam_entry_id
            ORDER BY UPPER(REPLACE(term, '''', ''))
            </sql>
        </sqlQuery>

        <sqlQuery name="GeneTypes">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT REPLACE(REPLACE(REPLACE(term_name, 'non_protein_coding', 'misc RNA'), '_encoding', ''), '_', ' ')  AS term,
                   sequence_ontology_id AS internal
              FROM sres.SequenceOntology
              WHERE term_name IN ('protein_coding',
                                  'rRNA_encoding',
                                  'snRNA_encoding',
                                  'tRNA_encoding',
                                  'non_protein_coding')
            </sql>
        </sqlQuery>

        <sqlQuery name="IncludePseudogenes">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            select 'Yes' as term, 2 as idx, '0,1' as internal from dual
            UNION
            select 'No' as term, 1 as idx, '0' as internal from dual
            UNION
            select 'Pseudogenes Only' as term, 3 as idx, '1' as internal from dual
            ORDER BY idx
            </sql>
        </sqlQuery>


        <sqlQuery name="Chromosome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Ia' as term, 
                      'Ia' as internal,
		        1   as order_num FROM dual
               UNION
               SELECT 'Ib' as term, 
                      'Ib' as internal, 
		        2   as order_num FROM dual
               UNION
               SELECT 'II' as term, 
                      'II' as internal, 
		        3   as order_num FROM dual
               UNION
               SELECT 'III' as term, 
                      'III' as internal, 
		        4   as order_num FROM dual
               UNION
               SELECT 'IV' as term, 
                      'IV' as internal,
		        5   as order_num FROM dual
               UNION
               SELECT 'V' as term, 
                      'V' as internal,
		        6   as order_num FROM dual
               UNION
               SELECT 'VI' as term, 
                      'VI' as internal,
		        7   as order_num FROM dual
               UNION
               SELECT 'VIIa' as term, 
                      'VIIa' as internal,
		        8   as order_num FROM dual
               UNION
               SELECT 'VIIb' as term, 
                      'VIIb' as internal,
		        9   as order_num FROM dual
               UNION
               SELECT 'VIII' as term, 
                      'VIII' as internal,
		       10   as order_num FROM dual
               UNION
               SELECT 'IX' as term, 
                      'IX' as internal,
		       11   as order_num FROM dual
               UNION
               SELECT 'X' as term, 
                      'X' as internal,
		       12   as order_num FROM dual
               UNION
               SELECT 'XI' as term, 
                      'XI' as internal,
		       13   as order_num FROM dual
               UNION
               SELECT 'XII' as term, 
                      'XII' as internal,
		       14   as order_num FROM dual
               UNION
               SELECT 'Select:' as term, 
                      'Select:' as internal,
		        0   as order_num FROM dual
               )
	       ORDER BY order_num asc
            </sql>
        </sqlQuery>

        <sqlQuery name="inNotIn">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'does overlap with a gene' as term, 'in' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'does not overlap with a gene' as term, 'not in' as internal, 2 as idx
                FROM dual
            ) 
            ORDER BY idx
            </sql>
        </sqlQuery>

        <!-- VocabQueries.EstLibraries -->
        <sqlQuery name="EstLibraries">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT REPLACE(dbest_name, ',', ' - ') AS term,
                       library_id AS internal
                FROM dots.library
                ORDER BY dbest_name
            </sql>
        </sqlQuery>


        <sqlQuery name="high_confidence_only">
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT * FROM (
               SELECT 'No' as term, '0,1' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'Yes' as term, '1' as internal, 2 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>
        
        <sqlQuery name="best_alignment_only">
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT * FROM (
               SELECT 'No' as term, '0,1' as internal, 2 as idx
               FROM dual
            UNION
                SELECT 'Yes' as term, '1' as internal, 1 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>

        <sqlQuery name="MetabolicPathways">
            <column name="internal"/>
            <column name="term"/>
            <sql>
             SELECT DISTINCT dr.primary_identifier AS internal,
                    decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier) AS term
             FROM sres.DbRef dr, sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
             WHERE dr.external_database_release_id = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name = 'Links to Pathway Maps'
             ORDER BY term
            </sql>
        </sqlQuery>


<sqlQuery name="Filter">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      'yes' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      'no' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
</sqlQuery>


        <sqlQuery name="BlastQueryType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'DNA' as term, 
                      'dna' as internal FROM dual
               UNION
               SELECT 'Protein' as term, 
                      'protein' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="BlastDatabaseTypeGene">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'CDS' as term, 
                      'CDS' as internal FROM dual
               UNION
               SELECT 'Translated CDS' as term, 
                      'CDS Translated' as internal FROM dual
               UNION
               SELECT 'Protein' as term, 
                      'proteins' as internal FROM dual
            )
            </sql>
        </sqlQuery -->

        <!-- sqlQuery name="BlastDatabaseTypeGenome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Genome' as term, 
                      'genomic' as internal FROM dual
            )
            </sql>
        </sqlQuery -->

        <sqlQuery name="BlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT ' Choose one:' as term,
                      'Choose one' as internal FROM dual
               UNION
               SELECT 'Transcripts' as term,
                      'Transcripts' as internal FROM dual
               UNION
               SELECT 'Translated Transcripts' as term, 
                      'Transcripts Translated' as internal FROM dual
               UNION
               SELECT 'Proteins' as term, 
                      'proteins' as internal FROM dual
               UNION
               SELECT 'Genome' as term, 
                      'genomic' as internal FROM dual
               UNION
               SELECT 'Translated Genome' AS term,
                      'genomic Translated' AS internal FROM dual
               UNION
               SELECT 'ORF (Protein)' as term, 
                      'orfs' as internal FROM dual
               UNION
               SELECT 'EST' as term, 
                      'ESTs' as internal FROM dual
               UNION
               SELECT 'Translated EST' AS term,
                      'ESTs Translated' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="GeneBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Transcripts' as term,
                      'Transcripts' as internal FROM dual
               UNION
               SELECT 'Translated Transcripts' as term, 
                      'Transcripts Translated' as internal FROM dual
               UNION
               SELECT 'Proteins' as term, 
                      'proteins' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="SequenceBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Genome' as term, 
                      'genomic' as internal FROM dual
               UNION
               SELECT 'Translated Genome' AS term,
                      'genomic Translated' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="EstBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'EST' as term, 
                      'ESTs' as internal FROM dual
               UNION
               SELECT 'Translated EST' AS term,
                      'ESTs Translated' AS internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="OrfBlastDatabaseType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'ORF (Protein)' as term, 
                      'orfs' as internal FROM dual
            )
            </sql>
        </sqlQuery>

        <sqlQuery name="BlastDatabaseOrganism">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'T. gondii ME49' as term, 
                      'Tgondii' as internal, 
                       1 AS idx FROM dual 
               UNION
               SELECT 'T. gondi apicoplast' as term,
                      'TgondiiApicoplast' as internal,
                       2 AS idx FROM dual 
               UNION
               SELECT 'T. gondii GT1' as term, 
                      'TgondiiGT1' as internal, 
                       1 AS idx FROM dual 
               UNION
               SELECT 'T. gondii RH (chr Ia, Ib)' as term, 
                      'TgondiiRH' as internal, 
                       1 AS idx FROM dual 
               UNION
               SELECT 'T. gondii VEG' as term, 
                      'TgondiiVeg' as internal, 
                       1 AS idx FROM dual 
            ) ORDER BY idx
            </sql>
        </sqlQuery>

        <sqlQuery name="non_nuclear_sequence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
             SELECT * FROM (
               (SELECT 'Apicoplast genome' AS term,
                       '''NC_001799''' AS internal 
                    FROM dual)  )
            </sql>
        </sqlQuery>


        <sqlQuery name="PhyleticIndentMap">
            <column name="internal"/>
            <column name="term"/>
            <sql><![CDATA[
         SELECT internal, term FROM (
 SELECT 'Archaea' AS term, '0' AS internal, 1 AS ord FROM dual
 UNION
   SELECT 'hal' AS term, '1' AS internal, 2 AS ord FROM dual
   UNION
   SELECT 'mja' AS term, '1' AS internal, 3 AS ord FROM dual
   UNION
   SELECT 'neq' AS term, '1' AS internal, 4 AS ord FROM dual
   UNION
   SELECT 'sso' AS term, '1' AS internal, 5 AS ord FROM dual
   UNION
 SELECT 'Bacteria' AS term, '0' AS internal, 6 AS ord FROM dual
 UNION
     SELECT 'aae' AS term, '1' AS internal, 8 AS ord FROM dual
     UNION
     SELECT 'ban' AS term, '1' AS internal, 9 AS ord FROM dual
     UNION
     SELECT 'cpe' AS term, '1' AS internal, 10 AS ord FROM dual
     UNION
     SELECT 'cpn' AS term, '1' AS internal, 11 AS ord FROM dual
     UNION
     SELECT 'cte' AS term, '1' AS internal, 12 AS ord FROM dual
     UNION
     SELECT 'det' AS term, '1' AS internal, 13 AS ord FROM dual
     UNION
     SELECT 'dra' AS term, '1' AS internal, 14 AS ord FROM dual
     UNION
     SELECT 'lmo' AS term, '1' AS internal, 15 AS ord FROM dual
     UNION
     SELECT 'mtu' AS term, '1' AS internal, 16 AS ord FROM dual
     UNION
     SELECT 'rba' AS term, '1' AS internal, 17 AS ord FROM dual
     UNION
     SELECT 'sau' AS term, '1' AS internal, 18 AS ord FROM dual
     UNION
     SELECT 'spn' AS term, '1' AS internal, 19 AS ord FROM dual
     UNION
     SELECT 'syn' AS term, '1' AS internal, 20 AS ord FROM dual
     UNION
     SELECT 'tma' AS term, '1' AS internal, 21 AS ord FROM dual
     UNION
     SELECT 'tpa' AS term, '1' AS internal, 22 AS ord FROM dual
     UNION
   SELECT 'Proteobacteria' AS term, '1' AS internal, 23 AS ord FROM dual
   UNION
     SELECT 'atu' AS term, '2' AS internal, 24 AS ord FROM dual
     UNION
     SELECT 'bsu' AS term, '2' AS internal, 25 AS ord FROM dual
     UNION
     SELECT 'bur' AS term, '2' AS internal, 26 AS ord FROM dual
     UNION
     SELECT 'cbu' AS term, '2' AS internal, 27 AS ord FROM dual
     UNION
     SELECT 'cje' AS term, '2' AS internal, 28 AS ord FROM dual
     UNION
     SELECT 'eco' AS term, '2' AS internal, 29 AS ord FROM dual
     UNION
     SELECT 'ftu' AS term, '2' AS internal, 30 AS ord FROM dual
     UNION
     SELECT 'gsu' AS term, '2' AS internal, 31 AS ord FROM dual
     UNION
     SELECT 'rso' AS term, '2' AS internal, 32 AS ord FROM dual
     UNION
     SELECT 'rty' AS term, '2' AS internal, 33 AS ord FROM dual
     UNION
     SELECT 'sfl' AS term, '2' AS internal, 34 AS ord FROM dual
     UNION
     SELECT 'sty' AS term, '2' AS internal, 35 AS ord FROM dual
     UNION
     SELECT 'vch' AS term, '2' AS internal, 36 AS ord FROM dual
     UNION
     SELECT 'wsu' AS term, '2' AS internal, 37 AS ord FROM dual
     UNION
     SELECT 'ype' AS term, '2' AS internal, 38 AS ord FROM dual
     UNION
 SELECT 'Eukaryota' AS term, '0' AS internal, 39 AS ord FROM dual
 UNION
     SELECT 'ddi' AS term, '1' AS internal, 41 AS ord FROM dual
     UNION
     SELECT 'ehi' AS term, '1' AS internal, 42 AS ord FROM dual
     UNION
     SELECT 'gla' AS term, '1' AS internal, 43 AS ord FROM dual
     UNION
   SELECT 'Alveolates' AS term, '1' AS internal, 52 AS ord FROM dual
   UNION
     SELECT 'Ciliates' AS term, '2' AS internal, 53 AS ord FROM dual
     UNION
       SELECT 'tth' AS term, '3' AS internal, 54 AS ord FROM dual
       UNION
     SELECT 'Apicomplexa' AS term, '2' AS internal, 55 AS ord FROM dual
     UNION
       SELECT 'Coccidia' AS term, '3' AS internal, 56 AS ord FROM dual
       UNION
         SELECT 'cho' AS term, '4' AS internal, 57 AS ord FROM dual
         UNION
         SELECT 'cpa' AS term, '4' AS internal, 58 AS ord FROM dual
         UNION
         SELECT 'tgo' AS term, '4' AS internal, 59 AS ord FROM dual
         UNION
       SELECT 'Haemosporida' AS term, '3' AS internal, 61 AS ord FROM dual
       UNION
         SELECT 'pbe' AS term, '4' AS internal, 62 AS ord FROM dual
         UNION
         SELECT 'pch' AS term, '4' AS internal, 62 AS ord FROM dual
         UNION
         SELECT 'pfa' AS term, '4' AS internal, 64 AS ord FROM dual
         UNION
         SELECT 'pvi' AS term, '4' AS internal, 65 AS ord FROM dual
         UNION
         SELECT 'pyo' AS term, '4' AS internal, 66 AS ord FROM dual
         UNION
         SELECT 'pkn' AS term, '4' AS internal, 67 AS ord FROM dual
         UNION
       SELECT 'Piroplasmida' AS term, '3' AS internal, 68 AS ord FROM dual
       UNION
         SELECT 'the' AS term, '4' AS internal, 69 AS ord FROM dual
         UNION
         SELECT 'tan' AS term, '4' AS internal, 70 AS ord FROM dual
         UNION
   SELECT 'Kinetoplastida' AS term, '1' AS internal, 71 AS ord FROM dual
   UNION
     SELECT 'lma' AS term, '2' AS internal, 80 AS ord FROM dual
     UNION
     SELECT 'tbr' AS term, '2' AS internal, 81 AS ord FROM dual
     UNION
     SELECT 'tcr' AS term, '2' AS internal, 82 AS ord FROM dual
     UNION
   SELECT 'Plants/Algae' AS term, '1' AS internal, 82.1 AS ord FROM dual
   UNION
     SELECT 'ath' AS term, '2' AS internal, 82.2 AS ord FROM dual
     UNION
     SELECT 'cre' AS term, '2' AS internal, 82.3 AS ord FROM dual
     UNION
     SELECT 'cme' AS term, '2' AS internal, 82.4 AS ord FROM dual
     UNION
     SELECT 'gth' AS term, '2' AS internal, 82.5 AS ord FROM dual
     UNION
     SELECT 'osa' AS term, '2' AS internal, 82.6 AS ord FROM dual
     UNION
     SELECT 'ota' AS term, '2' AS internal, 82.7 AS ord FROM dual
     UNION
     SELECT 'tps' AS term, '2' AS internal, 82.8 AS ord FROM dual
     UNION
   SELECT 'Fungi' AS term, '1' AS internal, 83 AS ord FROM dual
   UNION
     SELECT 'ago' AS term, '2' AS internal, 84 AS ord FROM dual
     UNION
     SELECT 'aor' AS term, '2' AS internal, 85 AS ord FROM dual
     UNION
     SELECT 'cgl' AS term, '2' AS internal, 86 AS ord FROM dual
     UNION
     SELECT 'cne' AS term, '2' AS internal, 87 AS ord FROM dual
     UNION
     SELECT 'dha' AS term, '2' AS internal, 88 AS ord FROM dual
     UNION
     SELECT 'ecu' AS term, '2' AS internal, 89 AS ord FROM dual
     UNION
     SELECT 'kla' AS term, '2' AS internal, 90 AS ord FROM dual
     UNION
     SELECT 'ncr' AS term, '2' AS internal, 91 AS ord FROM dual
     UNION
     SELECT 'pha' AS term, '2' AS internal, 92 AS ord FROM dual
     UNION
     SELECT 'sce' AS term, '2' AS internal, 93 AS ord FROM dual
     UNION
     SELECT 'sma' AS term, '2' AS internal, 94 AS ord FROM dual
     UNION
     SELECT 'spo' AS term, '2' AS internal, 95 AS ord FROM dual
     UNION
     SELECT 'yli' AS term, '2' AS internal, 96 AS ord FROM dual
     UNION
   SELECT 'Animals' AS term, '1' AS internal, 97 AS ord FROM dual
   UNION
     SELECT 'Nematodes' AS term, '2' AS internal, 98 AS ord FROM dual
     UNION
       SELECT 'bma' AS term, '3' AS internal, 99 AS ord FROM dual
       UNION
       SELECT 'cel' AS term, '3' AS internal, 100 AS ord FROM dual
       UNION
       SELECT 'cbr' AS term, '3' AS internal, 101 AS ord FROM dual
       UNION
     SELECT 'Arthropoda' AS term, '2' AS internal, 102 AS ord FROM dual
     UNION
       SELECT 'aed' AS term, '3' AS internal, 103 AS ord FROM dual
       UNION
       SELECT 'aga' AS term, '3' AS internal, 104 AS ord FROM dual
       UNION
       SELECT 'ame' AS term, '3' AS internal, 105 AS ord FROM dual
       UNION
       SELECT 'dme' AS term, '3' AS internal, 106 AS ord FROM dual
       UNION
     SELECT 'Vertebrates' AS term, '2' AS internal, 107 AS ord FROM dual
     UNION
       SELECT 'Bony Fish' AS term, '3' AS internal, 108 AS ord FROM dual
       UNION
         SELECT 'cin' AS term, '4' AS internal, 109 AS ord FROM dual
         UNION
         SELECT 'dre' AS term, '4' AS internal, 110 AS ord FROM dual
         UNION
         SELECT 'fru' AS term, '4' AS internal, 111 AS ord FROM dual
         UNION
         SELECT 'tni' AS term, '4' AS internal, 112 AS ord FROM dual
         UNION
       SELECT 'Tetrapoda' AS term, '3' AS internal, 113 AS ord FROM dual
       UNION
         SELECT 'Birds' AS term, '4' AS internal, 114 AS ord FROM dual
         UNION
           SELECT 'gga' AS term, '5' AS internal, 115 AS ord FROM dual
           UNION
         SELECT 'Mammals' AS term, '4' AS internal, 116 AS ord FROM dual
         UNION
             SELECT 'hsa' AS term, '5' AS internal, 117 AS ord FROM dual
             UNION
             SELECT 'mmu' AS term, '5' AS internal, 118 AS ord FROM dual
             UNION
             SELECT 'rno' AS term, '5' AS internal, 119 AS ord FROM dual
)
            ORDER BY ord
]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="PhyleticTermMap">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
 SELECT 'Halobacterium sp. NRC-1' as internal, 'hal' as term FROM dual
   UNION
 SELECT 'Methanococcus jannaschii DSSM 2661' as internal, 'mja' as term FROM dual
   UNION
 SELECT 'Sulfolobus solfataricus P2' as internal, 'sso' as term FROM dual
   UNION
 SELECT 'Nanoarchaeum equitans Kin4-M' as internal, 'neq' as term FROM dual
   UNION
 SELECT 'Aquifex aeolicus VF5' as internal, 'aae' as term FROM dual
   UNION
 SELECT 'Thermotoga maritima MSB8' as internal, 'tma' as term FROM dual
   UNION
 SELECT 'Dehalococcoides ethenogenes 195' as internal, 'det' as term FROM dual
   UNION
 SELECT 'Deinococcus radiodurans R1' as internal, 'dra' as term FROM dual
   UNION
 SELECT 'Treponema pallidum subsp. pallidum str. Nichols' as internal, 'tpa' as term FROM dual
   UNION
 SELECT 'Chlorobium tepidum TLS' as internal, 'cte' as term FROM dual
   UNION
 SELECT 'Rhodopirellula baltica SH_1' as internal, 'rba' as term FROM dual
   UNION
 SELECT 'Chlamydophila pneumoniae CWL029' as internal, 'cpn' as term FROM dual
   UNION
 SELECT 'Synechococcus sp. WH8102' as internal, 'syn' as term FROM dual
   UNION
 SELECT 'Mycobacterium tuberculosis H37Rv' as internal, 'mtu' as term FROM dual
   UNION
 SELECT 'Bacillus anthracis Ames' as internal, 'ban' as term FROM dual
   UNION
 SELECT 'Wolinella succinogenes DSM 1740' as internal, 'wsu' as term FROM dual
   UNION
 SELECT 'Geobacter sulfurreducens PCA' as internal, 'gsu' as term FROM dual
   UNION
 SELECT 'Agrobacterium tumefaciens C58 Uwash' as internal, 'atu' as term FROM dual
   UNION
 SELECT 'Ralstonia solanacearum GMI1000' as internal, 'rso' as term FROM dual
   UNION
 SELECT 'Escherichia coli K12' as internal, 'eco' as term FROM dual
   UNION
 SELECT 'Entamoeba histolytica' as internal, 'ehi' as term FROM dual
   UNION
 SELECT 'Dictyostelium discoideum' as internal, 'ddi' as term FROM dual
   UNION
 SELECT 'Cyanodioschyzon merolae 10D' as internal, 'cme' as term FROM dual
   UNION
 SELECT 'Thalassiosira pseudonana' as internal, 'tps' as term FROM dual
   UNION
 SELECT 'Arabidopsis thaliana' as internal, 'ath' as term FROM dual
   UNION
 SELECT 'Oryza sativa' as internal, 'osa' as term FROM dual
   UNION
 SELECT 'Saccharomyces cerevisiae S288C' as internal, 'sce' as term FROM dual
   UNION
 SELECT 'Schizosaccharomyces pombe' as internal, 'spo' as term FROM dual
   UNION
 SELECT 'Yarrowia lipolytica CLIB99' as internal, 'yli' as term FROM dual
   UNION
 SELECT 'Kluyveromyces lactis CLIB210' as internal, 'kla' as term FROM dual
   UNION
 SELECT 'Debaryomyces hansenii CBS767' as internal, 'dha' as term FROM dual
   UNION
 SELECT 'Candida glabrate CBS138' as internal, 'cgl' as term FROM dual
   UNION
 SELECT 'Encephalitozoon cuniculi' as internal, 'ecu' as term FROM dual
   UNION
 SELECT 'Cryptococcus neoformans' as internal, 'cne' as term FROM dual
   UNION
 SELECT 'Ashbya gossypii' as internal, 'ago' as term FROM dual
   UNION
 SELECT 'Neurospora crassa OR74A' as internal, 'ncr' as term FROM dual
   UNION
 SELECT 'Caenorhabditis elegans' as internal, 'cel' as term FROM dual
   UNION
 SELECT 'Caenorhabditis briggsae' as internal, 'cbr' as term FROM dual
   UNION
 SELECT 'Drosophila melanogaster' as internal, 'dme' as term FROM dual
   UNION
 SELECT 'Anopheles gambiae PEST' as internal, 'aga' as term FROM dual
   UNION
 SELECT 'Theileria parva' as internal, 'the' as term FROM dual
   UNION
 SELECT 'Toxoplasma gondii' as internal, 'tgo' as term FROM dual
   UNION
 SELECT 'Cryptosporidium parvum Iowa (Type2)' as internal, 'cpa' as term FROM dual
   UNION
 SELECT 'Cryptosporidium hominis TU502 (Type 1)' as internal, 'cho' as term FROM dual
   UNION
 SELECT 'Plasmodium falciparum 3D7' as internal, 'pfa' as term FROM dual
   UNION
 SELECT 'Plasmodium yoelii 17XNL' as internal, 'pyo' as term FROM dual
   UNION
 SELECT 'Plasmodium knowlesi' as internal, 'pkn' as term FROM dual
   UNION
 SELECT 'Plasmodium vivax' as internal, 'pvi' as term FROM dual
   UNION
 SELECT 'Plasmodium berghei' as internal, 'pbe' as term FROM dual
   UNION
 SELECT 'Plasmodium chabaudi' as internal, 'pch' as term FROM dual
   UNION
 SELECT 'Ciona intestinalis' as internal, 'cin' as term FROM dual
   UNION
 SELECT 'Fugu rubripes' as internal, 'fru' as term FROM dual
   UNION
 SELECT 'Tetraodon nigroviridis' as internal, 'tni' as term FROM dual
   UNION
 SELECT 'Danio rerio' as internal, 'dre' as term FROM dual
   UNION
 SELECT 'Gallus gallus' as internal, 'gga' as term FROM dual
   UNION
 SELECT 'Mus musculus' as internal, 'mmu' as term FROM dual
   UNION
 SELECT 'Rattus norvegicus' as internal, 'rno' as term FROM dual
   UNION
 SELECT 'Homo sapiens' as internal, 'hsa' as term FROM dual
   UNION
 SELECT 'Aedes aegypti' as internal, 'aed' as term FROM dual
   UNION
 SELECT 'Apis mellifera' as internal, 'ame' as term FROM dual
   UNION
 SELECT 'Aspergillus oryzae' as internal, 'aor' as term FROM dual
   UNION
 SELECT 'Brugia malayi' as internal, 'bma' as term FROM dual
   UNION
 SELECT 'Brucella suis 1330' as internal, 'bsu' as term FROM dual
   UNION
 SELECT 'Burkholderia mallei ATCC 23344' as internal, 'bur' as term FROM dual
   UNION
 SELECT 'Coxiella burnetii RSA 493' as internal, 'cbu' as term FROM dual
   UNION
 SELECT 'Campylobacter jejuni subsp. jejuni NCTC 11168' as internal, 'cje' as term FROM dual
   UNION
 SELECT 'Clostridium perfringens str. 13' as internal, 'cpe' as term FROM dual
   UNION
 SELECT 'Chlamydomonas reinhardtii' as internal, 'cre' as term FROM dual
   UNION
 SELECT 'Francisella tularensis subsp. tularensis SCHU S4' as internal, 'ftu' as term FROM dual
   UNION
 SELECT 'Giardia lamblia ATCC 50803' as internal, 'gla' as term FROM dual
   UNION
 SELECT 'Guillardia theta' as internal, 'gth' as term FROM dual
   UNION
 SELECT 'Leishmania major' as internal, 'lma' as term FROM dual
   UNION
 SELECT 'Listeria monocytogenes EGD-e' as internal, 'lmo' as term FROM dual
   UNION
 SELECT 'Ostreococcus tauri' as internal, 'ota' as term FROM dual
   UNION
 SELECT 'Phanerochaete chrysosporium' as internal, 'pha' as term FROM dual
   UNION
 SELECT 'Rickettsia typhi str. Wilmington' as internal, 'rty' as term FROM dual
   UNION
 SELECT 'Staphylococcus aureus subsp. aureus Mu50' as internal, 'sau' as term FROM dual
   UNION
 SELECT 'Shigella flexneri 2a str. 301' as internal, 'sfl' as term FROM dual
   UNION
 SELECT 'Schistosoma mansoni' as internal, 'sma' as term FROM dual
   UNION
 SELECT 'Streptococcus pneumoniae TIGR4' as internal, 'spn' as term FROM dual
   UNION
 SELECT 'Salmonella enterica subsp. enterica serovar Typhi str. CT18' as internal, 'sty' as term FROM dual
   UNION
 SELECT 'Theileria annulata' as internal, 'tan' as term FROM dual
   UNION
 SELECT 'Trypanosoma brucei' as internal, 'tbr' as term FROM dual
   UNION
 SELECT 'Trypanosoma cruzi' as internal, 'tcr' as term FROM dual
   UNION
 SELECT 'Tetrahymena thermophila' as internal, 'tth' as term FROM dual
   UNION
 SELECT 'Vibrio cholerae O1 biovar eltor str. N16961' as internal, 'vch' as term FROM dual
   UNION
 SELECT 'Yersinia pestis CO92' as internal, 'ype' as term FROM dual)
            </sql>
        </sqlQuery>

        <sqlQuery name="MotifDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM
               (SELECT 'Tgondii/TgondiiAnnotatedProteins_toxoDb-4.1.fasta' AS internal,
                       'T. gondii annotated proteins' AS term,
                       1 AS idx FROM dual
		)
            ORDER BY idx
            </sql>
        </sqlQuery>

        <sqlQuery name="MotifOrfDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM
               (SELECT 'Tgondii/TgondiiOrfs_toxoDb-4.1.fasta' AS internal,
                       'T. gondii ORFs' AS term,
                       1 AS idx FROM dual
		)
            ORDER BY idx
            </sql>
        </sqlQuery>

        <sqlQuery name="CaseIndependence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      '-i' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      ' ' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="WholeWords">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      'true' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      'false' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="TextSearchDatasets">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Gene product' AS term,
                      'ToxoDB_product.txt' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'Gene notes' AS term,
                      'ToxoDB_notes.txt' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'User comments' AS term,
                      'ToxoDB_comments.txt' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'Protein domain names and descriptions' AS term,
                      'ToxoDB_interpro.txt' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT 'Similar proteins (BLAST hits v. NRDB)' AS term,
                      'ToxoDB_blast.txt' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT 'EC descriptions' AS term,
                      'ToxoDB_ec.txt' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT 'GO terms and definitions' AS term,
                      'ToxoDB_go.txt' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT 'Metabolic pathway names and descriptions' AS term,
                      'ToxoDB_metpaths.txt' AS internal,
                      7 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="DomainDatabase">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT DISTINCT ed.name AS term,
                            edr.external_database_release_id AS internal
            FROM sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE dr.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND dr.db_ref_id IN
                  (SELECT draf.db_ref_id
                   FROM dots.DomainFeature df, dots.DbRefAaFeature draf,
                        core.AlgorithmInvocation ainv,
                        core.AlgorithmImplementation aimp
                   WHERE df.aa_feature_id = draf.aa_feature_id
                     AND df.row_alg_invocation_id = ainv.algorithm_invocation_id
                     AND ainv.algorithm_implementation_id
                         = aimp.algorithm_implementation_id
                     AND aimp.executable
                         = 'ApiCommonData::Load::Plugin::InsertInterproscanResults')
            UNION
              SELECT ' Choose one:' AS term, -1 AS internal
              FROM dual
            ORDER BY term
            </sql>
        </sqlQuery>

        <!-- sqlQuery name="DomainAccession">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT DISTINCT dr.primary_identifier AS internal,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS term
                FROM dots.DbRefAaFeature draf, sres.DbRef dr
                WHERE draf.db_ref_id = dr.db_ref_id
            </sql>
        </sqlQuery -->


        <sqlQuery name="ExprnSample">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
	      SELECT 'RH (Type I) in High Glucose  vs. RH (TypeI) with No Glucose' AS term, 
	           'RH (High Glucose) - RMA Quantifications vs. RH (No Glucose) - RMA Quantifications' AS internal,
		   1 as idx FROM dual
              UNION
              SELECT 'Prugniaud (Type II)  vs.  VEG (Type III)' AS term, 
	           'Pru - RMA Quantifications vs. VEG - RMA Quantifications' AS internal,
		   4 as idx FROM dual
              UNION
              SELECT 'Prugniaud (Type II)  vs.  RH (Type I)' AS term, 
	           'Pru - RMA Quantifications vs. RH - RMA Quantifications' AS internal, 
		   2 as idx FROM dual
              UNION
              SELECT 'RH (Type I)  vs.  VEG (Type III)' AS term, 
	           'RH - RMA Quantifications vs. VEG - RMA Quantifications' AS internal, 
		   3 as idx FROM dual
            ) 
            ORDER BY idx
            </sql>
        </sqlQuery>


        <sqlQuery name="regulated_dir">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'up-regulated' as term, '' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'down-regulated' as term, '-' as internal, 2 as idx
                FROM dual
            UNION
                SELECT 'either' as term, 'abs' as internal, 3 as idx
                FROM dual
            ) 
            ORDER BY idx
           </sql>
        </sqlQuery>

        <sqlQuery name="Sample">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
	      SELECT 'RH (Type I)' AS term, 1 as idx,
	              'RH - RMA Quantifications' AS internal FROM dual
              UNION
              SELECT 'Prugniaud (Type II)' AS term, 2 as idx,
	             'Pru - RMA Quantifications' AS internal FROM dual
              UNION
              SELECT 'VEG (Type III)' AS term, 3 as idx,
	             'VEG - RMA Quantifications' AS internal FROM dual
              UNION
              SELECT 'RH (Type I) in Glucose' AS term, 4 as idx,
	             'RH (High Glucose) - RMA Quantifications' AS internal FROM dual
              UNION
              SELECT 'RH (Type I) with No Glucose' AS term, 5 as idx,
	             'RH (No Glucose) - RMA Quantifications' AS internal FROM dual
	    ) 
	    ORDER BY idx
            </sql>
        </sqlQuery>


      <sqlQuery name="MsAssay">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
           <![CDATA[
            SELECT * FROM (
              SELECT '''Wastling 1-D SDS PAGE''' AS internal,
                     '1-D SDS PAGE<sup>1</sup>' AS term, 1 as idx FROM dual
              UNION
              SELECT '''Wastling 1-D SDS PAGE Soluble''' AS internal,
                     '1-D SDS PAGE Soluble Fraction<sup>1</sup>' AS term, 2 as idx FROM dual
              UNION
              SELECT '''Wastling 1-D SDS PAGE Insoluble''' AS internal,
                     '1-D SDS PAGE Insoluble Fraction<sup>1</sup>' AS term, 3 as idx FROM dual
              UNION
              SELECT '''Wastling MudPIT Insoluble''' AS internal,
                     'MudPIT Insoluble Fraction<sup>1</sup>' AS term, 4 as idx FROM dual
              UNION
              SELECT '''Wastling MudPIT Soluble''' AS internal,
                     'MudPIT Soluble Fraction<sup>1</sup>' AS term, 5 as idx FROM dual
              UNION
              SELECT '''Wastling Rhoptry''' AS internal,
                     'Rhoptry Fraction<sup>1</sup>' AS term, 6 as idx FROM dual
              UNION
              SELECT '''Murray Conoid-enriched Fraction''' AS internal,
                     'Conoid-enriched Fraction<sup>2</sup>' AS term, 7 as idx FROM dual
              UNION
              SELECT '''Murray Conoid-depleted Fraction''' AS internal,
                     'Conoid-depleted Fraction<sup>2</sup>' AS term, 8 as idx FROM dual
	    ) 
	    ORDER BY idx
          ]]>
            </sql>
        </sqlQuery>


        <sqlQuery name="OrganismWithSequences">
            <column name="internal"/>
            <column name="term"/>
             <sql>
                SELECT orgs.term, orgs.internal
                FROM (SELECT tn.name AS term, t.taxon_id AS internal
                      FROM sres.TaxonName tn, sres.taxon t
                      WHERE tn.name_class='scientific name'
                        AND t.taxon_id = tn.taxon_id
                        AND t.rank = 'species'
                        AND t.taxon_id in
                            (SELECT taxon_id
                             FROM sres.taxon
                             CONNECT BY taxon_id = prior parent_id
                             START WITH taxon_id IN
                             (SELECT ens.taxon_id
                              FROM dots.ExternalNaSequence ens))) orgs,
                     (SELECT 'Toxoplasma gondii' AS term, 1 as rank from dual)
                        partial_order
                  WHERE orgs.term = partial_order.term(+)
                  ORDER BY partial_order.rank
            </sql>
        </sqlQuery>

     </querySet>

<!-- ////////// END VOCABULARY //////////// -->

<!-- //////////  TABLE QUERIES //////////// -->
    <querySet name="GeneTables">

         <sqlQuery name="SNPs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="strain_a_query"/>
            <column name="strain_b_query"/>
            <column name="strain_a_disp"/>
            <column name="strain_b_disp"/>
            <column name="gene_source_id"/>
            <column name="num_non_synonymous"/>
            <column name="num_synonymous"/>
            <column name="num_nonsense"/>
            <column name="num_non_coding"/>
            <column name="cds_snp_density"/>
            <column name="num_total"/>

            <sql>
            <![CDATA[
              SELECT  strain_a as strain_a_disp, 
              strain_b as strain_b_disp, 
              CASE WHEN strain_a = 'ME49' THEN 'ME49 (type II)' 
              WHEN strain_a = 'RH' THEN 'RH'
              WHEN strain_a = 'VEG' THEN 'VEG (type III)'
              WHEN strain_a = 'GT1' THEN 'GT1 (type I)' END as strain_a_query,
              CASE WHEN strain_b = 'ME49' THEN 'ME49 (type II)' 
              WHEN strain_b = 'RH' THEN 'RH'
              WHEN strain_b = 'VEG' THEN 'VEG (type III)'
              WHEN strain_b = 'GT1' THEN 'GT1 (type I)' END as strain_b_query,
              cds_length,source_id as gene_source_id,                
              round(non_synonymous / CASE synonymous WHEN 0 THEN 1  ELSE synonymous end, 2) as dn_ds_ratio,              
              non_synonymous as num_non_synonymous,synonymous as num_synonymous,              
              stop as num_nonsense,non_coding as num_non_coding,total as num_total,              
              round(((non_synonymous + synonymous) / cds_length * 1000),2) as cds_snp_density             
              FROM apidb.SnpSummary ss
              WHERE ss.source_id = '$$primaryKey$$' 
              ORDER BY num_total desc
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="EcNumber" displayName="EC Numbers" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="ec_number" />
            <column name="source"/>
            <column name="ec_description"/>
            <column name="expasy_url" />
            <sql>
            <![CDATA[
            SELECT distinct asec.evidence_code AS source, ec.ec_number,
                ec.description as ec_description,
                'http://us.expasy.org/cgi-bin/enzyme-search-ec?field1='
                ||ec_number_1
                || decode(ec_number_2, null, null,
                          chr(38) || 'field2='||ec_number_2)
                || decode(ec_number_3, null, null,
                          chr(38) || 'field3='||ec_number_3)
                || decode(ec_number_4, null, null,
                          chr(38) || 'field4='||ec_number_4)
                as expasy_url
         FROM dots.GeneFeature gf,
              dots.translatedAaFeature taf, dots.Transcript t,
              dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
         WHERE gf.source_id='$$primaryKey$$'
           AND t.parent_id = gf.na_feature_id
           AND taf.na_feature_id = t.na_feature_id
           AND asec.aa_sequence_id = taf.aa_sequence_id
           AND ec.enzyme_class_id = asec.enzyme_class_id
            ]]>
            </sql>
        </sqlQuery>

        <!-- defunct; replacement below
         sqlQuery name="GoTerms" displayName="GO Terms" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="is_not"/>
            <column name="go_id"/>
            <column name="ontology"/>
            <column name="go_term_name"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="lowercase_evidence_code"/>
            <sql>
            <![CDATA[
            SELECT  decode(ga.is_not, 0, '', 1, 'not', ga.is_not) as is_not,
                    gt.go_id, o.ontology, gt.name AS go_term_name, 
                    gail.name AS source, gec.name as evidence_code,
                    lower(gts.evidence_code) AS lowercase_evidence_code
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.GoAssociation ga,
                 sres.GoTerm gt, dots.GoAssociationInstance gai,
                 dots.GoAssociationInstanceLoe gail,
                 dots.GoAssocInstEvidCode gaiec, sres.GoEvidenceCode gec,
                 (SELECT gr.child_term_id AS go_term_id,
                         DECODE(gp.name, 'biological_process', 'P', 
                                'molecular_function', 'F', 'cellular_component', 'C')
                         AS ontology
                  FROM sres.GoRelationship gr, sres.GoTerm gp
                  WHERE gr.parent_term_id = gp.go_term_id
                    AND gp.go_id in ('GO:0008150','GO:0003674','GO:0005575')) o
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = ga.row_id
              AND ga.table_id = (SELECT table_id
                                 FROM core.TableInfo
                                 WHERE name = 'TranslatedAASequence')
              AND ga.go_term_id = gt.go_term_id
              AND ga.go_association_id = gai.go_association_id
              AND gai.go_assoc_inst_loe_id = gail.go_assoc_inst_loe_id
              AND gai.go_association_instance_id
                  = gaiec.go_association_instance_id
              AND gaiec.go_evidence_code_id = gec.go_evidence_code_id
              AND gt.go_term_id = o.go_term_id(+)
            ORDER BY o.ontology, gt.go_id
            ]]>
            </sql>
        </sqlQuery  -->

        <sqlQuery name="GoTerms" displayName="GO Terms" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="is_not"/>
            <column name="go_id"/>
            <column name="ontology"/>
            <column name="go_term_name"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="lowercase_evidence_code"/>
            <sql>
            <![CDATA[
            SELECT gts.is_not, gts.go_id, gts.ontology, gts.go_term_name, 
                    gts.source, gts.evidence_code,
                    lower(gts.evidence_code) AS lowercase_evidence_code
            FROM apidb.GoTermSummary gts
            WHERE gts.source_id = '$$primaryKey$$'
            ORDER BY gts.ontology, gts.go_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="PfamDomains" displayName="Pfam Domains"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="definition"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="accession" />
            <column name="accession_base"/>
            <sql>
            <![CDATA[
            SELECT pe.definition, pe.accession,
                   SUBSTR(pe.accession, 1, INSTR(pe.accession, '.', 1, 1) -1)
                       AS accession_base,
                   al.start_min, al.end_max
            FROM dots.GeneFeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.DomainFeature df,
                 dots.AaLocation al, dots.PfamEntry pe
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = t.parent_id
              AND t.na_feature_id = taf.na_feature_id
              AND taf.aa_sequence_id = df.aa_sequence_id
              AND df.aa_feature_id = al.aa_feature_id
              AND df.pfam_entry_id = pe.pfam_entry_id
              AND df.e_value <= 0.05
              GROUP BY pe.definition, pe.accession, al.start_min, al.end_max
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Orthologs" displayName="Toxoplasma Orthologs"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" />
            <column name="product"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT gf2.source_id, tn.name as species, gf2.product
            FROM dots.GeneFeature gf1, dots.SequenceSequenceGroup ssg1,
                 dots.SequenceSequenceGroup ssg2, dots.GeneFeature gf2,
                 dots.VirtualSequence ens, core.TableInfo ti,
                 sres.TaxonName tn
            WHERE gf1.source_id = '$$primaryKey$$'
              AND gf1.na_feature_id = ssg1.sequence_id
              AND ssg1.source_table_id = ti.table_id
              AND ssg1.sequence_group_id = ssg2.sequence_group_id
              AND ssg2.source_table_id = ti.table_id
              AND ssg2.sequence_id = gf2.na_feature_id
              AND gf2.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id = tn.taxon_id
              AND tn.name_class = 'scientific name'
              AND ti.name = 'GeneFeature'
              AND gf2.source_id != gf1.source_id
            ORDER BY tn.name, gf2.source_id
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="MetabolicPathways" displayName="Metabolic Pathways"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="pathway_id"/>
            <column name="pathway_name"/>
            <column name="activity"/>
            <sql>
            <![CDATA[
	    SELECT DISTINCT dr.primary_identifier AS pathway_id,
                   decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier, dr.lowercase_secondary_identifier) AS pathway_name,
                   dr.remark as activity
	    FROM dots.GeneFeature gf,dots.Transcript t, dots.DbRefaaFeature draf, 
	         sres.DbRef dr, dots.TranslatedAaFeature taf,
		 sres.ExternalDatabaseRelease edr,
		 sres.ExternalDatabase ed
            WHERE gf.source_id = '$$primaryKey$$'
	    AND gf.na_feature_id = t.parent_id
	    AND t.na_feature_id = taf.na_feature_id
            AND taf.aa_feature_id = draf.aa_feature_id
            AND draf.db_ref_id = dr.db_ref_id
	    AND dr.external_database_release_id = edr.external_database_release_id
	    AND edr.external_database_id = ed.external_database_id
	    AND ed.name = 'Links to Pathway Maps'
	    ORDER BY dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="TaskComments" displayName="TASK Comments"
                  isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_string"/>
            <sql>
			<!--
            <![CDATA[
            SELECT dbms_lob.substr(comment_string, 1000) AS comment_string
            FROM dots.GeneFeature gf, dots.NaFeatureComment nfc
            WHERE gf.source_id = '$$primaryKey$$'
              AND gf.na_feature_id = nfc.na_feature_id
            ORDER BY dbms_lob.substr(comment_string, 1000)
            ]]>
			-->
	

			<![CDATA[
			SELECT content AS comment_string
			FROM @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c
			WHERE c.stable_id = '$$primaryKey$$'
				AND c.review_status_id = 'task'
			]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="UserComments" displayName="User Comments" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_id"/>
            <column name="stable_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id, c.stable_id,
                     NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.GeneFeature gf
              WHERE u.email = c.email
                    AND c.comment_target_id = 'gene'
                    AND c.stable_id = gf.source_id
                    AND gf.source_id = '$$primaryKey$$'
					AND c.review_status_id != 'rejected'
					AND c.review_status_id != 'task'
              ORDER BY c.comment_date DESC
            ]]>
            </sql>
        </sqlQuery>

        <!--
            <sqlQuery name="Epitopes"
            isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
            SELECT dr.primary_identifier AS iedb_id,
            al.start_min||'-'||al.end_max AS location,
            mas.sequence, tn.name,
            DECODE(ef.type, 'Not Full Set Not on Blast Hit', 'Low',
            'Not Full Set On Blast Hit', 'Medium',
            'Full Set Not on Blast Hit', 'Medium',
            'Full Set On Blast Hit', 'High',
            'unknown epitope type') AS confidence
            FROM dots.GeneFeature gf, dots.Transcript t,
            dots.TranslatedAaFeature taf, dots.MotifAaSequence mas,
            dots.TranslatedAaSequence tas, dots.EpitopeFeature ef,
            dots.AaLocation al, dots.AaSequenceDbRef asdr,
            sres.DbRef dr, sres.ExternalDatabaseRelease edr,
            sres.ExternalDatabase ed, Sres.TaxonName tn
            WHERE gf.source_id = '$$primaryKey$$'
            AND t.parent_id = gf.na_feature_id
            AND taf.na_feature_id = t.na_feature_id
            AND taf.aa_sequence_id = tas.aa_sequence_id
            AND tas.aa_sequence_id = ef.aa_sequence_id
            AND ef.aa_feature_id = al.aa_feature_id
            AND ef.motif_aa_sequence_id = mas.aa_sequence_id
            AND mas.aa_sequence_id = asdr.aa_sequence_id
            AND asdr.db_ref_id = dr.db_ref_id
            AND mas.taxon_id = tn.taxon_id
            AND tn.name_class = 'scientific name'
            AND ef.external_database_release_id
            = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'Links to IEDB epitopes'
            ORDER BY DECODE(ef.type, 'Not Full Set Not on Blast Hit', 1,
            'Not Full Set On Blast Hit', 2,
            'Full Set Not on Blast Hit', 2,
            'Full Set On Blast Hit', 3,
            4) desc,start_min, end_max
            ]]>
            </sql>
            </sqlQuery>
        -->
        
        <sqlQuery name="Epitopes"
            isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
                <![CDATA[
                SELECT es.iedb_id, es.location, es.sequence, es.name,
                       es.confidence
                FROM apidb.EpitopeSummary es
                WHERE es.source_id = '$$primaryKey$$'
                ORDER BY DECODE(es.confidence, 'Low', 1,
                              'Medium', 2,
                              'High', 3,
                              4) desc,es.location
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="Notes" displayName="Notes" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_string"/>
            <sql>
            <![CDATA[
            SELECT nfc.comment_string
            FROM dots.naFeatureComment nfc, dots.GeneFeature nf
            WHERE nf.source_id='$$primaryKey$$'
              AND nf.na_feature_id = nfc.na_feature_id
            ]]>
            </sql>
        </sqlQuery>

    </querySet>

    <querySet name="SequenceAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="source_id" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="a_count" sortingTable="apidb.SequenceAttributes"/>
            <column name="c_count" sortingTable="apidb.SequenceAttributes"/>
            <column name="g_count" sortingTable="apidb.SequenceAttributes"/>
            <column name="t_count" sortingTable="apidb.SequenceAttributes"/>
            <column name="other_count" sortingTable="apidb.SequenceAttributes"/>
            <column name="length" sortingTable="apidb.SequenceAttributes"/>
            <column name="at_percent" sortingTable="apidb.SequenceAttributes"/>
            <column name="externalDbName" sortingColumn="database_name"
                    sortingTable="apidb.SequenceAttributes"/>
            <column name="externalDbVersion" sortingColumn="database_version"
                    sortingTable="apidb.SequenceAttributes"/>
            <column name="organism" sortingTable="apidb.SequenceAttributes"/>
            <sql>
            <![CDATA[
                SELECT bfmv.source_id, bfmv.a_count,
                       bfmv.c_count, bfmv.g_count, bfmv.t_count,
                       bfmv.other_count, bfmv.length, bfmv.at_percent,
                       bfmv.organism, bfmv.database_name AS externalDbName,
                       bfmv.database_version AS externalDbVersion
                FROM apidb.SequenceAttributes bfmv
                WHERE bfmv.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

    </querySet>

    <querySet name="SequenceTables">

        <sqlQuery name="Centromere" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="start_min" />
            <column name="end_max" />
            <sql>
            <![CDATA[
            SELECT nl.start_min, nl.end_max
            FROM dots.VirtualSequence ens, dots.Miscellaneous m, dots.NaLocation nl,
                 sres.SequenceOntology so
            WHERE ens.source_id = '$$primaryKey$$'
              AND ens.na_sequence_id = m.na_sequence_id
              AND m.na_feature_id = nl.na_feature_id
              AND m.sequence_ontology_id = so.sequence_ontology_id
              AND so.term_name = 'centromere'
             ]]>
           </sql>
        </sqlQuery>

       <sqlQuery name="SequenceComments" displayName="User Comments" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="comment_id"/>
            <column name="stable_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT c.comment_id, c.stable_id,
                     NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,
                     c.comment_date
              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   dots.VirtualSequence vs
              WHERE u.email = c.email
                    AND c.comment_target_id = 'genome'
					AND c.review_status_id != 'rejected'
					AND c.review_status_id != 'task'
                    AND c.stable_id = vs.source_id
                    AND vs.source_id = '$$primaryKey$$'
            ]]>
            </sql>
        </sqlQuery>
    </querySet>


    <querySet name="EstTables">

        <!-- EstTables.AlignmentInfo -->
        <sqlQuery name="AlignmentInfo" displayName="Alignments to &lt;i&gt;T. gondii&lt;/i&gt; chromosomes/scaffolds" isCacheable='true'>
            <paramRef ref="params.primaryKey"/> 
            <column name="accession" />
            <column name="sequence_id" />
            <column name="target_start" />
            <column name="target_end" />
            <column name="context_start" />
            <column name="context_end" />
            <column name="percent_identity" />
            <column name="is_consistent" />
            <column name="is_best_alignment" />
            <column name="is_reversed" />
            <sql>
            <![CDATA[           
             SELECT enas.source_id as sequence_id,
                   e.accession,
                   blat.target_start,
                   blat.target_end,
                   blat.target_start - 10000 as context_start,
                   blat.target_end + 10000 as context_end,
                   decode(blat.is_best_alignment,0,'No',1,'Yes',blat.is_best_alignment) as is_best_alignment, 
                   decode(blat.is_consistent,0,'No',1,'Yes',blat.is_consistent) as is_consistent, 
                   decode(blat.is_reversed,0,'+',1,'-',blat.is_reversed) as is_reversed, 
                   blat.percent_identity
            FROM   dots.blatalignment blat,
                   dots.est e,
                   dots.virtualsequence enas
            WHERE  blat.query_na_sequence_id = e.na_sequence_id
              AND  blat.target_na_sequence_id = enas.na_sequence_id
              AND  e.accession = '$$primaryKey$$'
            ORDER BY blat.is_best_alignment desc, blat.is_consistent desc, blat.percent_identity desc
            ]]>
            </sql>
        </sqlQuery>
    </querySet>


    <querySet name="ProteinAttributes">

        <sqlQuery name="ProteinAttrs" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="product" />
            <sql>
            <![CDATA[
            SELECT product
            FROM dots.GeneFeature gf
            WHERE gf.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Sequence" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="sequence"/>
            <sql>
            <![CDATA[
            SELECT sequence
            FROM dots.TranslatedAaSequence tas
            WHERE tas.source_id = '$$primaryKey$$'
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="Organism" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <column name="organism"/>
            <column name="genus_species"/>
            <sql>
            <![CDATA[
               SELECT tn.name as genus_species,
                     SUBSTR(tn.name, 1, 1) || '. '
                     || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) as organism
               FROM dots.TranslatedAaSequence tas, dots.TranslatedAaFeature taf,
                    dots.Transcript t, dots.GeneFeature gf,
                    dots.NaSequence s, sres.TaxonName tn
               WHERE tas.source_id = '$$primaryKey$$' 
                 AND tas.aa_sequence_id = taf.aa_sequence_id
                 AND taf.na_feature_id = t.na_feature_id
                 AND t.parent_id = gf.na_feature_id
                 AND gf.na_sequence_id = s.na_sequence_id
                 AND s.taxon_id = tn.taxon_id
                 AND tn.name_class = 'scientific name'
            ]]>
            </sql>
        </sqlQuery>

    </querySet>

    <querySet name="ProteinTables">

        <sqlQuery name="TransmembraneDomains">
            <paramRef ref="params.primaryKey"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <sql>
          SELECT al.start_min, al.end_max
          FROM dots.TranslatedAaSequence tas, dots.TransmembraneAaFeature taf,
               dots.AaLocation al
          WHERE tas.source_id='$$primaryKey$$'
            AND tas.aa_sequence_id = taf.aa_sequence_id
            AND taf.aa_feature_id = al.aa_feature_id
          ORDER BY al.start_min
            </sql>
        </sqlQuery>

    </querySet>

    <querySet name="UtilityTables">
        <sqlQuery name="InterproTermList" isCacheable="true">
            <paramRef ref="params.primaryKey"/>
            <column name="accession"/>
            <column name="name"/>
            <column name="description"/>
            <sql>
                SELECT DISTINCT dr.primary_identifier AS accession,
                                dr.primary_identifier AS name,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS description
                FROM dots.DbRefAaFeature draf, sres.DbRef dr,
                     sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
                WHERE draf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = '$$primaryKey$$'
            </sql>
        </sqlQuery>
    </querySet>

	<querySet name="UserCommentTables">
	        <sqlQuery name="GeneComments">
	            <paramRef ref="params.primaryKey"/>
	            <column name="comment_id"/>
	            <column name="headline"/>
	            <column name="content"/>
	            <column name="location_string"/>
	            <column name="user_name"/>
	            <column name="organization"/>
	            <column name="comment_date"/>
	            <column name="project_name_version"/>
	            <column name="review_status_id"/>
	            <sql>
	            <![CDATA[
	              SELECT DISTINCT
	                    c.comment_id,
	                    NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
	                    c.content,
	                    c.location_string,
	                    (u.first_name || ' ' || u.last_name) AS user_name,
	                    u.organization,
	                    c.comment_date,
	                    (c.project_name || ' ' || c.project_version) as project_name_version,
	                    c.review_status_id
	              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
	                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
	                   dots.GeneFeature gf
	              WHERE u.email = c.email
	                    AND c.comment_target_id='gene'
	                    AND c.stable_id = gf.source_id
	                    AND gf.source_id = '$$primaryKey$$'
	                    AND c.review_status_id != 'rejected'
						AND c.review_status_id != 'task'
	              ORDER BY c.comment_date DESC
	              ]]>
	            </sql>
	        </sqlQuery>

	        <sqlQuery name="SequenceComments">
	            <paramRef ref="params.primaryKey"/>
	            <column name="comment_id"/>
	            <column name="headline"/>
	            <column name="content"/>
	            <column name="location_string"/>
	            <column name="user_name"/>
	            <column name="organization"/>
	            <column name="comment_date"/>
	            <column name="project_name_version"/>
	            <column name="review_status_id"/>
	            <sql>
	            <![CDATA[
	              SELECT DISTINCT
	                    c.comment_id,
	                    NVL(c.headline, SUBSTR(c.content,0,20) || '...') AS headline,
	                    c.content,
	                    c.location_string,
	                    (u.first_name || ' ' || u.last_name) AS user_name,
	                    u.organization,
	                    c.comment_date,
	                    (c.project_name || ' ' || c.project_version) as project_name_version,
	                    c.review_status_id
	              FROM @LOGIN_SCHEMA@users@LOGIN_DBLINK@ u,
	                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
	                   dots.VirtualSequence vs
	              WHERE u.email = c.email
	                    AND c.comment_target_id='genome'
	                    AND c.stable_id = vs.source_id
	                    AND vs.source_id = '$$primaryKey$$'
	                    AND c.review_status_id != 'rejected'
						AND c.review_status_id != 'task'
	              ORDER BY c.comment_date DESC
	              ]]>
	            </sql>
	        </sqlQuery>
	    </querySet>

<!-- //////////  END TABLE QUERIES //////////// -->



<!-- //////////  PARAMETERS //////////// -->

    <!-- parameters used by queries -->

    <paramSet name="params">

        <stringParam name="primaryKey"
                     prompt="Primary Key"
                     help="primary key"/>

        <stringParam name="locus_tag"
                     prompt="Gene ID"
                     help="Gene ID"
                     sample="49.m00014,65.m01111,100.m00002"
                     substitute="yes"
                     default="49.m00014"/>

        <datasetParam name="ds_gene_ids"
                     prompt="Gene id input set"
                     help="input a comma delimited set of gene ids, or upload a file"
                     default="49.m00014,65.m01111"/>

        <stringParam name="ec_number_pattern"
                     prompt="EC Number"
                     help="Enzyme Commission numbers describe enzymes hierarchically by the class of rections they catalize."
                     sample="(Examples: 2.7.7.6, 3.5.1.31"
                     substitute="yes"
                     default="2.7.7.-"/>

        <!-- stringParam name="keyword"
                     prompt="Keyword"
                     help="Enter a keyword, typically a word associated with an annotated gene name. For Example, you can enter the word 'reductase' or the word 'actin'. Searches of multiple words e.g. 'Reductase AND Actin' are NOT permitted.  Wild card searches e.g. 'red*' are permitted. The wild card can span several words. 'red*ase' will find 'reductase' and 'oxidoreductase, putative'. The search is case-insensitive, e.g. both ACTIN and actin will work."
                     sample="(Example: triphosphatase, proline)"
                     substitute="yes"
                     default="triphosphatase"/ -->

        <stringParam name="num_exons_gte"
                     prompt="Exon Count >="
                     help="Which &#60;i&#62; Toxoplasma gondii &#60;/i&#62; genes are annotated as containing introns? One easy way to do this search is to look for genes
with more
than one annotated exon. Enter a minimum of exons you would like to search for as an integer, e.g. '3'."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>

        <stringParam name="num_exons_lte"
                     prompt="Exon Count &lt;="
                     help="Enter a maximum number of exons you would like to search for as an integer, e.g. '3'."
                     sample="(Example: 12)"
                     substitute="yes"
                     default="20"/>

        <stringParam name="bp_overlap_gte"
                     prompt="Base Overlap >="
                     help="Overlap of expressed sequence tag (EST) alignments with annotated genes is a useful approach to verify gene predictions. In general, 
the specificity of this evidence is proportional to the overlap length." 
                     sample="(Example: 100)"
                     substitute="yes"
                     default="100"/>


        <flatVocabParam name="exprnsample"
                     prompt="Expression of :"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.ExprnSample"/>

        <stringParam name="confidence"
                     prompt="Confidence >= "
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="0.9"/>

        <stringParam name="fold_change"
                     prompt="Fold change >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="2"/>

        <flatVocabParam name="regulated_dir"
                     prompt="Direction"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.regulated_dir"/>

        <flatVocabParam name="sample"
                     prompt="Expression of :"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.Sample"/>

        <stringParam name="percentile"
                     prompt="Percentile >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="90"/>

        <stringParam name="min_sequence_count"
                     prompt="Minimum Number of&lt;br&gt;Peptide Sequences"
                     help="Use this parameter to set a minimum for the number of unique peptide sequences found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment."
                     substitute="yes"
                     default="1"/>

        <stringParam name="min_spectrum_count"
                     prompt="Minimum Number of Spectra"
                     help="Use this parameter to set a minimum for the number of mass spectra found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment."
                     substitute="yes"
                     default="1"/>

        <flatVocabParam name="ms_assay" 
                     prompt="Assay Type"
                     help=''
                     multiPick="true"
                     visible="true"
                     queryRef="VocabQueries.MsAssay"/>


        <stringParam name="min_tm"
                     prompt="Minimum Number of Transmembrane Domains"
                     help="The algorithim TMHMM was used to predict putative transmembrane domains on annotated proteins for &#60;i&#62; Toxoplasma gondii &#60;/i&#62;
. Proteins may have none, one or more transmembrane domains. Please enter a minimum number of predicted transmembrane domains to start your search."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>

        <stringParam name="max_tm"
                     prompt="Maximum Number of Transmembrane Domains"
                     help="The algorithim TMHMM was used to predict putative transmembrane domains on annotated proteins for &#60;i&#62; Toxoplasma gondii &#60;/i&#62;
. Proteins may have none, one or more transmembrane domains. Please enter a maximum number of predicted transmembrane domains to start your search."
                     sample="(Example: 5)"
                     substitute="yes"
                     default="5"/>

        <stringParam name="min_sigp_sum_score"
                     prompt="Minimum SignalP conclusion score"
                     help="SignalP provides four scores and a conclusion for each such that the conclusion  is 1 if the score meets a certain criteria and 0 otherwise.  The SignalP summary conclusion is the sum of the four conclusions generated by SignalP, thus four is the highest score possible.  We consider a summary conclusion score of three to be significant"
                     substitute="yes"
                     default="3"/>

        <stringParam name="sequence"
                     prompt="Sequence ID"
                     help=""
                     sample="(Examples: Ia, VIIb, XI)"
                     substitute="yes"
                     default="Ia"/>

        <flatVocabParam name="geneType"
                     prompt="Gene type"
                     help="Select a gene type."
                     multiPick="true"
                     queryRef="VocabQueries.GeneTypes"/>

        <flatVocabParam name="includePseudogenes"
                     prompt="Include Pseudogenes"
                     help="Choose whether to include pseudogenes in your query results."
                     multiPick="false"
                     queryRef="VocabQueries.IncludePseudogenes"/>

        <stringParam name="historyId"
                     readonly="true"
                     prompt="History ID"
                     help="The number in the left column of My Query History"/>

        <stringParam name="go_term"
                     prompt="GO Term or GO ID"
                     default="catalytic activity"
                     help='Enter a GO ID (e.g. \"GO:0003824\") or GO Term (e.g. \"catalytic activity\").  Asterisks can be used as wildcard characters in a GO Term (e.g. \"*kinase*\"'/>

        <stringParam name="pfam_term"
                     prompt="Pfam Term or Pfam ID"
                     default="IMP dehydrogenase / GMP reductase domain"
                     help='Enter a Pfam accession number (e.g. "PF00464") or definition ("Serine hydroxymethyltransferase") .  Asterisks can be used as wildcard characters in a Pfam definition (e.g. "Serine*" or "*methyltransferase"'/>

        <stringParam name="min_observed"
                     prompt="Restrict by the minimum number of times this interaction was found"
                     help="Restrict by the minimum number of times this interaction was found"
                     default="0"/>

        <stringParam name="min_searches"
                     prompt="Restrict by the minimum number of searches that found this interaction"
                     help="Restrict by the minimum number of searches that found this interaction"
                     default="0"/>

        <stringParam name="max_results"
                     prompt="Maximum number of results"
                     help="Upper limit on the number of results returned by the query"
                     default="5"/>

        <stringParam name="genomicSequence"
                     prompt="Genomic Sequence"
                     help="ID of genomic sequence to search for genes"
                     sample="(Examples: Ia, III)"
                     default="Ia"/>

        <stringParam name="start_location"
                     prompt="Start Location"
                     help="Lower bound on nucleotide range to search for gene"
                     default="1"/>

        <stringParam name="end_location"
                     prompt="End Location (0 = end)"
                     help="Upper bound on nucleotide range to search for gene.  Use 0 to search to end of sequence."
                     default="0"/>

        <stringParam name="ortholog_pattern"
                     prompt="Ortholog pattern"
                     help="This will be generated by clicking the species tree nodes."
                     default=""/>

        <stringParam name="min_isoelectric_point"
                     prompt="Min Isoelectric Point"
                     help="Lower bound for the protein isoelectric point"
                     default="6"/>

        <stringParam name="max_isoelectric_point"
                     prompt="Max Isoelectric Point"
                     help="Upper bound for the protein isoelectric point"
                     default="10"/>

        <stringParam name="min_molecular_weight"
                     prompt="Min Molecular Weight (Daltons)"
                     help="Lower bound (in daltons) for the protein molecular weight"
                     default="10000"/>

        <stringParam name="max_molecular_weight"
                     prompt="Max Molecular Weight (Daltons)"
                     help="Upper bound (in daltons) for the protein molecular weight"
                     default="50000"/>

       <flatVocabParam name="chromosome_single"
                     prompt="Chromosome"
                     help="Select a T. gondii chromosome"
                     multiPick="false"
		     default="choose one"
                     queryRef="VocabQueries.Chromosome"/>

        <stringParam name="start_point"
                     prompt="Start at"
                     help="Select the distance (in nucleotides) to the start"
                     substitute="yes"
                     default="1"/>

        <stringParam name="end_point"
                     prompt="Stop at"
                     help="Select the distance (in nucleotides) to the end"
                     substitute="yes"
                     default="0"/>

        <flatVocabParam name="start_from"
                     prompt="From"
                     help="Select whether to measure the start point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd"/>

        <flatVocabParam name="end_from"
                     prompt="From"
                     help="Select whether to measure the end point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd2"/>


       <flatVocabParam name="snp_strain_a"
		     prompt="Reference"
                     help="Choose a reference from the list of strains."
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainA"/>

       <flatVocabParam name="snp_strain_b"
		     prompt="Comparator"
                     help="Choose a comparator from the list to compare to your reference."
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainB"/>

       <flatVocabParam name="snp_strain_m"
		     prompt="Comparator(s)"
                     help="Choose a comparator(s) from the list to compare to your reference."
                     multiPick="true"
                     queryRef="VocabQueries.SnpStrainM"/>

       <flatVocabParam name="snp_stat"
		     prompt="SNP Class"
                     help="Choose the class of SNP you want to query on ... choose minumum and maximum numbers below"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStat"/>

       <flatVocabParam name="snp_order"
		     prompt="Sort by"
                     help="Results will be sorted on this column in descending order"
                     multiPick="false"
                     queryRef="VocabQueries.SnpSort"/>

       <flatVocabParam name="sort_order"
		     prompt="Sort direction"
                     help="Results will be sorted ascending or descending order"
                     multiPick="false"
                     queryRef="VocabQueries.SortOrder"/>

       <stringParam name="dn_ds_ratio_upper" 
                     prompt="Non-synonymous / synonymous SNP ratio &lt;= " 
                     help="Upper Bound on the ratio of non-synonymous to synonymous coding snps" 
                     default="100"/>

      <stringParam name="dn_ds_ratio_lower" 
                     prompt="Non-synonymous / synonymous SNP ratio >= " 
                     help="Lower Bound on the ratio of non-synonymous to synonymous coding snps"
                     default="0"/>

      <stringParam name="min_num_coding_snps" 
                     prompt="Number of coding SNPs >= " 
                     help="Lower Bound on the number of coding snps" 
                     default="0"/>

       <stringParam name="occurrences_upper" 
                     prompt="Number of SNPs of above class &lt;= " 
                     help="Upper Bound on the number of SNPs of the selected class" 
                     default="1000"/>

      <stringParam name="occurrences_lower" 
                     prompt="Number of SNPs of above class >= " 
                     help="Lower Bound on the number of SNPs of the selected class" 
                     default="0"/>

      <stringParam name="snp_density" 
                     prompt="SNP Density (per KB of CDS) >= " 
                     help="Find genes containing a density of coding snps > this parameter. Density is expressed in number of snps / KB of coding sequence" 
                     default="0"/>

        <stringParam name="profile_pattern"
                     visible="false"
                     prompt="Profile Pattern"
                     help="Example: '%hsa:N%tgo:Y%'"
                     default="%hsa:N%tgo:Y%"/>

        <stringParam name="included_species"
                     prompt="Included Species"
                     help="List of included species (for documentation only)"/>

        <stringParam name="excluded_species"
                     prompt="Excluded Species"
                     help="List of excluded species (for documentation only)"/>

        <flatVocabParam name="phyletic_indent_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticIndentMap"/>

        <flatVocabParam name="phyletic_term_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticTermMap"/>

        <flatVocabParam name="organism"
                     prompt="Organism"
                     help="Select an organism."
                     multiPick="false"
                     queryRef="VocabQueries.Organism"/>

        <flatVocabParam name="organism_with_sequences"
                     prompt="Species"
                     help="Select one or more organisms."
                     multiPick="true"
                     queryRef="VocabQueries.OrganismWithSequences"/>

        <!-- params.library -->
        <flatVocabParam name="libraryId" 
                     prompt="EST Library" 
                     help="Select a clone library." 
                     multiPick="true"
                     queryRef="VocabQueries.EstLibraries"/>

        <flatVocabParam name="best_alignment_only"
                     prompt="Best alignments only"
                     help="Select yes to return only those EST alignments that are the best alignment for the EST.  Many of the ESTs align at multiple positions in the genome.  Selecting yes will consider only those alignments that are the best for each EST"
                     multiPick="false"
                     queryRef="VocabQueries.best_alignment_only"/>

        <flatVocabParam name="high_confidence_only"
                     prompt="Consistent alignments only"
                     help="Select yes to return only those EST alignments that are consistent.  We define define consistent as having >= 95% identity (the majority have >= 99%) and aligning the EST sequence in a manner that is consistent with a gene model.  Ie, there can be gaps (representing introns) in the target genomic sequence but not in the EST query."
                     multiPick="false"
                     queryRef="VocabQueries.high_confidence_only"/>



        <!-- params.inNotIn -->
        <flatVocabParam name="inNotIn" 
                     prompt="EST" 
                     help="" 
                     multiPick="false"
                     queryRef="VocabQueries.inNotIn"/>

        <flatVocabParam name="metabolic_pathway"
                     prompt="Metabolic Pathway"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.MetabolicPathways"/>

        <flatVocabParam name="pfam_list"
                     prompt="List of Pfam Term"
                     help='Enter a Pfam accession number (e.g.  "PF00478") or definition ("NPR nonapeptide repeat") .  Asterisks can  be used as wildcard characters in a Pfam definition (e.g. "Ribosomal*")'
                     multiPick="false"
                     visible="false"
                     queryRef="VocabQueries.PfamTermList"/>

        <flatVocabParam name="BlastQueryType"
                     prompt="BLAST query sequence type"
                     help="The type of the query sequence (eg. DNA, protein)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastQueryType"/>

        <!-- flatVocabParam name="BlastDatabaseTypeGene"
                     prompt="BLAST target database type"
                     help="The type of the target database (eg CDS, translated CDS, Protein)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseTypeGene"/ -->

        <!-- flatVocabParam name="BlastDatabaseTypeGenome"
                     prompt="BLAST target database type"
                     help="The type of the target database (eg Genome)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseTypeGenome"/ -->

        <flatVocabParam name="BlastDatabaseType"
                     prompt="BLAST target database"
                     help="The type of the target database (eg Genome, Transcripts, Proteins)"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseType"/>

        <flatVocabParam name="BlastDatabaseOrganism"
                     prompt="Organism"
                     help="Organism(s) from which the sequences in the BLAST database originated"
                     multiPick="false"
                     queryRef="VocabQueries.BlastDatabaseOrganism"/>

        <stringParam name="BlastQuerySequence" 
                     prompt="Blast Input Sequence" 
                     help="Blast Input Sequence" 
                     length="4000"
                     sample=""/>

        <flatVocabParam name="-filter"
                     id="-filter"
                     prompt="Low complexity filter"
                     queryRef="VocabQueries.Filter"
                     help="Set the low complexity filter. WUBLAST's default behavior is not to use this filter. NCBIBLAST's is to use it. When filter is set to 'yes' WUBLAST uses seg; NCBIBLAST uses dust for blastn, seg otherwise."
                     default="yes"/>


        <stringParam name="-e" 
                     prompt="Expectation value" 
                     help="Expected number of hits by chance" 
                     default="0.05"
                     sample="1e-10"/>

        <stringParam name="-v" 
                     prompt="Maximum descriptions (V)" 
                     help="Number of one-line descriptions to show" 
                     default="50"/>

        <stringParam name="-b" 
                     prompt="Maximum alignments (B)" 
                     help="Number of alignments to show" 
                     default="50"/>

       <flatVocabParam name="chromosome"
                     prompt="Chromosome"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Chromosome"/>

	<stringParam name="scaffold"
                     prompt="OR, enter the Scaffold ID"
                     help="ID of the scaffold"
                     sample="(Example: TGG_994808, TGG_995366)"
                     default="TGG_995305"/>

	<stringParam name="genomic_sequence"
                     prompt="Chromosome or Scaffold ID"
                     help="ID of genomic sequence, of chromosome or scaffold (e.g. TGG_995305, TGG_994758)"
                     sample="(Example: VIIa, TGG_995305)"/>

        <flatVocabParam name="non_nuclear_sequence"
                     prompt="Genomic Sequence"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.non_nuclear_sequence"/>

        <flatVocabParam name="Dataset"
                        prompt="Dataset"
                        help="Choose a dataset to search for the given motif"
                        queryRef="VocabQueries.MotifDataset"/>

        <stringParam name="Expression"
                     prompt="Pattern"
                     help="Enter a Perl regular expression describing the desired motif.  Example: 'CC6+RK' searches for two consecutive cysteine residues followed by a stretch of hydrophobic amino acids followed by the aminoacids arginine and lysine."
                     sample="(Example: CC6+RK)"
                     default="CC6+RK"/>

        <stringParam name="text_expression"
                     prompt="Text term"
                     help="Enter a regular expression describing the text term(s) to search for.  Example: membrane"
                     sample="(Example: triphosphatase, proline)"
                     default="triphosphatase"/>

        <flatVocabParam name="case_independent"
                     prompt="Ignore capitalization?"
                     help="Use this parameter to control whether to include text that matches except for capitalization (e.g. treat 'DNA', 'Dna', and 'dna' as all equal)."
                     multiPick="false"
                     queryRef="VocabQueries.CaseIndependence"/>

        <flatVocabParam name="datasets"
                     prompt="Fields"
                     help="Choose which text fields to search."
                     multiPick="true"
                     queryRef="VocabQueries.TextSearchDatasets"/>

        <stringParam name="max_pvalue"
                     prompt="Maximum P-value exponent for BLAST Hits"
                     help="If BLAST hit descriptions are to be searched, give the maximum P-value exponent for the match"
                     default="-30"/>

        <stringParam name="min_percent_identity"
                     prompt="Percent identity >="
                     default="90"
                     help='You can specify a minimum percent identity of the alignment between the EST and genomic DNA.  We only store alignments with >= 90% identity'/>

        <stringParam name="min_percent_est_aligned"
                     prompt="Percent of EST bases aligned >="
                     default="20"
                     help='Enter the minimum percentage of bases in the EST sequence that are aligned to genomic DNA in this alignment.'/>


        <flatVocabParam name="whole_words"
                     prompt="Match only whole words?"
                     help="Select whether to reject text matches that start or end in the middle of a word"
                     multiPick="false"
                     queryRef="VocabQueries.WholeWords"/>

        <flatVocabParam name="domain_database"
                     prompt="Domain Database"
                     help="Choose one of the constituent databases of InterPro."
                     multiPick="false"
                     queryRef="VocabQueries.DomainDatabase"/>

        <!-- flatVocabParam name="domain_accession"
                     prompt="Domain Accession"
                     help="Choose an accession number from an InterPro database."
                     multiPick="false"
                     queryRef="VocabQueries.DomainAccession"/ -->

        <stringParam name="domain_accession"
                     prompt="Domain Accession"
                     help="Choose an accession number from an InterPro database."/>

    </paramSet>

    <paramSet name="GeneBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.GeneBlastDatabaseType"/>
    </paramSet>

    <paramSet name="SequenceBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.SequenceBlastDatabaseType"/>
    </paramSet>

    <paramSet name="EstBlastDbParams">
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.EstBlastDatabaseType"/>
    </paramSet>

    <paramSet name="OrfBlastDbParams"> 
        <flatVocabParam name="BlastDatabaseType" prompt="Target"
                     help="The type of the target database (eg CDS,
                     translated CDS, Protein)" multiPick="false"
                     queryRef="VocabQueries.OrfBlastDatabaseType"/>
    </paramSet>

    <paramSet name="OrfMotifSearchParams">
        <flatVocabParam name="Dataset"
                        prompt="Organism"
                        help="Choose one or more organisms to search with the given motif"
			multiPick="false"
                        queryRef="VocabQueries.MotifOrfDataset"/>
    </paramSet>

    <paramSet name="epitopeParams">
        <flatVocabParam name="confidence"
            prompt="Confidence"
            help="Epitopes are assigned a confidence level when they are mapped to genes in ToxoDB.  Choose one or more assigned confidence levels to search for epitopes in."
            multiPick="true"
            queryRef="VocabQueries.Confidence"/>
    </paramSet>
    
    <paramSet name="idQueryParams">
    
        <stringParam name="orf_id"
                     prompt="ORF ID"
                     help="Enter an ORF ID"
                     sample="Ia-1-1000180-1000404, Ia-6-99955-99632"
                     substitute="yes"
                     default="Ia-1-1000180-1000404"/>
                     
        <stringParam name="snp_id"
                     prompt="SNP ID"
                     help="Enter an SNP ID"
                     sample="SNP_Ia_17864, SNP_Ia_130295"
                     substitute="yes"
                     default="SNP_Ia_17864"/>
                     
        <stringParam name="est_id"
                     prompt="EST ID"
                     help="Enter an EST ID (Accession Number)"
                     sample="AA009308, AA011973, W99666"
                     substitute="yes"
                     default="AA009308"/>
    </paramSet>


    <!-- xml question sets -->
    <xmlQuestionSet name="XmlQuestions"
                 displayName="Data contents from XML data sources">

        <description>
          Data contents from XML data sources
        </description>

        <xmlQuestion name="News"
                  displayName="ToxoDB News"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="toxodbNews.xml">
            <description>
                Retrieve news from XML data source
            </description>
        </xmlQuestion>

        <xmlQuestion name="NewsRss"
                  displayName="ToxoDB News"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="toxodbNews.xml">
            <description>
                News as RSS Feed
            </description>
        </xmlQuestion>

<!--
        <xmlQuestion name="DidYouKnow"
                  displayName="Did you know..."
                  recordClassRef="XmlRecordClasses.DidYouKnowRecord"
                  xmlDataURL="toxodbDidYouKnow.xml">
            <description>
                Did you knows of the ToxoDB website
            </description>
        </xmlQuestion>
-->

        <xmlQuestion name="Methods"
                  displayName="Methods"
                  recordClassRef="XmlRecordClasses.Methods"
                  xmlDataURL="toxodbMethods.xml">
            <description>
                Methods used by ToxoDB
            </description>
        </xmlQuestion>

        <xmlQuestion name="DataSources"
                  displayName="Data Sources for ToxoDB"
                  recordClassRef="XmlRecordClasses.DataSourcesRecord"
                  xmlDataURL="toxoResources-pubmed.xml"
                  xslURL="resources2records.xsl">
            <description>
                Data sources of ToxoDB.
            </description>
        </xmlQuestion>

        <xmlQuestion name="About"
                  displayName="More About ToxoDB"
                  recordClassRef="XmlRecordClasses.AboutToxoDBRecord"
                  xmlDataURL="toxodbAbout.xml">
            <description>
                Things one might want to know about ToxoDB.
            </description>
        </xmlQuestion>

        <xmlQuestion name="FAQ"
                  displayName="Frequently Asked Questions (FAQ)"
                  recordClassRef="XmlRecordClasses.FAQRecord"
                  xmlDataURL="toxodbFAQ.xml">
            <description>
                Frequently asked questions.
            </description>
        </xmlQuestion>

        <xmlQuestion name="ExternalLinks"
                  displayName="Useful Links"
                  recordClassRef="XmlRecordClasses.ExternalLinksRecord"
                  xmlDataURL="toxodbExternalLinks.xml">
            <description>
               Related Sites
            </description>
        </xmlQuestion>

    </xmlQuestionSet>

    <!-- xml record class set -->
    <xmlRecordClassSet name="XmlRecordClasses">

        <xmlRecordClass
        	name="NewsRecord"
        	type="News"
        	idPrefix="NEWS."
        	delimiter="@">
            <xmlAttribute name="headline"/>
            <xmlAttribute name="date"/>
            <xmlAttribute name="item"/>
            <xmlAttribute name="tag"/>
         </xmlRecordClass>

<!--
         <xmlRecordClass
        	name="DidYouKnowRecord"
        	type="DidYouKnow"
        	idPrefix="DYK."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="text"/>
            <xmlAttribute name="image"/>
         </xmlRecordClass>
-->

         <xmlRecordClass
        	name="Methods"
        	type="Methods"
        	idPrefix="MTHD."
        	delimiter="@">
             <xmlAttribute name="name" displayName="Method"/>
             <xmlAttribute name="input" displayName="Input"/>
             <xmlAttribute name="output" displayName="Output"/>
             <xmlAttribute name="descrip" displayName="Details"/>
             <xmlTable name="tools" displayName="Tools">
                 <xmlAttribute name="name" displayName="Tool"/>
                 <xmlAttribute name="version" displayName="Version"/>
                 <xmlAttribute name="params" displayName="Parameters"/>
                 <xmlAttribute name="url" displayName="URL"/>
                 <xmlAttribute name="pubmedIds" displayName="Pubmed&nbsp;IDs"/>
                 <xmlAttribute name="credits" displayName="Credits"/>
             </xmlTable>
         </xmlRecordClass>

        <xmlRecordClass name="DataSourcesRecord"
        	type="ToxoDB Data Source"
        	idPrefix="DS."
        	delimiter="@">
            <xmlAttribute name="resource"/>
            <xmlAttribute name="version"/>
            <xmlAttribute name="publicUrl"/>
            <xmlAttribute name="category"/>
            <xmlAttribute name="description"/>
            <xmlAttribute name="display"/>
            <xmlTable name="publications">
               <xmlAttribute name="pmid"/>
               <xmlAttribute name="pmauthors"/>
               <xmlAttribute name="pmtitle"/>
               <xmlAttribute name="pmdetails"/>
            </xmlTable>  
         </xmlRecordClass>

        <xmlRecordClass
        	name="AboutToxoDBRecord"
        	type="About"
        	idPrefix="ABOUT."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="text"/>
            <xmlAttribute name="tag"/>
         </xmlRecordClass>

        <xmlRecordClass
        	name="FAQRecord"
        	type="FAQ"
        	idPrefix="FAQ."
        	delimiter="@">
            <xmlAttribute name="didYouKnow"/>
            <xmlAttribute name="question"/>
            <xmlAttribute name="answer"/>
            <xmlAttribute name="tag"/>
            <xmlAttribute name="category"/>
         </xmlRecordClass>

        <xmlRecordClass
        	name="ExternalLinksRecord"
        	type="ExternalLinks"
        	idPrefix="EL."
        	delimiter="@">
            <xmlTable name="relatedLinks" displayName="Related Links">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="tgSeqCenters" displayName="Toxoplasma Sequencing Centers">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="toxoDbs" displayName="Toxoplasma Sequence Databases">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="toxoBiology" displayName="Toxoplasma Biology">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
            <xmlTable name="funding" displayName="Funding">
               <xmlAttribute name="title"/>
               <xmlAttribute name="url"/>
            </xmlTable>
         </xmlRecordClass>

    </xmlRecordClassSet>

    <groupSet name="paramGroups">
        
        <group name="advancedParams" displayName="Advanced Parameters" displayType="ShowHide">
            <description>
                <![CDATA[
                ]]>
            </description>
        </group>
    </groupSet>
</wdkModel>
