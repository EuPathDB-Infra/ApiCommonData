<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE xml [
  <!ENTITY nbsp "&#160;"> 
  <!ENTITY lt   "&#60;"> 
  <!ENTITY gt   "&#62;">
]>


<?oxygen RNGSchema="wdkModel.rng" type="xml"?>
<wdkModel name="apiModel" displayName="ApiDB.org" version="3.0">


<!-- ******************* -->
<!-- model introduction  -->
<!-- ******************* -->
<introduction>
           <![CDATA[
    <font size="-1">
    This site uses <b>WDK 1.13</b> and the <b>apiB</b> instance on <b>pitaya UGA</b>. 
    apiB uses Oracle dbLinks to access <b>cryptoB</b> in UGA (3.5), <b>plas53p</b> and <b>toxo42p</b>
    instances on Upenn for Federation.</font>
          ]]>
</introduction>

<!-- ************ -->
<!-- questionSets -->
<!-- ************ -->
<!-- 
A question is "a query that returns a list of records."  (Regular queries 
return columns and rows.)  They are formed by pairing a query with a
record class.  The query must be one that returns one column containing
a list of primary keys.  The record class must be one that expects as
a primary key the type of key returned by the query.

A question set is a grouping of questions.  It may be used in the
user interface to present the enclosed questions in one choice box.  
-->


<!-- //////////  GENE QUESTIONS  ordered after Jessie's suggestions //////////// -->

<!-- questions that return Gene records -->
<questionSet name="GeneQuestions"
             displayName="Find Genes by">

    <description>
      Find Genes
    </description>
    

<question name="GenesByTextSearch"
              category="Other Attributes"
              displayName="Keyword (search product, notes,etc)"
              queryRef="GeneFeatureIds.GenesByAnnotatedKeyword"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
                  Find genes with a text search against their product name, notes, GO, EC, Domains, NRDB, or metabolic pathways.
                  Find genes associated with given text.
              </summary>
              <description>
              <![CDATA[
             Find genes by searching text annotations. The search is case insensitive, for example both 'ACTIN' and 'actin' will work. The fields must contain your text exactly. Use '*' as a wildcard. The wildcard can span several words. For example: "red*ase" will find "reductase" and "predicted lactate dehydrogenase".
              ]]>
              </description>
    </question>

<question name="GeneByLocusTag"
         category="Other Attributes"
         displayName="List of IDs"
              queryRef="GeneFeatureIds.GeneByLocusTag"
              summaryAttributesList="organism,location_text,product,gene_type"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           Find genes by a list of IDs.
        </summary>
        <description>
           <![CDATA[
           Find genes by providing a list of IDs.
           User can either enter the ID list manually, or upload a file that contains the list. 
           IDs can be delimited by a comma, a semi colon, or any white spaces. For example, a list can be in the
           following form: "PF11_0344, PF11_0306
           The search is case insensitive. Asterisks can be used as wild cards (e.g. ' PF11_* ').
           Genes whose IDs have changed can be found by either the old or the
           new ID. GI numbers (e.g. 23508535), Entrez Protein Locus IDs (e.g.
           NP_701204.1), PDB IDs (e.g. 1HN6), or GenBank IDs (e.g. AAB36701.1)
           can also be used.
          ]]>
        </description>
    </question>


<question name="GeneBySingleLocusTag" 
              category="Other Attributes"
              displayName="Identifier"
              queryRef="GeneFeatureIds.GeneBySingleLocusTag" 
              summaryAttributesList="organism,location_text,product,gene_type"              
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
                Find a gene by its ID. 
              </summary>
              <description>
              <![CDATA[
              Find a gene by its ID. The search is case insensitive. Wild card searches, e.g. 'cgd6*', are permitted.<br>
              The gene ID is provided by the gene annotator. Crypto genes might be searched by its GenBank locus_tag. Plasmo genes might also be searched by Genbank Accession (e.g. AAB36701.1), GI (e.g. 23508535), Entrez Protein Locus IDs (e.g. NP_701204.1) or PDB IDs (e.g. 1HN6).
              ]]>
              </description>
    </question>



    <question name="GenesByTaxon"
         category="General"
         displayName="Species"
              queryRef="GeneFeatureIds.GenesByTaxon"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
            <![CDATA[
            Find genes from <i>Cryptosporidium</i>, <i>Plasmodium</i> and <i>Toxoplasma</i> species.
              ]]>
        </summary>
        <description>
           <![CDATA[
            Find genes from <i>Cryptosporidium</i>, <i>Plasmodium</i> and <i>Toxoplasma</i> species.
          ]]>
        </description>
    </question>



<question name="GenesOrthologousToAGivenGene"
              displayName="Orthologs and Paralogs"
              category="Evolution"
              queryRef="GeneFeatureIds.GenesOrthologousToAGivenGene"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find genes that have been identified by the
              <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a>
              project as orthologous (or paralagous) to a given gene.
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find genes that have been identified by the
              <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a>
              project as orthologous (or paralagous) to a given gene.
          ]]>
        </description>
    </question>


 <question name="GenesByOrthologPattern"
         category="Evolution"
         displayName="Orthology Profile"
         queryRef="GeneFeatureIds.GenesByOrthologPattern"
         summaryAttributesList="organism,location_text,product"
         sortingAttributesList="organism asc, location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
         Find genes that have a specified orthology-based phylogenetic profile. 
         </summary>
         <description>
         <![CDATA[
         Find genes that have a specified orthology-based phylogenetic profile. 
        The phylogenetic profile of a gene is a series of 87 "present" or "absent" calls, reflecting the presence or absence of a putative ortholog in 87 genomes.
         An <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL</a> analysis of the proteins of 65 species, including <i>Cryptosporidia, Plasmodia</i> and <i>Toxoplasma</i>, placed each protein in an ortholog group. From the Crypto, Plasmo or Toxo gene's perspective the other species that are included in that gene's ortholog group can be thought of as a phylogenetic profile.
         <br><br>
         Use this query to define a pattern
         across those ortholog groups, and find genes that match that pattern.  The pattern is a 
         specification, for each species, of "include", "exclude", or "don't care."  Click on the
         radio button next to a species to toggle through the three states.  (A 
         <img src="images/yes.gif"> means
         "include", an <img src="images/no.gif"> means "exclude" 
         and <img src="images/dc.gif"> means "don't care".)   
         For example, to find genes
         that are present in Apicomplexa but not in humans, click on Apicomplexa until you see
         a <img src="images/yes.gif"> and click on <i>Homo
         sapiens</i> until you see an
         <img src="images/no.gif">.
         <br> <br>
        Note that this query can take some time because of the large number
            of combinations of possible presence/absence calls (2<sup>87</sup>
            possible combinations, of which 2,723 are associated with a total of
            35,603 genes).
         ]]>
         </description>
    </question>


<question name="GenesByGeneType"
              category="Gene Attributes"
              displayName="Gene Type"
              queryRef="GeneFeatureIds.GenesByGeneType"
              summaryAttributesList="organism,location_text,product,is_pseudo"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find genes by type (eg, protein coding, tRNA, rRNA, pseudogenes, etc).
              </summary>
              <description>
              <![CDATA[
              Find genes by type (eg, protein coding, tRNA, rRNA, pseudogenes, etc).
              <br>Gene type assignments are determined by the gene annotators.
              ]]>
             </description>
        <dynamicAttributes>
          <columnAttribute name="is_pseudo" displayName="Pseudogene" align="center" />
        </dynamicAttributes>
    </question>


<question name="GenesByEcNumber"
              category="Putative Function"
              displayName="EC Number"
              queryRef="GeneFeatureIds.GenesByEcNumber"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass"> 
              <summary>
              <![CDATA[      
              Find genes by assigned Enzyme Commission (EC) number.        
              ]]>
              </summary>
              <description>
              <![CDATA[
              Find genes that have been assigned a particular Enzyme Commission (EC) number. 
              Use '-' in place of numbers to denote partial EC Numbers, for example, '2.7.7.-'. <p>
          For help with obtaining EC numbers, try the
           <a href="http://ca.expasy.org/enzyme/">ExPASy-ENZYME</a>
           browser.<p>
              CryptoDB EC numbers have been assigned by the genome annotation centers, KEGG and CryptoCyc.
              PlasmoDB EC numbers have been assigned to genes for <i>P. falciparum</i> by Andy Berry, Matt Berriman (Sanger Institute) and Hagai Ginsburg (Hebrew University). ToxoDB EC numbers have been assigned by Ian Paulsen (TIGR).
              ]]>
              </description>
    </question>


    <question name="GenesByGoTerm"
              category="Putative Function"
              displayName="GO Term"
              queryRef="GeneFeatureIds.GenesByGoTerm"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find genes by Gene Ontology (GO) term for molecular function, biological process or subcellular localization. 
              </summary> 
              <description>
              <![CDATA[
              Find genes by Gene Ontology (GO) term for molecular function,
              biological process or subcellular localization. The search finds
              genes with the GO term you specify and genes with terms that are
              specializations of your term (is-a). For a list of GO terms, we
              suggest using the 
              <a href="http://www.godatabase.org/cgi-bin/amigo/go.cgi">AmiGO</a>
              browser. For GO IDs, include the GO prefix as in "GO:0003824."
              <p>
              GO terms were assigned by the annotation centers and 
              and was inferred from similarity to
           protein domains from the
           <a href="http://www.ebi.ac.uk/interpro/">InterPro</a> databases.
              ]]>
              </description>
    </question>




  <question name="GenesByInterproDomain"
              category="Similarity/Pattern"
              displayName="InterPro Domain"
              queryRef="GeneFeatureIds.GenesByInterproDomain"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
               Find genes containing a given Pfam domain, family or repeat.
              </summary>
              <description><![CDATA[
            Find genes whose predicted protein contains a domain from
            the InterPro set of domain databases.  The domain matches are
            identified by the InterProScan program.
            <p>First choose a member database.
            <p>Then begin typing the domain name, or part of it. You will
            be prompted with all possible domains that match what you have typed.

             For PFAM type a Pfam name, a Pfam accession or a Pfam description. Use the 
              <a href="http://www.sanger.ac.uk/Software/Pfam/browse/top_twenty.shtml">Pfam browser</a> to search Pfam if you are not sure. 
              More information on Pfam is available 
              <a href="http://www.sanger.ac.uk/Software/Pfam/">
              here</a>.
              ]]>
              </description>
      <!--  <dynamicAttributes>
	     <columnAttribute name="e_value" displayName="Score / E value" align="center"/> 
	</dynamicAttributes>-->

          </question>



<question name="GenesByMotifSearch"
         category="Similarity/Pattern"
         displayName="Protein Motif Pattern"
         queryRef="GeneFeatureIds.GenesByMotifSearch"
         summaryAttributesList="organism,location_text,product,Locations,MatchCount,Sequence"
         sortingAttributesList="organism asc,MatchCount desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
             Find genes whose protein product contains a motif pattern that you specify, e.g. "two cysteines followed by 2 or 3 charged residues and a hydrophobic stretch of 6-8 amino acids".                                          
         </summary>
         <description>
           <![CDATA[
Find genes whose protein product contains a motif pattern that
             you specify., e.g. "CC6+RK", which means "two cysteines followed
             by one or more hydrophobic amino acids, followed by arginine,
             then lysine". The pattern need not be well conserved. If 
             you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.  
             <br><br>

             Another example is the pattern of the
             <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">
             Pexel motif</a>, which can be represented as "R.L.[EQD]", meaning
             "an arginine, then any amino acid, then a leucine, then any amino
             acid, then either an aspartic acid, a glutamic acid, or a
             glutamine".
             <br><br>

             The pattern need not be well conserved. If you can describe it in
             words, you can probably use this tool to create an "expression"
             that can search other proteins for similar patterns.
             <br><br>

             Specify the pattern with a (Perl style) "regular expression".  
             (Regular 
             expressions are more powerful than PROSITE patterns.)
             For a description of how to create regular expressions,
             please see the <a href="regexp.jsp">Regular Expression Tutorial</a>.
             <br><br>

             The following codes can be used to represent classes of amino acids.
             <table border columns=3>
                   <TR>
                      <TD><B>AA property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
<TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
 </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>
          ]]>
   </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" displayName="Match Locations" align="center"/>
           <columnAttribute name="MatchCount" displayName="Match Count" align="center"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>




 <question name="GenesWithSignalPeptide"
              category="Cellular Location"
              displayName="Predicted Signal Peptide"
              queryRef="GeneFeatureIds.GenesWithSignalPeptide" 
              summaryAttributesList="organism,location_text,product,sigp_sum_score"
              sortingAttributesList="organism asc,sigp_sum_score desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find genes that are predicted to encode a signal peptide.  
              </summary>
              <description>
              <![CDATA[
              Find genes that are predicted to have a signal peptide.
              <p>
              The predictions are made with the <a href="http://www.cbs.dtu.dk/services/SignalP/">SignalP program</a>.        
              ]]>
              </description>
 <dynamicAttributes>
             <columnAttribute name="sigp_sum_score" displayName="Summary score" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>


 <question name="GenesByTransmembraneDomains" 
              category="Cellular Location"
              displayName="Transmembrane Domain Count"
              queryRef="GeneFeatureIds.GenesByTransmembraneDomains" 
              summaryAttributesList="organism,location_text,product,tm_count"
              sortingAttributesList="organism asc,tm_count asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find genes with at least a given number of transmembrane domains.
              </summary>
              <description>
              <![CDATA[
              Find genes with at least a given number of transmembrane domains.
              <br><br>
              Transmembrane domains were predicted using TMHMM2.
              ]]>
              </description>
    </question>




 <question name="GenesByMolecularWeight" 
              category="Predicted Proteins"
              displayName="Molecular Weight"
              queryRef="GeneFeatureIds.GenesByMolecularWeight" 
         summaryAttributesList="organism,location_text,product,molecular_weight"
         sortingAttributesList="organism asc,molecular_weight asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary> 
              Find genes whose unmodified protein product has a molecular weight in a range that you specify.
              </summary>
              <description>Find genes whose proteins are within a molecular weight range. Molecular weights are 
              machine calculated from the raw translation and does not take into account any protein or residue 
              modifications. For translations
              containing ambiguous amino acid codes (B, Z, X) we calculate the upper bound of the molecular weight.
              </description>
    </question>




 <question name="GenesBySimilarity"
          category="Similarity/Pattern"
          displayName="BLAST Similarity"
          queryRef="GeneFeatureIds.GenesBySimilarity"
          summaryAttributesList="organism,product,Header,TabularRow,Alignment,Footer"
          recordClassRef="GeneRecordClasses.GeneRecordClass">
          <summary>
            Find genes that have BLAST similarity to your input query sequence.
          </summary>
          <description>
          <![CDATA[
          Find genes that have BLAST similarity to your input query sequence.  The <a href="http://blast.wustl.edu/" target="_blank">WU BLAST</a> program is used for the search.
          ]]>
          </description>
                                                                                      
          <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="Blast summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="Blast alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="Blast header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="Blast footer"
                              inReportMaker="false"/>
          </dynamicAttributes>
    </question>




 <question name="GenesByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="GeneFeatureIds.GenesByLocation"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
             <summary>
                 Find genes that are located in a specified genomic region.
             </summary>
     <description>
	 <![CDATA[
	 Find genes within a given genomic region.<br>
         Either select an organism and a genomic sequence from the
          pull-down menu or enter a genomic sequence ID from any Crypto, Plasmo or Toxo species (e.g.
	 "AAEL01000057", "MAL4", "Ia").
         The Start and End locations correspond to the coordinates of the gene(s) on the chromosome.
	 ]]>
    </description>
</question>




<question name="GenesByExonCount"
              category="Gene Attributes"
              displayName="Exon Count"
              queryRef="GeneFeatureIds.GenesByExonCount"
              summaryAttributesList="organism,location_text,product,exon_count"
              sortingAttributesList="organism asc,exon_count desc,location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
               Find genes having the given number of exons.
              </summary>
              <description>
              <![CDATA[
              Find genes having the given number of exons.
              <p>
              Exon numbers are based on gene model annotations.
              ]]>
              </description>
    </question>


 <question name="GenesByCentromereProximity"
              displayName="Proximity to Centromeres"
              category="Genomic Position"
              queryRef="GeneFeatureIds.GenesByCentromereProximity"
              summaryAttributesList="organism,location_text,dist_centromere,product"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from an annotated centromere location.
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from an annotated centromere location.
          ]]>
        </description>
<dynamicAttributes>
          <columnAttribute name="dist_centromere" displayName="Distance from Centromere"  align="center"/>
        </dynamicAttributes>
    </question>

<question name="GenesByTelomereProximity"
              displayName="Proximity to Telomeres"
              category="Genomic Position"
              queryRef="GeneFeatureIds.GenesByTelomereProximity"
              summaryAttributesList="organism,location_text,dist_telomere,product"
              sortingAttributesList="location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes within a given distance from the start and end positions of chromosomes.Chromosome ends include telomeric repeats..
          ]]>
        </summary>
        <description>
          <![CDATA[
	  Find <i>P. falciparum</i> genes within a given distance from a telomere.  We are using the start and end positions of chromosomes to define the location of the telomere.  Your query should take into account that the actual location of the telomere is <b>NEAR</b> the end of the chromosome.
          ]]>
        </description>
<dynamicAttributes>
          <columnAttribute name="dist_telomere" displayName="Distance from Telomere"  align="center"/>
        </dynamicAttributes>
    </question>

<question name="GenesByNonnuclearLocation"
         category="Genomic Position"
         displayName="Non-nuclear Chromosomal Location"
         queryRef="GeneFeatureIds.GenesByNonnuclearGenomicRegion"
          summaryAttributesList="organism,location_text,product"
         sortingAttributesList="location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes that are located in a specified region of the non-nuclear genome.
        </summary>
        <description>
          <![CDATA[
          Find <i>P. falciparum</i> genes that are located in a specified
          non-nuclear region of the genome.<br><br>
          ]]>
        </description>
    </question>


    <question name="GenesByESTOverlap" 
              category="Transcript Expression"
              displayName="EST Evidence"
              queryRef="GeneFeatureIds.GenesByESTOverlap" 
              summaryAttributesList="organism,location_text,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
                Find genes with evidence of expression based on expressed sequence tags (ESTs).
              </summary>
              <description>
              <![CDATA[
              Find genes with evidence of expression based on expressed sequence tags (ESTs).
              For example:  What <i>P. falciparum</i> genes map to ESTs from the 3D7 gametocyte library?<p>
              EST overlap with an annotated gene is a useful way to verify gene predictions.  Ideally we would have EST sequences for each gene prediction, but this is not the case in <i> Cryptosporidium </i> . There are only a total of 567 ESTs for <i>Cryptosporidium parvum</i> and these ESTs represent even fewer genes because of redundancy.  Useful lengths of sequence overlap between an EST sequence and a predicted gene sequence are usually 50nt or greater. <i>C. parvum</i> ESTs were clustered against the <i>C. parvum</i> genome and cluster consensus sequences were generated. The consensus sequences have been aligned to the <i>C. parvum</i> and <i>C. hominis</i> genome. This query finds annotated genes with overlap to these sequences. Genes from the MRC-LMB sequencing of chromosome 6 are not included at this time.
              ]]>
              </description>
          <dynamicAttributes>
             <columnAttribute name="number_of_ests" displayName="Number of ESTs"  align="center"  inReportMaker="false"/>
         </dynamicAttributes>
    </question>


<question name="GenesByIsoelectricPoint"
         displayName="Isoelectric Point"
         category="Predicted Proteins"
         queryRef="GeneFeatureIds.GenesByIsoelectricPoint"
         summaryAttributesList="organism,location_text,product,isoelectric_point"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes whose protein product has an isoelectric point in a range that you specify.        
        </summary>
        <description>
           <![CDATA[
             Find genes whose protein product has an isoelectric point in the specified range.
           ]]>
        </description>
    </question>


<!-- Part of Protein Structure entry (one of three plasmo questions) in query grid under Predicted Proteins -->
    <question name="GenesBySecondaryStructure"
              displayName="Protein Secondary Structure"
              category="Predicted Proteins"
              queryRef="GeneFeatureIds.GenesBySecondaryStructure"
              summaryAttributesList="organism,location_text,product,percent_coil,percent_strand,percent_helix"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes whose proteins are predicted to have the given secondary-structure content by the PSIPRED program.
        </summary>
        <description>
          <![CDATA[
              Find genes whose proteins are predicted to have the given secondary-structure content by the PSIPRED program. The percent composition is computed by counting the amino acids in which one of the three calls is given the highest confidence, and dividing by the length of the protein.  For example the percent helix is the number of amino acids in which helix has the highest confidence, divided by the length of the protein.
            
                                                    
              </P><PRE><B>References:</B> <BR> Jones DT. (1999) Protein secondary structure prediction<BR> based on position-specific scoring matrices<BR> <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=10493868">J Mol Biol. 1999 Sep 17;292(2):195-202</a></PRE>
          ]]>
        </description>
<dynamicAttributes>
             <columnAttribute name="percent_coil" displayName="Percent Coil" align="center"
                              inReportMaker="false"/>
             <columnAttribute name="percent_strand" displayName="Percent Strand" align="center"
                              inReportMaker="false"/>
             <columnAttribute name="percent_helix" displayName="Percent Helix" align="center"
                              inReportMaker="false"/>
         </dynamicAttributes>
      </question>



 <question name="GenesByPdbSimilarity"
         displayName="PDB 3D Structures"
         category="Predicted Proteins"
         queryRef="GeneFeatureIds.GenesByPdbSimilarity"
         summaryAttributesList="organism,location_text,product"
         sortingAttributesList="organism asc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find genes whose protein product has high BLAST similarity to a chain of a Protein Data Bank (PDB) structure.
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find genes whose protein product has high BLAST similarity to a chain of a <a href="http://www.rcsb.org/pdb">Protein Data Bank (PDB)</a> structure.
            Specify one or more organisms whose genes to retrieve; one or more
            clades of organisms whose PDB records should be considered; and a
            p-value exponent cutoff.
            ]]>
        </description>
    </question>



<question name="GenesWithStructurePrediction"
              displayName="Predicted 3D Structure (P.f.)"
              category="Predicted Proteins"
              queryRef="GeneFeatureIds.GenesWithStructurePrediction"
              summaryAttributesList="organism,location_text,product"
              sortingAttributesList="organism asc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          <![CDATA[
              Find <i>P. falciparum</i> genes that have 
              computationally predicted 3D structure models.       
          ]]>
        </summary>
        <description>
          <![CDATA[
              Find <i>P. falciparum</i> genes that have 
              computationally predicted 3D structure models.  
              <br><br>
              The models were generated
              computationally                                    
              by Dinesh Gupta at the <a href="http://icgeb.res.in/">ICGEB</a>.
              They are seeded with experimentally-determined
              structures of similar proteins (from <a href="http://www.rcsb.org">PDB</a>).
          ]]>
        </description>
    </question>




<question name="GenesByPhyleticProfile"
         displayName="Homology Phylogenetic Profile (P.f. and P.v.)"
         category="Evolution"
         queryRef="GeneFeatureIds.GenesByPhyleticProfile"
         summaryAttributesList="organism,location_text,product,num_queries,query_ids,mutual_information_scores"
         sortingAttributesList="organism asc,num_queries desc,mutual_information_scores desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
         Find <i>P. falciparum</i> and/or <i>P. vivax</i> genes that have a homology-based phylogenetic profile similar to a specified list of genes.
          ]]>
        </summary>
        <description>
           <![CDATA[
            Find <i>P. falciparum</i> and/or <i>P. vivax</i> genes that have a homology-based phylogenetic profile similar to a specified list of genes.
           <br><br>

           The phylogenetic profile (homology-based) of a 
           gene is a series of 164 "present" or "absent" calls reflecting the
           presence or absence of a putative homolog in 164 completely
           sequenced genomes. Similarity between profiles is a good indicator
           of functional linkages between proteins (see Pellegrini M, Marcotte
           EM, Thompson MJ, Eisenberg D, Yeates TO. Assigning protein
           functions by comparative genome analysis: protein phylogenetic
           profiles. Proc. Natl. Acad. Sci. USA 1999 96, 4285-4288). Data on
           ORFs with the most similar profiles to a given query ORF is also
           available, and can be used to establish the function of
           uncharacterized ORFs, based on the similarity of their profiles
           (see Date SV & Marcotte EM. Discovery of uncharacterized cellular
           systems by genome-wide analysis of functional linkages. Nature
           Biotechnology 2003 21:1055-1062) with ORFs of known function.
          ]]>
        </description>
<dynamicAttributes>
            <columnAttribute name="mutual_information_scores"
                       displayName="Mutual Information Score" align="center"/>
            <columnAttribute name="query_ids"
                       displayName="Query IDs"/>
            <columnAttribute name="num_queries"
                       displayName="Queries matched" align="center"/>
        </dynamicAttributes>

    </question>



 <question name="GenesByMetabolicPathway"
         displayName="Metabolic Pathway"
         category="Putative Function"
         queryRef="GeneFeatureIds.GenesByMetabolicPathway"
         summaryAttributesList="organism,location_text,product,met_pathways"
         sortingAttributesList="organism asc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
        Find genes involved in a specific metabolic pathway. 
        </summary>
        <description>
            <![CDATA[
        Find genes involved in a specific metabolic pathway. 
          <br><br>

        Maps of Metabolic Pathways were constructed as described on the Malaria Parasite Metabolic Pathways website
            <a href="http://sites.huji.ac.il/malaria/FramIntroduction.html">here</a> .
           ]]>
        </description>
<dynamicAttributes>
	     <columnAttribute name="met_pathways" displayName="Metabolic Pathways"/>
	</dynamicAttributes>
    </question>




 <question name="GenesByProteinProteinInteraction"
              displayName="Y2H Protein Interaction"
              category="Putative Function"
              queryRef="GeneFeatureIds.GenesByProteinProteinInteraction"
               summaryAttributesList="organism,location_text,product,bait_start,bait_end,prey_start,prey_end,times_observed,number_of_searches,preyNumberBaits,baitNumberPreys,bait_or_prey"
              sortingAttributesList="organism asc,times_observed desc, number_of_searches desc, location_text asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
         Find genes that interact with a given gene, as determined by yeast two-hybrid experiments.
        </summary>
        <description>
           <![CDATA[
Find genes that interact with a given gene, as determined by yeast two-hybrid experiments.  <br><br>
        <i>Times reproduced</i> refers to the number of independent yeast two-hybrid screens in which a given interaction was found. Interactions found in two or more yeast two-hybrid screens were independently reproduced, and are thus more likely to be true yeast two-hybrid positives. 
<br><br>
<i>Times observed</i> refers to the total number of times a given interaction was identified in all yeast two-hybrid screens.  An  interaction can be identified multiple times in the same screen for several reasons: (1) The original yeast cell containing the pair of  interacting proteins divided before being plated on selective media; (2) The same prey plasmid was present in the library multiple times  and thus gave rise to multiple positive colonies; or (3) The prey  gene was present in the library as multiple independent, overlapping  fragments, all of which interact with a given bait.  Only (3) provides independent confirmation of a putative interaction.
<br><br>
Protein interactions were experimentally determined using the yeast two-hybrid system as described in LaCount DJ, Vignali M, Chettier R, Phansalkar A, Bell R, Hesselberth JR, Schoenfeld LW, Ota I, Sahasrabudhe S, Kurschner C, Fields S, Hughes RE.  A protein interaction network of the malaria parasite Plasmodium falciparum. Nature. 2005 438:103-7.

          ]]>
        </description>
 <dynamicAttributes>
            <columnAttribute name="bait_start" displayName="Bait Start" align="center"/>
            <columnAttribute name="bait_end" displayName="Bait End" align="center"/>
            <columnAttribute name="prey_start" displayName="Prey Start" align="center"/>
            <columnAttribute name="prey_end" displayName="Prey End" align="center"/>
            <columnAttribute name="times_observed"
                       displayName="Times Observed" align="center"/>
            <columnAttribute name="number_of_searches"
                       displayName="Times Reproduced" align="center"/>
            <columnAttribute internal="true" name="prey_number_of_baits"/>
            <columnAttribute internal="true" name="gene_source_id"/>
            <linkAttribute name="preyNumberBaits"
                       displayName="Baits Interacting with Found Gene" align="center"
                       visible="$$prey_number_of_baits$$">
                <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=GeneQuestions.GenesByProteinProteinInteraction&locus_tag=$$gene_source_id$$&min_searches=1&min_observed=1&myPropbait_or_prey=prey&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="bait_number_of_preys" internal="true"/>
            <linkAttribute name="baitNumberPreys"
                       displayName="Preys Interacting with Found Gene" align="center"
                       visible="$$bait_number_of_preys$$">
                <url>
                    <![CDATA[
                      processQuestion.do?questionFullName=GeneQuestions.GenesByProteinProteinInteraction&locus_tag=$$gene_source_id$$&min_searches=1&min_observed=1&myPropbait_or_prey=bait&questionSubmit=Get+Answer
                    ]]>
                 </url>
            </linkAttribute>
            <columnAttribute name="bait_or_prey"
                       displayName="Query Gene Was" align="center"/>
        </dynamicAttributes>

    </question>





<question name="GenesByFunctionalInteraction"
         displayName="Predicted Functional Interaction"
         category="Putative Function"
         queryRef="GeneFeatureIds.GenesByFunctionalInteraction"
          summaryAttributesList="organism,location_text,product,queries_matched,query_ids,likelihood_scores"
         sortingAttributesList="organism asc,queries_matched desc,likelihood_scores desc,location_text asc"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
          Find genes of <i>P. falciparum</i> (strain HB3) identified by the <a href="http://www.cbil.upenn.edu/plasmoMAP">plasmoMAP</a> project to have a functional interaction with the given gene.        
          ]]>
        </summary>
        <description>
           <![CDATA[
Find genes of <i>Plasmodium falciparum</i> (strain HB3) identified by the <a href="http://www.cbil.upenn.edu/plasmoMAP">plasmoMAP</a> project to have a functional interaction with the given gene. 

<br><br>Input a gene ID and a minimum interaction likelihood score.  Scores range from 2 to 9435, and increasing scores indicate higher confidence.  Generally, a likelihood score of 10 or more indicates a high-confidence interaction.

<br><br>There are 388,969 total predicted protein pairs in the result set, with likelihood scores ranging from 2 to 9435. Below a score of 2, the number of false positives exceed the number of true positives. Most protein-protein interaction pairs (~79%) have a likelihood score of below 10, while about 20% of the pairs have a likelihood score between 10 and 9435 (only 251 pairs, or about 0.06% of the total, have a likelihood score above 100).

<br><br>Emperical observations of the results show that while many pairs with very low likelihood scores (say between 2-4) are biologically valid, the predicted interactions are likely to be highly accurate as the scores approach a value of 10. In the published manuscript, a score of 14 was used to isolate a high-confidence subset of interactions, where the number of true positives was about 10 times greater than the number of false positives.


<br><br><a href="http://www.genome.org/cgi/content/abstract/gr.4573206v1">Date, S.V. & Stoeckert, C.J., Jr. Computational modeling of the <i>Plasmodium falciparum</i> interactome reveals protein function on a genome-wide scale. <i>Genome Research</i>, April 2006, doi:10.1101/gr.4573206</a>
          ]]>
        </description>
<dynamicAttributes>
            <columnAttribute name="likelihood_scores"
                       displayName="Likelihood Scores" align="center"/>
            <columnAttribute name="query_ids"
                       displayName="Query IDs"/>
            <columnAttribute name="queries_matched"
                       displayName="Queries matched" align="center"/>
        </dynamicAttributes>

    </question>


<!-- Cristina: REVIEWED UP TO HERE -->

 <question name="GenesByMr4Reagents"
         displayName="MR4 Reagents Availability"
         category="Other Attributes"
         queryRef="GeneFeatureIds.GenesByMr4Reagents"
         summaryAttributesList="product,organism"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
                Find <i>P. falciparum</i> genes that have
                <a href="http://www.malaria.atcc.org/">MR4</a> reagents. 
           ]]>
        </summary>
        <description>
            <![CDATA[
                Find <i>Plasmodium falciparum</i> genes that have
                <a href="http://www.malaria.atcc.org/">MR4</a> reagents.
                <br><br>
                The reagents are mapped to genes using gene names and 
                GenBank/EMBL sequence similarity. An MR4
                reagent may be linked to multiple genes when it is not clear
                which is the correct gene or if the reagent might be considered
                to function with either gene. 
           ]]>
        </description>
    </question>


  <question name="GenesBySnps"
              category="Population Biology"
              displayName="Snp Characteristics"
              queryRef="GeneFeatureIds.GenesBySnps"
              summaryAttributesList="organism,product,num_non_synonymous,num_synonymous,num_nonsense,num_noncoding"
              sortingAttributesList="total_snps desc,cds_snp_density desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
	 Find P. falciparum or T. gondii genes which have SNPs meeting specific criteria (Non-synonymous / synonymous SNP ratio, SNP density, etc).
        </summary>
        <description>
            <![CDATA[
	Search for P. <I>falciparum</I> or T. <i>gondii</i> genes by SNP density, the number of SNPs of different classes, ratio of non-synonymous to synonymous, etc. Note that if you don't care about one of the parameters, don't change the defaults on that parameter and you will get all genes irrespective of that parameter.  
            ]]>
        </description>

	<dynamicAttributes>
             <columnAttribute name="total_snps" displayName="Total SNPs" align="center"/> 
	     <columnAttribute name="cds_snp_density" displayName="SNPs per Kb (CDS)" align="center"/>
	     <columnAttribute name="dn_ds_ratio" displayName="Non-syn/syn SNP ratio" align="center"/>
	     <columnAttribute name="num_synonymous" displayName="Synonymous SNPs" align="center"/>
	     <columnAttribute name="num_non_synonymous" displayName="Non-synonymous SNPs" align="center"/>
	     <columnAttribute name="num_nonsense" displayName="Nonsense SNPs" align="center"/>
	     <columnAttribute name="num_noncoding" displayName="Non-coding SNPs" align="center"/>
	</dynamicAttributes>

    </question>


 <question name="GenesBySubcellularLocalization"
         category="Cellular Location"
         displayName="Subcellular Localization"
              queryRef="GeneFeatureIds.GenesBySubcellularLocalization"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
               Find <i>P. falciparum</i> genes targeted to the apicoplast or the RBC membrane. 
          ]]>
         </summary>
        <description>
           <![CDATA[
               Find <i>P. falciparum</i> genes targeted to the apicoplast or the RBC membrane. Sequence motifs identified by
               Marti and co-workers (Cowman lab),  and Hiller and co-workers
               (Haldar lab), as being associated with  proteins targeted to
               the human erythrocyte, are referred to as the  'Pexel' and 'HT'
               motifs respectively.<br><br>
               <b>References:</b><br>
               <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=12560551&dopt=Citation">Foth
               BJ, Ralph SA, Tonkin CJ, Struck NS, Fraunholz M, Roos DS,
               Cowman AF, McFadden GI<br>Dissecting apicoplast targeting in
               the malaria parasite <i>Plasmodium falciparum</i><br>
               <i>Science</i> 2003 Jan 31; <b>299</b>(5607):705-8</a>
               <br><br>
                <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591203&query_hl=1">Hiller
               NL, Bhattacharjee S, van Ooij C, Liolios K, Harrison T,
               Lopez-Estrano C, Haldar K<br>
               A host-targeting signal in virulence proteins reveals a
               secretome in malarial infection<br>
               <i>Science</i> 2004 Dec 10; <b>306</b>(5703):1897-8</a><br><br>
               <a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=pubmed&dopt=Abstract&list_uids=15591202&query_hl=2">Marti
               M, Good RT, Rug M, Knuepfer E, Cowman AF<br>
               Targeting malaria virulence and remodeling proteins to the host
               erythrocyte<br>
               <i>Science</i> 2004 Dec 10; <b>306</b>(5703):1930-3</a>
          ]]>
        </description>
    </question>

<question name="GenesByExportPrediction"
         displayName="Exported Protein"
         category="Cellular Location"
         queryRef="GeneFeatureIds.GenesByExportPrediction"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes that are predicted by ExportPred to produce an exported protein.
        </summary>
        <description>
            <![CDATA[
            Find genes that are predicted by ExportPred to produce an exported protein.
            ]]>
        </description>
    </question>





<question name="GenesByExpressionTiming"
         displayName="Expression Timing (P.f)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByExpressionTiming"
         summaryAttributesList="organism,product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
          Find genes with peaks or troughs occuring within specified intervals during the intraerythrocytic infection cycle. 
        </summary>
        <description>
           <![CDATA[
              Find genes with peaks or troughs occuring within specified intervals during the intraerythrocytic infection cycle.  Five intraerythrocytic time courses may be
              queried in turn (and results may be combined using the
              <a href="showQueryHistory.do">query history</a>).  The time
              courses are those provided by the
               <a href="http://derisilab.ucsf.edu/">DeRisi
              Lab</a>. They are from a
              glass slide array and analyze HB3, 3D7, and Dd2 parasites.
          ]]>
        </description>
    </question>


<question name="GenesByProfileSimilarity" 
         displayName="Expression Profile Similarity (P.f.)" 
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByProfileSimilarity"
         summaryAttributesList="organism,distance,time_shift,profilesGraph"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
         <summary>
          Find P.f. genes that have a similar expression profile to your input gene.         
         </summary>
         <description>
           <![CDATA[
           Find P.falciparum genes that have a (glass slide) expression profile similar to that of your input gene.
             Find genes that have similar expression profile to your input gene. 
          ]]>
         </description>
         <dynamicAttributes>
             <columnAttribute name="distance" displayName="Profile Distance"
                              inReportMaker="true"/>
             <columnAttribute name="time_shift" displayName="Time Shift"
                              inReportMaker="true"/>
             <columnAttribute name="query_source_id" displayName="QueryGeneId"
                        inReportMaker="false"/>
             <textAttribute name="profilesGraph" displayName="Profiles"
                        inReportMaker="false" truncateTo="100000">
                <text>
                   <![CDATA[
                   <img src="@CGI_URL@/dataPlotter.pl?id=$$primaryKey$$&sid=$$query_source_id$$&type=DeRisiProfileQuery::Ver1&fmt=png&thumb=1"/>
                    ]]>
                </text>
             </textAttribute>
         </dynamicAttributes>
    </question>

<question name="GenesByExpressionPercentile"
         displayName="Expression Percentile (P.f.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByExpression"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
         Find <i>P. falciparum</i> genes expressed in early ring, late ring, early trophozoite, late trophozoite, early
         schizont, late schizont, merozoite, sporozoite, or gametocyte.
          ]]>
        </summary>
        <description>
           <![CDATA[
        Find genes expressed in 
        early ring, late ring, early trophozoite, late trophozoite, early
        schizont, late schizont, merozoite, sporozoite, or gametocyte.  
        <br><br>
        
        The data is from a total of 17 microarray experiments (1) performed using an
        Affymetrix short oligonucleotide platform.  Cultures were synchronized
        using two independent methods, 5% D-sorbitol and temperature cycling,
        for all developmental stages except Gametocyte and Sporozoite.  This
        platform contains oligos (25-mers) derived from the predicted coding
        regions of the entire <I>P. falciparum</I> genome.
        <P>Expression values for each probe set were obtained by the MOID
        algorithm (2). Queries can be performed to retrieve only those genes
        in at least the Xth percentile level, where X can be from 95 to 5.  In
        this way it is possible to select only the most highly expressed
        genes, to any desired level above the 5th percentile.  Genes are
        returned in decreasing order of their intensity.
        <p>However, please note that, regardless of the percentile expression
        level selected, only genes that are above background and whose
        observed expression level would not be expected by chance (MOID
        expression level >10 and logP < -0.5) are included and will be
        reported.  This means that genes that have only a single probe on the
        array will not be reported as their logP values will always be too
        high to satisfy the query.
        <p><b>References:</b><br> (1) Discovery of Gene Function by Expression
        Profiling of the Malaria Parasite Life Cycle.  Karine G. Le Roch,
        Yingyao Zhou, Peter L. Blair, Muni Grainger, J. Kathleen Moch, J.
        David Haynes, Patricia De la Vega, Anthony A. Holder, Serge Batalov,
        Daniel J. Carucci, and Elizabeth A. Winzeler Published online July 31,
        2003; 10.1126/science.1087025 (Science Express Research Articles)
        <br>(2) Zhou Y, Abagyan R. Match-Only Integral Distribution (MOID)
        Algorithm for high-density oligonucleotide array analysis. BMC
        Bioinformatics. 2002;3(1):3.
          ]]>
        </description>
     <!--   <dynamicAttributes>
            <columnAttribute name="max_percentile" displayName="Max Percentile"
                             inReportMaker="false"/>
            <columnAttribute name="min_percentile" displayName="Min Percentile"
                             inReportMaker="false"/>
        </dynamicAttributes>-->
    </question>

<question name="BergheiGenesByExpressionPercentile"
         displayName="Expression Percentile (P.b.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.BergheiGenesByExpressionPercentile"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
        Find <i>P. berghei</i> genes expressed in mature schizont, ring, young trophozoite and young schizont stages.
         ]]>
        </summary>
        <description>
           <![CDATA[
Find <i>P. berghei</i> genes expressed in mature schizont, ring, 
young trophozoite, and young schizont stages. The stages were all hybridized 
with mature trophozoites allowing us to use mature trophozoites as a reference 
for this query.
<p>
There are two timecourses: HP and HPE.  HP is High Producer (as in gametocytes) and HPE is High Producer "E".  HP was mechanically passaged on a weekly basis from mouse to mouse and 10 independent experiments were set up (HPA-HPJ).  The parasites were observed, waiting for non-producing parasites to appear.  HPE was the chosen one. A deletion in HP was assumed to have created HPE (they are otherwise isogenic) and KO'd the production of gametocytes.  In such a scenario the non-producer would quickly overgrow the producer.  Both are cloned.    
      ]]>
        </description>
    </question>

<question name="GenesByGametocyteExpression"
         displayName="Gametocyte Expression (P.f.)"
         category="Transcript Expression"
         queryRef="GeneFeatureIds.GenesByGametocyteExpression"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
                Find <i>P. falciparum</i> genes by
                percentile protein expression in gametocytes.
           ]]>
        </summary>
        <description>
            <![CDATA[
                Find <i>Plasmodium falciparum</i> genes expressed during
                gametocytogenesis in strain NF54, strain 3D7, or MACS-purified
                strain 3D7. It uses data from a total of 23 microarray
                experiments (1).<br>
                These experiments were performed using an Affymetrix short
                oligonucleotide platform, which contains oligos (25-mers)
                derived from the predicted coding regions of the entire <I>P.
                falciparum</I> genome. </P> <P> Expression values for each
                probe set were obtained by the MOID algorithm (2). Genes can
                be found by their percentile expression in the selected set of
                assays.<br><br>
                However, please note that, regardless of the percentile
                expression level selected, only genes that are above
                background and whose observed expression level would not be
                expected by chance (MOID expression level >10 and logP < -0.5)
                are included and will be reported.  This means that genes that
                have only a single probe on the array will not be reported as
                their logP values will always be too high to satisfy the query.
                <br><br>
                <pre><b>References:</b><br>(1) Jason A. Young, Quinton L. Fivelman, Peter L. Blair, Patricia de la Vega,<br>Karine G. Le Roch, Yingyao Zhou, Daniel J. Carucci, David A. Baker, Elizabeth A. Winzeler<br><a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=16005087&dopt=Citation">The Plasmodium falciparum sexual development transcriptome: a microarray analysis using ontology-based pattern identification</a><br>Mol Biochem Parasitol. 2005 Jul 5; <br>(2) Zhou Y, Abagyan R.<br><a href="http://www.biomedcentral.com/1471-2105/3/3">Match-Only Integral Distribution (MOID) Algorithm for high-density oligonucleotide array analysis.</a><br>BMC Bioinformatics. 2002;3(1):3.</pre> 
           ]]>
        </description>
    </question>


 <question name="GenesByMassSpec"
         displayName="Plasmodium falciparum"
         category="Protein Expression"
         queryRef="GeneFeatureIds.GenesByMassSpec"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
           <![CDATA[
                Find <I>P. falciparum</I> genes that have evidence of
                expression in a specific lifecycle stage
                or within a subcellular fraction of the parasite. 
          ]]>
        </summary>
        <description>
            <![CDATA[
                Find <I>P. falciparum</I> genes that have evidence of
                expression in a specific lifecycle stage
                or within a subcellular fraction of the parasite. Select the experimental condition which have MS/MS peptide
                evidence and only genes with proteomics evidence will be
                returned,  i.e. genes whose proteins have  minimum number of 1
                observed MS spectrum or identified peptides. Specify a
                higher number for these values to select proteins
                that will be more abundant in the examined experimental
                condition/developmental stage/subcellular fraction. These values are not strictly quantitative
                as the detection of proteins in MS/MS analyses is dependent on
                solubility of the proteins and other factors. Specify the amount of amino acid sequence (sequence
                coverage) in % that was identified in the respective assay.
                If this parameter is set to 0% by default, only
                genes with at least one spectrum for the specified stage will
                be returned. 
                <br><br>
                <UL type='a'>Current data sets stored in PlasmoDB:
                <LI> Florens 2002: Merozoites, Trophozoites, Sporozoites,
                Gametocytes
                <LI> Florens 2004: Membranes_iRBC, CompleteTrophozoiteSchizont
                </UL>
                Selecting "any" will result in returning genes that appear in
                any of the available datasets.<BR>
                Please refer to the original papers for more information
                on the experiments and experimental conditions. 
                <PRE> <B>References:</B><BR>
                a) Florens, L., Washburn, M.P., Raine, J.D., Anthony, R.M., Grainger, M., Haynes, J.D.,<BR>
                Moch, J.K., Muster, N., Sacci, J.B., Tabb, D.L., Witney, A.A., Wolters, D., Wu, Y.,<BR>
                Gardner, M.J., Holder, A.A., Sinden, R.E., Yates, J.R., Carucci, D.J. (2002)<BR>
                A proteomic view of the <I>Plasmodium falciparum</I> life cycle. Nature 419: 520-526.<BR><BR>
                c) Lasonder, E., Ishihama, Y., Andersen, J.S., Vermunt, A.M., Pain, A., Sauerwein, R.W.,<BR>
                Eling, W.M., Hall, N., Waters, A.P., Stunnenberg, H.G., Mann M. (2002) Analysis of the<BR>
                Plasmodium falciparum proteome by high-accuracy mass spectrometry. Nature. 419:537-542.<BR><BR>
                b) Florens, L., Liu X., Wang, Y., Yang, S., Schwartz, O., Peglar, M., Carucci, D.J.,Yates,<BR>
                J.R., Wu, Y.  Proteomics Approach Reveals Novel Proteins on the Surface of Malaria-Infected <BR>
                Erythrocytes (in press) <BR> </PRE>
                        ]]>
        </description>
    </question>

 <question name="GenesByMassSpecCrypto"
              category="Protein Expression"
              displayName="Cryptosporidium"
              queryRef="GeneFeatureIds.GenesByMassSpecCrypto" 
              summaryAttributesList="product,organism"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find &lt;i&gt;Cryptosporidium&lt;/i&gt; genes that have evidence of expression 
             based on peptides identified in sporozoites by MS/MS analysis.
              </summary>
              <description>
              <![CDATA[
             <p>
             Find <i>Cryptosporidium</i> genes that have evidence of expression 
             based on peptides identified by MS/MS analysis in an sporozoite excystation mixture. Some contaiminating oocyst proteins will also be in the mixture.<p>
             <p>See the related <a href="showQuestion.do?questionFullName=OrfQuestions.OrfsByMassSpec"><b>ORFs with Mass Spec. Evidence</b></a> query to find genomic open reading frames which have mapped MS/MS peptides 
             that do not correspond to current gene models.
             <p>
             <font color="red">Notice: This is a preliminary, preview release of <i>Cryptosporidium</i> proteomics data.
             A significantly more comprehensive analyis is forthcoming. Community feedback on this initial data is welcome.</font><p>
             MS/MS analysis provided by <i>J.M.
             Wastling, S. Sanderson, D. Xia and A.Z. Siddiki. 
             Departments of Pre-Clinical Veterinary Science & Veterinary Pathology<br>University of Liverpool, 
             Crown Street, Liverpool, United Kingdom L69 7ZJ</i>
             ]]>
             </description>
    </question>

    <question name="GenesByProteomicsProfile"
         displayName="Plasmodium berghei"
         category="Protein Expression"
         queryRef="GeneFeatureIds.GenesByProteomicsProfile"
         summaryAttributesList="product"
         recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            <![CDATA[
            Find <i>P. berghei</i> genes with the specified protein expression across different life cycle stages.
            ]]>
        </summary>
        <description>
            <![CDATA[
            Find <i>P. berghei</i> genes with the specified protein expression across different life cycle stages.  For each life cycle stage, choose "observed", "not observed" or "do not care".   Genes are returned that have a matching expression pattern. 
            ]]>
        </description>
    </question>


    <question name="GenesByWatersDifferentialExpression"
              category="Transcript Expression"
              displayName="Differential Expression in DOZI mutant vs. WT (P.b.)"
              queryRef="GeneFeatureIds.GenesByWatersDifferentialExpression" 
              summaryAttributesList="product,fold_change,confidence"
              sortingAttributesList="fold_change desc,confidence desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find differential Expression in DOZI mutant vs. WT
        </summary>
        <description>
            <![CDATA[ Find differential Expression in DOZI mutant vs. WT
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold Change"/>
	     <columnAttribute name="confidence" displayName="Confidence"/>
	</dynamicAttributes>
    </question>

<question name="GenesByDifferentialMeanExpression"
              category="Transcript Expression"
              displayName="Differential Expression in Sir2 KO and Invasion Pathway Studies (P.f.)"
              queryRef="GeneFeatureIds.GenesByDifferentialMeanExpression" 
              summaryAttributesList="product,fold_change"
              sortingAttributesList="fold_change desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by differential expression in Sir2 KO and invasion pathway studies (P.f.)
        </summary>
        <description>
            <![CDATA[
Find genes whose expression was found to be up-regulated or down-regulated in a particular microarray study based upon PaGE differential expression analysis.
<p>
<u>3D7 SIR2 KO 8hr</u><br>
Differential expression in the ring stage (8 hr) of P. Falciparum 3D7 when the Sir2 (PF13_0152) gene is knocked out.
<p>
<u>D10 WT 48 hr</u><br>
Differential expression from synchronized parasites 48 hr post-invasion between the P. falciparum D10 (naturally lacking the pfRh2b/ MAL13P1.176 and EBA-140/ MAL13P1.60 genes) and 3D7 strains.
<p>
<u>3D7PfRh2b KO 48hr</u><br>
Differential expression from synchronized P. falciparum 3D7 parasites 48 hr post-invasion when the pfRh2b ( MAL13P1.176) gene is knocked out.
<p>
For further information on the experiments, refer to:
<p>
Duraisingh et al., Heterochromatin silencing and locus repositioning linked to regulation of virulence genes in Plasmodium falciparum. Cell. 2005 Apr 8;121(1):13-24
<p>
Baum et al., Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions. PLoS Pathog. 2005 Dec;1(4):e37 
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold-change"/>
	</dynamicAttributes>
    </question>

<question name="GenesByExpressionPercentileA"
              category="Transcript Expression"
              displayName="Expression Percentile in Sir2 KO and Invasion Pathway Studies (P.f.)"
              queryRef="GeneFeatureIds.GenesByExpressionPercentileA" 
              summaryAttributesList="product,percentile"
              sortingAttributesList="percentile desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by expression percentile from Sir2 KO and invasion pathway studies (P.f.) 
        </summary>
        <description>
            <![CDATA[


Find genes expressed when the Sir2 histone deacetylase gene is knocked out, when an erythrocyte binding protein (EBA-175, EBA-140, or pfRh2b) is knocked out, or in  their associated controls.
<p>
The data is from a total of 17 microarray experiments (1, 2, 3) performed using an Affymetrix short oligonucleotide platform. This platform contains oligos (25-mers) derived from the predicted coding regions of the entire P. falciparum genome (4). The Sir2 Knock out (KO) experiments were designed to look at var gene silencing by Sir2 (PF13_0152). The EBA-175 (MAL7P1.176), EBA-140 (MAL13P1.60), and pfRh2b (MAL13P1.176) KOs were performed to study sialic acid-dependent versus sialic acid-independent invasion pathways. W2mef/C4/Nm is a sialic acid-independent clone. The D10 strain naturally is missing the pfRh2b and EBA-140 genes.
<p>
Expression values for each probe set were obtained by the gcRMA algorithm (5). Queries can be performed to retrieve only those genes in at least the Xth percentile level, where X can be from 95 to 5. In this way it is possible to select only the most highly expressed genes, to any desired level above the 5th percentile. Genes are returned in decreasing order of their intensity.
<p>
References:
<p>

(1) Duraisingh et al., Heterochromatin silencing and locus repositioning linked to regulation of virulence genes in Plasmodium falciparum. Cell. 2005 Apr 8;121(1):13-24
<p>

(2) Stubbs et al., Molecular mechanism for switching of P. falciparum invasion pathways into human erythrocytes. Science. 2005 Aug 26;309(5739):1384-7
<p>

(3) Baum et al., Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions. PLoS Pathog. 2005 Dec;1(4):e37

<p>
(4) Discovery of Gene Function by Expression Profiling of the Malaria Parasite Life Cycle. Karine G. Le Roch, Yingyao Zhou, Peter L. Blair, Muni Grainger, J. Kathleen Moch, J. David Haynes, Patricia De la Vega, Anthony A. Holder, Serge Batalov, Daniel J. Carucci, and Elizabeth A. Winzeler Published online July 31, 2003; 10.1126/science.1087025 (Science Express Research Articles)

<p>

(5) http://bioconductor.org/packages/bioc/html/gcrma.html
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="percentile" displayName="Percentile"/>
	</dynamicAttributes>
    </question>



<question name="GenesByDifferentialExpression"
              category="Transcript Expression"
              displayName="Differential Expression (T.g.)"
              queryRef="GeneFeatureIds.GenesByDifferentialExpression" 
              summaryAttributesList="product,fold_change,confidence"
              sortingAttributesList="fold_change desc,confidence desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by differential expression analysis
        </summary>
        <description>
            <![CDATA[
             Find genes whose expression was found to be up-regulated or down-regulated 
	    in a particular microarray study based upon 
            <a href="http://www.cbil.upenn.edu/PaGE/">PaGE</a> differential expression analysis.	    
	     <BR>&nbsp;<BR>
	     <center>
	     <table border="1" width="90%"
	     <thead><tr><td><b>Experiment</b></td><td><b>Description</b></td></thead>
	     <tr><td>Expression profiling of three archetypal T. gondii lineages</td>
	         <td>Determination of  strain-specific differential expression by profiling 
		 wildtype tachyzoites from the RH, Prugniaud and CTG strains of T. gondii</td></tr>
	     <tr><td colspan=2> For the other experiment, click 
	     <a href="showQuestion.do?questionFullName=GeneQuestions.GenesByDifferentialExpression2"> 
	     here </a>.</td></tr>
	     </table>
	     </center>
	     <BR>
	     For further information on the strains, refer to: <BR>
	     Howe, D. K., and L. D. Sibley. 1995. Toxoplasma gondii comprises three clonal lineages:
	     correlation of parasite genotype with human disease. J. Infect. Dis. 172:1561-1566 
	     <BR>&nbsp;<BR>
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="fold_change" displayName="Fold Change"/>
	     <columnAttribute name="confidence" displayName="Confidence"/>
	</dynamicAttributes>
    </question>



    <question name="ToxoGenesByExpressionPercentile"
              category="Transcript Expression"
              displayName="Expression Percentile (T.g.)"
              queryRef="GeneFeatureIds.ToxoGenesByExpressionPercentile" 
              summaryAttributesList="product,percentile"
              sortingAttributesList="percentile desc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <summary>
            Find genes by expression percentile analysis
        </summary>
        <description>
            <![CDATA[
	    Find genes which are expressed over a given percentile in a particular strain.
For further information on the strains, refer to:
Howe, D. K., and L. D. Sibley. 1995. Toxoplasma gondii comprises three clonal lineages: correlation of parasite genotype with human disease. J. Infect. Dis. 172:1561-1566
            ]]>
        </description>
	<dynamicAttributes>
	     <columnAttribute name="percentile" displayName="Percentile"/>
	</dynamicAttributes>
    </question>


    <question name="GenesWithEpitopes" 
              category="Other Attributes"
              displayName="Epitope Presence"
              queryRef="GeneFeatureIds.GenesWithEpitopes" 
              summaryAttributesList="product,organism,location_text,count,confidence"
        sortingAttributesList="organism desc,location_text desc, count desc, confidence asc"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
             <summary>
              <![CDATA[
                Find <i>Plasmodium</i> genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune Epitope Database and Analysis Resource</a>. 
              ]]>
             </summary>
              <description>
              <![CDATA[
                Find genes whose encoding protein has an epitope identified 
                by the <a href="http://www.immuneepitope.org">Immune 
                Epitope Database and Analysis Resource</a><sup>1</sup> (IEDB). <br>
                The epitopes have been remapped from the original Epitope Source Accession Number 
                provided by IEDB to the corresponding gene identifiers used in PlasmoDB.
                <p><hr><p>
                <font size='-1'>
                <sup>1</sup>Peters B, Sidney J, Bourne P, Bui HH, Buus S, Doh G, Fleri W, 
                Kronenberg M, Kubo R, Lund O, Nemazee D, Ponomarenko JV, Sathiamurthy M, Schoenberger S, 
                Stewart S, Surko P, Way S, Wilson S, Sette A. 
                <a href="http://biology.plosjournals.org/perlserv/?request=get-document&amp;doi=10.1371/journal.pbio.0030091">The immune epitope database and analysis resource: from vision to blueprint. 
                PLoS Biol. 2005 Mar;3(3):e91</a>
                 </font>
              ]]>
              </description>
        <dynamicAttributes>
           <columnAttribute name="count" displayName="Epitope Count" align="center"/>
            <columnAttribute name="confidence" displayName="Confidence" align="center"/>
        </dynamicAttributes>
    </question>

    <question name="ToxoGenesByMassSpec"
              category="Protein Expression"
              displayName="Toxoplasma gondii"
              queryRef="GeneFeatureIds.ToxoGenesByMassSpec" 
              summaryAttributesList="product,organism,sequence_id"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
              <summary>
              Find &lt;i&gt;Toxoplasma&lt;/i&gt; genes that have evidence of expression 
             based on peptides identified ..
              </summary>
              <description>
              <![CDATA[
             <p>
             Find <i>Toxoplasma</i> genes that have evidence of expression 
             <!--based on peptides identified by MS/MS analysis in an sporozoite excystation mixture. Some contaiminating oocyst proteins will also be in the mixture.--><p>
             <p>See the related <a href="showQuestion.do?questionFullName=OrfQuestions.OrfsByMassSpec"><b>ORFs with Mass Spec. Evidence</b></a> query to find genomic open reading frames which have mapped MS/MS peptides that do not correspond to current gene models.
             <p>
             <sup>2</sup><i>Hu K, Johnson J, Florens L, Franholz M, Suravajjala S, 
	     DiLullo C, Yates JR, Roos DS, Murray JM. (2006) 
	     Cytoskeletal Components of an Invasion Machine - The Apical Complex of Toxoplasma gondii. 
	     PLoS Pathog <b>2</b>:e13.</i>
             ]]>
             </description>
    </question>


</questionSet>
<!-- questions for internal use -->
<questionSet name="InternalQuestions"
             displayName="Internal Questions"
             internal="yes">

 <question name="SRT" displayName="Sequence Retrieval Tool"
              queryRef="InternalQuery.SRT"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
        </description>
 </question>

    <question name="GenesByOrthologs"
         displayName="Genes Orthologous to Genes in a Query Result"
              queryRef="GeneFeatureIds.GenesByOrthologs"
              summaryAttributesList="organism,product"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           <![CDATA[
Find the Crypto, Plasmo, Toxo genes that are orthologs (or paralogs) of the genes in a Query History result.  

The typical use of this query starts by having an interesting set of genes in a result. Then, from the result or from the Query History, click on the "Orthologs" link to come here. Here you can find orthologs of those genes in the less well-annotated species.  In general, use this query to transform sets of genes from one species to others.<br>Ortholog groups were generated from 61 species using OrthoMCL as described in   Li L, Stoeckert CJ Jr, Roos DS. OrthoMCL: identification of ortholog groups for eukaryotic genomes. Genome Res. 2003 13:2178-89. These species include the 55 used to generate orthologs groups at the <a href="http://orthomcl.cbil.upenn.edu/cgi-bin/OrthoMclWeb.cgi">OrthoMCL DB site</a> plus <i>P. vivax, Leishmania major, T. brucei, T. cruzi, Apis mellifera</i> (honeybee) and <i>S. purpatus</i> (sea urchin).  The OrthoMCL DB site is described in Feng et al. Nucleic Acids Res. 2006 Database Issue.
          ]]>
        </description>
    </question>

<question name="GenesByMicroarrayEvidence" displayName="Microarray evidence"              queryRef="GeneFeatureIds.GenesByExportPrediction"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           Find P.f. and P.b. genes based on transcript expression data from microarray experiments.
        </description>
    </question>


 <question name="GenesByMassSpecEvidence" displayName="Mass spectrometry evidence"              queryRef="GeneFeatureIds.GenesByExportPrediction"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           Find P.f. and P.b. genes based on protein expression data from mass spectrometry experiments.
        </description>
    </question>

 <question name="GenesByProteinStructure" displayName="Protein Structure"
              queryRef="GeneFeatureIds.GenesByExportPrediction"
              recordClassRef="GeneRecordClasses.GeneRecordClass">
        <description>
           Find genes based on secondary and 3-D protein structure.
        </description>
    </question>



</questionSet>

<!-- SRT Query -->
<querySet name="InternalQuery">
<wsQuery name="SRT" displayName="Sequence Retrieval Tool" processName="none">
   <paramRef ref="SrtParams.genes_ids"/>
   <paramRef ref="SrtParams.contigs_ids"/>
   <paramRef ref="SrtParams.orfs_ids"/>
   <wsColumn name="source_id"/>
</wsQuery>
</querySet>
<!-- End SRT Query-->


<!-- //////////  GENOMIC SEQUENCE QUESTIONS  //////////// -->
<!-- questions that return Contig records -->
<questionSet name="GenomicSequenceQuestions"
             displayName="Find Genomic Sequences by">

    <description>
      Find Genomic Sequences
    </description>
    
    <question name="SequenceBySourceId" 
              displayName="Genomic Sequence ID"
              category="Other Attributes"
              queryRef="GenomicSequenceIds.SequenceBySourceId" 
              summaryAttributesList="organism"
              recordClassRef="ContigRecordClasses.ContigRecordClass">
             <summary>
             Find genomic sequences by ID (GenBank Accession Number).
             </summary>
             <description>
             <![CDATA[
             Find genomic sequences by GenBank Accession Number.  Examples are: AAEL010000057, AAEE01000009, BX526834, MAL4, Ia)
             ]]>
             </description>
    </question>


   
    <question name="SequencesByTaxon"
         displayName="Species"
              queryRef="GenomicSequenceIds.SequencesByTaxon"
              summaryAttributesList="organism"
              recordClassRef="ContigRecordClasses.ContigRecordClass">
        <summary>
<![CDATA[
          Find chromosomes or contigs from <i>Cryptosporidium</i>, <i>Plasmodium</i> and <i>Toxoplasma</i> species.
 ]]>
        </summary>
        <description>
           <![CDATA[
          Find chromosomes or contigs from <i>Cryptosporidium</i>, <i>Plasmodium</i> and <i>Toxoplasma</i> species.
          ]]>
        </description>
    </question>

 <question name="SequencesBySimilarity"
              displayName="BLAST Similarity"
              category="Similarity/Pattern"
              queryRef="GenomicSequenceIds.SequencesBySimilarity"
              summaryAttributesList="Header,TabularRow,Alignment,Footer"
              recordClassRef="ContigRecordClasses.ContigRecordClass">
              <summary>
              <![CDATA[
              Find genomic sequences that have BLAST similarity to your input query sequence.
              ]]>
              </summary>
              <description>
              <![CDATA[
              This query finds <b>genomic sequences</b> with BLAST matches to an query input sequence.  The <a href="http://blast.wustl.edu/" target="_blank">WU BLAST</a> program is used for the search.
              ]]>
              </description>

         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="Blast summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="Blast alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="Blast header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="Blast footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>


</questionSet>


<!-- //////////  EST QUESTIONS  //////////// -->
<!-- questions that return EST records -->
<questionSet name="EstQuestions"
             displayName="Find ESTs by">

    <description>
      Find ESTs
    </description>
    

<question name="EstsBySimilarity"
         displayName="BLAST Similarity"
         category="Similarity/Pattern"
         queryRef="EstIds.EstsBySimilarity"
         summaryAttributesList="Header,TabularRow,Alignment,Footer"
         recordClassRef="EstRecordClasses.EstRecordClass">
         <summary>
             Find ESTs that have BLAST similarity to your input query sequence.
         </summary>
         <description>
           <![CDATA[
             This query finds <b>ESTs</b> with BLAST matches to an input query sequence.  The <a href="http://blast.wustl.edu/" target="_blank">WU BLAST</a> program  is used for the search.
   ]]>
         </description>

         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="Blast summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="Blast alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="Blast header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="Blast footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>


<question name="EstsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="EstIds.EstsByLocation"
              summaryAttributesList="organism"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <summary>
            Find ESTs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ESTs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the EST(s) on the chromosome.
            ]]>
        </description>
    </question>

 <!-- EstQuestions.EstsByLibrary -->
    <question name="EstsByLibrary"
              category="Transcript Expression"
              displayName="Library"
              queryRef="EstIds.EstsByLibrary"
              summaryAttributesList="organism"
              recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs by Library Name</description>
    </question>

    <!-- EstQuestions.EstsWithGeneOverlap -->
    <question name="EstsWithGeneOverlap"
         displayName="Extent of Gene Overlap"
         queryRef="EstIds.EstsWithGeneOverlap"
         summaryAttributesList="organism"
         sortingAttributesList="organism asc"
         recordClassRef="EstRecordClasses.EstRecordClass">
        <description>Find ESTs that Overlap a Gene..</description>
<!--        <dynamicAttributes>
            <columnAttribute name="est_locations" displayName="EST location(s)"/>
            <columnAttribute name="gene_ids" displayName="Gene(s)"/>
        </dynamicAttributes>-->
    </question>
 
</questionSet>


<!-- //////////  ORF QUESTIONS  //////////// -->
<!-- questions that return Orf records -->
<questionSet name="OrfQuestions"
             displayName="Find Orfs by">

    <description>
      Find ORFs
    </description>


<question name="OrfsByLocation"
              category="Genomic Position"
              displayName="Genomic Location"
              queryRef="OrfIds.OrfsByLocation"
              summaryAttributesList="organism"
              sortingAttributesList="organism asc"
              recordClassRef="OrfRecordClasses.OrfRecordClass">
        <summary>
            Find ORFs that are located in a specified genomic region.
        </summary>
	<description>
            <![CDATA[
	    Find ORFs within a given genomic region.<br>
            Enter the name of a chromosome (e.g. "VIIa") or a scaffold (e.g.
            "TGG_995305"). The Start and End locations correspond to the
            coordinates of the ORF(s) on the chromosome.
            ]]>
        </description>
    </question>

<question name="OrfsByMotifSearch"
         displayName="Protein Motif"
         category="Similarity/Pattern"
         queryRef="OrfIds.OrfsByMotifSearch"
         summaryAttributesList="organism,Locations,MatchCount,Sequence"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
         <summary>
             Find ORFs whose sequence contains a motif pattern that you specify, e.g. "two cysteines followed by 2 or 3 charged residues and a hydrophobic stretch of 6-8 amino acids".                                          
         </summary>
         <description>
           <![CDATA[

          Find ORFs whose sequence contains a motif pattern that you specify.

           Specify the pattern with a (Perl style) "regular expression".
           (Regular expressions are more powerful than PROSITE patterns.) For
           a description of how to create regular expressions, please see 
           the  <a href="regexp.jsp">Regular Expression
           Tutorial</a>.
            <br><br>
             The following codes can be used to represent classes of amino acids.
        <table border columns=3>
                   <TR>
                      <TD><B>AA property</B>
                      </TD>
                      <TD><B>Amino acids</B>
                      </TD>
                      <TD><B>Code</B>
                      </TD>
                   </TR>

                   <TR>
                      <TD>
                      <B>Acidic</B>
                      </TD>
                      <TD><B>DE</B>
                      </TD>
                      <TD><B>0</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Alcohol</B>
                      </TD>
                      <TD><B>ST</B>
                      </TD>
                      <TD><B>1</B>
                      </TD>
                   </TR>
                   <TR>
<TD><B>Aliphatic</B>
                      </TD>
                      <TD><B>ILV</B>
                      </TD>
                      <TD><B>2</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Aromatic</B>
                      </TD>
                      <TD><B>FHWY</B>
                      </TD>
                      <TD><B>3</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Basic</B>
                      </TD>
                      <TD><B>KRH</B>
                      </TD>
                      <TD><B>4</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Charged</B>
                      </TD>
                      <TD><B>DEHKR</B>
                      </TD>
                      <TD><B>5</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophobic</B>
                      </TD>
                      <TD><B>AVILMFYW</B>
                      </TD>
                      <TD><B>6</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Hydrophilic</B>
                      </TD>
                      <TD><B>KRHDENQ</B>
                      </TD>
                      <TD><B>7</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Polar</B>
                      </TD>
                      <TD><B>CDEHKNQRST</B>
                      </TD>
                      <TD><B>8</B>
                      </TD>
</TR>
                   <TR>
                      <TD><B>Small</B>
                      </TD>
                      <TD><B>ACDGNPSTV</B>
                      </TD>
                      <TD><B>9</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Tiny</B>
                      </TD>
                      <TD><B>AGS</B>
                      </TD>
                      <TD><B>B</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Turnlike</B>
                      </TD>
                      <TD><B>ACDEGHKNQRST</B>
                      </TD>
                      <TD><B>Z</B>
                      </TD>
                   </TR>
                   <TR>
                      <TD><B>Any</B>
                      </TD>
                      <TD><b>ACDEFGHIKLM<br>
                             NPQRSTVWY</b>
                      </TD>
                      <TD><B>.</B>
                      </TD>
                   </TR>
                   </table>

          ]]>
         </description>
         <dynamicAttributes>
           <columnAttribute name="Locations" inReportMaker="false"/>
           <columnAttribute name="MatchCount" displayName="Match Count"
                            inReportMaker="false"/>
           <columnAttribute name="Sequence" inReportMaker="false" truncateTo="4000"/>
         </dynamicAttributes>
    </question>




<question name="OrfsBySimilarity"
         displayName="BLAST Similarity"
         category="Similarity/Pattern"
         queryRef="OrfIds.OrfsBySimilarity"
         summaryAttributesList="Header,TabularRow,Alignment,Footer"
         recordClassRef="OrfRecordClasses.OrfRecordClass">
         <summary>
             Find ORFs that have BLAST similarity to your input query sequence.
         </summary>
         <description>
           <![CDATA[
             This query finds <b>ORFs</b> with BLAST matches to an input query sequence.  The <a href="http://blast.wustl.edu/" target="_blank">WU BLAST</a> program is used for the search.
   ]]>
         </description>

         <dynamicAttributes>
             <columnAttribute name="TabularRow" displayName="Blast summary"
                              inReportMaker="false"/>
             <columnAttribute name="Alignment" displayName="Blast alignment"
                              inReportMaker="false"/>
             <columnAttribute name="Header" displayName="Blast header"
                              inReportMaker="false"/>
             <columnAttribute name="Footer" displayName="Blast footer"
                              inReportMaker="false"/>
         </dynamicAttributes>
    </question>
    
<!-- OrfQuestions.OrfsByMassSpec -->
    <question name="OrfsByMassSpec"
              category="Other Attributes"
              displayName="Mass Spec. Evidence"
              queryRef="OrfIds.OrfsByMassSpec" 
              summaryAttributesList="organism"
              recordClassRef="OrfRecordClasses.OrfRecordClass">
              <summary>
              Find &lt;i&gt;Toxoplasma&lt;/i&gt; open reading frames that have evidence of expression 
             <!--based on peptides identified in sporozoites by MS/MS analysis-->.
              </summary>
              <description>
              <![CDATA[
             Find <i>Cryptosporidium</i> open reading frames that have evidence of expression 
             based on peptides identified by MS/MS analysis
<!-- in an sporozoite excystation mixture. Some contaiminating oocyst proteins will also be in the mixture-->.<p>
            See the related <a href="showQuestion.do?questionFullName=GeneQuestions.GenesByMassSpec"><b>Genes with Mass Spec. Evidence</b></a> query to find gene models which have mapped MS/MS peptides.
            <p>
             <!--sup>1</sup><i>J.M. Wastling, S. Sanderson, D. Xia and A.Z. Siddiki.              Departments of Pre-Clinical Veterinary Science & Veterinary Pathology<br>University of Liverpool,              Crown Street, Liverpool, United Kingdom L69 7ZJ</i>-->
             <sup>2</sup><i>Hu K, Johnson J, Florens L, Franholz M, Suravajjala S, 
	     DiLullo C, Yates JR, Roos DS, Murray JM. (2006) 
	     Cytoskeletal Components of an Invasion Machine - The Apical Complex of Toxoplasma gondii. 
	     PLoS Pathog <b>2</b>:e13.</i>             ]]>
             </description>
    </question>


</questionSet>

<questionSet name="SnpQuestions"
             displayName="Find SNPs by">
     <description>
         "Find SNPs"
     </description>


<!--
     <question name="SnpBySourceId"
               displayName="ID"
               queryRef="SnpsBy.SnpBySourceId"
	       summaryAttributesList=""
	       recordClassRef="SnpRecordClasses.SnpRecordClass">
          <summary>
            Find SNPs by ID
          </summary>
	  <description>
	    <![CDATA[
              Find SNPs by ID
	    ]]>
	  </description>
      </question>
-->

      <question name="SnpsByGeneId"
              category="Gene"
              displayName="Gene ID"
              queryRef="SnpsBy.SnpsByGeneId"
              summaryAttributesList="snp_location,linkedGeneId, ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find SNPs that are located in a specified gene.
        </summary>
	<description>
            <![CDATA[
              Find SNPs that are contained within a gene.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes> 
    </question>

    <question name="SnpsByLocation"
              category="Genomic Position"
              displayName="Chromosomal Location"
              queryRef="SnpsBy.SnpsByLocation"
              summaryAttributesList="snp_location,linkedGeneId,ref_strain,ref_allele,ref_product,comp_strains,comp_alleles,comp_products,position_in_protein,phenotype"
              sortingAttributesList="snp_location asc"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find P.f. SNPs by chromosomal location
        </summary>
	<description>
            <![CDATA[
              Find SNPs by chromosomal location relative to P. falciparum.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="ref_strain" displayName="Like Reference" align="center"/>
	     <columnAttribute name="comp_strains" displayName="SNP Strains" align="center"/>
	     <columnAttribute name="ref_allele" displayName="Reference allele" align="center"/>
	     <columnAttribute name="comp_alleles" displayName="SNP allele" align="center"/>
	     <columnAttribute name="comp_products" displayName="SNP Product" align="center"/>
	     <columnAttribute name="ref_product" displayName="Reference Product" align="center"/>
	     <columnAttribute name="phenotype" displayName="Phenotype" align="center"/>
	</dynamicAttributes> 
    </question>

    <question name="SnpsByAlleleFrequency"
              category="Other Attributes"
              displayName="Allele Frequency"
              queryRef="SnpsBy.SnpsByAlleleFrequency"
              summaryAttributesList="major_strains"
              recordClassRef="SnpRecordClasses.SnpRecordClass">
        <summary>
            Find P.f. SNPs by the frequency of the major and minor alleles
        </summary>
	<description>
            <![CDATA[
              Find SNPs by specifying the frequency of the major and minor alleles.
              SNP data was provided by <a href="showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=Su_SNPs,Broad_SNPs,sangerItGhanaSnps,sangerReichenowiSnps&title=SNPs%20Summary">Broad, NIH and WTSI</a>.
            ]]>
        </description>
        <dynamicAttributes>
	     <columnAttribute name="major_strains" displayName="Major Strains"/>
	</dynamicAttributes>
    </question>

</questionSet>




<!-- ************ -->
<!-- queries for primary keys -->
<!-- ************ -->

<!-- //////////  GENE QUERIES  //////////// -->
  
<!-- Querys that return Gene primary keys (for use in questions). -->
<querySet name="GeneFeatureIds">


    <!-- GeneFeatureIds.GeneBySingleLocusTag -->
    <wsQuery name="GeneBySingleLocusTag" displayName="By Gene Id" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.locus_tag"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
    </wsQuery>

    <!-- GeneFeatureIds.GenesByAnnotatedKeyword -->
    <wsQuery name="GenesByAnnotatedKeyword" displayName="By Annotated Keywords" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
            <paramRef ref="params.organism"/>
            <paramRef ref="params.datasets"/>
            <paramRef ref="params.text_expression"/>
            <paramRef ref="params.max_pvalue" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="params.case_independent" groupRef="paramGroups.advancedParams"/>
            <paramRef ref="params.whole_words" groupRef="paramGroups.advancedParams"/>
            <wsColumn name="project_id" width="32" wsName="project_id"/>
            <wsColumn name="source_id" width="32" wsName="source_id"/>
    </wsQuery>


 <wsQuery name="GenesByInterproDomain" displayName="by Pfam domain" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
              <paramRef ref="params.organism"/>
              <paramRef ref="params.domain_database"/>
              <paramRef ref="params.domain_accession"/>
<!--  OLD   <paramRef ref="params.pfam_list"/>   hack to get term list on to question page -->              
              <wsColumn name="project_id" width="32" wsName="project_id"/>
              <wsColumn name="source_id" width="32" wsName="source_id"/>
<!--  This column is not in Toxo       <wsColumn name="e_value" width="32" wsName="e_value"/> -->
           
          </wsQuery>


 <wsQuery name="GenesByEcNumber" displayName="by EC Number" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.ecorganism"/>
        <paramRef ref="params.ec_number_pattern"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
    </wsQuery>


 <wsQuery name="GenesByGoTerm" displayName="by GO term" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
              <paramRef ref="params.organism"/>
              <paramRef ref="params.go_term"/>
              <wsColumn name="project_id" width="32" wsName="project_id"/>
              <wsColumn name="source_id" width="32" wsName="source_id"/>
           </wsQuery>

    <wsQuery name="GenesByGeneType" displayName="By RNA Type" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.organism"/>
       <paramRef ref="params.includePseudogenes"/>
       <paramRef ref="params.rnatype"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="source_id" width="60" wsName="source_id"/>
       <wsColumn name="is_pseudo" width="32" wsName="is_pseudo"/>
    </wsQuery>


<wsQuery name="GenesWithSignalPeptide" displayName="Encoding a Signal Peptide" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
                    <paramRef ref="params.organism"/>
                    <paramRef ref="params.min_sigp_sum_score" groupRef="paramGroups.advancedParams" />
                    <wsColumn name="source_id" width="32" wsName="source_id"/>
                    <wsColumn name="project_id" width="32" wsName="project_id"/>
                    <wsColumn name="sigp_sum_score" width="32" wsName="sigp_sum_score"/>
</wsQuery>   



<wsQuery name="GenesByTransmembraneDomains" displayName="By Number of Predicted Transmembrane Domains" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
                      <paramRef ref="params.organism"/>
                      <paramRef ref="params.num_tm_gte"/>
                      <paramRef ref="params.num_tm_lte"/>
                      <wsColumn name="source_id" width="32" wsName="source_id"/>
                      <wsColumn name="project_id" width="32" wsName="project_id"/>
                     <!-- <wsColumn name="predicted_helices" width="32" wsName="predicted_helices"/>-->
</wsQuery>   



<wsQuery name="GenesByMolecularWeight" displayName="By Protein Molecular Weight" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
              <paramRef ref="params.organism"/>
              <paramRef ref="params.lowerMolWtBound"/>
              <paramRef ref="params.upperMolWtBound"/>
              <wsColumn name="source_id" width="32" wsName="source_id"/>
              <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>   


<wsQuery name="GenesByOrthologPattern" displayName="by Ortholog Pattern" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
                    <paramRef ref="params.profile_pattern"/>
                    <paramRef ref="params.included_species"/>
                    <paramRef ref="params.excluded_species"/>
                    <paramRef ref="params.organism"/>
                    <paramRef ref="params.phyletic_indent_map"/>
                    <paramRef ref="params.internal_phyletic_indent_map"/>
                    <paramRef ref="params.phyletic_term_map"/>
                    <wsColumn name="source_id" width="32" wsName="source_id"/>
                    <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>


<!-- Added on Oct 31 2006 -->

<sqlQuery name="GenesOrthologousToAGivenGene"
              displayName="orthologous to a given gene"
              isCacheable="true">
        <paramRef ref="params.locus_tag"/>
        <column name="source_id"/>
        <column name="project_id" />
        <sql>
            <![CDATA[
                SELECT DISTINCT snas2.source_id, ext.name as project_id
                from dots.splicednasequence snas1, dots.SequenceSequenceGroup ssg1,
                     dots.SequenceSequenceGroup ssg2, dots.splicednasequence snas2,
                     core.TableInfo ti,
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                WHERE snas1.source_id = '$$locus_tag$$'
                  AND snas1.na_sequence_id = ssg1.sequence_id
                  AND ssg1.source_table_id = ti.table_id
                  AND ssg1.sequence_group_id = ssg2.sequence_group_id
                  AND ssg2.source_table_id = ti.table_id
                  AND ssg2.sequence_id = snas2.na_sequence_id
                  AND ti.name = 'SplicedNASequence'
                  AND snas2.source_id != snas1.source_id
                    AND snas2.external_database_release_id=extr.external_database_release_id
                    AND extr.external_database_id=ext.external_database_id
                 order by project_id,snas2.source_id

           ]]>
       </sql>
    </sqlQuery>


<!-- This is the internal QuestionQuery-->
<sqlQuery name="GenesByOrthologs" displayName="by orthology"
              isCacheable="true">
        <description>
            Find orthologs of the genes in an existing query result set
        </description>
        <paramRef ref="params.historyId"/>
        <paramRef ref="params.localorganism"/>
        <column name="source_id" />
         <column name="project_id" />
        <sql>
            <![CDATA[

SELECT DISTINCT sns2.source_id, ext.name as project_id 
FROM $$historyId$$ qr, dots.splicednasequence sns1, dots.sequencesequencegroup ssg1, dots.splicednasequence sns2, dots.sequencesequencegroup ssg2, core.tableinfo ti ,    sres.ExternalDatabaseRelease extr,  sres.ExternalDatabase ext 
WHERE qr.source_id = sns1.source_id 
AND sns1.na_sequence_id = ssg1.sequence_id 
AND ssg1.source_table_id = ti.table_id 
AND ssg1.sequence_group_id = ssg2.sequence_group_id 
AND ssg2.source_table_id = ti.table_id 
AND ssg2.sequence_id = sns2.na_sequence_id 
AND sns2.taxon_id IN
       (select taxon_id from sres.taxon
       connect by parent_id = prior taxon_id
       start with taxon_id in ($$localorganism$$)) 
AND ti.name = 'SplicedNASequence'  
AND sns2.external_database_release_id=extr.external_database_release_id 
AND extr.external_database_id=ext.external_database_id  
order by project_id,sns2.source_id


           ]]>
       </sql>
    </sqlQuery>


<!-- ******************** -->


<wsQuery name="GenesByLocation"  displayName="by  genomic location" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
               <description>genes by genomic location</description>
               <paramRef ref="params.stoxopforganism"/>
               <paramRef ref="params.stringChromosome"/>
               <paramRef ref="params.genomicSequence"/>
               <paramRef ref="params.start_location"/>
               <paramRef ref="params.end_location"/>
               <wsColumn name="source_id" width="32" wsName="source_id" />
               <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>


    <wsQuery name="GenesByTaxon" displayName="by taxon" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.organism"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
    </wsQuery>


    <wsQuery name="GenesByExonCount" 
       displayName="By Number of Exons" 
       isCacheable='true' 
       processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

       <paramRef ref="params.organism"/>
       <paramRef ref="params.num_exons_gte"/>
       <paramRef ref="params.num_exons_lte"/>

       <wsColumn name="source_id" width="32" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
    </wsQuery>

    <!-- GeneFeatureIds.GenesByESTOverlap -->
    <wsQuery name="GenesByESTOverlap" displayName="By EST Overlap" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.nonchorganism"/>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <wsColumn name="source_id" width="32" wsName="source_id"/>
     <wsColumn name="project_id" width="32" wsName="project_id"/>
<wsColumn name="number_of_ests" width="32" wsName="number_of_ests"/>

    </wsQuery>




    <wsQuery name="GenesBySimilarity" displayName="BLAST Genes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.BlastDatabaseTypeGene"/>
       <paramRef ref="params.BlastDatabaseOrganism"/>
       <paramRef ref="params.BlastQueryType"/>      
       <paramRef ref="params.BlastQuerySequence"/> 
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
        <paramRef ref="params.-filter"/>


       <wsColumn name="source_id" width="32" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
                                                                                      
       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>
                                  


<wsQuery name="GenesByMotifSearch" displayName="Motif Search" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.DatasetGene"/>
       <paramRef ref="params.Expression"/>

       <wsColumn name="source_id" width="32" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>

       <wsColumn name="Locations" width="4000"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="4000"/>
    </wsQuery>
                                                    

<wsQuery name="GenesByCentromereProximity" displayName="Proximity to Centromeres"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.max_centromere_distance"/>
        <paramRef ref="params.chromosome"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="dist_centromere" width="32" wsName="dist_centromere"/>
  </wsQuery>

<wsQuery name="GenesByTelomereProximity" displayName="Proximity to Telomeres"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.distanceFromTelomere"/>
        <paramRef ref="params.chromosome"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="dist_telomere" width="32" wsName="dist_telomere"/>
  </wsQuery>

 <wsQuery name="GenesByNonnuclearGenomicRegion"
              displayName="by non-nuclear genomic location" isCacheable="true" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.toxopforganism"/>
        <paramRef ref="params.pfNonnuclearSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>


 <wsQuery name="GenesByIsoelectricPoint"
              displayName="by Isoelectric Point" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.min_isoelectric_point"/>
        <paramRef ref="params.max_isoelectric_point"/>
        <paramRef ref="params.plasmotoxoorganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>

<wsQuery name="GenesBySecondaryStructure"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.min_coil"/>
        <paramRef ref="params.max_coil"/>
        <paramRef ref="params.min_strand"/>
        <paramRef ref="params.max_strand"/>
        <paramRef ref="params.min_helix"/>
        <paramRef ref="params.max_helix"/>
        <paramRef ref="params.plasmoorganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
<wsColumn name="percent_coil" width="32" wsName="percent_coil"/>
<wsColumn name="percent_strand" width="32" wsName="percent_strand"/>
<wsColumn name="percent_helix" width="32" wsName="percent_helix"/>
</wsQuery>



 <wsQuery name="GenesByPdbSimilarity"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.clades"/>
        <paramRef ref="params.pvalue_cutoff"/>
        <paramRef ref="params.plasmoorganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>


 <wsQuery name="GenesWithStructurePrediction"
              displayName="with Structure Predictions"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>


<wsQuery name="GenesByPhyleticProfile" displayName="by phyletic profile"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <description>
            Find genes whose phylogenetic profile is similar to that of a given gene
        </description>
        <paramRef ref="params.ds_gene_ids" default="PY03942"/>
        <paramRef ref="params.min_mutual_information_score"/>
        <paramRef ref="params.include_only_queries"/>
        <paramRef ref="params.min_num_query_matches"/>
        <paramRef ref="params.signature"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="query_ids" width="32" wsName="query_ids"/>
        <wsColumn name="mutual_information_scores" width="32" wsName="mutual_information_scores"/>
        <wsColumn name="num_queries" width="32" wsName="num_queries"/>
   </wsQuery>


<wsQuery name="GenesByMetabolicPathway" displayName="by Metabolic Pathway"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.toxopforganism"/>
        <paramRef ref="params.metabolic_pathway"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="met_pathways" width="1000" wsName="met_pathways"/>
</wsQuery>




    <wsQuery name="GenesByProteinProteinInteraction" displayName="by protein-protein interaction" isCacheable="true" 
                        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"> 
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.locus_tag" default="PFL0275w"/>
        <paramRef ref="params.min_searches"/>
        <paramRef ref="params.min_observed"/>
        <paramRef ref="params.bait_or_prey"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
<wsColumn name="gene_source_id" width="32" wsName="gene_source_id"/>
        <wsColumn name="bait_start" width="32"/>
        <wsColumn name="bait_end" width="32"/>
        <wsColumn name="prey_start" width="32"/>
        <wsColumn name="prey_end" width="32"/>
        <wsColumn name="times_observed" width="32"/>
        <wsColumn name="number_of_searches" width="32"/>
        <wsColumn name="prey_number_of_baits" width="32"/>
        <wsColumn name="bait_number_of_preys" width="32"/>
        <wsColumn name="bait_or_prey" width="32"/>
     </wsQuery>



<wsQuery name="GenesByFunctionalInteraction" displayName="by functional interaction"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <description>
            Find genes which have been identified by the plasmoMAP
            project as having a functional interaction with a given gene.
        </description>
        <paramRef ref="params.ds_gene_ids" default="PF11_0344"/>
        <paramRef ref="params.signature"/>
        <paramRef ref="params.min_interaction"/>
        <paramRef ref="params.include_only_queries"/>
        <paramRef ref="params.min_num_query_matches"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="likelihood_scores" width="32" wsName="likelihood_scores"/>
        <wsColumn name="query_ids" width="32" wsName="query_ids"/>
        <wsColumn name="queries_matched" width="32" wsName="queries_matched"/>
   </wsQuery>


<wsQuery name="GenesByMr4Reagents" displayName="by MR4 Reagents"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.mr4_reagent_type"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
   </wsQuery>


 <wsQuery name="GenesBySnps" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.toxopforganism"/>
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_b"/>
        <paramRef ref="params.snp_stat" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.occurrences_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.dn_ds_ratio_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.snp_density" groupRef="paramGroups.advancedParams"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="cds_snp_density"  width="32"/>
        <wsColumn name="dn_ds_ratio"  width="32"/>
        <wsColumn name="num_synonymous" width="32"/>
        <wsColumn name="num_non_synonymous" width="32"/>
        <wsColumn name="num_noncoding" width="32"/>
        <wsColumn name="num_nonsense" width="32"/>
        <wsColumn name="total_snps" width="32"/>
    </wsQuery>


<wsQuery name="GenesBySubcellularLocalization" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.localization"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>

<wsQuery name="GenesByExportPrediction" displayName="by Export Prediction"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.min_exportpred_score"/>
        <paramRef ref="params.plasmoorganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>


<wsQuery name="GenesByExpressionTiming" displayName="by Expression Timing"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.profileSet"/>
        <paramRef ref="params.minOrMax"/>
        <paramRef ref="params.maxExprHour"/>
        <paramRef ref="params.maxPlusMinusHours"/>
        <paramRef ref="params.minExprHour"/>
        <paramRef ref="params.minPlusMinusHours"/>
        <paramRef ref="params.inductionFold"/>
        <paramRef ref="params.expressionPct"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>


<wsQuery name="GenesByProfileSimilarity" displayName="Profile Similarity" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.pforganism"/>
       <paramRef ref="params.ProfileGeneId"/>
       <paramRef ref="params.ProfileDistanceMethod"/>
       <paramRef ref="params.ProfileNumToReturn"/>
       <paramRef ref="params.ProfileProfileSet"/>
       <paramRef ref="params.ProfileSearchGoal"/>
       <paramRef ref="params.ProfileTimeShift"/>
       <paramRef ref="params.ProfileScaleData"/>
       <paramRef ref="params.ProfileMinShift"/>
       <paramRef ref="params.ProfileMaxShift"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="distance" wsName="distance" width="50"/>
       <wsColumn name="time_shift" wsName="time_shift" width="50"/>
       <wsColumn name="query_source_id" wsName="query_source_id" width="50"/>
    </wsQuery>

<wsQuery name="GenesByExpression" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.min_expression_percentile"/>
        <paramRef ref="params.max_expression_percentile"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>

 <wsQuery name="BergheiGenesByExpressionPercentile" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pborganism"/>
        <paramRef ref="params.waters_profilesets"/>
        <paramRef ref="params.r_min_expression_percentile"/>
        <paramRef ref="params.r_max_expression_percentile"/>
        <paramRef ref="params.yt_min_expression_percentile"/>
        <paramRef ref="params.yt_max_expression_percentile"/>
        <paramRef ref="params.ys_min_expression_percentile"/>
        <paramRef ref="params.ys_max_expression_percentile"/>
        <paramRef ref="params.ms_min_expression_percentile"/>
        <paramRef ref="params.ms_max_expression_percentile"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
</wsQuery>

 <wsQuery name="GenesByGametocyteExpression"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.day_and_strain"/>
        <paramRef ref="params.min_expression_percentile" default="80"/>
        <paramRef ref="params.max_expression_percentile" default="100"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>


 <wsQuery name="GenesByMassSpec" displayName="with mass-spec evidence"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.mass_spec_stage"/>
        <paramRef ref="params.min_seq_coverage"/>
        <paramRef ref="params.min_span_count"/>
        <paramRef ref="params.min_spectrum_count"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>

 <wsQuery name="GenesByProteomicsProfile" displayName="by Proteomics Profile"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pborganism"/>
        <paramRef ref="params.asexual_blood_stages_value"/>
        <paramRef ref="params.gametocytes_value"/>
        <paramRef ref="params.ookinetes_value"/>
        <paramRef ref="params.oocysts_value"/>
        <paramRef ref="params.sporozoites_value"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>

 <wsQuery name="GenesByMassSpecCrypto" displayName="By Mass Spec. Evidence" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.cryptoorganism"/>
        <paramRef ref="params.c_ms_assay"/>
        <paramRef ref="params.min_sequence_count"/>
        <paramRef ref="params.min_spectrum_count"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>


 <wsQuery name="GeneByLocusTag" displayName="by Gene ID"
              isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.ds_gene_ids"/>
        <paramRef ref="params.signature"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
     </wsQuery>

<wsQuery name="GenesByWatersDifferentialExpression" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.pborganism"/>
       <paramRef ref="params.confidence"/>
       <paramRef ref="params.fold_change"/>
       <paramRef ref="params.regulated_dir"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="confidence" width="32" />
       <wsColumn name="fold_change" width="32"/>
</wsQuery>

<wsQuery name="GenesByDifferentialMeanExpression" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.pforganism"/>
       <paramRef ref="params.diffMeanExpr_reference"/>
       <paramRef ref="params.diffMeanExpr_comparitor"/>
       <paramRef ref="params.regulated_dir"/>
       <paramRef ref="params.fold_change"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="fold_change" width="32"/>
</wsQuery>

<wsQuery name="GenesByExpressionPercentileA" displayName="By Expression Percentile" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.pforganism"/>
       <paramRef ref="params.cowmanSample"/>
       <paramRef ref="params.percentile"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="percentile" width="32" />
</wsQuery>



<wsQuery name="GenesByDifferentialExpression" displayName="By Differential Expression" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.tgorganism"/>
       <paramRef ref="params.exprnsample"/>
       <paramRef ref="params.confidence"/>
       <paramRef ref="params.fold_change"/>
       <paramRef ref="params.regulated_dir"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="confidence"  width="32"/>
       <wsColumn name="fold_change"  width="32"/>
    </wsQuery>   



    <wsQuery name="ToxoGenesByExpressionPercentile" displayName="By Expression Percentile" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">       <paramRef ref="params.tgorganism"/>
       <paramRef ref="params.sample"/>
       <paramRef ref="params.percentile"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="percentile" width="32" />
    </wsQuery>   

    <wsQuery name="GenesWithEpitopes" displayName="By Gene ID" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.organism"/>
       <paramRef ref="params.epitopes_confidence"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
       <wsColumn name="confidence" width="32" />
       <wsColumn name="count" width="32" />
    </wsQuery>
   
    <wsQuery name="ToxoGenesByMassSpec" displayName="By Mass Spec. Evidence" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.tgorganism"/>
        <paramRef ref="params.tg_ms_assay"/>
        <paramRef ref="params.min_sequence_count"/>
        <paramRef ref="params.min_spectrum_count"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
    </wsQuery>

</querySet>



<!-- //////////  GENOMIC SEQUENCE QUERIES  //////////// -->
<!-- Querys that return Contig primary keys (for use in questions). -->
<querySet name="GenomicSequenceIds">

    <!-- GenomicSequenceIds.SequenceBySourceId -->
    <wsQuery name="SequenceBySourceId" displayName="By Genomic Sequence ID" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"> 
        <paramRef ref="params.contig"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
    </wsQuery>   

    <wsQuery name="SequencesByTaxon" displayName="by Source ID" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.seqorganism"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>            
    </wsQuery>


    <!-- GenomicSequenceIds.SequencesBySimilarity -->
    <wsQuery name="SequencesBySimilarity" displayName="BLAST Sequences" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.BlastDatabaseTypeGenome"/>
       <paramRef ref="params.BlastDatabaseOrganismGenomics"/>
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
 <paramRef ref="params.-filter"/>


       <wsColumn name="source_id" width="60" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>

       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>


</querySet>


<!-- //////////  EST QUERIES  //////////// -->

<!-- Querys that return EST primary keys (for use in questions). -->
<querySet name="EstIds">


<wsQuery name="EstsBySimilarity" displayName="BLAST ESTs" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.BlastDatabaseTypeEST"/>
       <paramRef ref="params.BlastDatabaseOrganismEST"/>
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
 <paramRef ref="params.-filter"/>


       <wsColumn name="source_id" width="60" wsName="source_id"/>
<wsColumn name="project_id" width="32" wsName="project_id"/>

       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>


 <wsQuery name="EstsByLocation" displayName="ESTs by  genomic location" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.stoxopforganism"/>
        <paramRef ref="params.stringChromosome"/>
        <paramRef ref="params.genomicSequence"/>
        <paramRef ref="params.start_point"/>
        <paramRef ref="params.end_point"/>
        <paramRef ref="params.best_alignment_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.high_confidence_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_identity" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="params.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
        <wsColumn name="source_id" width="60" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>

 <!-- EstIds.EstsByLibrary -->
 <wsQuery name="EstsByLibrary" displayName="Library Name" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >
        <paramRef ref="params.organism" />
        <paramRef ref="params.libraryId"/>
        <wsColumn name="source_id" width="60" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>

 <wsQuery name="EstsWithGeneOverlap" displayName="ESTs that overlap genes" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.organism"/>
       <paramRef ref="params.libraryId"/>
       <paramRef ref="params.bp_overlap_gte"/>
       <paramRef ref="params.inNotIn"/>
       <wsColumn name="source_id" width="60" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
 </wsQuery>


</querySet>


<!-- //////////  ORF QUERIES  //////////// -->

<!-- Querys that return Orf primary keys (for use in questions). -->
<querySet name="OrfIds">
     <wsQuery name="OrfsByLocation" displayName="ORFs by  genomic location" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.stoxopforganism"/>
        <paramRef ref="params.stringChromosome"/>
        <paramRef ref="params.genomicSequence"/>
        <paramRef ref="params.start_location"/>
        <paramRef ref="params.end_location"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="orf_location" width="32"/>
    </wsQuery>


<wsQuery name="OrfsBySimilarity" displayName="BLAST ORFs" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.BlastDatabaseTypeORF"/>
       <paramRef ref="params.BlastDatabaseOrganismORF"/>
       <paramRef ref="params.BlastQueryType"/>
       <paramRef ref="params.BlastQuerySequence"/>
       <paramRef ref="params.-e"/>
       <paramRef ref="params.-v"/>
       <paramRef ref="params.-b"/>
 <paramRef ref="params.-filter"/>


       <wsColumn name="source_id" width="60" wsName="source_id"/>
<wsColumn name="project_id" width="32" wsName="project_id"/>

       <wsColumn name="TabularRow" width="3000"/>
       <wsColumn name="Alignment" width="4000"/>
       <wsColumn name="Header" width="3000"/>
       <wsColumn name="Footer" width="3000"/>
    </wsQuery>




<wsQuery name="OrfsByMotifSearch" displayName="Motif Search" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="params.DatasetORF"/>
       <paramRef ref="params.Expression"/>

       <wsColumn name="source_id" width="60" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>

       <wsColumn name="Locations" width="4000"/>
       <wsColumn name="MatchCount" width="10"/>
       <wsColumn name="Sequence" width="4000"/>
    </wsQuery>


<wsQuery name="OrfsByMassSpec" displayName="By Mass Spec. Evidence" isCacheable='true' processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.cryptotoxoorganism"/>
        <paramRef ref="params.ms_assay"/>
        <paramRef ref="params.min_sequence_count"/>
        <paramRef ref="params.min_spectrum_count"/>
       <wsColumn name="source_id" width="50" wsName="source_id"/>
       <wsColumn name="project_id" width="32" wsName="project_id"/>
    </wsQuery>


</querySet>

<!-- //////////  SNP QUERIES  //////////// -->

<!-- Querys that return SNP source_ids (for use in questions). -->
<querySet name="SnpsBy">
 

<!-- IS IT BEING USED?
     <wsQuery name="SnpBySourceId" displayName="ID" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="params.snp_id"/>
	  <wsColumn name="source_id" width="32" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </wsQuery>
-->

      <wsQuery name="SnpsByGeneId" displayName="SNPs by Gene ID" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.ds_gene_ids"/>
        <paramRef ref="params.snp_strain_a"/>
        <paramRef ref="params.snp_strain_m"/>
        <paramRef ref="params.signature"/>
        <wsColumn name="source_id" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
     </wsQuery>

     <wsQuery name="SnpsByLocation" displayName="SNPs by chromosomal location" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >
         <!-- <paramRef ref="params.chromosome_single"/>--> 
          <paramRef ref="params.toxopforganism"/>
          <paramRef ref="params.snpChromosome"/>
          <paramRef ref="params.start_point"/>
          <paramRef ref="params.end_point"/>
          <paramRef ref="params.snp_strain_a"/>
          <paramRef ref="params.snp_strain_m"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
        
    </wsQuery>

    <wsQuery name="SnpsByAlleleFrequency" displayName="SNPs by chromosomal location" isCacheable="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="params.pforganism"/>
        <paramRef ref="params.major_allele_min"/>
        <paramRef ref="params.major_allele_max"/>
        <paramRef ref="params.minor_allele_min"/>
        <paramRef ref="params.minor_allele_max"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="major_strains" width="200"/>
    </wsQuery>

</querySet>

    

    <!-- *************** -->
    <!-- //////////////////recordClassSets -->
    <!-- *************** -->

    <!-- 
    A "record" is an object that gathers together data about an entity in the
    database.  The entity is defined as data associated with a primary key, 
    and data in the record is based on that key. The data comes in three forms:
    attributes, text attributes and tables.  An attribute is a single value
    that describes the entity, such as "size."  A text attribute is similar,
    but the value is created by defining a text string and optionally embedding
    into that string the values of other attributes.  A table is a value
    in the form of columns and rows, such as a table describing related 
    publications.
  
    A record class is a template for creating records from a given primary key.
    It includes "attribute queries," "table queries" and "text attributes."  

    An attribute query must have only one parameter, the primary key.  It must
    return exactly zero or one rows.  The columns in the query are interpreted
    as attributes of the record.  

    A text attribute has a body of text with the values of other attributes
    optionally embedded in it.  The other attribute values are referred to
    as variables of the form "$$name_of_attribute$$".

    A table query must have only one parameter, the primary key.  It may
    return any number of rows (but typically not a huge number).  The result
    of the query is interpreted as being a table that 
    
    A "record set" is a grouping of records. It is useful in organizing the
    model xml file.

    The full name of a record is is of the form "set_name.name."
    --> 



<!-- ORF Recordclass -->


 <recordClassSet name="OrfRecordClasses">

        <!-- OrfRecordClasses.OrfRecordClass -->
        <recordClass idPrefix="" 
          name="OrfRecordClass" type="ORF">

            <!-- the optional project FlatVocabParam -->
            <projectParamRef ref="params.Project"/>
	
   <reporter name="tabular" displayName="Summary - TAB Delimited"
                      implementation="org.gusdb.wdk.model.report.TabularReporter" />
            <reporter name="fullRecord" displayName="Detailed"
                      implementation="org.gusdb.wdk.model.report.FullRecordReporter" />
             <reporter name="srt" displayName="FASTA"
                    implementation=""/>

            <attributeQueryRef ref="OrfAttributes.Bfmv">
                <columnAttribute name="nas_id" displayName="Sequence ID" internal="false"/>
                <!--columnAttribute name="orf_id" displayName="ORF ID" internal="false"/-->
                <columnAttribute name="orf_start" internal="true"/>
                <columnAttribute name="orf_end" internal="true"/>
                <columnAttribute name="orf_start_text" displayName="Start" internal="false"/>
                <columnAttribute name="orf_end_text" displayName="End" internal="false"/>
                <columnAttribute name="orf_strand" displayName="Strand" internal="false"/>
                <columnAttribute name="length" displayName="Length" internal="false"/>
                <columnAttribute name="organism" displayName="Organism" internal="false" inReportMaker="false"/>
                <columnAttribute name="formatted_organism" displayName="Organism" internal="false"/>
            </attributeQueryRef>

            <attributeQueryRef ref="OrfAttributes.Sequence">
                <columnAttribute name="sequence" displayName="Sequence"  internal="true" inReportMaker="true"/>
            </attributeQueryRef>

            <textAttribute name="orf_location_text" displayName="Location"
                           internal="false" inReportMaker="true">
                <text>
                    <![CDATA[
                       $$nas_id$$: $$orf_start_text$$ - $$orf_end_text$$ ($$orf_strand$$)
                    ]]>
               </text>
           </textAttribute>           

            <textAttribute name="overview" displayName="Overview"
                           internal="true" inReportMaker="false">
               <text>
                    <![CDATA[
                    Open Reading Frame $$source_id$$ from $$nas_id$$.<br>
                    Organism: <i>$$organism$$</i>
                    ]]>
               </text>
           </textAttribute>
        
        </recordClass>
 </recordClassSet>


<!--///////////////CONTIG RECORDCLASS -->

 <recordClassSet name="ContigRecordClasses">
        
       <!-- ContigRecordClasses.ContigRecordClass -->
       <recordClass idPrefix="" 
          name="ContigRecordClass" type="Genomic Sequence">
       
            <!-- the optional project FlatVocabParam -->
            <projectParamRef ref="params.Project"/>
 
          <reporter name="tabular" displayName="Summary - Tab delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
          <reporter name="srt" displayName="FASTA"
                    implementation=""/>


 <attributeQueryRef ref="ContigAttributes.Bfmv">
            <columnAttribute displayName="A Count" name="a_count"/>
            <columnAttribute displayName="C Count" name="c_count"/>
            <columnAttribute displayName="G Count" name="g_count"/>
            <columnAttribute displayName="T Count" name="t_count"/>
            <columnAttribute displayName="Other Count" name="other_count"/>
            <columnAttribute displayName="Length" name="length"/>
            <columnAttribute displayName="AT Percent" name="at_percent"/>
            <columnAttribute displayName="Organism" name="organism"/>
            <columnAttribute displayName="Organism" name="formatted_organism"/>
            <columnAttribute displayName="Description"
                             name="sequence_description"/>
            <columnAttribute name="genbank_accession" displayName="GenBank"
                             internal="true"/>
        </attributeQueryRef>


           <attributeQueryRef ref="ContigAttributes.Sequence">
                <columnAttribute name="sequence" 
                                 displayName="Genomic Sequence"
                                 internal="true" />
          </attributeQueryRef>

       </recordClass>

 </recordClassSet>

<!--///////////////EST RECORDCLASS -->
 <recordClassSet name="EstRecordClasses">

        <!-- EstRecordClasses.EstRecordClass -->
        <recordClass idPrefix="" 
          name="EstRecordClass" type="EST">

            <!-- the optional project FlatVocabParam -->
            <projectParamRef ref="params.Project"/>
	

  <reporter name="tabular" displayName="Summary - Tab delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
          <reporter name="srt" displayName="FASTA"
                    implementation=""/>

   <attributeQueryRef ref="EstAttributes.Bfmv">
                <columnAttribute name="source_id"   inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="a_count"     inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="c_count"     inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="g_count"     inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="t_count"     inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="other_count" inReportMaker="false"
                                 internal="true"/>
                <columnAttribute name="length"      displayName="length"
                                internal="true"/>
                <columnAttribute name="primer"      inReportMaker="false"
                                internal="true"/>
                <columnAttribute name="dbest_name"  displayName="Library"
                                internal="true"/>
                <columnAttribute name="vector"      displayName="Vector"
                                internal="true"/>
                <columnAttribute name="stage"       displayName="Stage"
                                internal="true"/>
                <columnAttribute name="organism"    displayName="Organism"
                                internal="false"/>
                <columnAttribute name="formatted_organism"    displayName="Organism"
                                internal="true"/>
                <columnAttribute name="ncbi_tax_id" displayName="Stage"
                                internal="true"/>
                <columnAttribute name="external_db_name"   inReportMaker="false"
                                internal="true"/>
            </attributeQueryRef>


              <attributeQueryRef ref="EstAttributes.Sequence">
                <columnAttribute name="sequence" displayName="Sequence" internal="true" inReportMaker="true"/>
            </attributeQueryRef>

              
       </recordClass>
 </recordClassSet>


<!--///////////////SNP RECORDCLASS -->

<recordClassSet name="SnpRecordClasses">
        <recordClass idPrefix="" name="SnpRecordClass"
                     type="SNP">

            <!-- the optional project FlatVocabParam -->
            <!-- needs to be located before reporter -->
            <projectParamRef ref="params.Project"/>

          <reporter name="tabular" displayName="Summary - TAB Delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter" />
 <reporter name="srt" displayName="FASTA"
                    implementation=""/>


        <attributeQueryRef ref="SnpAttributes.Bfmv">
              <columnAttribute displayName="Dataset" name="dataset"
                               internal="true" inReportMaker="true"/>
              <columnAttribute displayName="Dataset_hidden"
                               name="dataset_hidden" internal="true"
                               inReportMaker="false"/>
               <linkAttribute inReportMaker="false" displayName="SNP provider"
                              name="provider_link" visible="$$dataset$$">
                 <url>
                    <![CDATA[
                       showXmlDataContent.do?name=XmlQuestions.DataSources&datasets=$$dataset_hidden$$&title=SNPs%20Summary
                        ]]>
                 </url>
              </linkAttribute>

              <columnAttribute displayName="Chromosome" name="seq_source_id" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Location" name="snp_location"/>
              <columnAttribute displayName="Position" name="start_min" internal="true"/>
              <columnAttribute displayName="Reference Strain" name="reference_strain" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference NA" name="reference_na" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Reference AA" name="reference_aa" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Strains" name="strains" internal="false"/>
              <columnAttribute displayName="Left Flank" name="lflank"/>
              <columnAttribute displayName="3D7 Allele" name="allele" align="center"/>
              <columnAttribute displayName="Right Flank" name="rflank"/>
              <columnAttribute inReportMaker="true" displayName="Gene ID"
                               name="gene_source_id" internal="true"/>
               <linkAttribute inReportMaker="false" displayName="Gene ID"
                              name="linkedGeneId" visible="$$gene_source_id$$">
                 <url>
                    <![CDATA[
                       showRecord.do?name=GeneRecordClasses.GeneRecordClass&project_id=&primary_key=$$gene_source_id$$
                        ]]>
                 </url>
              </linkAttribute>
              <columnAttribute displayName="Gene strand" name="gene_strand"/>
              <columnAttribute displayName="Coding" name="is_coding" align="center"/>
              <columnAttribute displayName="Position in CDS" name="position_in_CDS" align="center"/>
              <columnAttribute displayName="Position in protein" name="position_in_protein" align="center"/>
              <columnAttribute displayName="Non-synonymous" name="has_nonsynonymous_allele" align="center"/>
              <columnAttribute displayName="Strains (gene strand)" name="strains_gene_strand" internal="false" inReportMaker="true"/>
              <columnAttribute displayName="Left Flank (gene strand)" name="lflank_gene_strand"/>
              <columnAttribute displayName="3D7 Allele (gene strand)" name="allele_gene_strand" align="center"/>
              <columnAttribute displayName="Right Flank (gene strand)" name="rflank_gene_strand"/>
              <columnAttribute displayName="Major Allele Count" name="major_allele_count" align="center"/>
              <columnAttribute displayName="Minor Allele Count" name="minor_allele_count" align="center"/>
              <columnAttribute displayName="Major Allele" name="major_allele" align="center"/>
              <columnAttribute displayName="Minor Allele" name="minor_allele" align="center"/>
              <columnAttribute displayName="Major Product" name="major_product" align="center"/>
              <columnAttribute displayName="Minor Product" name="minor_product" align="center"/>
              <columnAttribute displayName="Organism" name="organism" internal="true" inReportMaker="false"/>
              <columnAttribute displayName="Organism" name="formatted_organism" inReportMaker="false" internal="true"/>
              <columnAttribute displayName="NCBI Taxon ID" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
        </attributeQueryRef>

 


       </recordClass>
    </recordClassSet>



    <!-- ///////////////// GENE recordClasses -->
 <recordClassSet name="GeneRecordClasses">


<!-- GeneRecordClasses.ApiDBGeneRecordClass -->
        <recordClass idPrefix="" 
          name="ApiDBGeneRecordClass" type="Gene"
          attributeOrdering="organism,product,sequence">



          <attributeQueryRef ref="ApiDBGeneAttributes.ProductOrganism">
                <columnAttribute name="product" 
                                 displayName="Product Description"  
                                 help="" 
                                 type="String"
                                 internal="false" />

                <columnAttribute name="organism" 
                                 displayName="Organism"
                                 internal="false" />
          </attributeQueryRef>

           <attributeQueryRef ref="ApiDBGeneAttributes.Sequence">
                <columnAttribute name="sequence" 
                                 displayName="Gene Nucleotide Sequence"
                                 internal="false" />
          </attributeQueryRef>

          <attributeQueryRef ref="ApiDBGeneAttributes.Translation">
                <columnAttribute name="translation" 
                                 displayName="Translation"
                                 internal="false" />
          </attributeQueryRef>
        </recordClass>





        <!-- GeneRecordClasses.GeneRecordClass -->
        <recordClass idPrefix="" 
          name="GeneRecordClass" type="Gene"
          attributeOrdering="organism,product,sequence">

            <!-- the optional project FlatVocabParam -->
<!-- needs to be located before reporter -->
  <projectParamRef ref="params.Project"/>


          <reporter name="tabular" displayName="Summary - tab delimited"
                    implementation="org.gusdb.wdk.model.report.TabularReporter"/>
          <reporter name="fullRecord" displayName="Detailed - text"
                    implementation="org.gusdb.wdk.model.report.FullRecordReporter"/>
          <reporter name="srt" displayName="Sequence - configurable FASTA"
                    implementation=""/>

 <attributeQueryRef ref="GeneAttributes.Bfmv">
<columnAttribute displayName="Data Source" name="external_db_name"/>
            <columnAttribute displayName="Genomic Sequence ID" name="sequence_id"/>
             <textAttribute name="location_text" displayName="Genomic Location">
              <text>
                  <![CDATA[
                  $$sequence_id$$: $$start_min_text$$ - $$end_max_text$$ ($$strand_plus_minus$$)
                  ]]>
              </text>
            </textAttribute>

            <columnAttribute name="strand" displayName="Gene Strand" internal="false"/>
            <columnAttribute displayName="Gene Type" name="gene_type" internal="false"/>
            <columnAttribute name="exon_count" displayName="# Exons" internal="false"
                             inReportMaker="true" align="center"/>
            <columnAttribute displayName="Transcript Length" name="transcript_length" internal="false"/>
            <columnAttribute displayName="CDS Length" name="cds_length" internal="false"/>
            <columnAttribute name="product" displayName="Product Description" internal="false"/>
            <columnAttribute displayName="Protein Length" name="protein_length" internal="false"/>
            <columnAttribute displayName="# TM Domains" internal="false"
                             inReportMaker="true" name="tm_count" align="center"/>
            <columnAttribute displayName="Molecular Weight" name="molecular_weight" align="center"/>
            <columnAttribute name="isoelectric_point" displayName="Isoelectric Point" align="center"/>

            <columnAttribute name="ec_numbers_string" displayName="EC Numbers"/>
            <columnAttribute name="ann_go_function" displayName="Annotated GO Function"/>
            <columnAttribute name="ann_go_process" displayName="Annotated GO Process"/>
            <columnAttribute name="ann_go_component" displayName="Annotated GO Component"/>
            <columnAttribute name="pred_go_function" displayName="Predicted GO Function"/>
            <columnAttribute name="pred_go_process" displayName="Predicted GO Process"/>
            <columnAttribute name="pred_go_component" displayName="Predicted GO Component"/>
            <columnAttribute name="der_min_level" displayName="Pf-iRBC min expr level (GS array)" align="center"/>
            <columnAttribute name="der_min_timing" displayName="Pf-iRBC min expr time (GS array)" align="center"/>
            <columnAttribute name="der_max_level" displayName="Pf-iRBC max expr level (GS array)" align="center"/>
            <columnAttribute name="der_max_pct" displayName="Pf-iRBC max expr %ile (GS array)" align="center"/>
            <columnAttribute name="der_max_timing" displayName="Pf-iRBC max expr time (GS array)" align="center"/>
            <columnAttribute name="winz_min_level" displayName="Pf-iRBC+Spz min expr level (Affy array)" align="center"/>
            <columnAttribute name="winz_min_timing" displayName="Pf-iRBC+Spz min expr stage (Affy array)" align="center"/>
            <columnAttribute name="winz_max_level" displayName="Pf-iRBC+Spz max expr level (Affy array)" align="center"/>
            <columnAttribute name="winz_max_pct" displayName="Pf-iRBC+Spz max expr %ile (Affy array)" align="center"/>
            <columnAttribute name="winz_max_timing" displayName="Pf-iRBC+Spz max expr stage (Affy array)" align="center"/>

            <textAttribute name="derisiOverlayPct" displayName="Pf-iRBC expr profile graph (GS array)"
                           inReportMaker="false" truncateTo="100000">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=DeRisiOverlay::Ver1&id=$$primaryKey$$&fmt=png&thumb=1&vp=lgr,LEGEND"/>
                ]]>
            </text>
         </textAttribute>

            <textAttribute name="winzelerPct" displayName="Pf-iRBC+Spz expr profile graph (Affy array)"
                        inReportMaker="false" truncateTo="100000">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Winzeler::Cc&id=$$primaryKey$$&fmt=png&thumb=1&vp=pct"/>
                ]]>
            </text>
         </textAttribute>

         <textAttribute name="watersPct" displayName="Pb-iRBC expr profile graph (GS array)"
                        inReportMaker="false" truncateTo="100000">
            <text>
                <![CDATA[
                <img src="@CGI_URL@/dataPlotter.pl?type=Waters::Ver1&id=$$primaryKey$$&fmt=png&thumb=1&vp=pct"/>
                ]]>
            </text>
         </textAttribute>

            <!-- internal=true atts -->
            <columnAttribute name="min_molecular_weight" displayName="Min Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="max_molecular_weight" displayName="Max Molecular Wt" internal="true" inReportMaker="false"/>
            <columnAttribute name="hydropathicity_gravy_score" displayName="Hydropathicity Gravy Score" internal="true" inReportMaker="false"/>
            <columnAttribute name="aromaticity_score" displayName="Aromaticity" internal="true" inReportMaker="false"/>
            <columnAttribute name="species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Start Location" name="start_min_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="End Location" name="end_max_text" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Strand" name="strand_plus_minus" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_start" internal="true" inReportMaker="false"/>
            <columnAttribute name="context_end" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism_full" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Organism" name="organism" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="genus_species" name="genus_species" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="Taxonomy Id" name="ncbi_tax_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="PlasmoCYC DB Name" name="plasmocyc_db" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="PlasmoCYC Gene ID" name="plasmocyc_gene_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="External DB Version" name="external_db_version" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Id" name="so_id" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Name" name="so_term_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Term Definition" internal="true" name="so_term_definition" inReportMaker="false"/>
            <columnAttribute displayName="Ontology Name" name="ontology_name" internal="true" inReportMaker="false"/>
            <columnAttribute displayName="SO Version" name="so_version" internal="true" inReportMaker="false"/>
            <columnAttribute name="anticodon" displayName="Anticodon" internal="true" inReportMaker="false"/>

      </attributeQueryRef>



           <attributeQueryRef ref="GeneAttributes.TranscriptSequence">
                <columnAttribute name="sequence" 
                                 displayName="Predicted RNA/mRNA Sequence (introns spliced out)"
                                 internal="true" />
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.Translation">
                <columnAttribute name="translation" 
                                 displayName="Predicted Protein Sequence"
                                 internal="true" />
          </attributeQueryRef>

          <attributeQueryRef ref="GeneAttributes.CDS">
            <columnAttribute displayName="Coding Sequence" internal="true"
                    name="cds"/>
          </attributeQueryRef>


        </recordClass>

 </recordClassSet>

 


 <recordClassSet name="UtilityRecordClasses">
    
        <!-- UtilityRecordClasses.SiteInfo -->
        <recordClass idPrefix="" 
          name="SiteInfo" type="Utility">

            <attributeQueryRef ref="UtilityQueries.PingCrypto">
                <columnAttribute name="cryptolink" internal="true" />
            </attributeQueryRef>

            <attributeQueryRef ref="UtilityQueries.PingToxo">
                <columnAttribute name="toxolink" internal="true" />
            </attributeQueryRef>

            <attributeQueryRef ref="UtilityQueries.PingPlasmo">
                <columnAttribute name="plasmolink" internal="true" />
            </attributeQueryRef>

          
            <attributeQueryRef ref="UtilityQueries.PingToxo2">
                <columnAttribute name="toxolink2" internal="true" />
            </attributeQueryRef>

            <attributeQueryRef ref="UtilityQueries.PingPlasmo2">
                <columnAttribute name="plasmolink2" internal="true" />
            </attributeQueryRef>

             <attributeQueryRef ref="UtilityQueries.PingUser">
                <columnAttribute name="userlink" internal="true" />
            </attributeQueryRef>

        
            <attributeQueryRef ref="UtilityQueries.CurrentInstance">
                <columnAttribute name="global_name" internal="true" />
                <columnAttribute name="host_name" internal="true" />
                <columnAttribute name="address" internal="true" />
                <columnAttribute name="version" internal="true" />
                <columnAttribute name="system_date" internal="true" />
                <columnAttribute name="login" internal="true" />
            </attributeQueryRef>
        </recordClass>

 </recordClassSet>


<recordClassSet name="InterproTermClasses"> 
        <recordClass idPrefix="" 
          name="InterproTermClass" type="Ontology">
            <table name="InterproTerms" displayName="Pfam Terms" 
                   queryRef="UtilityTables.PfamTermList">
                <columnAttribute name="accession"/>
                <columnAttribute name="name"/>
                <columnAttribute name="description"/>
            </table>
        </recordClass>
</recordClassSet>

    <recordClassSet name="SnpTermClasses"> 

        <recordClass idPrefix="" name="Plasmo_SnpStrainATermClass" type="Ontology">
            <table name="SnpStrainATerms" displayName="StrainA Terms" 
                   queryRef="UtilityTables.PF_SnpStrainA">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>

        <recordClass idPrefix="" name="Plasmo_SnpStrainBTermClass" type="Ontology">
            <table name="SnpStrainATerms" displayName="StrainA Terms" 
                   queryRef="UtilityTables.PF_SnpStrainB">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>

        <recordClass idPrefix="" name="Toxo_SnpStrainATermClass" type="Ontology">
            <table name="SnpStrainATerms" displayName="StrainA Terms" 
                   queryRef="UtilityTables.TG_SnpStrainA">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>

        <recordClass idPrefix="" name="Toxo_SnpStrainBTermClass" type="Ontology">
            <table name="SnpStrainATerms" displayName="StrainA Terms" 
                   queryRef="UtilityTables.TG_SnpStrainB">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>

    </recordClassSet>


    <recordClassSet name="ChromosomeTermClasses"> 
        <recordClass idPrefix="" name="Toxo_ChromosomeTermClass" type="Ontology">
            <table name="Chromosomes" displayName="Chromosome Terms" 
                   queryRef="UtilityTables.TG_Chromosomes">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
        <recordClass idPrefix="" name="Plasmo_ChromosomeTermClass" type="Ontology">
            <table name="Chromosomes" displayName="Chromosome Terms" 
                   queryRef="UtilityTables.PF_Chromosomes">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
        <recordClass idPrefix="" name="Crypto_ChromosomeTermClass" type="Ontology">
            <table name="Chromosomes" displayName="Chromosome Terms" 
                   queryRef="UtilityTables.CP_Chromosomes">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
    </recordClassSet>

    <recordClassSet name="ESTTermClasses"> 
        <recordClass idPrefix="" name="Toxo_ESTTermClass" type="Ontology">
            <table name="ESTs" displayName="EST Terms" 
                   queryRef="UtilityTables.T_ESTs">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
        <recordClass idPrefix="" name="Plasmo_ESTTermClass" type="Ontology">
            <table name="ESTs" displayName="EST Terms" 
                   queryRef="UtilityTables.P_ESTs">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
        <recordClass idPrefix="" name="Crypto_ESTTermClass" type="Ontology">
            <table name="ESTs" displayName="EST Terms" 
                   queryRef="UtilityTables.C_ESTs">
                <columnAttribute name="internal"/>
                <columnAttribute name="term"/>
            </table>
        </recordClass>
    </recordClassSet>

<!-- //////////  END OF RECORDCLASSES  //////////// -->


    <!-- *************** -->
    <!-- attribute querySets -->
    <!-- *************** -->

    <!--
    A "query" obtains tabular values from a data source.  It has columns
    and parameters.  So far, only SQL data sources are supported, but others,
    such as flat files are coming.  

    Queries are used for different purposes: providing primary keys to a 
    question; providing attributes and tables to a record; and, providing
    vocabularies to vocabulary parameters.

    A "query set" is a grouping of queries.  It is useful in organizing the
    model xml file.  

    The full name of a query is of the form "set_name.name."
    -->
  
<!-- //////////  ORFPAGE ORF PAGE //////////// -->
    <!-- Queries that retrieve attributes of Contigs -->
    <querySet name="OrfAttributes">


  <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <paramRef ref="params.projectId"/>
     <column name="project_id"/>
            <column name="nas_id" sortingTable="apidb.OrfAttributes" />
            <!--column name="orf_id" sortingTable="apidb.OrfAttributes" sortingColumn="source_id" /-->
            <column name="length" sortingTable="apidb.OrfAttributes" />
            <column name="organism" sortingTable="apidb.OrfAttributes" />
            <column name="formatted_organism" sortingTable="apidb.OrfAttributes" sortingColumn="organism" />
            <column name="orf_start" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_start_text" sortingTable="apidb.OrfAttributes" sortingColumn="start_min" />
            <column name="orf_end_text" sortingTable="apidb.OrfAttributes" sortingColumn="end_max" />
            <column name="orf_strand" sortingTable="apidb.OrfAttributes" sortingColumn="is_reversed" />
            <sql>
            <![CDATA[
                SELECT bfmv.source_id, bfmv.nas_id, bfmv.length, bfmv.organism, bfmv.ncbi_tax_id, bfmv.project_id,
                       '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                       REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                      chr(38) || 'nbsp;') || '</i>'
                         AS formatted_organism,
                      bfmv.start_min as orf_start,bfmv.end_max as orf_end,
                      trim(to_char(bfmv.end_max,'999,999,999')) as orf_end_text,
                      trim(to_char(bfmv.start_min,'999,999,999')) as orf_start_text,
                      decode(bfmv.is_reversed,0,'+',1,'-',null) as orf_strand
                FROM apidb.OrfAttributes bfmv
                WHERE bfmv.source_id = '$$primaryKey$$'
                   AND '$$projectId$$' = bfmv.project_id
        ]]>
           </sql>
        </sqlQuery>



	<!-- OrfAttributes.Sequence -->
	<sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
		SELECT taas.source_id as source_id, ext.name as project_id, taas.sequence
                	  from dots.TranslatedAASequence taas,
                      	 sres.SequenceOntology s,
                      	 sres.ExternalDatabaseRelease extr,
         	         sres.ExternalDatabase ext
                	 WHERE taas.source_id = '$$primaryKey$$'
                    	  AND  taas.sequence_ontology_id = s.sequence_ontology_id
                    	  AND s.term_name = 'ORF'
                   	  AND taas.external_database_release_id=extr.external_database_release_id
                 	  AND extr.external_database_id=ext.external_database_id
                   	  AND ext.name='$$projectId$$'
		</sql>
        </sqlQuery>
    </querySet>



<!-- //////////  CONTIGPAGE CONTIG PAGE //////////// -->
    <!-- Queries that retrieve attributes of Contigs -->
    <querySet name="ContigAttributes">

 <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
     <column name="project_id"/>
            <column name="source_id" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="a_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="c_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="g_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="t_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="other_count" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="length" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="at_percent" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="organism" sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="formatted_organism"
                    sortingTable="apidb.SequenceAttributes"
                    sortingColumn="organism" lowerCase="true"/>
            <column name="sequence_description"
                    sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <column name="genbank_accession"
                    sortingTable="apidb.SequenceAttributes"
                    lowerCase="true"/>
            <sql>
            <![CDATA[
                SELECT bfmv.source_id, bfmv.a_count, bfmv.c_count, bfmv.project_id,
                    bfmv.g_count, bfmv.t_count, bfmv.other_count,
                    bfmv.length, bfmv.at_percent, bfmv.organism,
                    '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                    REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                   chr(38) || 'nbsp;') || '</i>'
                      AS formatted_organism,
                    bfmv.ncbi_tax_id, bfmv.sequence_description,
                    bfmv.genbank_accession, bfmv.database_name,
                    bfmv.database_version
              FROM apidb.SequenceAttributes bfmv
              WHERE bfmv.source_id = '$$primaryKey$$'
                  AND '$$projectId$$' = bfmv.project_id
             ]]>
           </sql>
        </sqlQuery>

  
                
 <!-- ContigAttributes.Sequence -->
        <sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                 (SELECT g.source_id, ext.name as project_id, g.sequence
                  from dots.ExternalNaSequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND s.term_name = 'supercontig'
                    AND g.external_database_release_id=extr.external_database_release_id 
                    AND extr.external_database_id=ext.external_database_id
                    AND ext.name='$$projectId$$'
                 )
 
           </sql>
        </sqlQuery>


           
    </querySet>



<!-- //////////  ESTPAGE EST PAGE //////////// -->
   <!-- Queries that retrieve attributes of ESTs -->
    <querySet name="EstAttributes">


 <sqlQuery name="Bfmv" isCacheable='true'>
            <paramRef ref="params.primaryKey"/>
            <paramRef ref="params.projectId"/>
     <column name="project_id"/>
            <column name="source_id" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="a_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="c_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="g_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="t_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="other_count" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="length" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="primer" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="dbest_name" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="vector" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="stage" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="organism" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="formatted_organism" sortingTable="apidb.EstAttributes"
                    sortingColumn="organism" lowerCase="true"/>
            <column name="ncbi_tax_id" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <column name="external_db_name" sortingTable="apidb.EstAttributes"
                    lowerCase="true"/>
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.primer, bfmv.a_count,  bfmv.c_count, bfmv.project_id,
                  bfmv.g_count, bfmv.t_count, bfmv.other_count, bfmv.length, 
                  bfmv.dbest_name, bfmv.vector, bfmv.stage, bfmv.organism, 
                  bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.external_db_name
            FROM  apidb.EstAttributes bfmv
            WHERE bfmv.source_id = '$$primaryKey$$'
                AND '$$projectId$$' = bfmv.project_id
            ]]>
           </sql>
        </sqlQuery>


	<!-- EstAttributes.Sequences -->
	<sqlQuery name="Sequence" isCacheable='true'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                 (SELECT g.source_id, ext.name as project_id, g.sequence
                  from dots.ExternalNaSequence g,
                       sres.SequenceOntology s,
                       sres.ExternalDatabaseRelease extr,
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                   <!-- AND s.term_name = 'supercontig'-->
                    AND g.external_database_release_id=extr.external_database_release_id
                    AND extr.external_database_id=ext.external_database_id
                    AND ext.name='$$projectId$$'
                 )
                                                                                                                             
           </sql>
        </sqlQuery>
	
</querySet>
<!-- //////////  END ESTPAGE EST PAGE //////////// -->





<!-- //////////SNP PAGE////////////// -->

    <querySet name="SnpAttributes">

        <sqlQuery name="Bfmv" isCacheable="false">
            <paramRef ref="params.primaryKey"/>
            <paramRef ref="params.projectId"/>
     <column name="project_id"/>
            <column name="dataset" sortingTable="apidb.SnpAttributes"
                    lowerCase="true"/>
            <column name="dataset_hidden" sortingTable="apidb.SnpAttributes"
                    sortingColumn="dataset" lowerCase="true"/>
            <column name="seq_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="snp_location" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="start_min" sortingTable="apidb.SnpAttributes" sortingColumn="start_min" />
            <column name="is_coding" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_CDS" sortingTable="apidb.SnpAttributes" />
            <column name="position_in_protein" sortingTable="apidb.SnpAttributes" />
            <column name="has_nonsynonymous_allele" sortingTable="apidb.SnpAttributes" />
            <column name="gene_source_id" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="gene_strand" sortingTable="apidb.SnpAttributes" />
            <column name="strains"  sortingTable="apidb.SnpAttributes" />
            <column name="strains_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="strains" lowerCase="true"/>
            <column name="lflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="allele" sortingTable="apidb.SnpAttributes" sortingColumn="reference_na" lowerCase="true"/>
            <column name="rflank" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="lflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="lflank" lowerCase="true"/>
            <column name="allele_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="allele" lowerCase="true"/>
            <column name="rflank_gene_strand" sortingTable="apidb.SnpAttributes" sortingColumn="rflank" lowerCase="true"/>
            <column name="organism" sortingTable="apidb.SnpAttributes" lowerCase="true"/>
            <column name="formatted_organism" sortingTable="apidb.SnpAttributes" sortingColumn="organism" />
            <column name="ncbi_tax_id" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele_count" sortingTable="apidb.SnpAttributes" />
            <column name="minor_product" sortingTable="apidb.SnpAttributes" />
            <column name="major_product" sortingTable="apidb.SnpAttributes" />
            <column name="minor_allele" sortingTable="apidb.SnpAttributes" />
            <column name="major_allele" sortingTable="apidb.SnpAttributes" />
            <column name="reference_na" sortingTable="apidb.SnpAttributes" />
            <column name="reference_aa" sortingTable="apidb.SnpAttributes" />
            <column name="reference_strain" sortingTable="apidb.SnpAttributes" />
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.dataset,
                  DECODE(bfmv.dataset,
                         'NIH SNPs', 'Su_SNPs',
                         'Broad SNPs', 'Broad_SNPs',
                         'Sanger falciparum SNPs', 'sangerItGhanaSnps',
                         'Sanger reichenowi SNPs', 'sangerReichenowiSnps',
                         'PlasmoDB combined SNPs', 'plasmoDbCombinedSnps',
                         bfmv.dataset) AS dataset_hidden,
                  bfmv.seq_source_id, bfmv.start_min, bfmv.reference_strain, bfmv.project_id,
                  bfmv.reference_na, bfmv.is_coding, bfmv.position_in_CDS,
                  bfmv.position_in_protein, bfmv.reference_aa, bfmv.has_nonsynonymous_allele,
                  bfmv.gene_source_id, bfmv.gene_strand, bfmv.lflank,
                  bfmv.rflank, bfmv.reference_na as allele, bfmv.organism, bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.minor_allele_count, bfmv.major_allele_count,bfmv.minor_product,
                  bfmv.major_product,bfmv.major_allele,bfmv.minor_allele,bfmv.strains,bfmv.strains_revcomp,
                  bfmv.seq_source_id || ': ' || trim(to_char(bfmv.start_min,'99,999,999')) as snp_location,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.rflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.lflank  END as lflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.lflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.rflank  END as rflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.reference_na) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.reference_na END as allele_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN bfmv.strains_revcomp 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.strains END as strains_gene_strand
       FROM   apidb.SnpAttributes bfmv
       WHERE  bfmv.source_id = '$$primaryKey$$'
                AND '$$projectId$$' = bfmv.project_id
             ]]>
           </sql>
        </sqlQuery>




    </querySet>

<!-- ////////// END SNP PAGE //////// -->


<!-- //////////  GENEPAGE GENE PAGE //////////// -->
    <!-- Queries that retrieve attributes of Genes -->




 <querySet name="ApiDBGeneAttributes">

         <!-- ApiDBGeneAttributes.ProductOrganism -->
          <sqlQuery name="ProductOrganism" isCacheable='true'>
              <paramRef ref="params.primaryKey"/>
              <column name="source_id"/>
              <column name="product"/>
              <column name="organism"/>
              <sql>
                  <!-- this sql is compatible with the WDK caching engine -->
                  <!-- and should always return a record (even if the product field is empty - the wdk does not like 'no rows returned'   -->
                  <!-- Cristina: added CDATA to include italics in organism as in crypto model  -->
                  <!-- DRIVING_SITE(gf) hint works with FEDERATION  -->
                  <!-- USE_NL(gf,tn) is another hint that works with UNION ALL  -->
                  <!-- Oct13, 2006, introduced latest Sammy's special UNION, used with DRIVING SITE  -->



<![CDATA[


            (SELECT  gf.source_id,  gf.product as product,
               '<i>' || SUBSTR(tn.name, 1, 1) || '. ' || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism
             from cryptodb.genesummary@CRYPTO_DBLINK@ gf,
                  dots.externalnasequence@CRYPTO_DBLINK@ enas,
                  sres.taxonname@CRYPTO_DBLINK@ tn
             WHERE gf.na_sequence_id = enas.na_sequence_id
               AND enas.taxon_id = tn.taxon_id
               AND tn.name_class = 'scientific name'
               AND gf.source_id = '$$primaryKey$$'
            )

UNION ALL

            (SELECT 
                  gf.source_id,  gf.product as product, '<i>' || SUBSTR(tn.name, 1, 1) || '. '
                  || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism
             from dots.GeneFeature@PLASMO_DBLINK@ gf,
                  dots.ExternalNaSequence@PLASMO_DBLINK@ enas,
                  sres.taxonname@PLASMO_DBLINK@ tn
             WHERE gf.source_id='$$primaryKey$$'
               AND gf.na_sequence_id = enas.na_sequence_id
               AND enas.taxon_id = tn.taxon_id
               AND tn.name_class = 'scientific name'

            )


UNION ALL

            (SELECT 
                 gf.source_id,  gf.product as product, '<i>' || SUBSTR(tn.name, 1, 1) || '. '
                 || SUBSTR(tn.name, INSTR(tn.name, ' ', 1, 1) +1) || '</i>' as organism
             from dots.GeneFeature@TOXO_DBLINK@ gf,sres.taxonname@TOXO_DBLINK@ tn,
                  dots.virtualSequence@TOXO_DBLINK@ enas
             WHERE gf.source_id='$$primaryKey$$'
               AND gf.na_sequence_id = enas.na_sequence_id
               AND enas.taxon_id = tn.taxon_id
               AND tn.name_class = 'scientific name'

            )

           ]]>



          </sql>
      </sqlQuery>

  
                
 <!-- ApiDBGeneAttributes.Sequence -->
        <sqlQuery name="Sequence" isCacheable='true'>

            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>

            <column name="sequence"/>
            <sql>
                 (SELECT g.source_id,  g.sequence
                  from dots.SplicedNaSequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND (s.term_name = 'CDS' OR s.term_name = 'processed_transcript')
                    AND g.external_database_release_id=extr.external_database_release_id 
                    AND extr.external_database_id=ext.external_database_id

                 )
 
           </sql>
        </sqlQuery>

       
<!-- ApiDBGeneAttributes.Translation -->
        <sqlQuery name="Translation" isCacheable='true'>

            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>

            <column name="translation"/>
            <sql>
                 (SELECT g.source_id, g.sequence as translation
                  from dots.TranslatedAASequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND g.external_database_release_id=extr.external_database_release_id
                    AND s.term_name = 'protein'
                    AND extr.external_database_id=ext.external_database_id

                 )

            </sql>
        </sqlQuery>

 
    </querySet>













    <querySet name="GeneAttributes">


 <!-- GeneAttributes.Bfmv -->
<sqlQuery name="Bfmv" isCacheable="false">
              <paramRef ref="params.projectId"/>
              <paramRef ref="params.primaryKey"/>
              <column name="project_id"/>

  <column name="source_id" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="gene_type" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="product" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="start_min" sortingTable="apidb.geneattributes"/>
            <column name="end_max" sortingTable="apidb.geneattributes"/>
            <column name="start_min_text" sortingTable="apidb.geneattributes" sortingColumn="start_min"/>
            <column name="end_max_text" sortingTable="apidb.geneattributes" sortingColumn="end_max"/>
            <column name="transcript_length" sortingTable="apidb.geneattributes"/>
            <column name="cds_length" sortingTable="apidb.geneattributes"/>
            <column name="protein_length" sortingTable="apidb.geneattributes"/>
            <column name="context_start" sortingTable="apidb.geneattributes"/>
            <column name="context_end" sortingTable="apidb.geneattributes"/>
            <column name="strand_plus_minus" sortingTable="apidb.geneattributes" sortingColumn="strand"/>
            <column name="sequence_id" sortingTable="apidb.geneattributes" lowerCase="true"/>
            <column name="plasmocyc_db" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="plasmocyc_gene_id" sortingTable="apidb.geneattributes" sortingColumn="source_id"/>
            <column name="tm_count" sortingTable="apidb.geneattributes"/>
            <column name="so_id" sortingTable="apidb.geneattributes"/>
            <column name="so_term_name" sortingTable="apidb.geneattributes"/>
            <column name="so_term_definition" sortingTable="apidb.geneattributes"/>
            <column name="ontology_name" sortingTable="apidb.geneattributes"/>
            <column name="so_version" sortingTable="apidb.geneattributes"/>
            <column name="anticodon" sortingTable="apidb.geneattributes"/>
            <column name="molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="isoelectric_point" sortingTable="apidb.geneattributes"/>
            <column name="min_molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="max_molecular_weight" sortingTable="apidb.geneattributes"/>
            <column name="hydropathicity_gravy_score" sortingTable="apidb.geneattributes"/>
            <column name="aromaticity_score" sortingTable="apidb.geneattributes"/>
            <column name="external_db_name" sortingTable="apidb.geneattributes"/>
            <column name="external_db_version" sortingTable="apidb.geneattributes"/>
            <column name="ncbi_tax_id" sortingTable="apidb.geneattributes"/>
            <column name="species" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="genus_species" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="organism_full" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="organism" sortingTable="apidb.geneattributes" sortingColumn="organism"/>
            <column name="exon_count" sortingTable="apidb.geneattributes"/>
            <column name="strand" sortingTable="apidb.geneattributes"/>
            <column name="ec_numbers_string" sortingTable="apidb.geneattributes" sortingColumn="ec_numbers"/>
            <column name="ann_go_component" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_component"/>
            <column name="ann_go_process" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_process"/>
            <column name="ann_go_function" sortingTable="apidb.geneattributes" sortingColumn="annotated_go_function"/>
            <column name="pred_go_component" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_component"/>
            <column name="pred_go_process" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_process"/>
            <column name="pred_go_function" sortingTable="apidb.geneattributes" sortingColumn="predicted_go_function"/>
            <column name="der_min_level" sortingTable="apidb.geneattributes" sortingColumn="derisi_min_level"/>
            <column name="der_max_level" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_level"/>
            <column name="der_min_timing" sortingTable="apidb.geneattributes" sortingColumn="derisi_min_timing"/>
            <column name="der_max_timing" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_timing"/>
            <column name="der_max_pct" sortingTable="apidb.geneattributes" sortingColumn="derisi_max_pct"/>
            <column name="winz_min_level" sortingTable="apidb.geneattributes" sortingColumn="winzeler_min_level"/>
            <column name="winz_max_level" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_level"/>
            <column name="winz_min_timing" sortingTable="apidb.geneattributes" sortingColumn="winzeler_min_timing"/>
            <column name="winz_max_timing" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_timing"/>
            <column name="winz_max_pct" sortingTable="apidb.geneattributes" sortingColumn="winzeler_max_pct"/>

<!-- add project_id, and italics in organism -->

            <sql>
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product, bfmv.project_id,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start, bfmv.context_end, 
                   bfmv.sequence_id, 
                   bfmv.organism  as organism_full, 
                   bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version,
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1, INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1) AS genus_species,
                   '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.&nbsp;' || 
                       SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ', 1, 1) +1) || '</i>' as organism,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - INSTR(bfmv.organism, ' ') - 1) AS species,
                   DECODE(bfmv.organism,
                          'Plasmodium falciparum 3D7', 'PLASMO', null)
                   AS plasmocyc_db,
                   UPPER(bfmv.source_id) AS plasmocyc_gene_id,
                   bfmv.strand,bfmv.ec_numbers as ec_numbers_string,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   bfmv.predicted_go_process as pred_go_process,
                   bfmv.derisi_max_level as der_max_level,
                   bfmv.derisi_min_level as der_min_level,
                   bfmv.derisi_min_timing as der_min_timing,
                   bfmv.derisi_max_timing as der_max_timing,
                   bfmv.derisi_max_pct as der_max_pct,
                   bfmv.winzeler_max_level as winz_max_level,
                   bfmv.winzeler_min_level as winz_min_level,
                   bfmv.winzeler_min_timing as winz_min_timing,
                   bfmv.winzeler_max_timing as winz_max_timing,
                   bfmv.winzeler_max_pct as winz_max_pct
            FROM apidb.GeneAttributes bfmv
               WHERE bfmv.source_id='$$primaryKey$$'
 AND '$$projectId$$' = bfmv.project_id
            ]]>
            </sql>






        </sqlQuery>

   <!-- GeneAttributes.CDS -->
        <sqlQuery name="CDS" isCacheable='false'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                 (SELECT g.source_id, ext.name as project_id, g.sequence
                  from dots.SplicedNaSequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND s.term_name = 'CDS'
                    AND g.external_database_release_id=extr.external_database_release_id 
                    AND extr.external_database_id=ext.external_database_id
                    AND ext.name='$$projectId$$'
                 )
 
           </sql>
        </sqlQuery>
                
 <!-- GeneAttributes.TranscriptSequence -->
        <sqlQuery name="TranscriptSequence" isCacheable='false'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                 (SELECT g.source_id, ext.name as project_id, g.sequence
                  from dots.SplicedNaSequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND s.term_name = 'processed_transcript'
                    AND g.external_database_release_id=extr.external_database_release_id 
                    AND extr.external_database_id=ext.external_database_id
                    AND ext.name='$$projectId$$'
                 )
 
           </sql>
        </sqlQuery>

       
<!-- GeneAttributes.Translation -->
        <sqlQuery name="Translation" displayName="Protein Sequence"  isCacheable='false'>
            <paramRef ref="params.projectId"/>
            <paramRef ref="params.primaryKey"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="translation"/>
            <sql>
                 (SELECT g.source_id, ext.name as project_id, g.sequence as translation
                  from dots.TranslatedAASequence g, 
                       sres.SequenceOntology s, 
                       sres.ExternalDatabaseRelease extr, 
                       sres.ExternalDatabase ext
                  WHERE g.source_id = '$$primaryKey$$'
                    AND  g.sequence_ontology_id = s.sequence_ontology_id
                    AND g.external_database_release_id=extr.external_database_release_id
                    AND s.term_name = 'protein'
                    AND extr.external_database_id=ext.external_database_id
                    AND ext.name='$$projectId$$'
                 )

            </sql>
        </sqlQuery>

 
    </querySet>

<!-- ////////// END GENEPAGE GENE PAGE //////////// -->


     
<!-- ////////// UTILITY //////////// -->
    <querySet name="UtilityQueries">

        <!-- UtilityQueries.PingCrypto (cryptolink hard coded in jsp) -->
        <sqlQuery name="PingCrypto" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="cryptolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as cryptolink
            from global_name@CRYPTO_DBLINK@
             ]]>
           </sql>
        </sqlQuery>
      
        <!-- UtilityQueries.PingToxo (toxolink hard coded in jsp)   -->
        <sqlQuery name="PingToxo" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="toxolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as toxolink
            from global_name@TOXO_DBLINK@
             ]]>
           </sql>
        </sqlQuery>
      
        <!-- UtilityQueries.PingPlasmo (plasmolink hard coded in jsp)   -->
        <sqlQuery name="PingPlasmo" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="plasmolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as plasmolink
            from global_name@PLASMO_DBLINK@
             ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.PingToxo2 (toxolink2 hard coded in jsp)   -->
        <sqlQuery name="PingToxo2" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="toxolink2" />
            <sql> 
            <![CDATA[           
            select
                     DB_LINK ,
                    HOST as toxolink2
                    from all_db_links
                     where  instr(DB_LINK,'TOXO.') > 0
             ]]>
           </sql>
        </sqlQuery>
      
        <!-- UtilityQueries.PingPlasmo2 (plasmolink2 hard coded in jsp)   -->
        <sqlQuery name="PingPlasmo2" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="plasmolink2" />
            <sql> 
            <![CDATA[           
            select
                     DB_LINK ,
                    HOST as plasmolink2
                    from all_db_links
                     where instr(DB_LINK,'PLASMO.') > 0
                    
             ]]>
           </sql>
        </sqlQuery>

     <!-- UtilityQueries.PingUser (userlink hard coded in jsp)   -->
        <sqlQuery name="PingUser" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="userlink" />
            <sql> 
            <![CDATA[           
            select
                     DB_LINK,
                    HOST  as userlink
                    from all_db_links
                     where instr(DB_LINK,'UGA_') > 0
                    
             ]]>
           </sql>
        </sqlQuery>

      

<!-- UtilityQueries.CurrentInstance -->
        <sqlQuery name="CurrentInstance" isCacheable='false'>
            <paramRef ref="params.primaryKey"/> 
            <column name="global_name" />
            <column name="host_name" />
            <column name="address" />
            <column name="version" />
            <column name="system_date" />
            <column name="login" />
           <sql> 
            <![CDATA[           
            select 
                global_name, 
                ver.banner version,
                UTL_INADDR.get_host_name as host_name,
                UTL_INADDR.get_host_address as address,
                to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') as system_date,
                sys_context('USERENV', 'SESSION_USER') as login
            from global_name, v$version ver
            where lower(ver.banner) like '%oracle%'
             ]]>
           </sql>
        </sqlQuery>
        
     </querySet>
<!-- ////////// END UTILITY //////////// -->



<!-- //////////  VOCABULARY //////////// -->

    <querySet name="VocabQueries">


<sqlQuery name="Confidence">
          <column name="internal"/>
          <column name="term"/>
          <sql>
           SELECT * FROM (
               SELECT 'High' as term,
                      'High'  as internal FROM dual
               UNION
               SELECT 'Medium' as term,
                      'Medium'  as internal FROM dual
               UNION
               SELECT 'Low' as term,
                      'Low' as internal FROM dual
               )
          </sql>
</sqlQuery>

        <sqlQuery name="Sample">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
	      SELECT 'RH (Type I)' AS term, 1 as idx,
	              'RH (Type I)' AS internal FROM dual
              UNION
              SELECT 'Prugniaud (Type II)' AS term, 2 as idx,
	              'Prugniaud (Type II)' AS internal FROM dual
              UNION
              SELECT 'VEG (Type III)' AS term, 3 as idx,
	             'VEG (Type III)' AS internal FROM dual
	    ) 
	    ORDER BY idx	     
            </sql>
        </sqlQuery>



<sqlQuery name="cowmanSample">
            <column name="internal"/>
            <column name="term"/>
            <sql>
SELECT distinct lg.name AS term, lg.name AS internal 
  FROM STUDY.Study@PLASMO_DBLINK@ s, RAD.StudyAssay@PLASMO_DBLINK@ sa, RAD.AssayAnalysis@PLASMO_DBLINK@ aa, RAD.analysis@PLASMO_DBLINK@ a,
      RAD.Protocol@PLASMO_DBLINK@ p, RAD.AnalysisInput@PLASMO_DBLINK@ ai, RAD.LogicalGroup@PLASMO_DBLINK@ lg
  WHERE s.name in ('Molecular mechanism for switching of P.falciparum invasion pathways into human erythrocytes',
            'P.falciparum strain 3D7, SIR2 knockout',
            'Invasion by P. falciparum merozoites suggests a hierarchy of molecular interactions')
  AND p.name = 'R Expression Statistics'
  AND sa.study_id = s.study_id
  AND aa.assay_id = sa.assay_id
  AND a.analysis_id = aa.analysis_id
  AND a.protocol_id = p.protocol_id
  AND ai.analysis_id = a.analysis_id
  AND lg.logical_group_id = ai.logical_group_id
            </sql>
        </sqlQuery>


  <sqlQuery name="regulated_dir">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'up-regulated' as term, 'up-regulated' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'down-regulated' as term, 'down-regulated' as internal, 2 as idx
                FROM dual
            ) 
            ORDER BY idx
           </sql>
        </sqlQuery>


<!-- april 26 2007 cristina: for toxo genes by expression percentile -->
 <sqlQuery name="ExprnSample">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
	      SELECT 'RH (Type I) in High Glucose  vs. RH (TypeI) with No Glucose' AS term, 
	           'RH (Type I) in High Glucose  vs. RH (TypeI) with No Glucose' AS internal,
		   1 as idx FROM dual
              UNION
              SELECT 'Prugniaud (Type II)  vs.  VEG (Type III)' AS term, 
	           'Prugniaud (Type II)  vs.  VEG (Type III)' AS internal,
		   4 as idx FROM dual
              UNION
              SELECT 'Prugniaud (Type II)  vs.  RH (Type I)' AS term, 
	           'Prugniaud (Type II)  vs.  RH (Type I)' AS internal, 
		   2 as idx FROM dual
              UNION
              SELECT 'RH (Type I)  vs.  VEG (Type III)' AS term, 
	           'RH (Type I)  vs.  VEG (Type III)' AS internal, 
		   3 as idx FROM dual
            ) 
            ORDER BY idx
            </sql>
        </sqlQuery>


<sqlQuery name="inNotIn">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'does overlap with a gene' as term, 'does overlap with a gene' as internal, 1 as idx
               FROM dual
            UNION
                SELECT 'does not overlap with a gene' as term, 'does not overlap with a gene' as internal, 2 as idx
                FROM dual
            ) order by idx
            </sql>
        </sqlQuery>


<sqlQuery name="DomainDatabase">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT DISTINCT ed.name AS term, ed.name AS internal
            FROM sres.DbRef@CRYPTO_DBLINK@ dr, sres.ExternalDatabaseRelease@CRYPTO_DBLINK@ edr,
                 sres.ExternalDatabase@CRYPTO_DBLINK@ ed
            WHERE dr.external_database_release_id
                  = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND dr.db_ref_id IN
                  (SELECT draf.db_ref_id
                   FROM dots.DomainFeature@CRYPTO_DBLINK@ df, dots.DbRefAaFeature@CRYPTO_DBLINK@ draf,
                        core.AlgorithmInvocation@CRYPTO_DBLINK@ ainv,
                        core.AlgorithmImplementation@CRYPTO_DBLINK@ aimp
                   WHERE df.aa_feature_id = draf.aa_feature_id
                     AND df.row_alg_invocation_id = ainv.algorithm_invocation_id
                     AND ainv.algorithm_implementation_id
                         = aimp.algorithm_implementation_id
                     AND aimp.executable
                         = 'ApiCommonData::Load::Plugin::InsertInterproscanResults')
            UNION
              SELECT ' Choose one:' AS term, ' Choose one:' AS internal
              FROM dual
            ORDER BY term
            </sql>
        </sqlQuery>


        


<sqlQuery name="TextSearchDatasets">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Gene product' AS term,
                      'Gene product' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'Gene notes' AS term,
                      'Gene notes' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'User comments' AS term,
                      'User comments' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'Protein domain names and descriptions' AS term,
                      'Protein domain names and descriptions' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT 'Similar proteins (BLAST hits v. NRDB)' AS term,
                      'Similar proteins (BLAST hits v. NRDB)' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT 'EC descriptions' AS term,
                      'EC descriptions' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT 'GO terms and definitions' AS term,
                      'GO terms and definitions' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT 'Metabolic pathway names and descriptions' AS term,
                      'Metabolic pathway names and descriptions' AS internal,
                      7 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

<sqlQuery name="lower_yes_no_list">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'yes' as term, 'yes' as internal, 1 as idx FROM dual
               UNION
               SELECT 'no' as term, 'no' as internal, 2 as idx FROM dual
            ) ORDER BY idx
            </sql>
        </sqlQuery>

<sqlQuery name="no_yes_list">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'No' as term, 'No' as internal, 1 as idx FROM dual
               UNION
               SELECT 'Yes' as term, 'Yes' as internal, 2 as idx  FROM dual
            ) ORDER BY idx
            </sql>
        </sqlQuery>

  <sqlQuery name="yes_no_list">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Yes' as term, 'Yes' as internal, 1 as idx FROM dual
               UNION
               SELECT 'No' as term, 'No' as internal, 2 as idx FROM dual
            ) ORDER BY idx
            </sql>
        </sqlQuery>

 <sqlQuery name="ObservedNotObserved">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'observed' as term, 
                      'observed' as internal FROM dual
               UNION
               SELECT 'not observed' as term, 
                      'not observed' as internal FROM dual
               UNION
               SELECT 'do not care' as term, 
                      'do not care' as internal FROM dual
            )
            </sql>
        </sqlQuery>


 <sqlQuery name="MassSpecStage">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'any' AS term, 
                      'any' AS internal, 1 AS ord FROM dual
               UNION
               SELECT 'Troph/Schizont' AS term, 
                      'Troph/Schizont' AS internal, 2 AS ord FROM dual
               UNION
               SELECT 'iRBC Membrane' AS term, 
                      'iRBC Membrane' AS internal, 3 AS ord FROM dual
               UNION
               SELECT 'Gametocyte' AS term, 
                      'Gametocyte' AS internal, 4 AS ord FROM dual
               UNION
               SELECT 'Merozoite' AS term, 
                      'Merozoite' AS internal, 5 AS ord FROM dual
               UNION
               SELECT 'Sporozoite' AS term, 
                      'Sporozoite' AS internal, 6 AS ord FROM dual
               UNION
               SELECT 'Trophozoite' AS term, 
                      'Trophozoite' AS internal, 7 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>



<sqlQuery name="DayAndStrain">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT DECODE(ps.name, 'winzeler_NF54_pct', 'Strain NF54',
                                   'winzeler_3D7_pct', 'Strain 3D7',
                                   'winzeler_3D7_MACpct', 'Strain 3D7 (MACS-purified)',
                          ps.name)
                   ||  REPLACE(pen.name, 'Day', ' Day ') AS internal,
                   DECODE(ps.name, 'winzeler_NF54_pct', 'Strain NF54',
                                   'winzeler_3D7_pct', 'Strain 3D7',
                                   'winzeler_3D7_MACpct', 'Strain 3D7 (MACS-purified)',
                          ps.name)
                   ||  REPLACE(pen.name, 'Day', ' Day ') AS term
            FROM apidb.ProfileSet@PLASMO_DBLINK@ ps, apidb.ProfileElementName@PLASMO_DBLINK@ pen
            WHERE ps.name IN ('winzeler_3D7_MACpct', 'winzeler_3D7_pct','winzeler_NF54_pct')
              AND ps.profile_set_id = pen.profile_set_id
            ORDER BY ps.name, pen.element_order
            </sql>
        </sqlQuery>


<sqlQuery name="WatersProfileSets">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'HPE' as term, 
                      'HPE' as internal FROM dual
               UNION
               SELECT 'HP' as term, 
                      'HP' as internal FROM dual
               UNION
               SELECT 'Either' as term, 
                      'Either' as internal FROM dual
               )
            </sql>
        </sqlQuery>


 <sqlQuery name="ProfileDistanceMethod">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Euclidean Distance' AS term,
                      'Euclidean Distance' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'Pearson Correlation' AS term,
                      'Pearson Correlation' AS internal,
                      2 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileSearchGoal">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'most similar' AS term,
                      'most similar' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'least similar' AS term,
                      'least similar' AS internal,
                      2 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

<!-- April 26 Cristina -->
       <sqlQuery name="ProfileProfileSet">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '3D7' AS term,
                      '3D7' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT 'Dd2' AS term,
                      'Dd2' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'HB3' AS term,
                      'HB3' AS internal,
                      3 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

<!-- OLD
        <sqlQuery name="ProfileProfileSet">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT distinct name as term,
                   name as internal,
                   rownum as ord
               FROM apidb.profileset@PLASMO_DBLINK@
               WHERE name like '%Average%'
            ) ORDER BY ord
            </sql>
        </sqlQuery>
-->
        <sqlQuery name="ProfileTimeShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'allow' AS term,
                      'allow' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'not allow' AS term,
                      'not allow' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileScaleData">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'scale to [0..1]' AS term,
                      'scale to [0..1]' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT 'not scale' AS term,
                      'not scale' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileMinShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '0 hour' AS term,
                      '0 hour' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT '1 hour' AS term,
                      '1 hour' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT '2 hours' AS term,
                      '2 hours' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT '3 hours' AS term,
                      '3 hours' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT '4 hours' AS term,
                      ' hours4' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT '5 hours' AS term,
                      '5 hours' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT '6 hours' AS term,
                      '6 hours' AS internal,
                      7 AS ord FROM dual
               UNION
               SELECT '7 hours' AS term,
                      '7 hours' AS internal,
                      8 AS ord FROM dual
               UNION
               SELECT '8 hours' AS term,
                      '8 hours' AS internal,
                      9 AS ord FROM dual
               UNION
               SELECT '9 hours' AS term,
                      '9 hours' AS internal,
                      10 AS ord FROM dual
               UNION
               SELECT '10 hours' AS term,
                      '10 hours' AS internal,
                      11 AS ord FROM dual
               UNION
               SELECT '11 hours' AS term,
                      '11 hours' AS internal,
                      12 AS ord FROM dual
               UNION
               SELECT '12 hours' AS term,
                      '12 hours' AS internal,
                      13 AS ord FROM dual
               UNION
               SELECT '13 hours' AS term,
                      '13 hours' AS internal,
                      14 AS ord FROM dual
               UNION
               SELECT '14 hours' AS term,
                      '14 hours' AS internal,
                      15 AS ord FROM dual
               UNION
               SELECT '15 hours' AS term,
                      '15 hours' AS internal,
                      16 AS ord FROM dual
               UNION
               SELECT '16 hours' AS term,
                      '16 hours' AS internal,
                      17 AS ord FROM dual
               UNION
               SELECT '17 hours' AS term,
                      '17 hours' AS internal,
                      18 AS ord FROM dual
               UNION
               SELECT '18 hours' AS term,
                      '18 hours' AS internal,
                      19 AS ord FROM dual
               UNION
               SELECT '19 hours' AS term,
                      '19 hours' AS internal,
                      20 AS ord FROM dual
               UNION
               SELECT '20 hours' AS term,
                      '20 hours' AS internal,
                      21 AS ord FROM dual
               UNION
               SELECT '21 hours' AS term,
                      '21 hours' AS internal,
                      22 AS ord FROM dual
               UNION
               SELECT '22 hours' AS term,
                      '22 hours' AS internal,
                      23 AS ord FROM dual
               UNION
               SELECT '23 hours' AS term,
                      '23 hours' AS internal,
                      24 AS ord FROM dual
               UNION
               SELECT '24 hours' AS term,
                      '24 hours' AS internal,
                      25 AS ord FROM dual
               UNION
               SELECT '25 hours' AS term,
                      '25 hours' AS internal,
                      26 AS ord FROM dual
               UNION
               SELECT '26 hours' AS term,
                      '26 hours' AS internal,
                      27 AS ord FROM dual
               UNION
               SELECT '27 hours' AS term,
                      '27 hours' AS internal,
                      28 AS ord FROM dual
               UNION
               SELECT '28 hours' AS term,
                      '28 hours' AS internal,
                      29 AS ord FROM dual
               UNION
               SELECT '29 hours' AS term,
                      '29 hours' AS internal,
                      30 AS ord FROM dual
               UNION
               SELECT '30 hours' AS term,
                      '30 hours' AS internal,
                      31 AS ord FROM dual
               UNION
               SELECT '31 hours' AS term,
                      '31 hours' AS internal,
                      32 AS ord FROM dual
               UNION
               SELECT '32 hours' AS term,
                      '32 hours' AS internal,
                      33 AS ord FROM dual
               UNION
               SELECT '33 hours' AS term,
                      '33 hours' AS internal,
                      34 AS ord FROM dual
               UNION
               SELECT '34 hours' AS term,
                      '34 hours' AS internal,
                      35 AS ord FROM dual
               UNION
               SELECT '35 hours' AS term,
                      '35 hours' AS internal,
                      36 AS ord FROM dual
               UNION
               SELECT '36 hours' AS term,
                      '36 hours' AS internal,
                      37 AS ord FROM dual
               UNION
               SELECT '37 hours' AS term,
                      '37 hours' AS internal,
                      38 AS ord FROM dual
               UNION
               SELECT '38 hours' AS term,
                      '38 hours' AS internal,
                      39 AS ord FROM dual
               UNION
               SELECT '39 hours' AS term,
                      '39 hours' AS internal,
                      40 AS ord FROM dual
               UNION
               SELECT '40 hours' AS term,
                      '40 hours' AS internal,
                      41 AS ord FROM dual
               UNION
               SELECT '41 hours' AS term,
                      '41 hours' AS internal,
                      42 AS ord FROM dual
               UNION
               SELECT '42 hours' AS term,
                      '42 hours' AS internal,
                      43 AS ord FROM dual
               UNION
               SELECT '43 hours' AS term,
                      '43 hours' AS internal,
                      44 AS ord FROM dual
               UNION
               SELECT '44 hours' AS term,
                      '44 hours' AS internal,
                      45 AS ord FROM dual
               UNION
               SELECT '45 hours' AS term,
                      '45 hours' AS internal,
                      46 AS ord FROM dual
               UNION
               SELECT '46 hours' AS term,
                      '46 hours' AS internal,
                      47 AS ord FROM dual
               UNION
               SELECT '47 hours' AS term,
                      '47 hours' AS internal,
                      48 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="ProfileMaxShift">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT '0 hour' AS term,
                      '0 hour' AS internal,
                      1 AS ord FROM dual
               UNION
               SELECT '1 hour' AS term,
                      '1 hour' AS internal,
                      2 AS ord FROM dual
               UNION
               SELECT '2 hours' AS term,
                      '2 hours' AS internal,
                      3 AS ord FROM dual
               UNION
               SELECT '3 hours' AS term,
                      '3 hours' AS internal,
                      4 AS ord FROM dual
               UNION
               SELECT '4 hours' AS term,
                      '4 hours' AS internal,
                      5 AS ord FROM dual
               UNION
               SELECT '5 hours' AS term,
                      '5 hours' AS internal,
                      6 AS ord FROM dual
               UNION
               SELECT '6 hours' AS term,
                      '6 hours' AS internal,
                      7 AS ord FROM dual
               UNION
               SELECT '7 hours' AS term,
                      '7 hours' AS internal,
                      8 AS ord FROM dual
               UNION
               SELECT '8 hours' AS term,
                      '8 hours' AS internal,
                      9 AS ord FROM dual
               UNION
               SELECT '9 hours' AS term,
                      '9 hours' AS internal,
                      10 AS ord FROM dual
               UNION
               SELECT '10 hours' AS term,
                      '10 hours' AS internal,
                      11 AS ord FROM dual
               UNION
               SELECT '11 hours' AS term,
                      '11 hours' AS internal,
                      12 AS ord FROM dual
               UNION
               SELECT '12 hours' AS term,
                      '12 hours' AS internal,
                      13 AS ord FROM dual
               UNION
               SELECT '13 hours' AS term,
                      '13 hours' AS internal,
                      14 AS ord FROM dual
               UNION
               SELECT '14 hours' AS term,
                      '14 hours' AS internal,
                      15 AS ord FROM dual
               UNION
               SELECT '15 hours' AS term,
                      '15 hours' AS internal,
                      16 AS ord FROM dual
               UNION
               SELECT '16 hours' AS term,
                      '16 hours' AS internal,
                      17 AS ord FROM dual
               UNION
               SELECT '17 hours' AS term,
                      '17 hours' AS internal,
                      18 AS ord FROM dual
               UNION
               SELECT '18 hours' AS term,
                      '18 hours' AS internal,
                      19 AS ord FROM dual
               UNION
               SELECT '19 hours' AS term,
                      '19 hours' AS internal,
                      20 AS ord FROM dual
               UNION
               SELECT '20 hours' AS term,
                      '20 hours' AS internal,
                      21 AS ord FROM dual
               UNION
               SELECT '21 hours' AS term,
                      '21 hours' AS internal,
                      22 AS ord FROM dual
               UNION
               SELECT '22 hours' AS term,
                      '22 hours' AS internal,
                      23 AS ord FROM dual
               UNION
               SELECT '23 hours' AS term,
                      '23 hours' AS internal,
                      24 AS ord FROM dual
               UNION
               SELECT '24 hours' AS term,
                      '24 hours' AS internal,
                      25 AS ord FROM dual
               UNION
               SELECT '25 hours' AS term,
                      '25 hours' AS internal,
                      26 AS ord FROM dual
               UNION
               SELECT '26 hours' AS term,
                      '26 hours' AS internal,
                      27 AS ord FROM dual
               UNION
               SELECT '27 hours' AS term,
                      '27 hours' AS internal,
                      28 AS ord FROM dual
               UNION
               SELECT '28 hours' AS term,
                      '28 hours' AS internal,
                      29 AS ord FROM dual
               UNION
               SELECT '29 hours' AS term,
                      '29 hours' AS internal,
                      30 AS ord FROM dual
               UNION
               SELECT '30 hours' AS term,
                      '30 hours' AS internal,
                      31 AS ord FROM dual
               UNION
               SELECT '31 hours' AS term,
                      '31 hours' AS internal,
                      32 AS ord FROM dual
               UNION
               SELECT '32 hours' AS term,
                      '32 hours' AS internal,
                      33 AS ord FROM dual
               UNION
               SELECT '33 hours' AS term,
                      '33 hours' AS internal,
                      34 AS ord FROM dual
               UNION
               SELECT '34 hours' AS term,
                      '34 hours' AS internal,
                      35 AS ord FROM dual
               UNION
               SELECT '35 hours' AS term,
                      '35 hours' AS internal,
                      36 AS ord FROM dual
               UNION
               SELECT '36 hours' AS term,
                      '36 hours' AS internal,
                      37 AS ord FROM dual
               UNION
               SELECT '37 hours' AS term,
                      '37 hours' AS internal,
                      38 AS ord FROM dual
               UNION
               SELECT '38 hours' AS term,
                      '38 hours' AS internal,
                      39 AS ord FROM dual
               UNION
               SELECT '39 hours' AS term,
                      '39 hours' AS internal,
                      40 AS ord FROM dual
               UNION
               SELECT '40 hours' AS term,
                      '40 hours' AS internal,
                      41 AS ord FROM dual
               UNION
               SELECT '41 hours' AS term,
                      '41 hours' AS internal,
                      42 AS ord FROM dual
               UNION
               SELECT '42 hours' AS term,
                      '42 hours' AS internal,
                      43 AS ord FROM dual
               UNION
               SELECT '43 hours' AS term,
                      '43 hours' AS internal,
                      44 AS ord FROM dual
               UNION
               SELECT '44 hours' AS term,
                      '44 hours' AS internal,
                      45 AS ord FROM dual
               UNION
               SELECT '45 hours' AS term,
                      '45 hours' AS internal,
                      46 AS ord FROM dual
               UNION
               SELECT '46 hours' AS term,
                      '46 hours' AS internal,
                      47 AS ord FROM dual
               UNION
               SELECT '47 hours' AS term,
                      '47 hours' AS internal,
                      48 AS ord FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>









    <sqlQuery name="ProfileSet">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Dev. Series HB3 (glass slide), DeRisi' as term, 
                      'Dev. Series HB3 (glass slide), DeRisi' as internal FROM dual
               UNION
               SELECT 'Dev. Series 3D7 (glass slide), DeRisi' as term, 
                      'Dev. Series 3D7 (glass slide), DeRisi' as internal FROM dual
               UNION
               SELECT 'Dev. Series Dd2 (glass slide), DeRisi' as term, 
                      'Dev. Series Dd2 (glass slide), DeRisi' as internal FROM dual
               UNION
               SELECT 'Any of the time courses' as term, 
                      'Any of the time courses' as internal FROM dual
               )
            </sql>
        </sqlQuery>

        <sqlQuery name="MinOrMax">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT 'Timing of maximal expression' as term, 
                      'Timing of maximal expression' as internal
               FROM dual
               UNION
               SELECT 'Timing of minimal expression' as term, 
                      'Timing of minimal expression' as internal
               FROM dual
               UNION
               SELECT 'Timing of both max and min expression' as term, 
                      'Timing of both max and min expression' as internal
               FROM dual
               )
            ORDER BY internal
            </sql>
        </sqlQuery>

        <sqlQuery name="Hours48">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal 
            FROM (
               SELECT '1 hour' as term, 0 as ord, 
                      '1 hour' as internal FROM dual
               UNION
               SELECT '2 hours' as term, 1 as ord, 
                      '2 hours' as internal FROM dual
               UNION
               SELECT '3 hours' as term, 2 as ord, 
                      '3 hours' as internal FROM dual
               UNION
               SELECT '4 hours' as term, 3 as ord, 
                      '4 hours' as internal FROM dual
               UNION
               SELECT '5 hours' as term, 4 as ord, 
                      '5 hours' as internal FROM dual
               UNION
               SELECT '6 hours' as term, 5 as ord, 
                      '6 hours' as internal FROM dual
               UNION
               SELECT '7 hours' as term, 6 as ord, 
                      '7 hours' as internal FROM dual
               UNION
               SELECT '8 hours' as term, 7 as ord, 
                      '8 hours' as internal FROM dual
               UNION
               SELECT '9 hours' as term, 8 as ord, 
                      '9 hours' as internal FROM dual
               UNION
               SELECT '10 hours' as term, 9  as ord, 
                      '10 hours' as internal FROM dual
               UNION
               SELECT '11 hours' as term, 10 as ord, 
                      '11 hours' as internal FROM dual
               UNION
               SELECT '12 hours' as term, 11 as ord, 
                      '12 hours' as internal FROM dual
               UNION
               SELECT '13 hours' as term, 12 as ord, 
                      '13 hours' as internal FROM dual
               UNION
               SELECT '14 hours' as term, 13 as ord, 
                      '14 hours' as internal FROM dual
               UNION
               SELECT '15 hours' as term, 14 as ord, 
                      '15 hours' as internal FROM dual
               UNION 
               SELECT '16 hours' as term, 15 as ord, 
                      '16 hours' as internal FROM dual
               UNION
               SELECT '17 hours' as term, 16 as ord, 
                      '17 hours' as internal FROM dual
               UNION
               SELECT '18 hours' as term, 17 as ord, 
                      '18 hours' as internal FROM dual
               UNION
               SELECT '19 hours' as term, 18 as ord, 
                      '19 hours' as internal FROM dual
               UNION
               SELECT '20 hours' as term, 19 as ord, 
                      '20 hours' as internal FROM dual
               UNION
               SELECT '21 hours' as term, 20 as ord, 
                      '21 hours' as internal FROM dual
               UNION
               SELECT '22 hours' as term, 21 as ord, 
                      '22 hours' as internal FROM dual
               UNION
               SELECT '23 hours' as term, 22 as ord, 
                      '23 hours' as internal FROM dual
               UNION
               SELECT '24 hours' as term, 23 as ord, 
                      '24 hours' as internal FROM dual
               UNION
               SELECT '25 hours' as term, 24 as ord, 
                      '25 hours' as internal FROM dual
               UNION
               SELECT '26 hours' as term, 25 as ord, 
                      '26 hours' as internal FROM dual
               UNION
               SELECT '27 hours' as term, 26 as ord, 
                      '27 hours' as internal FROM dual
               UNION
               SELECT '28 hours' as term, 27 as ord, 
                      '28 hours' as internal FROM dual
               UNION
               SELECT '29 hours' as term, 28 as ord, 
                      '29 hours' as internal FROM dual
               UNION
               SELECT '30 hours' as term, 29 as ord, 
                      '30 hours' as internal FROM dual
               UNION
               SELECT '31 hours' as term, 30 as ord, 
                      '31 hours' as internal FROM dual
               UNION
               SELECT '32 hours' as term, 31 as ord, 
                      '32 hours' as internal FROM dual
               UNION
               SELECT '33 hours' as term, 32 as ord, 
                      '33 hours' as internal FROM dual
               UNION
               SELECT '34 hours' as term, 33 as ord, 
                      '34 hours' as internal FROM dual
               UNION
               SELECT '35 hours' as term, 34 as ord, 
                      '35 hours' as internal FROM dual
               UNION
               SELECT '36 hours' as term, 35 as ord, 
                      '36 hours' as internal FROM dual
               UNION
               SELECT '37 hours' as term, 36 as ord, 
                      '37 hours' as internal FROM dual
               UNION
               SELECT '38 hours' as term, 37 as ord, 
                      '38 hours' as internal FROM dual
               UNION
               SELECT '39 hours' as term, 38 as ord, 
                      '39 hours' as internal FROM dual
               UNION
               SELECT '40 hours' as term, 39 as ord, 
                      '40 hours' as internal FROM dual
               UNION
               SELECT '41 hours' as term, 40 as ord, 
                      '41 hours' as internal FROM dual
               UNION
               SELECT '42 hours' as term, 41 as ord, 
                      '42 hours' as internal FROM dual
               UNION
               SELECT '43 hours' as term, 42 as ord, 
                      '43 hours' as internal FROM dual
               UNION
               SELECT '44 hours' as term, 43 as ord, 
                      '44 hours' as internal FROM dual
               UNION
               SELECT '45 hours' as term, 44 as ord, 
                      '45 hours' as internal FROM dual
               UNION
               SELECT '46 hours' as term, 45 as ord, 
                      '46 hours' as internal FROM dual
               UNION
               SELECT '47 hours' as term, 46 as ord, 
                      '47 hours' as internal FROM dual
               UNION
               SELECT '48 hours' as term, 47 as ord, 
                      '48 hours' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Hours24">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal
            FROM (
               SELECT '1 hour' as term, 0 as ord, 
                      '1 hour' as internal FROM dual
               UNION
               SELECT '2 hours' as term, 1 as ord, 
                      '2 hours' as internal FROM dual
               UNION
               SELECT '3 hours' as term, 2 as ord, 
                      '3 hours' as internal FROM dual
               UNION
               SELECT '4 hours' as term, 3 as ord, 
                      '4 hours' as internal FROM dual
               UNION
               SELECT '5 hours' as term, 4 as ord, 
                      '5 hours' as internal FROM dual
               UNION
               SELECT '6 hours' as term, 5 as ord, 
                      '6 hours' as internal FROM dual
               UNION
               SELECT '7 hours' as term, 6 as ord, 
                      '7 hours' as internal FROM dual
               UNION
               SELECT '8 hours' as term, 7 as ord, 
                      '8 hours' as internal FROM dual
               UNION
               SELECT '9 hours' as term, 8 as ord, 
                      '9 hours' as internal FROM dual
               UNION
               SELECT '10 hours' as term, 9  as ord, 
                      '10 hours' as internal FROM dual
               UNION
               SELECT '11 hours' as term, 10 as ord, 
                      '11 hours' as internal FROM dual
               UNION
               SELECT '12 hours' as term, 11 as ord, 
                      '12 hours' as internal FROM dual
               UNION
               SELECT '13 hours' as term, 12 as ord, 
                      '13 hours' as internal FROM dual
               UNION
               SELECT '14 hours' as term, 13 as ord, 
                      '14 hours' as internal FROM dual
               UNION
               SELECT '15 hours' as term, 14 as ord, 
                      '15 hours' as internal FROM dual
               UNION
               SELECT '16 hours' as term, 15 as ord, 
                      '16 hours' as internal FROM dual
               UNION
               SELECT '17 hours' as term, 16 as ord, 
                      '17 hours' as internal FROM dual
               UNION
               SELECT '18 hours' as term, 17 as ord, 
                      '18 hours' as internal FROM dual
               UNION
               SELECT '19 hours' as term, 18 as ord, 
                      '19 hours' as internal FROM dual
               UNION
               SELECT '20 hours' as term, 19 as ord, 
                      '20 hours' as internal FROM dual
               UNION
               SELECT '21 hours' as term, 20 as ord, 
                      '21 hours' as internal FROM dual
               UNION
               SELECT '22 hours' as term, 21 as ord, 
                      '22 hours' as internal FROM dual
               UNION
               SELECT '23 hours' as term, 22 as ord, 
                      '23 hours' as internal FROM dual
               UNION
               SELECT '24 hours' as term, 23 as ord, 
                      '24 hours' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="InductionFold">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal 
            FROM (
               SELECT '-- None --' as term, 1 as ord,
                      '-- None --' as internal FROM dual
               UNION
               SELECT '>= 2 fold induction' as term, 2 as ord,
                      '>= 2' as internal FROM dual
               UNION
               SELECT '>= 4 fold induction' as term, 3 as ord,
                      '>= 4' as internal FROM dual
               UNION
               SELECT '>= 8 fold induction' as term, 4 as ord,
                      '>= 8' as internal FROM dual
               UNION
               SELECT '>= 16 fold induction' as term, 5 as ord,
                      '>= 16' as internal FROM dual
               UNION
               SELECT '>= 32 fold induction' as term, 6 as ord,
                      '>= 32' as internal FROM dual
               ) ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Percentile">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * FROM (
               SELECT '-- None --' as term, 
                      '-- None --' as internal FROM dual
               UNION
               SELECT '>= 10th percentile' as term, 
                      '>= 10th percentile' as internal FROM dual
               UNION
               SELECT '>= 20th percentile' as term, 
                      '>= 20th percentile' as internal FROM dual
               UNION
               SELECT '>= 30th percentile' as term, 
                      '>= 30th percentile' as internal FROM dual
               UNION
               SELECT '>= 40th percentile' as term, 
                      '>= 40th percentile' as internal FROM dual
               UNION
               SELECT '>= 50th percentile' as term, 
                      '>= 50th percentile' as internal FROM dual
               UNION
               SELECT '>= 50th percentile' as term, 
                      '>= 50th percentile' as internal FROM dual
               UNION
               SELECT '>= 60th percentile' as term, 
                      '>= 60th percentile' as internal FROM dual
               UNION
               SELECT '>= 70th percentile' as term, 
                      '>= 70th percentile' as internal FROM dual
               UNION
               SELECT '>= 80th percentile' as term, 
                      '>= 80th percentile' as internal FROM dual
               UNION
               SELECT '>= 90th percentile' as term, 
                      '>= 90th percentile' as internal FROM dual
               )
            </sql>
        </sqlQuery>






    <sqlQuery name="Localization">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'Apicoplast' AS term, 
                      'Apicoplast' AS internal, 1 AS ord FROM dual
               UNION
               SELECT 'RBC membrane (Pexel motif)' AS term, 
                      'RBC membrane (Pexel motif)' AS internal, 2 AS ord FROM dual
               UNION
               SELECT 'RBC membrane (HT motif)' AS term, 
                      'RBC membrane (HT motif)' AS internal, 3 AS ord
               FROM dual)
            ORDER BY ord
            </sql>
        </sqlQuery>


    <sqlQuery name="SnpStat">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Non-Coding' as term, 
	           'Non_Coding' as internal from dual
	    union
	    select 'Coding' as term, 
	           'Coding' as internal from dual
	    union
	    select 'Non-Synonymous' as term, 
	          'Non_Synonymous' as internal from dual
            union
	    select 'Synonymous' as term, 
	           'Synonymous' as internal from dual
            union
	    select 'Nonsense' as term, 
	           'Nonsense' as internal from dual
            union
	    select 'All SNPs' as term,
	           'All SNPs' as internal from dual
            </sql>
        </sqlQuery>

        <sqlQuery name="SnpSort">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Non-synonymous / Synonymous ratio' as term, 
	           'Non-synonymous / Synonymous ratio' as internal from dual
	    union
	    select 'Non-Coding SNPs' as term, 
	           'Non-Coding SNPs' as internal from dual
	    union
	    select 'Non-Synonymous SNPs' as term, 
	          'Non-Synonymous SNPs' as internal from dual
            union
	    select 'Synonymous SNPs' as term, 
	           'Synonymous SNPs' as internal from dual
            union
	    select 'Nonsense SNPs' as term, 
	           'Nonsense SNPs' as internal from dual
            union
	    select 'All SNPs' as term,
	           'All SNPs' as internal from dual
            union
	    select 'SNP density in CDS' as term,
	           'SNP density in CDS' as internal from dual
            ORDER by term
            </sql>
        </sqlQuery>

        <sqlQuery name="SortOrder">
            <column name="internal"/>
            <column name="term"/>
            <sql>
	    select 'Descending' as term, 
	           'Descending' as internal from dual
	    union
	    select 'Ascending' as term, 
	           'Ascending' as internal from dual
            ORDER by term DESC
            </sql>
        </sqlQuery>


 <sqlQuery name="SnpStrainA">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord 
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a not in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b not in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select '-----------' as internal, '-----------' as term, 2 as ord from dual@PLASMO_DBLINK@
            union
            select 'ME49 (type II)' as internal, 'ME49 (type II)' as term, 2 as ord from dual
	    union
	    select 'VEG (type III)' as internal, 'VEG (type III)' as term, 3 as ord from dual
            union
	    select 'GT1 (type I)' as internal, 'GT1 (type I)' as term, 1 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

        <sqlQuery name="SnpStrainB">
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@
            where strain_a in ('Preich', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord 
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b in ('Preich', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a not in ('Preich','3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b not in ('Preich','3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select '-----------' as internal, '-----------' as term, 2 as ord from dual@PLASMO_DBLINK@
            union
            select 'RH (type I; chr IA and IB only)' as internal,'RH (type I; chr IA and IB only)' as term, 5 as ord from dual
	    union
	    select 'ME49 (type II)' as internal,'ME49 (type II)' as term, 5 as ord from dual
	    union
	    select 'VEG (type III)' as internal,'VEG (type III)' as term, 5 as ord from dual
            order by ord,internal
          </sql>
        </sqlQuery>


      <sqlQuery name="Mr4Reagents">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal FROM
                  (SELECT reagent_type AS term, reagent_type AS internal,
                          rownum AS ord
                   FROM
                     (SELECT DISTINCT lower(dr.secondary_identifier)
                                AS reagent_type
                      FROM sres.DbRef@PLASMO_DBLINK@ dr,
                           sres.ExternalDatabaseRelease@PLASMO_DBLINK@ edr,
                           sres.ExternalDatabase@PLASMO_DBLINK@ ed
                      WHERE dr.external_database_release_id
                            = edr.external_database_release_id
                        AND edr.external_database_id = ed.external_database_id
                        AND ed.name = 'MR4DBxRefs'
                      ORDER BY lower(dr.secondary_identifier))
                      UNION SELECT 'any' AS term, 'any' AS internal, 0 AS ord
                            FROM dual@PLASMO_DBLINK@)
                ORDER BY ord
            </sql>
        </sqlQuery>


       <sqlQuery name="BaitOrPrey">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            SELECT * FROM (
               SELECT 'bait' as term, 1 as idx,
                      'bait'  as internal FROM dual
               UNION
               SELECT 'prey' as term, 2 as idx,
                      'prey'  as internal FROM dual)
            </sql>
        </sqlQuery>



        <sqlQuery name="MetabolicPathways">
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT DISTINCT o.internal AS internal, 
                               o.term AS term
                 FROM ((

           SELECT DISTINCT 
                  TRIM(REPLACE(REPLACE(decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier),'"',''), CHR(191),'')) AS internal,
                  TRIM(REPLACE(REPLACE(decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier),'"',''), CHR(191),''))  || ' (Pf)'AS term
             FROM sres.DbRef@PLASMO_DBLINK@ dr, 
                  sres.ExternalDatabaseRelease@PLASMO_DBLINK@ edr, 
                  sres.ExternalDatabase@PLASMO_DBLINK@ ed
             WHERE dr.external_database_release_id = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name = 'Links to Pathway Maps'
               AND dr.primary_identifier != 'qualityControl')
      UNION         
      (SELECT DISTINCT decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier) AS internal, decode(dr.lowercase_secondary_identifier, null, dr.primary_identifier,
                           dr.lowercase_secondary_identifier) || ' (Tg)' AS term
             FROM sres.DbRef@TOXO_DBLINK@ dr, sres.ExternalDatabaseRelease@TOXO_DBLINK@ edr, sres.ExternalDatabase@TOXO_DBLINK@ ed
             WHERE dr.external_database_release_id = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name = 'Links to Pathway Maps'

                      )) o            
                 ORDER BY term
            </sql>
        </sqlQuery>


        <sqlQuery name="Clades">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT tn.name AS term, tn.name AS internal
                FROM sres.taxonname@PLASMO_DBLINK@ tn
                WHERE tn.name IN 
                      ('Archaea', 'Eukaryota', 'Apicomplexa', 'Chordata',
                       'Bacteria')
            </sql>
        </sqlQuery>



        <sqlQuery name="WhichEnd">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term, 
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term, 
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord)
            </sql>
        </sqlQuery>

        <sqlQuery name="WhichEnd2">
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT term, internal
                FROM (SELECT 'beginning' AS term, 
                             'beginning' AS internal,
                             0 AS ord FROM dual
                      UNION
                      SELECT 'end' AS term, 
                             'end' AS internal,
                             1 AS ord FROM dual
                      ORDER BY ord DESC)
            </sql>
        </sqlQuery>

        <sqlQuery name="PfNonnuclearSequence">
            <column name="internal"/>
            <column name="term"/>
            <sql>
              SELECT internal, term
              FROM (SELECT 'mitochondrial genome' AS internal,
                           'mitochondrial genome (P.f.)' AS term, 15 AS ord
                    FROM dual
                     UNION
                    SELECT 'plastid IR-A' AS internal, 'plastid IR-A (P.f.)' AS term, 16 AS ord
                    FROM dual
                     UNION
                    SELECT 'plastid IR-B' AS internal, 'plastid IR-B (P.f.)' AS term, 17 AS ord
                    FROM dual
                     UNION
                    SELECT 'Apicoplast genome' AS internal, 'Apicoplast genome (T.g.)' AS term, 18 AS ord
                    FROM dual)
              ORDER BY ord
            </sql>
        </sqlQuery>

        <sqlQuery name="Chromosome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal FROM (
               SELECT 'chromosome 1' as term, 1 as ord,
                      'chromosome 1' as internal FROM dual
               UNION
               SELECT 'chromosome 2' as term, 2 as ord,
                      'chromosome 2' as internal FROM dual
               UNION
               SELECT 'chromosome 3' as term, 3 as ord,
                      'chromosome 3' as internal FROM dual
               UNION
               SELECT 'chromosome 4' as term, 4 as ord,
                      'chromosome 4' as internal FROM dual
               UNION
               SELECT 'chromosome 5' as term, 5 as ord,
                      'chromosome 5' as internal FROM dual
               UNION
               SELECT 'chromosome 6' as term, 6 as ord,
                      'chromosome 6' as internal FROM dual
               UNION
               SELECT 'chromosome 7' as term, 7 as ord,
                      'chromosome 7' as internal FROM dual
               UNION
               SELECT 'chromosome 8' as term, 8 as ord,
                      'chromosome 8' as internal FROM dual
               UNION
               SELECT 'chromosome 9' as term, 9 as ord,
                      'chromosome 9' as internal FROM dual
               UNION
               SELECT 'chromosome 10' as term, 10 as ord,
                      'chromosome 10' as internal FROM dual
               UNION
               SELECT 'chromosome 11' as term, 11 as ord,
                      'chromosome 11' as internal FROM dual
               UNION
               SELECT 'chromosome 12' as term, 12 as ord,
                      'chromosome 12' as internal FROM dual
               UNION
               SELECT 'chromosome 13' as term, 13 as ord,
                      'chromosome 13' as internal FROM dual
               UNION
               SELECT 'chromosome 14' as term, 14 as ord,
                      'chromosome 14' as internal FROM dual
              )
            ORDER BY ord
            </sql>
        </sqlQuery>



        <!-- a query that returns a list of projects -->
        <sqlQuery name="Project">
            <column name="term"/>
            <column name="internal"/>
            <!-- projectinfo table is fully replicated from all instances -->
            <sql>
                select 'cryptodb' as term, 
                	'cryptodb' as internal
                from dual
                union
                select 'plasmodb' as term, 
                	'plasmodb' as internal
                from dual
                union
                  select 'toxodb' as term, 
                  'toxodb' as internal
                  from dual
            </sql>
        </sqlQuery>
        


<!-- /////////////////////////////////////   ORGANISM VOCABULARIES ///////////////////////////////////// -->

<sqlQuery name="ECOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>

 <sqlQuery name="CryptoOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 2 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>

 <sqlQuery name="CryptoToxoOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>

<sqlQuery name="ToxoOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>(SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )
               </sql>
          </sqlQuery>

<sqlQuery name="PfOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>(SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )
               </sql>
          </sqlQuery>

<sqlQuery name="ToxoPfOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>(SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )
                 UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                 FROM dual
                 )
               </sql>
          </sqlQuery>

<sqlQuery name="PbOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
               (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )
               </sql>
          </sqlQuery>

 <sqlQuery name="PlasmoOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
              (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual
                 )
               </sql>
          </sqlQuery>

<sqlQuery name="PlasmoToxoOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>
              (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual
                 )
               </sql>
          </sqlQuery>


<sqlQuery name="LocalOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <sql>
		
		SELECT distinct t.taxon_id AS internal, tn.name AS term, 2 AS idx
                        FROM sres.taxon t, sres.taxonName tn
                        WHERE t.taxon_id = tn.taxon_id
                        AND tn.name_class  = 'scientific name'
                        AND t.NCBI_TAX_ID IN (237895,353152,5823,31271,36329,5851,126793,352914,5811)
                  ORDER BY tn.name


               </sql>
          </sqlQuery>

<sqlQuery name="NonChOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>

                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual 
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>


<sqlQuery name="Organisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>

                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual 
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>

<!--<sqlQuery name="ExonOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>

                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual 
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>
-->
<sqlQuery name="SeqOrganisms">
               <column name="internal"/>
              <column name="term"/>
              <column name="idx"/>
              <sql>

                 (SELECT 'C. hominis' AS internal, 'Cryptosporidium hominis' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'C. parvum' AS internal, 'Cryptosporidium parvum' AS term, 1 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium falciparum' AS internal, 'Plasmodium falciparum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium vivax' AS internal, 'Plasmodium vivax' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium yoelii' AS internal, 'Plasmodium yoelii' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium berghei' AS internal, 'Plasmodium berghei' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium chabaudi' AS internal, 'Plasmodium chabaudi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium reichenowi' AS internal, 'Plasmodium reichenowi' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium gallinaceum' AS internal, 'Plasmodium gallinaceum' AS term, 2 AS idx
                  FROM dual
                 )UNION ALL
                 (SELECT 'Plasmodium knowlesi' AS internal, 'Plasmodium knowlesi' AS term, 2 AS idx
                  FROM dual 
                 )UNION ALL
                 (SELECT 'Toxoplasma gondii' AS internal, 'Toxoplasma gondii' AS term, 3 AS idx
                  FROM dual
                 )

               </sql>
          </sqlQuery>

 <!-- END ORGANISM PARAMETERS -->


  <!-- VocabQueries.IncludePseudogenes -->
<sqlQuery name="IncludePseudogenes">
            <column name="internal"/>
            <column name="term"/>
            <column name="idx"/>
            <sql>
            select 'Yes' as term, 2 as idx, 'Yes' as internal from dual
            UNION
            select 'No' as term, 1 as idx, 'No' as internal from dual
            UNION
            select 'Pseudogenes Only' as term, 3 as idx, 'Pseudogenes Only' as internal from dual
            ORDER BY idx
            </sql>
        </sqlQuery>


  <!-- VocabQueries.RNAType -->
        <sqlQuery name="RNAType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
             <!-- SELECT distinct
                     (CASE so.term_name
                        WHEN 'transcript' THEN 'misc RNA'
                        WHEN 'mRNA' THEN 'protein coding'
                        ELSE so.term_name
                      END ) as term,
                    ( CASE so.term_name
                        WHEN 'mRNA' THEN ''''||'mRNA'||''''||','||''''||'protein_coding_gene'||''''||','||''''||'protein_coding'||''''
                        WHEN 'transcript' THEN ''''||'transcript'||''''||','||''''||'non_protein_coding_gene'||''''
                        WHEN 'rRNA' THEN ''''||'rRNA'||''''||','||''''||'rRNA_encoding'||''''||','||''''||'rRNA_gene'||''''
                        WHEN 'snoRNA' THEN ''''||'snoRNA'||''''||','||''''||'snRNA_gene'||''''
                        WHEN 'tRNA' THEN ''''||'tRNA'||''''||','||''''||'tRNA_encoding'||''''||','||''''||'tRNA_gene'||''''
                        WHEN 'pseudogene' THEN ''''||'pseudogene'||''''
                      END
                    )as internal
              from  sres.sequenceontology so
              WHERE so.term_name IN ('mRNA','rRNA','snoRNA','tRNA','transcript','pseudogene')
            -->
            <!--
            SELECT distinct
                     (CASE so.term_name
                        WHEN 'transcript' THEN 'misc RNA'
                        WHEN 'mRNA' THEN 'protein coding'
                        ELSE so.term_name
                      END ) as term,
                    ( CASE so.term_name 
                        WHEN 'transcript' THEN 'misc RNA'
                        WHEN 'mRNA' THEN 'protein coding'
                        ELSE so.term_name
                      END )as internal
              from  sres.sequenceontology so
              WHERE so.term_name IN ('mRNA','rRNA','snoRNA','tRNA','transcript','pseudogene')
-->
 SELECT distinct
                     (CASE so.term_name
                        WHEN 'transcript' THEN 'misc RNA'
                        WHEN 'mRNA' THEN 'protein coding'
                        ELSE so.term_name
                      END ) as term,
                    ( CASE so.term_name 
                        WHEN 'transcript' THEN 'misc RNA'
                        WHEN 'mRNA' THEN 'protein coding'
                        ELSE so.term_name
                      END )as internal
              from  sres.sequenceontology so
              WHERE so.term_name IN ('mRNA','rRNA','snoRNA','tRNA','transcript')
             </sql>
        </sqlQuery>


 <!-- VocabQueries.PhyleticIndentMap -->
        <sqlQuery name="ApiDB_PhyleticIndentMap">
            <column name="internal"/>
            <column name="term"/>
            <sql>


<![CDATA[
    SELECT internal, term FROM (
 SELECT 'Archaea' AS term, '0' AS internal, 1 AS ord FROM dual
 UNION
   SELECT 'hal' AS term, '1' AS internal, 2 AS ord FROM dual
   UNION
   SELECT 'mja' AS term, '1' AS internal, 3 AS ord FROM dual
   UNION
   SELECT 'sso' AS term, '1' AS internal, 4 AS ord FROM dual
   UNION
   SELECT 'neq' AS term, '1' AS internal, 5 AS ord FROM dual
   UNION
 SELECT 'Bacteria' AS term, '0' AS internal, 6 AS ord FROM dual
 UNION
   SELECT 'Proteobacteria' AS term, '1' AS internal, 7 AS ord FROM dual
   UNION
     SELECT 'wsu' AS term, '2' AS internal, 8 AS ord FROM dual
     UNION
     SELECT 'gsu' AS term, '2' AS internal, 9 AS ord FROM dual
     UNION
     SELECT 'atu' AS term, '2' AS internal, 10 AS ord FROM dual
     UNION
     SELECT 'rso' AS term, '2' AS internal, 11 AS ord FROM dual
     UNION
     SELECT 'eco' AS term, '2' AS internal, 12 AS ord FROM dual
     UNION
     SELECT 'bsu' AS term, '2' AS internal, 12.1 AS ord FROM dual
     UNION
     SELECT 'bur' AS term, '2' AS internal, 12.2 AS ord FROM dual
     UNION
     SELECT 'cbu' AS term, '2' AS internal, 12.3 AS ord FROM dual
     UNION
     SELECT 'cje' AS term, '2' AS internal, 12.4 AS ord FROM dual
     UNION
     SELECT 'ftu' AS term, '2' AS internal, 12.5 AS ord FROM dual
     UNION
     SELECT 'rty' AS term, '2' AS internal, 12.6 AS ord FROM dual
     UNION
     SELECT 'sfl' AS term, '2' AS internal, 12.7 AS ord FROM dual
     UNION
     SELECT 'sty' AS term, '2' AS internal, 12.8 AS ord FROM dual
     UNION
     SELECT 'vch' AS term, '2' AS internal, 12.9 AS ord FROM dual
     UNION
     SELECT 'ype' AS term, '2' AS internal, 12.91 AS ord FROM dual
     UNION
   SELECT 'Other Bacteria' AS term, '1' AS internal, 13 AS ord FROM dual
   UNION
     SELECT 'aae' AS term, '2' AS internal, 14 AS ord FROM dual
     UNION
     SELECT 'tma' AS term, '2' AS internal, 15 AS ord FROM dual
     UNION
     SELECT 'det' AS term, '2' AS internal, 16 AS ord FROM dual
     UNION
     SELECT 'dra' AS term, '2' AS internal, 17 AS ord FROM dual
     UNION
     SELECT 'tpa' AS term, '2' AS internal, 18 AS ord FROM dual
     UNION
     SELECT 'cte' AS term, '2' AS internal, 19 AS ord FROM dual
     UNION
     SELECT 'rba' AS term, '2' AS internal, 20 AS ord FROM dual
     UNION
     SELECT 'cpn' AS term, '2' AS internal, 21 AS ord FROM dual
     UNION
     SELECT 'syn' AS term, '2' AS internal, 22 AS ord FROM dual
     UNION
     SELECT 'mtu' AS term, '2' AS internal, 23 AS ord FROM dual
     UNION
     SELECT 'ban' AS term, '2' AS internal, 24 AS ord FROM dual
     UNION
     SELECT 'cpe' AS term, '2' AS internal, 24.1 AS ord FROM dual
     UNION
     SELECT 'lmo' AS term, '2' AS internal, 24.2 AS ord FROM dual
     UNION
     SELECT 'sau' AS term, '2' AS internal, 24.3 AS ord FROM dual
     UNION
     SELECT 'spn' AS term, '2' AS internal, 24.4 AS ord FROM dual
     UNION
 SELECT 'Eukaryota' AS term, '0' AS internal, 25 AS ord FROM dual
 UNION
   SELECT 'Plants/Algae' AS term, '1' AS internal, 26 AS ord FROM dual
   UNION
     SELECT 'cme' AS term, '2' AS internal, 27 AS ord FROM dual
     UNION
     SELECT 'tps' AS term, '2' AS internal, 28 AS ord FROM dual
     UNION
     SELECT 'ath' AS term, '2' AS internal, 29 AS ord FROM dual
     UNION
     SELECT 'osa' AS term, '2' AS internal, 30 AS ord FROM dual
     UNION
     SELECT 'ota' AS term, '2' AS internal, 30.1 AS ord FROM dual
     UNION
   SELECT 'Alveolates' AS term, '1' AS internal, 31 AS ord FROM dual
   UNION
     SELECT 'Apicomplexa' AS term, '2' AS internal, 32 AS ord FROM dual
     UNION
       SELECT 'Coccidia' AS term, '3' AS internal, 33 AS ord FROM dual
       UNION
         SELECT 'tgo' AS term, '4' AS internal, 34 AS ord FROM dual
         UNION
         SELECT 'cpa' AS term, '4' AS internal, 35 AS ord FROM dual
         UNION
         SELECT 'cho' AS term, '4' AS internal, 36 AS ord FROM dual
         UNION
       SELECT 'Haemosporida' AS term, '3' AS internal, 37 AS ord FROM dual
       UNION
         SELECT 'pfa' AS term, '4' AS internal, 38 AS ord FROM dual
         UNION
         SELECT 'pvi' AS term, '4' AS internal, 39 AS ord FROM dual
         UNION
         SELECT 'pyo' AS term, '4' AS internal, 40 AS ord FROM dual
         UNION
         SELECT 'pbe' AS term, '4' AS internal, 41 AS ord FROM dual
         UNION
         SELECT 'pch' AS term, '4' AS internal, 42 AS ord FROM dual
         UNION
         SELECT 'pkn' AS term, '4' AS internal, 43 AS ord FROM dual
         UNION
       SELECT 'Other Apicomplexa' AS term, '3' AS internal, 44 AS ord FROM dual
       UNION
         SELECT 'the' AS term, '4' AS internal, 45 AS ord FROM dual
         UNION
         SELECT 'tan' AS term, '4' AS internal, 45.1 AS ord FROM dual
         UNION
   SELECT 'Fungi' AS term, '1' AS internal, 46 AS ord FROM dual
   UNION
     SELECT 'sce' AS term, '2' AS internal, 47 AS ord FROM dual
     UNION
     SELECT 'spo' AS term, '2' AS internal, 48 AS ord FROM dual
     UNION
     SELECT 'yli' AS term, '2' AS internal, 49 AS ord FROM dual
     UNION
     SELECT 'kla' AS term, '2' AS internal, 50 AS ord FROM dual
     UNION
     SELECT 'dha' AS term, '2' AS internal, 51 AS ord FROM dual
     UNION
     SELECT 'cgl' AS term, '2' AS internal, 52 AS ord FROM dual
     UNION
     SELECT 'ecu' AS term, '2' AS internal, 53 AS ord FROM dual
     UNION
     SELECT 'cne' AS term, '2' AS internal, 54 AS ord FROM dual
     UNION
     SELECT 'ago' AS term, '2' AS internal, 55 AS ord FROM dual
     UNION
     SELECT 'ncr' AS term, '2' AS internal, 56 AS ord FROM dual
     UNION
     SELECT 'aor' AS term, '2' AS internal, 56.1 AS ord FROM dual
     UNION
     SELECT 'pha' AS term, '2' AS internal, 56.2 AS ord FROM dual
     UNION
     SELECT 'sma' AS term, '2' AS internal, 56.3 AS ord FROM dual
     UNION
   SELECT 'Metazoa' AS term, '1' AS internal, 57 AS ord FROM dual
   UNION
     SELECT 'Arthropoda' AS term, '2' AS internal, 58 AS ord FROM dual
     UNION
       SELECT 'dme' AS term, '3' AS internal, 59 AS ord FROM dual
       UNION
       SELECT 'aga' AS term, '3' AS internal, 60 AS ord FROM dual
       UNION
       SELECT 'aed' AS term, '3' AS internal, 60.1 AS ord FROM dual
       UNION
       SELECT 'ame' AS term, '3' AS internal, 60.2 AS ord FROM dual
       UNION
     SELECT 'Deuterostomia' AS term, '2' AS internal, 61 AS ord FROM dual
     UNION
       SELECT 'Bony Fish' AS term, '3' AS internal, 62 AS ord FROM dual
       UNION
         SELECT 'fru' AS term, '4' AS internal, 63 AS ord FROM dual
         UNION
         SELECT 'tni' AS term, '4' AS internal, 64 AS ord FROM dual
         UNION
         SELECT 'dre' AS term, '4' AS internal, 65 AS ord FROM dual
         UNION
       SELECT 'Tetrapoda' AS term, '3' AS internal, 66 AS ord FROM dual
       UNION
         SELECT 'Mammals' AS term, '4' AS internal, 67 AS ord FROM dual
         UNION
           SELECT 'Primates' AS term, '5' AS internal, 68 AS ord FROM dual
           UNION
             SELECT 'hsa' AS term, '6' AS internal, 69 AS ord FROM dual
             UNION
           SELECT 'Other Mammals' AS term, '5' AS internal, 70 AS ord FROM dual
           UNION
             SELECT 'mmu' AS term, '6' AS internal, 71 AS ord FROM dual
             UNION
             SELECT 'rno' AS term, '6' AS internal, 72 AS ord FROM dual
             UNION
         SELECT 'Other Tetrapoda' AS term, '4' AS internal, 73 AS ord FROM dual
         UNION
           SELECT 'gga' AS term, '5' AS internal, 74 AS ord FROM dual
           UNION
       SELECT 'Other Deuterostomia' AS term, '3' AS internal, 75 AS ord FROM dual
       UNION
         SELECT 'cin' AS term, '4' AS internal, 76 AS ord FROM dual
         UNION
     SELECT 'Other Metazoa' AS term, '2' AS internal, 77 AS ord FROM dual
     UNION
       SELECT 'cel' AS term, '3' AS internal, 78 AS ord FROM dual
       UNION
       SELECT 'cbr' AS term, '3' AS internal, 79 AS ord FROM dual
       UNION
       SELECT 'bma' AS term, '3' AS internal, 79.1 AS ord FROM dual
       UNION
   SELECT 'Other Eukaryota' AS term, '1' AS internal, 80 AS ord FROM dual
   UNION
     SELECT 'ehi' AS term, '2' AS internal, 81 AS ord FROM dual
     UNION
     SELECT 'ddi' AS term, '2' AS internal, 82 AS ord FROM dual
     UNION
     SELECT 'cre' AS term, '2' AS internal, 82.1 AS ord FROM dual
     UNION
     SELECT 'gla' AS term, '2' AS internal, 82.2 AS ord FROM dual
     UNION
     SELECT 'lma' AS term, '2' AS internal, 82.3 AS ord FROM dual
     UNION
     SELECT 'tbr' AS term, '2' AS internal, 82.4 AS ord FROM dual
     UNION
     SELECT 'tcr' AS term, '2' AS internal, 82.5 AS ord FROM dual
     UNION
     SELECT 'tth' AS term, '2' AS internal, 82.6 AS ord FROM dual
)
            ORDER BY ord
]]>

</sql>
        </sqlQuery>

    <sqlQuery name="PhyleticIndentMap">
            <column name="internal"/>
            <column name="term"/>
            <sql>
<![CDATA[

SELECT internal, term FROM (
 SELECT 'Archaea' AS term, 'Archaea' AS internal, 1 AS ord FROM dual
 UNION
   SELECT 'hal' AS term, 'hal' AS internal, 2 AS ord FROM dual
   UNION
   SELECT 'mja' AS term, 'mja' AS internal, 3 AS ord FROM dual
   UNION
   SELECT 'sso' AS term, 'sso' AS internal, 4 AS ord FROM dual
   UNION
   SELECT 'neq' AS term, 'neq' AS internal, 5 AS ord FROM dual
   UNION
 SELECT 'Bacteria' AS term, 'Bacteria' AS internal, 6 AS ord FROM dual
 UNION
   SELECT 'Proteobacteria' AS term, 'Proteobacteria' AS internal, 7 AS ord FROM dual
   UNION
     SELECT 'wsu' AS term, 'wsu' AS internal, 8 AS ord FROM dual
     UNION
     SELECT 'gsu' AS term, 'gsu' AS internal, 9 AS ord FROM dual
     UNION
     SELECT 'atu' AS term, 'atu' AS internal, 10 AS ord FROM dual
     UNION
     SELECT 'rso' AS term, 'rso' AS internal, 11 AS ord FROM dual
     UNION
     SELECT 'eco' AS term, 'eco' AS internal, 12 AS ord FROM dual
     UNION
     SELECT 'bsu' AS term, 'bsu' AS internal, 12.1 AS ord FROM dual
     UNION
     SELECT 'bur' AS term, 'bur' AS internal, 12.2 AS ord FROM dual
     UNION
     SELECT 'cbu' AS term, 'cbu' AS internal, 12.3 AS ord FROM dual
     UNION
     SELECT 'cje' AS term, 'cje' AS internal, 12.4 AS ord FROM dual
     UNION
     SELECT 'ftu' AS term, 'ftu' AS internal, 12.5 AS ord FROM dual
     UNION
     SELECT 'rty' AS term, 'rty' AS internal, 12.6 AS ord FROM dual
     UNION
     SELECT 'sfl' AS term, 'sfl' AS internal, 12.7 AS ord FROM dual
     UNION
     SELECT 'sty' AS term, 'sty' AS internal, 12.8 AS ord FROM dual
     UNION
     SELECT 'vch' AS term, 'vch' AS internal, 12.9 AS ord FROM dual
     UNION
     SELECT 'ype' AS term, 'ype' AS internal, 12.91 AS ord FROM dual
     UNION
   SELECT 'Other Bacteria' AS term, 'Other Bacteria' AS internal, 13 AS ord FROM dual
   UNION
     SELECT 'aae' AS term, 'aae' AS internal, 14 AS ord FROM dual
     UNION
     SELECT 'tma' AS term, 'tma' AS internal, 15 AS ord FROM dual
     UNION
     SELECT 'det' AS term, 'det' AS internal, 16 AS ord FROM dual
     UNION
     SELECT 'dra' AS term, 'dra' AS internal, 17 AS ord FROM dual
     UNION
     SELECT 'tpa' AS term, 'tpa' AS internal, 18 AS ord FROM dual
     UNION
     SELECT 'cte' AS term, 'cte' AS internal, 19 AS ord FROM dual
     UNION
     SELECT 'rba' AS term, 'rba' AS internal, 20 AS ord FROM dual
     UNION
     SELECT 'cpn' AS term, 'cpn' AS internal, 21 AS ord FROM dual
     UNION
     SELECT 'syn' AS term, 'syn' AS internal, 22 AS ord FROM dual
     UNION
     SELECT 'mtu' AS term, 'mtu' AS internal, 23 AS ord FROM dual
     UNION
     SELECT 'ban' AS term, 'ban' AS internal, 24 AS ord FROM dual
     UNION
     SELECT 'cpe' AS term, 'cpe' AS internal, 24.1 AS ord FROM dual
     UNION
     SELECT 'lmo' AS term, 'lmo' AS internal, 24.2 AS ord FROM dual
     UNION
     SELECT 'sau' AS term, 'sau' AS internal, 24.3 AS ord FROM dual
     UNION
     SELECT 'spn' AS term, 'spn' AS internal, 24.4 AS ord FROM dual
     UNION
 SELECT 'Eukaryota' AS term, 'Eukaryota' AS internal, 25 AS ord FROM dual
 UNION
   SELECT 'Plants/Algae' AS term, 'Plants/Algae' AS internal, 26 AS ord FROM dual
   UNION
     SELECT 'cme' AS term, 'cme' AS internal, 27 AS ord FROM dual
     UNION
     SELECT 'tps' AS term, 'tps' AS internal, 28 AS ord FROM dual
     UNION
     SELECT 'ath' AS term, 'ath' AS internal, 29 AS ord FROM dual
     UNION
     SELECT 'osa' AS term, 'osa' AS internal, 30 AS ord FROM dual
     UNION
     SELECT 'ota' AS term, 'ota' AS internal, 30.1 AS ord FROM dual
     UNION
   SELECT 'Alveolates' AS term, 'Alveolates' AS internal, 31 AS ord FROM dual
   UNION
     SELECT 'Apicomplexa' AS term, 'Apicomplexa' AS internal, 32 AS ord FROM dual
     UNION
       SELECT 'Coccidia' AS term, 'Coccida' AS internal, 33 AS ord FROM dual
       UNION
         SELECT 'tgo' AS term, 'tgo' AS internal, 34 AS ord FROM dual
         UNION
         SELECT 'cpa' AS term, 'cpa' AS internal, 35 AS ord FROM dual
         UNION
         SELECT 'cho' AS term, 'cho' AS internal, 36 AS ord FROM dual
         UNION
       SELECT 'Haemosporida' AS term, 'Haemosporida' AS internal, 37 AS ord FROM dual
       UNION
         SELECT 'pfa' AS term, 'pfa' AS internal, 38 AS ord FROM dual
         UNION
         SELECT 'pvi' AS term, 'pvi' AS internal, 39 AS ord FROM dual
         UNION
         SELECT 'pyo' AS term, 'pyo' AS internal, 40 AS ord FROM dual
         UNION
         SELECT 'pbe' AS term, 'pbe' AS internal, 41 AS ord FROM dual
         UNION
         SELECT 'pch' AS term, 'pch' AS internal, 42 AS ord FROM dual
         UNION
         SELECT 'pkn' AS term, 'pkn' AS internal, 43 AS ord FROM dual
         UNION
       SELECT 'Other Apicomplexa' AS term, 'Other Apicomplexa' AS internal, 44 AS ord FROM dual
       UNION
         SELECT 'the' AS term, 'the' AS internal, 45 AS ord FROM dual
         UNION
         SELECT 'tan' AS term, 'tan' AS internal, 45.1 AS ord FROM dual
         UNION
   SELECT 'Fungi' AS term, 'Fungi' AS internal, 46 AS ord FROM dual
   UNION
     SELECT 'sce' AS term, 'sce' AS internal, 47 AS ord FROM dual
     UNION
     SELECT 'spo' AS term, 'spo' AS internal, 48 AS ord FROM dual
     UNION
     SELECT 'yli' AS term, 'yli' AS internal, 49 AS ord FROM dual
     UNION
     SELECT 'kla' AS term, 'kla' AS internal, 50 AS ord FROM dual
     UNION
     SELECT 'dha' AS term, 'dha' AS internal, 51 AS ord FROM dual
     UNION
     SELECT 'cgl' AS term, 'cgl' AS internal, 52 AS ord FROM dual
     UNION
     SELECT 'ecu' AS term, 'ecu' AS internal, 53 AS ord FROM dual
     UNION
     SELECT 'cne' AS term, 'cne' AS internal, 54 AS ord FROM dual
     UNION
     SELECT 'ago' AS term, 'ago' AS internal, 55 AS ord FROM dual
     UNION
     SELECT 'ncr' AS term, 'ncr' AS internal, 56 AS ord FROM dual
     UNION
     SELECT 'aor' AS term, 'aor' AS internal, 56.1 AS ord FROM dual
     UNION
     SELECT 'pha' AS term, 'pha' AS internal, 56.2 AS ord FROM dual
     UNION
     SELECT 'sma' AS term, 'sma' AS internal, 56.3 AS ord FROM dual
     UNION
   SELECT 'Metazoa' AS term, 'Metazoa' AS internal, 57 AS ord FROM dual
   UNION
     SELECT 'Arthropoda' AS term, 'Arthropoda' AS internal, 58 AS ord FROM dual
     UNION
       SELECT 'dme' AS term, 'dme' AS internal, 59 AS ord FROM dual
       UNION
       SELECT 'aga' AS term, 'aga' AS internal, 60 AS ord FROM dual
       UNION
       SELECT 'aed' AS term, 'aed' AS internal, 60.1 AS ord FROM dual
       UNION
       SELECT 'ame' AS term, 'ame' AS internal, 60.2 AS ord FROM dual
       UNION
     SELECT 'Deuterostomia' AS term, 'Dueterostomia' AS internal, 61 AS ord FROM dual
     UNION
       SELECT 'Bony Fish' AS term, 'Bony Fish' AS internal, 62 AS ord FROM dual
       UNION
         SELECT 'fru' AS term, 'fru' AS internal, 63 AS ord FROM dual
         UNION
         SELECT 'tni' AS term, 'tni' AS internal, 64 AS ord FROM dual
         UNION
         SELECT 'dre' AS term, 'dre' AS internal, 65 AS ord FROM dual
         UNION
       SELECT 'Tetrapoda' AS term, 'Tetrapoda' AS internal, 66 AS ord FROM dual
       UNION
         SELECT 'Mammals' AS term, 'Mammals' AS internal, 67 AS ord FROM dual
         UNION
           SELECT 'Primates' AS term, 'Primates' AS internal, 68 AS ord FROM dual
           UNION
             SELECT 'hsa' AS term, 'hsa' AS internal, 69 AS ord FROM dual
             UNION
           SELECT 'Other Mammals' AS term, 'Other Mammals' AS internal, 70 AS ord FROM dual
           UNION
             SELECT 'mmu' AS term, 'mmu' AS internal, 71 AS ord FROM dual
             UNION
             SELECT 'rno' AS term, 'rno' AS internal, 72 AS ord FROM dual
             UNION
         SELECT 'Other Tetrapoda' AS term, 'Other Tetrapoda' AS internal, 73 AS ord FROM dual
         UNION
           SELECT 'gga' AS term, 'gga' AS internal, 74 AS ord FROM dual
           UNION
       SELECT 'Other Deuterostomia' AS term, 'Other Deuterostomia' AS internal, 75 AS ord FROM dual
       UNION
         SELECT 'cin' AS term, 'cin' AS internal, 76 AS ord FROM dual
         UNION
     SELECT 'Other Metazoa' AS term, 'Other Metazoa' AS internal, 77 AS ord FROM dual
     UNION
       SELECT 'cel' AS term, 'cel' AS internal, 78 AS ord FROM dual
       UNION
       SELECT 'cbr' AS term, 'cbr' AS internal, 79 AS ord FROM dual
       UNION
       SELECT 'bma' AS term, 'bma' AS internal, 79.1 AS ord FROM dual
       UNION
   SELECT 'Other Eukaryota' AS term, 'Other Eukaryota' AS internal, 80 AS ord FROM dual
   UNION
     SELECT 'ehi' AS term, 'ehi' AS internal, 81 AS ord FROM dual
     UNION
     SELECT 'ddi' AS term, 'ddi' AS internal, 82 AS ord FROM dual
     UNION
     SELECT 'cre' AS term, 'cre' AS internal, 82.1 AS ord FROM dual
     UNION
     SELECT 'gla' AS term, 'gla' AS internal, 82.2 AS ord FROM dual
     UNION
     SELECT 'lma' AS term, 'lma' AS internal, 82.3 AS ord FROM dual
     UNION
     SELECT 'tbr' AS term, 'tbr' AS internal, 82.4 AS ord FROM dual
     UNION
     SELECT 'tcr' AS term, 'tcr' AS internal, 82.5 AS ord FROM dual
     UNION
     SELECT 'tth' AS term, 'tth' AS internal, 82.6 AS ord FROM dual
)
            ORDER BY ord

]]>
<!-- <![CDATA[
    SELECT internal, term from (
 SELECT 'Archaea' AS term, 'Archaea' AS internal, 1 AS ord from dual
 UNION
   SELECT 'hal' AS term, 'hal' AS internal, 2 AS ord from dual
   UNION
   SELECT 'mja' AS term, 'mja' AS internal, 3 AS ord from dual
   UNION
   SELECT 'sso' AS term, 'sso' AS internal, 4 AS ord from dual
   UNION
   SELECT 'neq' AS term, 'neq' AS internal, 5 AS ord from dual
   UNION
 SELECT 'Bacteria' AS term, 'Bacteria' AS internal, 6 AS ord from dual
 UNION
   SELECT 'Proteobacteria' AS term, 'Proteobacteria' AS internal, 7 AS ord from dual
   UNION
     SELECT 'wsu' AS term, 'wsu' AS internal, 8 AS ord from dual
     UNION
     SELECT 'gsu' AS term, 'gsu' AS internal, 9 AS ord from dual
     UNION
     SELECT 'atu' AS term, 'atu' AS internal, 10 AS ord from dual
     UNION
     SELECT 'rso' AS term, 'rso' AS internal, 11 AS ord from dual
     UNION
     SELECT 'eco' AS term, 'eco' AS internal, 12 AS ord from dual
     UNION
   SELECT 'Other Bacteria' AS term, 'Other Bacteria' AS internal, 13 AS ord from dual
   UNION
     SELECT 'aae' AS term, 'aae' AS internal, 14 AS ord from dual
     UNION
     SELECT 'tma' AS term, 'tma' AS internal, 15 AS ord from dual
     UNION
     SELECT 'det' AS term, 'det' AS internal, 16 AS ord from dual
     UNION
     SELECT 'dra' AS term, 'dra' AS internal, 17 AS ord from dual
     UNION
     SELECT 'tpa' AS term, 'tpa' AS internal, 18 AS ord from dual
     UNION
     SELECT 'cte' AS term, 'cte' AS internal, 19 AS ord from dual
     UNION
     SELECT 'rba' AS term, 'rba' AS internal, 20 AS ord from dual
     UNION
     SELECT 'cpn' AS term, 'cpn' AS internal, 21 AS ord from dual
     UNION
     SELECT 'syn' AS term, 'syn' AS internal, 22 AS ord from dual
     UNION
     SELECT 'mtu' AS term, 'mtu' AS internal, 23 AS ord from dual
     UNION
     SELECT 'ban' AS term, 'ban' AS internal, 24 AS ord from dual
     UNION
 SELECT 'Eukaryota' AS term, 'Eukaryota' AS internal, 25 AS ord from dual
 UNION
   SELECT 'Plants/Algae' AS term, 'Plants/Algae' AS internal, 26 AS ord from dual
   UNION
     SELECT 'cme' AS term, 'cme' AS internal, 27 AS ord from dual
     UNION
     SELECT 'tps' AS term, 'tps' AS internal, 28 AS ord from dual
     UNION
     SELECT 'ath' AS term, 'ath' AS internal, 29 AS ord from dual
     UNION
     SELECT 'osa' AS term, 'osa' AS internal, 30 AS ord from dual
     UNION
   SELECT 'Alveolates' AS term, 'Alveolates' AS internal, 31 AS ord from dual
   UNION
     SELECT 'Apicomplexa' AS term, 'Apicomplexa' AS internal, 32 AS ord from dual
     UNION
       SELECT 'Coccidia' AS term, 'Coccidia' AS internal, 33 AS ord from dual
       UNION
         SELECT 'tgo' AS term, 'tgo' AS internal, 34 AS ord from dual
         UNION
         SELECT 'cpa' AS term, 'cpa' AS internal, 35 AS ord from dual
         UNION
         SELECT 'cho' AS term, 'cho' AS internal, 36 AS ord from dual
 UNION
       SELECT 'Haemosporida' AS term, 'Haemosporida' AS internal, 37 AS ord from dual
       UNION
         SELECT 'pfa' AS term, 'pfa' AS internal, 38 AS ord from dual
         UNION
         SELECT 'pvi' AS term, 'pvi' AS internal, 39 AS ord from dual
         UNION
         SELECT 'pyo' AS term, 'pyo' AS internal, 40 AS ord from dual
         UNION
         SELECT 'pbe' AS term, 'pbe' AS internal, 41 AS ord from dual
         UNION
         SELECT 'pch' AS term, 'prh' AS internal, 42 AS ord from dual
         UNION
         SELECT 'pkn' AS term, 'pkn' AS internal, 43 AS ord from dual
         UNION
       SELECT 'Other Apicomplexa' AS term, 'Other Apicomplexa' AS internal, 44 AS ord from dual
       UNION
         SELECT 'the' AS term, 'the' AS internal, 45 AS ord from dual
         UNION
   SELECT 'Fungi' AS term, 'Fungi' AS internal, 46 AS ord from dual
   UNION
     SELECT 'sce' AS term, 'sce' AS internal, 47 AS ord from dual
     UNION
     SELECT 'spo' AS term, 'spo' AS internal, 48 AS ord from dual
     UNION
     SELECT 'yli' AS term, 'yli' AS internal, 49 AS ord from dual
     UNION
     SELECT 'kla' AS term, 'kla' AS internal, 50 AS ord from dual
     UNION
     SELECT 'dha' AS term, 'dha' AS internal, 51 AS ord from dual
     UNION
     SELECT 'cgl' AS term, 'cgl' AS internal, 52 AS ord from dual
     UNION
     SELECT 'ecu' AS term, 'ecu' AS internal, 53 AS ord from dual
     UNION
     SELECT 'cne' AS term, 'cne' AS internal, 54 AS ord from dual
     UNION
     SELECT 'ago' AS term, 'ago' AS internal, 55 AS ord from dual
     UNION
     SELECT 'ncr' AS term, 'ncr' AS internal, 56 AS ord from dual
     UNION
   SELECT 'Metazoa' AS term, 'Metazoa' AS internal, 57 AS ord from dual
   UNION
     SELECT 'Arthropoda' AS term, 'Arthropoda' AS internal, 58 AS ord from dual
     UNION
       SELECT 'dme' AS term, 'dme' AS internal, 59 AS ord from dual
       UNION
       SELECT 'aga' AS term, 'aga' AS internal, 60 AS ord from dual
       UNION
     SELECT 'Deuterostomia' AS term, 'Deuterostomia' AS internal, 61 AS ord from dual
     UNION
       SELECT 'Bony Fish' AS term, 'Bony Fish' AS internal, 62 AS ord from dual
       UNION
         SELECT 'fru' AS term, 'fru' AS internal, 63 AS ord from dual
         UNION
         SELECT 'tni' AS term, 'tni' AS internal, 64 AS ord from dual
         UNION
         SELECT 'dre' AS term, 'dre' AS internal, 65 AS ord from dual
         UNION
       SELECT 'Tetrapoda' AS term, 'Tetrapoda' AS internal, 66 AS ord from dual
       UNION
         SELECT 'Mammals' AS term, 'Mammals' AS internal, 67 AS ord from dual
         UNION
           SELECT 'Primates' AS term, 'Primates' AS internal, 68 AS ord from dual
           UNION
             SELECT 'hsa' AS term, 'hsa' AS internal, 69 AS ord from dual
             UNION
           SELECT 'Other Mammals' AS term, 'Other Mammals' AS internal, 70 AS ord from dual
           UNION
             SELECT 'mmu' AS term, 'mmu' AS internal, 71 AS ord from dual
             UNION
             SELECT 'rno' AS term, 'rno' AS internal, 72 AS ord from dual
             UNION
 SELECT 'Other Tetrapoda' AS term, 'Other Tetrapoda' AS internal, 73 AS ord from dual
         UNION
           SELECT 'gga' AS term, 'gga' AS internal, 74 AS ord from dual
           UNION
       SELECT 'Other Deuterostomia' AS term, 'Other Deuterostomia' AS internal, 75 AS ord from dual
       UNION
         SELECT 'cin' AS term, 'cin' AS internal, 76 AS ord from dual
         UNION
     SELECT 'Other Metazoa' AS term, 'Other Metazoa' AS internal, 77 AS ord from dual
     UNION
       SELECT 'cel' AS term, 'cel' AS internal, 78 AS ord from dual
       UNION
       SELECT 'cbr' AS term, '3' AS internal, 79 AS ord from dual
       UNION
   SELECT 'Other Eukaryota' AS term, 'Other Eukaryota' AS internal, 80 AS ord from dual
   UNION
     SELECT 'ehi' AS term, 'ehi' AS internal, 81 AS ord from dual
     UNION
     SELECT 'ddi' AS term, 'ddi' AS internal, 82 AS ord from dual
)
            ORDER BY ord 
]]>-->

            </sql>
        </sqlQuery>



        <!-- VocabQueries.PhyleticTermMap -->
        <sqlQuery name="PhyleticTermMap">
            <column name="internal"/>
            <column name="term"/>
            <sql>


SELECT * FROM (
 SELECT 'hal' as internal, 'hal' as term FROM dual
   UNION
 SELECT 'mja' as internal, 'mja' as term FROM dual
   UNION
 SELECT 'sso' as internal, 'sso' as term FROM dual
   UNION
 SELECT 'neq' as internal, 'neq' as term FROM dual
   UNION
 SELECT 'aae' as internal, 'aae' as term FROM dual
   UNION
 SELECT 'tma' as internal, 'tma' as term FROM dual
   UNION
 SELECT 'det' as internal, 'det' as term FROM dual
   UNION
 SELECT 'dra' as internal, 'dra' as term FROM dual
   UNION
 SELECT 'tpa' as internal, 'tpa' as term FROM dual
   UNION
 SELECT 'cte' as internal, 'cte' as term FROM dual
   UNION
 SELECT 'rba' as internal, 'rba' as term FROM dual
   UNION
 SELECT 'cpn' as internal, 'cpn' as term FROM dual
   UNION
 SELECT 'syn' as internal, 'syn' as term FROM dual
   UNION
 SELECT 'mtu' as internal, 'mtu' as term FROM dual
   UNION
 SELECT 'ban' as internal, 'ban' as term FROM dual
   UNION
 SELECT 'wsu' as internal, 'wsu' as term FROM dual
   UNION
 SELECT 'gsu' as internal, 'gsu' as term FROM dual
   UNION
 SELECT 'atu' as internal, 'atu' as term FROM dual
   UNION
 SELECT 'rso' as internal, 'rso' as term FROM dual
   UNION
 SELECT 'eco' as internal, 'eco' as term FROM dual
   UNION
 SELECT 'ehi' as internal, 'ehi' as term FROM dual
   UNION
 SELECT 'ddi' as internal, 'ddi' as term FROM dual
   UNION
 SELECT 'cme' as internal, 'cme' as term FROM dual
   UNION
 SELECT 'tps' as internal, 'tps' as term FROM dual
   UNION
 SELECT 'ath' as internal, 'ath' as term FROM dual
   UNION
 SELECT 'osa' as internal, 'osa' as term FROM dual
   UNION
 SELECT 'sce' as internal, 'sce' as term FROM dual
   UNION
 SELECT 'spo' as internal, 'spo' as term FROM dual
   UNION
 SELECT 'yli' as internal, 'yli' as term FROM dual
   UNION
 SELECT 'kla' as internal, 'kla' as term FROM dual
   UNION
 SELECT 'dha' as internal, 'dha' as term FROM dual
   UNION
 SELECT 'cgl' as internal, 'cgl' as term FROM dual
   UNION
 SELECT 'ecu' as internal, 'ecu' as term FROM dual
   UNION
 SELECT 'cne' as internal, 'cne' as term FROM dual
   UNION
 SELECT 'ago' as internal, 'ago' as term FROM dual
   UNION
 SELECT 'ncr' as internal, 'ncr' as term FROM dual
   UNION
 SELECT 'cel' as internal, 'cel' as term FROM dual
   UNION
 SELECT 'cbr' as internal, 'cbr' as term FROM dual
   UNION
 SELECT 'dme' as internal, 'dme' as term FROM dual
   UNION
 SELECT 'aga' as internal, 'aga' as term FROM dual
   UNION
 SELECT 'the' as internal, 'the' as term FROM dual
   UNION
 SELECT 'tgo' as internal, 'tgo' as term FROM dual
   UNION
 SELECT 'cpa' as internal, 'cpa' as term FROM dual
   UNION
 SELECT 'cho' as internal, 'cho' as term FROM dual
   UNION
 SELECT 'pfa' as internal, 'pfa' as term FROM dual
   UNION
 SELECT 'pyo' as internal, 'pyo' as term FROM dual
   UNION
 SELECT 'pkn' as internal, 'pkn' as term FROM dual
   UNION
 SELECT 'pvi' as internal, 'pvi' as term FROM dual
   UNION
 SELECT 'pbe' as internal, 'pbe' as term FROM dual
   UNION
 SELECT 'pch' as internal, 'pch' as term FROM dual
   UNION
 SELECT 'cin' as internal, 'cin' as term FROM dual
   UNION
 SELECT 'fru' as internal, 'fru' as term FROM dual
   UNION
 SELECT 'tni' as internal, 'tni' as term FROM dual
   UNION
 SELECT 'dre' as internal, 'dre' as term FROM dual
   UNION
 SELECT 'gga' as internal, 'gga' as term FROM dual
   UNION
 SELECT 'mmu' as internal, 'mmu' as term FROM dual
   UNION
 SELECT 'rno' as internal, 'rno' as term FROM dual
   UNION
 SELECT 'hsa' as internal, 'hsa' as term FROM dual
   UNION
 SELECT 'aed' as internal, 'aed' as term FROM dual
   UNION
 SELECT 'ame' as internal, 'ame' as term FROM dual
   UNION
 SELECT 'aor' as internal, 'aor' as term FROM dual
   UNION
 SELECT 'bma' as internal, 'bma' as term FROM dual
   UNION
 SELECT 'bsu' as internal, 'bsu' as term FROM dual
   UNION
 SELECT 'bur' as internal, 'bur' as term FROM dual
   UNION
 SELECT 'cbu' as internal, 'cbu' as term FROM dual
   UNION
 SELECT 'cje' as internal, 'cje' as term FROM dual
   UNION
 SELECT 'cpe' as internal, 'cpe' as term FROM dual
   UNION
 SELECT 'cre' as internal, 'cre' as term FROM dual
   UNION
 SELECT 'ftu' as internal, 'ftu' as term FROM dual
   UNION
 SELECT 'gla' as internal, 'gla' as term FROM dual
   UNION
 SELECT 'gth' as internal, 'gth' as term FROM dual
   UNION
 SELECT 'lma' as internal, 'lma' as term FROM dual
   UNION
 SELECT 'lmo' as internal, 'lmo' as term FROM dual
   UNION
 SELECT 'ota' as internal, 'ota' as term FROM dual
   UNION
 SELECT 'pha' as internal, 'pha' as term FROM dual
   UNION
 SELECT 'rty' as internal, 'rty' as term FROM dual
   UNION
 SELECT 'sau' as internal, 'sau' as term FROM dual
   UNION
 SELECT 'sfl' as internal, 'sfl' as term FROM dual
   UNION
 SELECT 'sma' as internal, 'sma' as term FROM dual
   UNION
 SELECT 'spn' as internal, 'spn' as term FROM dual
   UNION
 SELECT 'sty' as internal, 'sty' as term FROM dual
   UNION
 SELECT 'tan' as internal, 'tan' as term FROM dual
   UNION
 SELECT 'tbr' as internal, 'tbr' as term FROM dual
   UNION
 SELECT 'tcr' as internal, 'tcr' as term FROM dual
   UNION
 SELECT 'tth' as internal, 'tth' as term FROM dual
   UNION
 SELECT 'vch' as internal, 'vch' as term FROM dual
   UNION
 SELECT 'ype' as internal, 'ype' as term FROM dual)
 
<!-- NEW TERM MAP
SELECT * FROM (
 SELECT 'Halobacterium sp. NRC-1' as internal, 'hal' as term FROM dual
   UNION
 SELECT 'Methanococcus jannaschii DSSM 2661' as internal, 'mja' as term FROM dual
   UNION
 SELECT 'Sulfolobus solfataricus P2' as internal, 'sso' as term FROM dual
   UNION
 SELECT 'Nanoarchaeum equitans Kin4-M' as internal, 'neq' as term FROM dual
   UNION
 SELECT 'Aquifex aeolicus VF5' as internal, 'aae' as term FROM dual
   UNION
 SELECT 'Thermotoga maritima MSB8' as internal, 'tma' as term FROM dual
   UNION
 SELECT 'Dehalococcoides ethenogenes 195' as internal, 'det' as term FROM dual
   UNION
 SELECT 'Deinococcus radiodurans R1' as internal, 'dra' as term FROM dual
   UNION
 SELECT 'Treponema pallidum subsp. pallidum str. Nichols' as internal, 'tpa' as term FROM dual
   UNION
 SELECT 'Chlorobium tepidum TLS' as internal, 'cte' as term FROM dual
   UNION
 SELECT 'Rhodopirellula baltica SH_1' as internal, 'rba' as term FROM dual
   UNION
 SELECT 'Chlamydophila pneumoniae CWL029' as internal, 'cpn' as term FROM dual
   UNION
 SELECT 'Synechococcus sp. WH8102' as internal, 'syn' as term FROM dual
   UNION
 SELECT 'Mycobacterium tuberculosis H37Rv' as internal, 'mtu' as term FROM dual
   UNION
 SELECT 'Bacillus anthracis Ames' as internal, 'ban' as term FROM dual
   UNION
 SELECT 'Wolinella succinogenes DSM 1740' as internal, 'wsu' as term FROM dual
   UNION
 SELECT 'Geobacter sulfurreducens PCA' as internal, 'gsu' as term FROM dual
   UNION
 SELECT 'Agrobacterium tumefaciens C58 Uwash' as internal, 'atu' as term FROM dual
   UNION
 SELECT 'Ralstonia solanacearum GMI1000' as internal, 'rso' as term FROM dual
   UNION
 SELECT 'Escherichia coli K12' as internal, 'eco' as term FROM dual
   UNION
 SELECT 'Entamoeba histolytica' as internal, 'ehi' as term FROM dual
   UNION
 SELECT 'Dictyostelium discoideum' as internal, 'ddi' as term FROM dual
   UNION
 SELECT 'Cyanodioschyzon merolae 10D' as internal, 'cme' as term FROM dual
   UNION
 SELECT 'Thalassiosira pseudonana' as internal, 'tps' as term FROM dual
   UNION
 SELECT 'Arabidopsis thaliana' as internal, 'ath' as term FROM dual
   UNION
 SELECT 'Oryza sativa' as internal, 'osa' as term FROM dual
   UNION
 SELECT 'Saccharomyces cerevisiae S288C' as internal, 'sce' as term FROM dual
   UNION
 SELECT 'Schizosaccharomyces pombe' as internal, 'spo' as term FROM dual
   UNION
 SELECT 'Yarrowia lipolytica CLIB99' as internal, 'yli' as term FROM dual
   UNION
 SELECT 'Kluyveromyces lactis CLIB210' as internal, 'kla' as term FROM dual
   UNION
 SELECT 'Debaryomyces hansenii CBS767' as internal, 'dha' as term FROM dual
   UNION
 SELECT 'Candida glabrate CBS138' as internal, 'cgl' as term FROM dual
   UNION
 SELECT 'Encephalitozoon cuniculi' as internal, 'ecu' as term FROM dual
   UNION
 SELECT 'Cryptococcus neoformans' as internal, 'cne' as term FROM dual
   UNION
 SELECT 'Ashbya gossypii' as internal, 'ago' as term FROM dual
   UNION
 SELECT 'Neurospora crassa OR74A' as internal, 'ncr' as term FROM dual
   UNION
 SELECT 'Caenorhabditis elegans' as internal, 'cel' as term FROM dual
   UNION
 SELECT 'Caenorhabditis briggsae' as internal, 'cbr' as term FROM dual
   UNION
 SELECT 'Drosophila melanogaster' as internal, 'dme' as term FROM dual
   UNION
 SELECT 'Anopheles gambiae PEST' as internal, 'aga' as term FROM dual
   UNION
 SELECT 'Theileria parva' as internal, 'the' as term FROM dual
   UNION
 SELECT 'Toxoplasma gondii' as internal, 'tgo' as term FROM dual
   UNION
 SELECT 'Cryptosporidium parvum Iowa (Type2)' as internal, 'cpa' as term FROM dual
   UNION
 SELECT 'Cryptosporidium hominis TU502 (Type 1)' as internal, 'cho' as term FROM dual
   UNION
 SELECT 'Plasmodium falciparum 3D7' as internal, 'pfa' as term FROM dual
   UNION
 SELECT 'Plasmodium yoelii 17XNL' as internal, 'pyo' as term FROM dual
   UNION
 SELECT 'Plasmodium knowlesi' as internal, 'pkn' as term FROM dual
   UNION
 SELECT 'Plasmodium vivax' as internal, 'pvi' as term FROM dual
   UNION
 SELECT 'Plasmodium berghei' as internal, 'pbe' as term FROM dual
   UNION
 SELECT 'Plasmodium chabaudi' as internal, 'pch' as term FROM dual
   UNION
 SELECT 'Ciona intestinalis' as internal, 'cin' as term FROM dual
   UNION
 SELECT 'Fugu rubripes' as internal, 'fru' as term FROM dual
   UNION
 SELECT 'Tetraodon nigroviridis' as internal, 'tni' as term FROM dual
   UNION
 SELECT 'Danio rerio' as internal, 'dre' as term FROM dual
   UNION
 SELECT 'Gallus gallus' as internal, 'gga' as term FROM dual
   UNION
 SELECT 'Mus musculus' as internal, 'mmu' as term FROM dual
   UNION
 SELECT 'Rattus norvegicus' as internal, 'rno' as term FROM dual
   UNION
 SELECT 'Homo sapiens' as internal, 'hsa' as term FROM dual
   UNION
 SELECT 'Aedes aegypti' as internal, 'aed' as term FROM dual
   UNION
 SELECT 'Apis mellifera' as internal, 'ame' as term FROM dual
   UNION
 SELECT 'Aspergillus oryzae' as internal, 'aor' as term FROM dual
   UNION
 SELECT 'Brugia malayi' as internal, 'bma' as term FROM dual
   UNION
 SELECT 'Brucella suis 1330' as internal, 'bsu' as term FROM dual
   UNION
 SELECT 'Burkholderia mallei ATCC 23344' as internal, 'bur' as term FROM dual
   UNION
 SELECT 'Coxiella burnetii RSA 493' as internal, 'cbu' as term FROM dual
   UNION
 SELECT 'Campylobacter jejuni subsp. jejuni NCTC 11168' as internal, 'cje' as term FROM dual
   UNION
 SELECT 'Clostridium perfringens str. 13' as internal, 'cpe' as term FROM dual
   UNION
 SELECT 'Chlamydomonas reinhardtii' as internal, 'cre' as term FROM dual
   UNION
 SELECT 'Francisella tularensis subsp. tularensis SCHU S4' as internal, 'ftu' as term FROM dual
   UNION
 SELECT 'Giardia lamblia ATCC 50803' as internal, 'gla' as term FROM dual
   UNION
 SELECT 'Guillardia theta' as internal, 'gth' as term FROM dual
   UNION
 SELECT 'Leishmania major' as internal, 'lma' as term FROM dual
   UNION
 SELECT 'Listeria monocytogenes EGD-e' as internal, 'lmo' as term FROM dual
   UNION
 SELECT 'Ostreococcus tauri' as internal, 'ota' as term FROM dual
   UNION
 SELECT 'Phanerochaete chrysosporium' as internal, 'pha' as term FROM dual
   UNION
 SELECT 'Rickettsia typhi str. Wilmington' as internal, 'rty' as term FROM dual
   UNION
 SELECT 'Staphylococcus aureus subsp. aureus Mu50' as internal, 'sau' as term FROM dual
   UNION
 SELECT 'Shigella flexneri 2a str. 301' as internal, 'sfl' as term FROM dual
   UNION
 SELECT 'Schistosoma mansoni' as internal, 'sma' as term FROM dual
   UNION
 SELECT 'Streptococcus pneumoniae TIGR4' as internal, 'spn' as term FROM dual
   UNION
 SELECT 'Salmonella enterica subsp. enterica serovar Typhi str. CT18' as internal, 'sty' as term FROM dual
   UNION
 SELECT 'Theileria annulata' as internal, 'tan' as term FROM dual
   UNION
 SELECT 'Trypanosoma brucei' as internal, 'tbr' as term FROM dual
   UNION
 SELECT 'Trypanosoma cruzi' as internal, 'tcr' as term FROM dual
   UNION
 SELECT 'Tetrahymena thermophila' as internal, 'tth' as term FROM dual
   UNION
 SELECT 'Vibrio cholerae O1 biovar eltor str. N16961' as internal, 'vch' as term FROM dual
   UNION
 SELECT 'Yersinia pestis CO92' as internal, 'ype' as term FROM dual)
-->

           </sql>
        </sqlQuery>


<sqlQuery name="Filter">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT internal, term FROM (
               SELECT 'yes' AS term,
                      'yes' AS internal,
                      0 AS ord FROM dual
               UNION
               SELECT 'no' AS term,
                      'no' AS internal,
                      1 AS ord FROM dual)
            ORDER BY ord
            </sql>
</sqlQuery>



 <sqlQuery name="BlastQueryType">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'DNA' as term,
                      'DNA' as internal from dual
               UNION
               SELECT 'Protein' as term,
                      'Protein' as internal from dual
            )
            </sql>
        </sqlQuery>
                                                                                      
        <sqlQuery name="BlastDatabaseTypeGene">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'Transcripts' as term,
                      'Transcripts' as internal from dual
               UNION
               SELECT 'Translated Transcripts' as term,
                      'Translated Transcripts' as internal from dual
               UNION
               SELECT 'Proteins' as term,
                      'Proteins' as internal from dual
            )
            </sql>
        </sqlQuery>
                                                                                      
        <sqlQuery name="BlastDatabaseTypeGenome">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'Genome' as term,
                      'Genome' as internal from dual
               UNION
               SELECT 'Translated Genome' as term,
                      'Translated Genome' as internal from dual
            )
            </sql>
        </sqlQuery>

<sqlQuery name="BlastDatabaseTypeORF">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (

               SELECT 'ORF (Protein)' as term,
                      'ORF (Protein)' as internal from dual

            )
            </sql>
        </sqlQuery>


<sqlQuery name="BlastDatabaseTypeEST">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (

               SELECT 'EST' as term,
                      'EST' as internal from dual
               UNION
               SELECT 'Translated EST' as term,
                      'Translated EST' as internal from dual
            )
            </sql>
        </sqlQuery>


<sqlQuery name="BlastDatabaseOrganism">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'C. hominis' as term,
                      'C. hominis' as internal from dual
               UNION
               SELECT 'C. parvum' as term,
                      'C. parvum' as internal from dual
               UNION
               SELECT 'C. parvum Chr6' as term,
                      'C. parvum Chr6' as internal from dual
               UNION
               SELECT 'P. berghei' as term,
                      'P. berghei' as internal from dual
               UNION
               SELECT 'P. chabaudi' as term,
                      'P. chabaudi' as internal from dual
               UNION
               SELECT 'P. falciparum' as term,
                      'P. falciparum' as internal from dual
               UNION
               SELECT 'P. falciparum mitocondrial' as term,
                      'PfalciparumMito' as internal from dual
               UNION
               SELECT 'P. falciparum plastid' as term,
                      'P. falciparumPlastid' as internal from dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'P. knowlesi' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'P. vivax' as internal from dual
               UNION
               SELECT 'P. yoelii' as term,
                      'P. yoelii' as internal from dual
               UNION
               SELECT 'T. gondii' as term,
                      'T. gondii' as internal from dual
               <!--UNION
               SELECT 'T. gondii apicoplast' as term,
                      'TgondiiApicoplast' as internal from dual-->
              
            )
            </sql>
        </sqlQuery>

<sqlQuery name="BlastDatabaseOrganismGenomics">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'C. hominis' as term,
                      'C. hominis' as internal from dual
               UNION
               SELECT 'C. muris' as term,
                      'C. muris' as internal from dual
               UNION
               SELECT 'C. parvum' as term,
                      'C. parvum' as internal from dual
               UNION
               SELECT 'C. parvum Chr6' as term,
                      'C. parvum Chr6' as internal from dual
               UNION
               SELECT 'P. berghei' as term,
                      'P. berghei' as internal from dual
               UNION
               SELECT 'P. chabaudi' as term,
                      'P. chabaudi' as internal from dual
               UNION
               SELECT 'P. falciparum' as term,
                      'P. falciparum' as internal from dual
               UNION
               SELECT 'P. falciparum mitocondrial' as term,
                      'P. falciparumMito' as internal from dual
               UNION
               SELECT 'P. falciparum plastid' as term,
                      'P. falciparumPlastid' as internal from dual
               UNION
               SELECT 'P. gallinaceum' as term,
                      'P. gallinaceum' as internal from dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'P. knowlesi' as internal from dual
               UNION
               SELECT 'P. reichenowi' as term,
                      'P. reichenowi' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'P. vivax' as internal from dual
               UNION
               SELECT 'P. yoelii' as term,
                      'P. yoelii' as internal from dual
               UNION
               SELECT 'T. gondii' as term,
                      'T. gondii' as internal from dual
              <!-- UNION
               SELECT 'T. gondii apicoplast' as term,
                      'TgondiiApicoplast' as internal from dual -->
              
            )
            </sql>
        </sqlQuery>

<sqlQuery name="BlastDatabaseOrganismEST">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               
               SELECT 'C. parvum' as term,
                      'C. parvum' as internal from dual
               UNION
               SELECT 'P. berghei' as term,
                      'P. berghei' as internal from dual
               UNION
               SELECT 'P. falciparum' as term,
                      'P. falciparum' as internal from dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'P. knowlesi' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'P. vivax' as internal from dual
               UNION
               SELECT 'P. yoelii' as term,
                      'P. yoelii' as internal from dual
               UNION
               SELECT 'T. gondii' as term,
                      'T. gondii' as internal from dual
 
            )
            </sql>
        </sqlQuery>


<sqlQuery name="BlastDatabaseOrganismORF">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT * from (
               SELECT 'C. hominis' as term,
                      'C. hominis' as internal from dual
               UNION
               SELECT 'C. muris' as term,
                      'C. muris' as internal from dual
               UNION
               SELECT 'C. parvum' as term,
                      'C. parvum' as internal from dual
               UNION
               SELECT 'C. parvum Chr6' as term,
                      'C. parvum Chr6' as internal from dual
               UNION
               SELECT 'C. parvum EST' as term,
                      'C. parvum EST' as internal from dual
               UNION
               SELECT 'P. berghei' as term,
                      'P. berghei' as internal from dual
               UNION
               SELECT 'P. chabaudi' as term,
                      'P. chabaudi' as internal from dual
               UNION
               SELECT 'P. falciparum' as term,
                      'P. falciparum' as internal from dual
               UNION
               SELECT 'P. gallinaceum' as term,
                      'P. gallinaceum' as internal from dual
               UNION
               SELECT 'P. knowlesi' as term,
                      'P. knowlesi' as internal from dual
               UNION
               SELECT 'P. reichenowi' as term,
                      'P. reichenowi' as internal from dual
               UNION
               SELECT 'P. vivax' as term,
                      'P. vivax' as internal from dual
               UNION
               SELECT 'P. yoelii' as term,
                      'P. yoelii' as internal from dual
               UNION
               SELECT 'T. gondii' as term,
                      'T. gondii' as internal from dual
            )
            </sql>
        </sqlQuery>



<sqlQuery name="MotifDataset">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal from
               (SELECT 'ChominisAnnotatedProtein.fsa' AS internal,
                       'C. hominis annotated proteins' AS term,
                       1 AS idx from dual
                
                UNION
                SELECT 'CparvumAnnotatedProtein.fsa' AS internal,
                       'C. parvum annotated proteins' AS term,
                       2 AS idx from dual
                UNION
                SELECT 'CparvumChr6AnnotatedProtein.fsa' AS internal,
                       'C. parvum Chr6 annotated proteins' AS term,
                       3 AS idx from dual
               
                UNION
                SELECT 'Chominis_orf50.fsa' AS internal,
                       'C. hominis ORF 50' AS term,
                       4 AS idx from dual
                UNION
                SELECT 'Cparvum_orf50.fsa' AS internal,
                       'C. parvum ORF 50' AS term,
                       5 AS idx from dual
                
                UNION
                SELECT 'CparvumChr6_orf50.fsa' AS internal,
                       'C. parvum Chr6 ORF 50' AS term,
                       6 AS idx from dual
                UNION
                SELECT 'CparvumESTs_orf50.fsa' AS internal,
                       'C. parvum ESTs ORF 50' AS term,
                       7 AS idx from dual
                )
            ORDER BY idx
            </sql>
        </sqlQuery>





<sqlQuery name="MotifDatasetGene">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal from
               (
                SELECT 'C. hominis annotated proteins' AS internal,
                       'C. hominis annotated proteins' AS term,
                       1 AS idx from dual
                 UNION
                SELECT 'C. parvum annotated proteins' AS internal,
                       'C. parvum annotated proteins' AS term,
                       2 AS idx from dual
                 UNION
                SELECT 'C. parvum Chr6 annotated proteins' AS internal,
                       'C. parvum Chr6 annotated proteins' AS term,
                       3 AS idx from dual
                 UNION
                SELECT 'P. berghei' AS internal,
                       'P. berghei annotated proteins' AS term,
                       7 AS idx from dual
               UNION
                SELECT 'P. chabaudi' AS internal,
                       'P. chabaudi annotated proteins' AS term,
                       8 AS idx from dual
               UNION
                SELECT 'P. falciparum' AS internal,
                       'P. falciparum annotated proteins' AS term,
                       4 AS idx from dual
                UNION
               SELECT 'P. vivax' AS internal,
                       'P. vivax annotated proteins' AS term,
                       5 AS idx from dual
               UNION
                SELECT 'P. yoelii' AS internal,
                       'P. yoelii annotated proteins' AS term,
                       6 AS idx from dual
               UNION
                SELECT 'T. gondii annotated proteins' AS internal,
                       'T. gondii annotated proteins' AS term,
                       9 AS idx from dual
                 )
            ORDER BY idx
            </sql>
        </sqlQuery>


<sqlQuery name="MotifDatasetORF">
            <column name="internal"/>
            <column name="term"/>
            <sql>
            SELECT term, internal from
               (

                SELECT 'C. hominis ORF 50' AS internal,
                       'C. hominis ORF 50' AS term,
                       1 AS idx from dual
                UNION
                SELECT 'C. muris ORF 50' AS internal,
                       'C. muris ORF 50' AS term,
                       2 AS idx from dual
                UNION
                SELECT 'C. parvum ORF 50' AS internal,
                       'C. parvum ORF 50' AS term,
                       3 AS idx from dual
                UNION
                SELECT 'C. parvum Chr6 ORF 50' AS internal,
                       'C. parvum Chr6 ORF 50' AS term,
                       4 AS idx from dual
                UNION
                SELECT 'C. parvum ESTs ORF 50' AS internal,
                       'C. parvum ESTs ORF 50' AS term,
                       5 AS idx from dual
                UNION
                SELECT 'P. berghei ORFs' AS internal,
                       'P. berghei ORFs' AS term,
                       6 AS idx from dual
               UNION
                SELECT 'P. chabaudi ORFs' AS internal,
                       'P. chabaudi ORFs' AS term,
                       7 AS idx from dual
               UNION
                SELECT 'P. falciparum ORFs' AS internal,
                       'P. falciparum ORFs' AS term,
                       8 AS idx from dual
 UNION
                SELECT 'P. gallinaceum ORFs' AS internal,
                       'P. gallinaceum ORFs' AS term,
                       9 AS idx from dual
               UNION
                SELECT 'P. knowlesi ORFs' AS internal,
                       'P. knowlesi ORFs' AS term,
                       10 AS idx from dual
               UNION
                SELECT 'P. reichenowi ORFs' AS internal,
                       'P. reichenowi ORFs' AS term,
                       11 AS idx from dual
               UNION
                SELECT 'P. vivax ORFs' AS internal,
                       'P. vivax ORFs' AS term,
                       12 AS idx from dual
               UNION
                SELECT 'P. yoelii ORFs' AS internal,
                       'P. yoelii ORFs' AS term,
                       13 AS idx from dual
                UNION
                SELECT 'T. gondii ORFs' AS internal,
                       'T. gondii ORFs' AS term,
                       14 AS idx from dual
                )
            ORDER BY idx
            </sql>
        </sqlQuery>


<!-- april 26 cristina: for genes by mass spec crypto, wastlinglowery_ms_assay -->
<!-- VocabQueries.CMsAssay -->
      <sqlQuery name="CMsAssay">
            <column name="internal"/>
            <column name="term"/>
            <sql>
           <![CDATA[
            (
             SELECT '1D Gel LC-MS/MS<sup>&#182;</sup>' AS internal,
                    '1D Gel LC-MS/MS<sup>&#182;</sup>' AS term,
                     1 as idx  FROM dual
             UNION 
             SELECT '2D Gel LC-MS/MS<sup>&#182;</sup>' AS internal,
                    '2D Gel LC-MS/MS<sup>&#182;</sup>' AS term,
                     2 as idx  FROM dual
             UNION
             SELECT 'MudPit Soluble fractions<sup>&#182;</sup>' AS internal,
                    'MudPit Soluble fractions<sup>&#182;</sup>' AS term,
                     3 as idx FROM dual
             UNION
             SELECT 'MudPit Insoluble fractions<sup>&#182;</sup>' AS internal,
                    'MudPit Insoluble fractions<sup>&#182;</sup>' AS term,
                     4 as idx FROM dual
             UNION
             SELECT 'Insoluble Excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS internal,
                    'Insoluble Excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS term,
                     5 as idx  FROM dual
             UNION
             SELECT 'Insoluble Non-excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS internal,
                    'Insoluble Non-excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS term,
                     6 as idx  FROM dual
             UNION
             SELECT 'Soluble Excysted and Non-excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS internal,
                    'Soluble Excysted and Non-excysted Fraction LC-MS/MS<sup>&#167;</sup>' AS term,
                     7 as idx  FROM dual
             )
             ORDER BY idx

          ]]>
            </sql>
        </sqlQuery>

 <sqlQuery name="TgMsAssay">
            <column name="internal"/>
            <column name="term"/>
            <sql>
           <![CDATA[
              SELECT * FROM (
              SELECT '1-D SDS PAGE<sup>1</sup>' AS internal,
                     '1-D SDS PAGE<sup>1</sup>' AS term, 1 as idx FROM dual
              UNION
              SELECT '1-D SDS PAGE Soluble<sup>1</sup>' AS internal,
                     '1-D SDS PAGE Soluble<sup>1</sup>' AS term, 2 as idx FROM dual
              UNION
              SELECT '1-D SDS PAGE Insoluble<sup>1</sup>' AS internal,
                     '1-D SDS PAGE Insoluble<sup>1</sup>' AS term, 3 as idx FROM dual
              UNION
              SELECT 'MudPIT Insoluble<sup>1</sup>' AS internal,
                     'MudPIT Insoluble<sup>1</sup>' AS term, 4 as idx FROM dual
              UNION
              SELECT 'MudPIT Soluble<sup>1</sup>' AS internal,
                     'MudPIT Soluble<sup>1</sup>' AS term, 5 as idx FROM dual
              UNION
              SELECT 'Conoid-enriched Fraction<sup>2</sup>' AS internal,
                     'Conoid-enriched Fraction<sup>2</sup>' AS term, 6 as idx FROM dual
              UNION
              SELECT 'Conoid-depleted Fraction<sup>2</sup>' AS internal,
                     'Conoid-depleted Fraction<sup>2</sup>' AS term, 7 as idx FROM dual
	    ) 
	    ORDER BY idx
          ]]>
            </sql>
        </sqlQuery>


<!-- may 13 cristina: for orfs by mass spec: crypto, wastling_ms_assay, toxo: ms_assay (Same as genesbymassspec) -->
<!-- VocabQueries.MsAssay -->
      <sqlQuery name="MsAssay">
            <column name="internal"/>
            <column name="term"/>
            <sql>
           <![CDATA[
             
             SELECT '1D Gel LC-MS/MS<sup>&#182;</sup>' AS internal,
                    '1D Gel LC-MS/MS<sup>&#182;</sup>(Crypto)' AS term,
                     1 as idx  FROM dual
             UNION
             SELECT '2D Gel LC-MS/MS<sup>&#182;</sup>' AS internal,
                    '2D Gel LC-MS/MS<sup>&#182;</sup>(Crypto)' AS term,
                     2 as idx  FROM dual
             UNION
             SELECT 'MudPit Soluble fractions<sup>&#182;</sup>' AS internal,
                    'MudPit Soluble fractions<sup>&#182;</sup>(Crypto)' AS term,
                     3 as idx FROM dual
             UNION
             SELECT  'MudPit Insoluble fractions<sup>&#182;</sup>' AS internal,
                    'MudPit Insoluble fractions<sup>&#182;</sup>(Crypto)' AS term,
                     4 as idx FROM dual
             UNION
             SELECT  '1-D SDS PAGE<sup>1</sup>' AS internal,
                     '1-D SDS PAGE<sup>1</sup>(Toxo)' AS term, 1 as idx FROM dual
              UNION
              SELECT '1-D SDS PAGE Soluble<sup>1</sup>' AS internal,
                     '1-D SDS PAGE Soluble<sup>1</sup>(Toxo)' AS term, 2 as idx FROM dual
              UNION
              SELECT '1-D SDS PAGE Insoluble<sup>1</sup>' AS internal,
                     '1-D SDS PAGE Insoluble<sup>1</sup>(Toxo)' AS term, 3 as idx FROM dual
              UNION
              SELECT 'MudPIT Insoluble<sup>1</sup>' AS internal,
                     'MudPIT Insoluble<sup>1</sup>(Toxo)' AS term, 4 as idx FROM dual
              UNION
              SELECT 'MudPIT Soluble<sup>1</sup>' AS internal,
                     'MudPIT Soluble<sup>1</sup>(Toxo)' AS term, 5 as idx FROM dual
              UNION
              SELECT 'Conoid-enriched Fraction<sup>2</sup>' AS internal,
                     'Conoid-enriched Fraction<sup>2</sup>(Toxo)' AS term, 6 as idx FROM dual
              UNION
              SELECT 'Conoid-depleted Fraction<sup>2</sup>' AS internal,
                     'Conoid-depleted Fraction<sup>2</sup>(Toxo)' AS term, 7 as idx FROM dual
             
          ]]>
            </sql>
        </sqlQuery>


     </querySet>
     
<!-- ////////// END VOCABULARY //////////// -->


<!-- //////////  TABLE QUERIES //////////// -->

<querySet name="UtilityTables">
        <!-- UtilityTables.PfamTermList -->
        <sqlQuery name="PfamTermList" isCacheable='true'>
            <paramRef ref="params.primaryKey"/> 
            <column name="accession"/>
            <column name="name"/>
            <column name="description"/>
            <sql>
 
           SELECT accession, name, description FROM 
           ( (SELECT DISTINCT dr.primary_identifier AS accession,
                                dr.primary_identifier AS name,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS description
                FROM dots.DbRefAaFeature@CRYPTO_DBLINK@ draf, sres.DbRef@CRYPTO_DBLINK@ dr,
                     sres.ExternalDatabaseRelease@CRYPTO_DBLINK@ edr, sres.ExternalDatabase@CRYPTO_DBLINK@ ed
                WHERE draf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = '$$primaryKey$$')
               UNION
              (SELECT DISTINCT dr.primary_identifier AS accession,
                                dr.primary_identifier AS name,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS description
                FROM dots.DbRefAaFeature@PLASMO_DBLINK@ draf, sres.DbRef@PLASMO_DBLINK@ dr,
                     sres.ExternalDatabaseRelease@PLASMO_DBLINK@ edr, sres.ExternalDatabase@PLASMO_DBLINK@ ed
                WHERE draf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = '$$primaryKey$$')
                UNION
              (SELECT DISTINCT dr.primary_identifier AS accession,
                                dr.primary_identifier AS name,
                                dr.primary_identifier || ':' ||
                                dr.secondary_identifier || ' ' || dr.remark
                                AS description
                FROM dots.DbRefAaFeature@TOXO_DBLINK@ draf, sres.DbRef@TOXO_DBLINK@ dr,
                     sres.ExternalDatabaseRelease@TOXO_DBLINK@ edr, sres.ExternalDatabase@TOXO_DBLINK@ ed
                WHERE draf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                      = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name = '$$primaryKey$$'))
            </sql>
        </sqlQuery>

<sqlQuery name="PF_SnpStrainA">
          <paramRef ref="params.primaryKey"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord 
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a not in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b not in ('3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select '-----------' as internal, '-----------' as term, 2 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

<sqlQuery name="PF_SnpStrainB">
          <paramRef ref="params.primaryKey"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 1 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@
            where strain_a in ('Preich', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 1 as ord 
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b in ('Preich', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10')
            union
            select distinct CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as internal, CASE WHEN strain_a = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_a END as term, 3 as ord  
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_a not in ('Preich','3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_a not like '%-NIH'
            union
	    select distinct CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as internal, CASE WHEN strain_b = 'Preich' THEN 'P. reichenowi (vs. 3D7 only)' ELSE 'Pf-' || strain_b END as term, 3 as ord
	    from apidb.SNPSUMMARY@PLASMO_DBLINK@ 
            where strain_b not in ('Preich','3D7', 'Dd2', 'GHANA1', 'HB3', 'IT', '7G8', 'D10', 'Preich')
            and strain_b not like '%-NIH'
            union
            select '-----------' as internal, '-----------' as term, 2 as ord from dual
	    order by ord,internal
          </sql>
        </sqlQuery>

 <sqlQuery name="TG_SnpStrainA">
          <paramRef ref="params.primaryKey"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
	    select 'ME49 (type II)' as term, 2 as ord,
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 3 as ord,
	           'VEG' as internal from dual
            union
	    select 'GT1 (type I)' as term, 1 as ord,
	           'GT1' as internal from dual
	    order by ord
          </sql>
        </sqlQuery>

        <sqlQuery name="TG_SnpStrainB">
          <paramRef ref="params.primaryKey"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
            select 'RH (type I; chr IA and IB only)' as term, 4 as ord,
	           'RH' as internal from dual
	    union
	    select 'ME49 (type II)' as term, 2 as ord,
	           'ME49' as internal from dual
	    union
	    select 'VEG (type III)' as term, 3 as ord,
	           'VEG' as internal from dual
	    order by ord
          </sql>
        </sqlQuery>

<sqlQuery name="CP_Chromosomes">
          <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql> 

              <![CDATA[ 
                  SELECT term, internal, idx 
                  FROM (SELECT enas.source_id||'   (Chromosome '||src.chromosome||')' as term, enas.source_id||'   (Chromosome '||src.chromosome||')' as internal, 1 as idx 
                  FROM dots.ExternalNASequence@CRYPTO_DBLINK@ enas,
                       dots.source@CRYPTO_DBLINK@ src,
                       sres.taxon@CRYPTO_DBLINK@ t
                  WHERE enas.na_sequence_id = src.na_sequence_id
                    AND t.taxon_id = enas.taxon_id
                    AND t.taxon_id IN (select taxon_id from sres.taxon
                        connect by parent_id = prior taxon_id
                        start with taxon_id in (89025,89026)) ORDER BY src.chromosome)
                  ORDER BY idx
              ]]>
            </sql>
        </sqlQuery>

<sqlQuery name="PF_Chromosomes">
          <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT term, internal FROM (
               SELECT 'chromosome 1' as term, 1 as ord,
                      'chromosome 1' as internal FROM dual
               UNION
               SELECT 'chromosome 2' as term, 2 as ord,
                      'chromosome 2' as internal FROM dual
               UNION
               SELECT 'chromosome 3' as term, 3 as ord,
                      'chromosome 3' as internal FROM dual
               UNION
               SELECT 'chromosome 4' as term, 4 as ord,
                      'chromosome 4' as internal FROM dual
               UNION
               SELECT 'chromosome 5' as term, 5 as ord,
                      'chromosome 5' as internal FROM dual
               UNION
               SELECT 'chromosome 6' as term, 6 as ord,
                      'chromosome 6' as internal FROM dual
               UNION
               SELECT 'chromosome 7' as term, 7 as ord,
                      'chromosome 7' as internal FROM dual
               UNION
               SELECT 'chromosome 8' as term, 8 as ord,
                      'chromosome 8' as internal FROM dual
               UNION
               SELECT 'chromosome 9' as term, 9 as ord,
                      'chromosome 9' as internal FROM dual
               UNION
               SELECT 'chromosome 10' as term, 10 as ord,
                      'chromosome 10' as internal FROM dual
               UNION
               SELECT 'chromosome 11' as term, 11 as ord,
                      'chromosome 11' as internal FROM dual
               UNION
               SELECT 'chromosome 12' as term, 12 as ord,
                      'chromosome 12' as internal FROM dual
               UNION
               SELECT 'chromosome 13' as term, 13 as ord,
                      'chromosome 13' as internal FROM dual
               UNION
               SELECT 'chromosome 14' as term, 14 as ord,
                      'chromosome 14' as internal FROM dual
               UNION
               SELECT 'mitochondrial genome' AS term, 15 AS ord,
                      'mitochondrial genome' AS internal FROM dual
               UNION
               SELECT 'plastid IR-A' AS term, 16 AS ord,
                      'plastid IR-A' AS internal FROM dual
               UNION
               SELECT 'plastid IR-B' AS term, 17 AS ord,
                      'plastid IR-B' AS internal FROM dual
               )
            ORDER BY ord
            </sql>
        </sqlQuery>

<sqlQuery name="TG_Chromosomes">
          <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
               SELECT * FROM (
               SELECT 'Ia' as term, 
                      'Ia' as internal,
		        1   as order_num FROM dual
               UNION
               SELECT 'Ib' as term, 
                      'Ib' as internal, 
		        2   as order_num FROM dual
               UNION
               SELECT 'II' as term, 
                      'II' as internal, 
		        3   as order_num FROM dual
               UNION
               SELECT 'III' as term, 
                      'III' as internal, 
		        4   as order_num FROM dual
               UNION
               SELECT 'IV' as term, 
                      'IV' as internal,
		        5   as order_num FROM dual
               UNION
               SELECT 'V' as term, 
                      'V' as internal,
		        6   as order_num FROM dual
               UNION
               SELECT 'VI' as term, 
                      'VI' as internal,
		        7   as order_num FROM dual
               UNION
               SELECT 'VIIa' as term, 
                      'VIIa' as internal,
		        8   as order_num FROM dual
               UNION
               SELECT 'VIIb' as term, 
                      'VIIb' as internal,
		        9   as order_num FROM dual
               UNION
               SELECT 'VIII' as term, 
                      'VIII' as internal,
		       10   as order_num FROM dual
               UNION
               SELECT 'IX' as term, 
                      'IX' as internal,
		       11   as order_num FROM dual
               UNION
               SELECT 'X' as term, 
                      'X' as internal,
		       12   as order_num FROM dual
               UNION
               SELECT 'XI' as term, 
                      'XI' as internal,
		       13   as order_num FROM dual
               UNION
               SELECT 'XII' as term, 
                      'XII' as internal,
		       14   as order_num FROM dual
               UNION
               SELECT 'Select:' as term, 
                      'Select:' as internal,
		        0   as order_num FROM dual
               )
	       ORDER BY order_num asc
            </sql>
        </sqlQuery>


    <sqlQuery name="P_ESTs">
            <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT REPLACE(dbest_name, ',', ' - ') AS term,
                       library_id AS internal
                FROM dots.library@PLASMO_DBLINK@
                ORDER BY dbest_name
            </sql>
     </sqlQuery>

     <sqlQuery name="T_ESTs">
            <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT REPLACE(dbest_name, ',', ' - ') AS term,
                       library_id AS internal
                FROM dots.library@TOXO_DBLINK@
                ORDER BY dbest_name
            </sql>
     </sqlQuery>

     <sqlQuery name="C_ESTs">
            <paramRef ref="params.primaryKey"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
                SELECT REPLACE(dbest_name, ',', ' - ') AS term,
                       library_id AS internal
                FROM dots.library@CRYPTO_DBLINK@
                ORDER BY dbest_name
            </sql>
     </sqlQuery>


     </querySet>

<!-- //////////  END TABLE QUERIES //////////// -->



<!-- //////////  PARAMETERS //////////// -->

    <!-- parameters used by queries -->
    <paramSet name="params">

        <flatVocabParam name="epitopes_confidence"
                        prompt="Confidence"
                        help="Epitopes are assigned a confidence level when they are mapped to genes in PlasmoDB.  Choose one or more assigned confidence levels to search for epitopes in."
                        multiPick="true"
                        queryRef="VocabQueries.Confidence"/>

        <stringParam name="min_confidence"
                     prompt="Minimum Confidence"
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="0.9"/>

        <stringParam name="max_confidence"
                     prompt="Maximum Confidence"
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="1.0"/>

        <flatVocabParam name="sample"
                     prompt="Expression of :"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.Sample"/>









<flatVocabParam name="cowmanSample"
                     prompt="Study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>

        <flatVocabParam name="diffMeanExpr_reference"
                     prompt="Reference study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>

        <flatVocabParam name="diffMeanExpr_comparitor"
                     prompt="Comparison study"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.cowmanSample"/>




<stringParam name="confidence"
                     prompt="Confidence >= "
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="0.8"/>

<stringParam name="fold_change"
                     prompt="Fold change >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="2"/>

<flatVocabParam name="regulated_dir"
                     prompt="Direction"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.regulated_dir"/>

<!-- april 26, 2007 cristina, for toxo genesbyexpression percentile -->
<flatVocabParam name="exprnsample"
                     prompt="Expression of :"
                     help="Select ..."
                     multiPick="false"
                     queryRef="VocabQueries.ExprnSample"/>



<stringParam name="major_allele_max"
                     prompt="Frequency of major allele &lt;= "
                     help="Upper Bound on the number of strains that have the major allele"
                     default="20"/>

      <stringParam name="major_allele_min"
                     prompt="Frequency of major allele >= "
                     help="Lower Bound on the number strains that have the major allele"
                     default="1"/>

      <stringParam name="minor_allele_max"
                     prompt="Frequency of minor allele &lt;= "
                     help="Upper Bound on the number of strains that have the minor allele"
                     default="20"/>

      <stringParam name="minor_allele_min"
                     prompt="Frequency of minor allele >= "
                     help="Lower Bound on the number of strains that have the minor allele"
                     default="1"/>



<stringParam name="snp_id"
                     prompt="SNP ID"
                     help="Enter an SNP ID"
                     sample="CombinedSNP.MAL11.3000, WTSI_PFAL.GHANA1.0.MAL10.1384630.1384630.0"
                     substitute="yes"
                     default="CombinedSNP.MAL11.3000"/>

 <stringParam name="min_sigp_sum_score"
                     prompt="Minimum SignalP conclusion score"
                     help="SignalP provides four scores and a conclusion for each such that the conclusion  is 1 if the score meets a certain criteria and 0 otherwise.  The SignalP summary conclusion is the sum of the four conclusions generated by SignalP, thus four is the highest score possible.  We consider a summary conclusion score of three to be significant"
                     substitute="yes"
                     default="3"/>

<flatVocabParam name="inNotIn"
                     prompt="EST"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.inNotIn"/>


<stringParam name="min_percent_identity"
                     prompt="Minimum percent identity"
                     default="90"
                     help='You can specify a minimum percent identity of the alignment between the EST and genomic DNA.  We only store alignments with >= 90% identity'/>

        <stringParam name="min_percent_est_aligned"
                     prompt="Minimum percentage of EST bases aligned"
                     default="20"
                     help='Enter the minimum percentage of bases in the EST sequence that are aligned to genomic DNA in this alignment.'/>



<flatVocabParam name="best_alignment_only"
                     prompt="Best alignments only"
                     help="Select yes to return only those EST alignments that are the best alignment for the EST.  Many of the ESTs align at multiple positions in the genome.  Selecting yes will consider only those alignments that are the best for each EST"
                     multiPick="false"
                     queryRef="VocabQueries.yes_no_list"/>

        <flatVocabParam name="high_confidence_only"
                     prompt="Consistent alignments only"
                     help="Select yes to return only those EST alignments that are consistent.  We define define consistent as having >= 95% identity (the majority have >= 99%) and aligning the EST sequence in a manner that is consistent with a gene model.  Ie, there can be gaps (representing introns) in the target genomic sequence but not in the EST query."
                     multiPick="false"
                     queryRef="VocabQueries.no_yes_list"/>


<stringParam name="libraryId"
                     prompt="EST Library"
                     default="uniZAPCplOWAsporoLib3"
                     help="Select a clone library."/>

<flatVocabParam name="include_only_queries"
		     prompt="Restrict to queries only"
                     help="Click yes to to restrict the results returned to only those genes which have been input as query ids.  This allows you to determine the relatedness of your query set" 
                     multiPick="false"
                     queryRef="VocabQueries.no_yes_list"/>

<stringParam name="min_mutual_information_score"
                     prompt="Minimum mutual information score"
                     help="Enter the minimum mutual information score to report similarities.  The score range is from 0.472 to 1.67"
                     substitute="yes"
                     default="0.47"/>

<stringParam name="min_num_query_matches"
                     prompt="Minimum number of query matches"
                     help="Enter the minimum number of queries you want to match to your genes.  If you input 5 genes ids for your query and enter 5 minimum number of queries then the only genes returned would be ones that all 5 querids match"
                     substitute="yes"
                     default="1"/>


 <datasetParam name="ds_gene_ids"
                     prompt="Gene id input set"
                     help="input a comma delimited set of gene ids, or upload a file"
                     default="cgd6_690"
                     />

<stringParam name="signature" 
                     prompt="User Signature"
                     help="Used to pass the Users Signature to the component sites"
                     visible="false"/>


<stringParam name="stringChromosome" 
                     prompt="Chromosome"
                     help="Used to add default to the plasmo Location Queries"
                     default="chromosome 1"
                     visible="true"/>

<stringParam name="snpChromosome" 
                     prompt="Chromosome"
                     help="Used to add default to the plasmo Location Queries"
                     default="chromosome 1"
                     visible="true"/>

 <flatVocabParam name="asexual_blood_stages_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Asexual blood stages"/>
        <flatVocabParam name="gametocytes_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Gametocytes"/>
        <flatVocabParam name="ookinetes_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Ookinetes"/>
        <flatVocabParam name="oocysts_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Oocysts"/>
        <flatVocabParam name="sporozoites_value"
                     queryRef="VocabQueries.ObservedNotObserved"
                     prompt="Sporozoites"/>


        <flatVocabParam name="mass_spec_stage"
                     prompt="Lifecycle Stage"
                     help="Select a lifecycle stage from the list provided."
                     multiPick="false"
                     queryRef="VocabQueries.MassSpecStage"/>

        <stringParam name="min_seq_coverage"
                     prompt="Minimum Percent Sequence Coverage"
                     help="Use this parameter to set a minimum amount of (amino acid) sequence coverage for the mass spec-predicted peptides. For example, setting this parameter to 10 will return only those genes whose proteins are at least 10% covered by mass spec.-predicted peptides. In the current dataset the average percent coverage is about 9%, and the maximum is about 90%. Note that even if this parameter is set to 0%, only genes with at least some mass spec. predictions for the specified stage will be returned. In other words, it never returns proteins with 0% coverage, only those with strictly > 0%."
                     substitute="yes"
                     default="0"/>

        <stringParam name="min_span_count"
                     prompt="Minimum Number of Spans"
                     help="Use this parameter to set a minimum for the number of nonoverlapping regions (spans) that must be found in the mass spec. data for a gene (and the specified lifecycle stage). Only genes with at least this many spans are returned"
                     substitute="yes"
                     default="2"/>

        <stringParam name="min_spectrum_count"
                     prompt="Minimum Number of Spectra"
                     help="Use this parameter to set a minimum for the number of mass spectra found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment."
                     substitute="yes"
                     default="1"/>


<stringParam name="percentile"
                     prompt="Percentile >="
                     help="" 
                     sample="(Example: )"
                     substitute="yes"
                     default="90"/>


        <flatVocabParam name="day_and_strain"
                     prompt="Day of Gametocytogenesis and Strain"
                     help="Choose one or more strain/day combination"
                     multiPick="true"
                     queryRef="VocabQueries.DayAndStrain"/>

<stringParam name="min_expression_percentile"
                     prompt="Minimum expression percentile"
                     help="Lower bound on expression percentile."
                     default="50"/>

        <stringParam name="max_expression_percentile"
                     prompt="Maximum expression percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="r_min_expression_percentile"
                     prompt="Rings min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="r_max_expression_percentile"
                     prompt="Rings max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="yt_min_expression_percentile"
                     prompt="Young trophs min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="yt_max_expression_percentile"
                     prompt="Young trophs max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="ys_min_expression_percentile"
                     prompt="Young schizont min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="ys_max_expression_percentile"
                     prompt="Young schizont max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

        <stringParam name="ms_min_expression_percentile"
                     prompt="Mature schizont min percentile"
                     help="Lower bound on expression percentile."
                     default="0"/>

        <stringParam name="ms_max_expression_percentile"
                     prompt="Mature schizont max percentile"
                     help="Upper bound on expression percentile."
                     default="100"/>

<flatVocabParam name="waters_profilesets"
                     prompt="Microarray time course(s) to query"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.WatersProfileSets"/>

<!--
 <stringParam name="genomicSequence"
                     prompt="Genomic Sequence"
                     help="ID of genomic sequence to search for genes (e.g. ctg_7202)"
                     sample="(Examples: MAL4, ctg_4094)"/>
-->

<stringParam name="ProfileGeneId"
                     prompt="Gene Id"
                     help="The Gene Id"
                     substitute="yes"
                     default="PF11_0344"/>

        <flatVocabParam name="ProfileDistanceMethod"
                     prompt="Distance Method"
                     help="The method used to calculate the similarity distance"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileDistanceMethod"/>

        <stringParam name="ProfileNumToReturn"
                     prompt="# of Matches"
                     help="The number of genes in the result"
                     substitute="yes"
                     default="50"/>

        <flatVocabParam name="ProfileSearchGoal"
                     prompt="Search Goal"
                     help="The searching goal of the profile similarity query"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileSearchGoal"/>

        <flatVocabParam name="ProfileProfileSet"
                     prompt="Profile Set"
                     help="Choose the expression profile set to search against"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileProfileSet"/>

        <flatVocabParam name="ProfileTimeShift"
                     prompt="Time Shift"
                     help="Whether to allow time shifting or not"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileTimeShift"/>

        <flatVocabParam name="ProfileScaleData"
                     prompt="Scale Result"
                     help="Whether to scale result data into [0..1] or not"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileScaleData"/>

        <flatVocabParam name="ProfileMinShift"
                     prompt="Min Shift"
                     help="The minimum allowed time shift"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileMinShift"/>

        <flatVocabParam name="ProfileMaxShift"
                     prompt="Max Shift"
                     help="The maximum allowed time shift"
                     multiPick="false"
                     queryRef="VocabQueries.ProfileMaxShift"/>











    <flatVocabParam name="profileSet"
                     prompt="Microarray time course(s) to query"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.ProfileSet"/>

   <flatVocabParam name="minOrMax"
                     prompt="Query based on"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.MinOrMax"/>

        <flatVocabParam name="maxExprHour"
                     prompt="Timing of maximal expression"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours48"/>

         <flatVocabParam name="maxPlusMinusHours"
                     prompt="Maximal expression time plus or minus"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours24"/>

        <flatVocabParam name="minExprHour"
                     prompt="Timing of minimum expression"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours48"/>

        <flatVocabParam name="minPlusMinusHours"
                     prompt="Minimum expression time plus or minus"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Hours24"/>

        <flatVocabParam name="inductionFold"
                     prompt="Induction ratio cut-off"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.InductionFold"/>

        <flatVocabParam name="expressionPct"
                     prompt="Maximum percentile cut-off"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Percentile"/>




   <stringParam name="min_exportpred_score"
                     prompt="Minimum ExportPred Score"
                     help="mininum requirement of score by ExportPred algorithm"
                     default="10"/>


   <flatVocabParam name="localization"
                     prompt="Localization"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Localization"/>

  
   <flatVocabParam name="snp_strain_a"
		     prompt="Reference"
                     help="Choose a reference from the list of strains.  Strains below the line were sequenced at low or specific coverage"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainA"/>

   <flatVocabParam name="snp_strain_b"
		     prompt="Comparator"
                     help="Choose a comparator from the list to compare to your reference.  Strains below the line were sequenced at low or specific coverage"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStrainB"/>

 <flatVocabParam name="snp_strain_m"
		     prompt="Comparator(s)"
                     help="Choose a comparator(s) from the list to compare to your reference.  Strains below the line were sequenced at low or specific coverage"
                     multiPick="true"
                     queryRef="VocabQueries.SnpStrainB"/>

   <flatVocabParam name="snp_stat"
		     prompt="SNP Class"
                     help="Choose the class of SNP you want to query on ... choose minumum and maximum numbers below"
                     multiPick="false"
                     queryRef="VocabQueries.SnpStat"/>


   <stringParam name="snp_density" 
                     prompt="SNPs per KB (CDS) >= " 
                     help="Find genes containing a density of coding snps > this parameter. Density is expressed in number of snps / KB of coding sequence" 
                     default="0"/>

    <stringParam name="occurrences_upper" 
                     prompt="Number of SNPs of above class &lt;= " 
                     help="Upper Bound on the number of SNPs of the selected class" 
                     default="1000"/>

    <stringParam name="occurrences_lower" 
                     prompt="Number of SNPs of above class >= " 
                     help="Lower Bound on the number of SNPs of the selected class" 
                     default="0"/>


   <stringParam name="dn_ds_ratio_upper" 
                     prompt="Non-synonymous / synonymous SNP ratio &lt;= " 
                     help="Upper Bound on the ratio of non-synonymous to synonymous coding snps" 
                     default="100"/>

      <stringParam name="dn_ds_ratio_lower" 
                     prompt="Non-synonymous / synonymous SNP ratio >= " 
                     help="Lower Bound on the ratio of non-synonymous to synonymous coding snps"
                     default="0"/>



   <flatVocabParam name="mr4_reagent_type"
                     prompt="Reagent Type"
                     help="Choose a reagent type"
                     multiPick="false"
                     queryRef="VocabQueries.Mr4Reagents"/>



    <stringParam name="min_interaction"
                     prompt="Minimum Likelihood Score"
                     help="Set a minimum for the likelihood of interaction"
                     substitute="yes"
                     default="2"/>


    <flatVocabParam name="bait_or_prey"
                     prompt="Specified protein is bait or prey"
                     help="Optionally specifiy whether given protein is bait or prey"
                     multiPick="false"
                     queryRef="VocabQueries.BaitOrPrey"/>

    <stringParam name="min_observed"
                     prompt="Restrict by the minimum number of times this interaction was found"
                     help="Restrict by the minimum number of times this interaction was found"
                     default="0"/>

    <stringParam name="min_searches"
                     prompt="Restrict by the minimum number of searches that found this interaction"
                     help="Restrict by the minimum number of searches that found this interaction"
                     default="0"/>



    <flatVocabParam name="metabolic_pathway"
                     prompt="Metabolic Pathway"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.MetabolicPathways"/>


    <stringParam name="max_results"
                     prompt="Maximum number of results"
                     help="Upper limit on the number of results returned by the query"
                     default="5"/>



     <stringParam name="pvalue_cutoff"
                     prompt="BLAST P-value less than 10 to the"
                     help="Only consider BLAST similarities with a P-value less than ten to the given power."
                     substitute="yes"
                     default="-20"/>

     <flatVocabParam name="clades"
                     prompt="PDB Proteins from"
                     help="Select one or more clades."
                     multiPick="true"
                     queryRef="VocabQueries.Clades"/>

     <stringParam name="min_coil"
                     prompt="Minimum percent coil"
                     help="Choose a lower bound on the coil percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of coil will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_coil"
                     prompt="Maximum percent coil"
                     help="Choose a upper bound on the coil percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of coil will be returned."
                     substitute="yes"
                     default="100"/>

        <stringParam name="min_strand"
                     prompt="Minimum percent strand"
                     help="Choose a lower bound on the strand percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of strand will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_strand"
                     prompt="Maximum percent strand"
                     help="Choose a upper bound on the strand percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of strand will be returned."
                     substitute="yes"
                     default="100"/>

        <stringParam name="min_helix"
                     prompt="Minimum percent helix"
                     help="Choose a lower bound on the helix percentage.  Only genes coding for proteins whose secondary structure contains at least this percentage of helix will be returned."
                     substitute="yes"
                     default="0"/>

        <stringParam name="max_helix"
                     prompt="Maximum percent helix"
                     help="Choose a upper bound on the helix percentage.  Only genes coding for proteins whose secondary structure contains no more than this percentage of helix will be returned."
                     substitute="yes"
                     default="100"/>


         <stringParam name="min_isoelectric_point"
                     prompt="Min Isoelectric Point"
                     help="Lower bound for the protein isoelectric point"
                     default="6"/>

        <stringParam name="max_isoelectric_point"
                     prompt="Max Isoelectric Point"
                     help="Upper bound for the protein isoelectric point"
                     default="10"/>


        <stringParam name="start_point"
                     prompt="Start Location"
                     help="Select the distance (in nucleotides) to the start"
                     substitute="yes"
                     default="1"/>
        
        <flatVocabParam name="start_from"
                     prompt="From"
                     help="Select whether to measure the start point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd"
                     default="beginning"/>

        <stringParam name="end_point"
                     prompt="End Location (0 = end)"
                     help="Select the distance (in nucleotides) to the end"
                     substitute="yes"
                     default="0"/>

        <flatVocabParam name="end_from"
                     prompt="From"
                     help="Select whether to measure the end point from the beginning or end of the sequence"
                     multiPick="false"
                     queryRef="VocabQueries.WhichEnd2" 
                     default="end"/>

        <flatVocabParam name="pfNonnuclearSequence"
                     prompt="Genomic Sequence"
                     help=""
                     multiPick="true"
                     queryRef="VocabQueries.PfNonnuclearSequence"/>

        <flatVocabParam name="chromosome"
                     prompt="Chromosome"
                     help=""
                     multiPick="false"
                     queryRef="VocabQueries.Chromosome"/>

        <stringParam name="max_centromere_distance"
                     prompt="Maximum Distance from Centromere"
                     help="Enter an upper bound on the distance"
                     substitute="yes"
                     default="10000"/>

        <stringParam name="distanceFromTelomere"
                     prompt="Maximum Distance from Centromere"
                     help="Enter an upper bound on the distance"
                     substitute="yes"
                     default="30000"/>

        <stringParam name="projectId" 
                     prompt="the project identifier" 
                     default="plasmodb"
                     help="Project Id" />
        
        <!-- params.primaryKey -->
        <stringParam name="primaryKey" 
                     prompt="Primary Key"
                     default="PFI0735c"
                     help="primary key"/>
       
        <flatVocabParam name="Project" 
                        prompt="Project Information" 
                        help="The information of each GUS instance" 
                        queryRef="VocabQueries.Project"/>

 
        <!-- params.locus_tag -->
        <stringParam name="locus_tag" 
                     prompt="Gene ID" 
                     help="Enter the identifier for the gene in which you are interested. These IDs  correspond to the locus_tag field of GenBank records submitted by the sequence annotators.  The search is case insensitive. Wild card searches, e.g. ' PF* ', are permitted.  This search would return all annotated genes whose ID starts with PF or pf. " 
                     sample="(Examples: cgd1_1090, Chro.10039, PFI0735c, PY00592, 83.m00004)"
                     substitute="yes"
                     default="PFI0735c"/>

<!-- params.contig used in sequence question -->
        <stringParam name="contig" 
                     prompt="Genomic Sequence ID" 
                     help="Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in this search, i.e. use AAEE* to ask for all &lt;i&gt; C.parvum &lt;/i&gt; contigs." 
                     sample="(Examples: AAEL010000057, AAEE01000009, BX526834)"
                     substitute="yes"
                     default="AAEL01000057"/>
                

<!-- params.genomicSequence, used in genesbylocation -->
        <stringParam name="genomicSequence" 
                     prompt="Genomic Sequence" 
                     help="Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in this search, i.e. use AAEE* to ask for all &lt;i&gt; C.parvum &lt;/i&gt; contigs." 
                     sample="(Examples: AAEL010000057, AAEE01000009, BX526834)"
                     substitute="yes"
                     default="AAEL01000057"/>

                        
        <!-- params.text_expression -->
        <stringParam name="text_expression"
              prompt="Text"
              help="Enter one or more words that will be used to search for a match in the 'Gene Product' or the 'Annotated Notes' fields. Multiple words are matched in order. A partial word may be used, e.g. 'dehydr' will match '&lt;b&gt;dehydr&lt;/b&gt;ogenase'. The '*' character may be used as a wildcard to join multiple words or partial words, e.g. 'red*ase' will find '&lt;b&gt;red&lt;/b&gt;uct&lt;b&gt;ase&lt;/b&gt;' and 'p&lt;b&gt;red&lt;/b&gt;icted lactate dehydrogen&lt;b&gt;ase&lt;/b>'. Letter case is not important, e.g. 'ACTIN' or 'actin' will return the same results."
              sample="(Example: oocyst)"
              substitute="yes"
              default="dehydrogenase"/>
 


       <flatVocabParam name="case_independent"
                     prompt="Ignore capitalization?"
                     help="Use this parameter to control whether to include text that matches except for capitalization (e.g. treat 'DNA', 'Dna', and 'dna' as all equal)."
                     visible="true"
                     queryRef="VocabQueries.lower_yes_no_list"/>

        <flatVocabParam name="datasets"
                     prompt="Fields"
                     help="Choose which text fields to search."
                     visible="true"
                     multiPick="true"
                     queryRef="VocabQueries.TextSearchDatasets"/>
                     


        <flatVocabParam name="whole_words"
                     prompt="Match only whole words?"
                     help="Select whether to reject text matches that start or end in the middle of a word"
                     visible="true"
                     queryRef="VocabQueries.lower_yes_no_list"/>

          <stringParam name="max_pvalue"
                     prompt="Max p-value exponent (BLAST Hits v. NRDB)"
                     help="Only applicable to the 'Similar proteins' field.  Use this to filter away BLAST hits that are below a threshold of significance, so you only search the descriptions of significantly similar proteins."
                     default="-30"/>



        <stringParam name="domain_accession"
              prompt="Domain Accession"
              default="PD001363: RIBOSOMAL S13 RRNA-BINDING RNA-BINDING 30S PROTEOME COMPLETE TRNA-BINDING MITOCHONDRION S13P"
              help='Enter a Pfam accession number (e.g. " PF00246 ") or description (" Zinc carboxypeptidase ") or name (" Peptidase_M14 ") .  Asterisks can be used as wildcard characters in a Pfam description (e.g. " Ribosomal* "). If you use a Pfam description that is not listed, you will have 0 results.'/>

<!-- Nov 9, 2006
         <stringParam name="domain_database"
                     id="domain_database_list"
                     default="PFAM"
                     visible="false"
          /> -->
 <flatVocabParam name="domain_database" 
                     prompt="Domain Database"
                     help=''
                     multiPick="false"
                     queryRef="VocabQueries.DomainDatabase"/>

        <!-- params.pfam_list, not used as a param. for forming list on question page -->
<!--        <flatVocabParam name="pfam_list" 
                     prompt="List of Pfam Term"
                     help=''
                     multiPick="false"
                     visible="false"
                     queryRef="VocabQueries.PfamTermList"/>
-->
                                                                                                                                                            
        <!-- params.ec_number_pattern -->
        <stringParam name="ec_number_pattern"
                     prompt="EC Number"
                     help="Enzyme Commission numbers describe enzymes hierarchically by the class of rections they catalize.  Examples: 2.7.7.6, 3.5.1.31.  Use '-' in place of numbers to denote partial EC Numbers. For example: 2.7.-.-"
                     sample="(Examples: 2.7.7.6, 3.5.1.31)"
                     substitute="yes"
                     default="2.7.7.-"/>


        <stringParam name="go_term"
              prompt="GO Term or GO ID"
              default="catalytic activity"
              help='Enter a GO ID (e.g. "GO:0003824") or GO Term (e.g. "catalytic activity").  The character "*" can be used as wildcard characters in a GO Term
(e.g. "*kinase*")'/>


        <!-- params.ecorganism -->
        <flatVocabParam name="ecorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use. "
              multiPick="true"
              queryRef="VocabQueries.ECOrganisms"/>

  <!-- params.localorganism -->
        <flatVocabParam name="localorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.LocalOrganisms"/>

 <!-- params.pforganism -->
        <flatVocabParam name="pforganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="false"
              queryRef="VocabQueries.PfOrganisms"
              default="Plasmodium falciparum"/>

<!--
        <flatVocabParam name="pf_organism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="false"
              queryRef="VocabQueries.PfOrganisms"
              default="Plasmodium falciparum"/>
-->

 <!-- params.tgorganism -->
        <flatVocabParam name="tgorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="false"
              queryRef="VocabQueries.ToxoOrganisms"
              default="Toxoplasma gondii"/>
 
<!-- params.cryptoorganism -->
        <flatVocabParam name="cryptoorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.CryptoOrganisms"/>

<!-- params.cryptotoxoorganism -->
        <flatVocabParam name="cryptotoxoorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.CryptoToxoOrganisms"/>

 <!-- params.pborganism -->
        <flatVocabParam name="pborganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="false"
              queryRef="VocabQueries.PbOrganisms"
              default="Plasmodium berghei"/>

<!-- params.plasmotoxoorganism -->
        <flatVocabParam name="plasmotoxoorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.PlasmoToxoOrganisms"/>

<!-- params.toxopforganism -->
        <flatVocabParam name="toxopforganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.ToxoPfOrganisms"/>

<!-- params.stoxopforganism -->
        <stringParam name="stoxopforganism"
              prompt="Organism"
              visible="false"
              default="Plasmo falciparum"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."/>

<!-- params.plasmoorganism -->
        <flatVocabParam name="plasmoorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.PlasmoOrganisms"/>

        <!-- params.organism -->
        <flatVocabParam name="organism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.Organisms"/>


       <!-- params.nonchorganism -->
        <flatVocabParam name="nonchorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.NonChOrganisms"/>


 <!-- params.seqorganism -->
        <flatVocabParam name="seqorganism"
              prompt="Organism"
              help="You can select one or more organisms by checking the box next to the one(s) that you wish to use."
              multiPick="true"
              queryRef="VocabQueries.SeqOrganisms"/>
       
        <!-- params.rnatype -->
        <flatVocabParam name="rnatype"
                     prompt="Gene Type"
                     help="Select one or more gene types to be displaysed. Gene type assignments are based on the gene annotations from the sequencing centers and official curators."
                     multiPick="true"
                     queryRef="VocabQueries.RNAType"/>

<flatVocabParam name="includePseudogenes"
                     prompt="Include Pseudogenes"
                     help="Choose whether to include pseudogenes in your query results."
                     multiPick="false"
                     default="Yes"
                     queryRef="VocabQueries.IncludePseudogenes"/>


      <!-- params.profile_pattern -->
        <stringParam name="profile_pattern"
                     visible="false"
                     prompt="Profile Pattern"
                     help="Example: '%hsa:N%pfa:Y%'"
                     default="%hsa:N%pfa:Y%"/>
                                                                                                                             
        <!-- params.included_species -->
        <stringParam name="included_species"
                     prompt="Included Species"
                     default="P. falciparum"
                     help="List of included species (for documentation only)"/>
                                                                                                                             
        <!-- params.excluded_species -->
        <stringParam name="excluded_species"
                     prompt="Excluded Species"
                     default="H. sapiens"
                     help="List of excluded species (for documentation only)"/>
                                                                                                                             
        <!-- params.phyletic_indent_map -->
        <flatVocabParam name="phyletic_indent_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticIndentMap"/>
                                                   

        <!-- params.internal_phyletic_indent_map -->
        <flatVocabParam name="internal_phyletic_indent_map"
                     visible="false"
                     queryRef="VocabQueries.ApiDB_PhyleticIndentMap"/>  
                                                                        
        <!-- params.phyletic_term_map -->
        <flatVocabParam name="phyletic_term_map"
                     visible="false"
                     queryRef="VocabQueries.PhyleticTermMap"/>


<!-- params.num_tm_gte -->
        <stringParam name="num_tm_gte"
                     prompt="Minimum Number of Transmembrane Domains"
                     help="Enter a minimum number of predicted transmembrane domains to start your search. The algorithim TMHMM was used to predict putative transmembrane domains on annotated proteins. Proteins may have zero or more transmembrane domains."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>
        <stringParam name="num_tm_lte"
                     prompt="Maximum Number of Transmembrane Domains"
                     help="Enter a maximum number of predicted transmembrane domains to start your search. The algorithim TMHMM was used to predict putative transmembrane domains on annotated proteins. Proteins may have zero or more transmembrane domains."
                     sample="(Example: 5)"
                     substitute="yes"
                     default="5"/>

        <!-- params.lowerMolWtBound -->
        <stringParam name="lowerMolWtBound"
                     prompt="Min Molecular Weight (Daltons)"
                     help="Provide an lower bound, in Daltons, for the molecular weight."
                     sample="(Example: 30000)"
                     substitute="yes"
                     default="30000"/>

        <!-- params.upperMolWtBound -->
        <stringParam name="upperMolWtBound"
                     prompt="Max Molecular Weight (Daltons)"
                     help="Provide an upper bound, in Daltons, for the molecular weight."
                     sample="(Example: 40000)"
                     substitute="yes"
                     default="40000"/>

        <stringParam name="start_location"
                     prompt="Start Location"
                     help="Lower bound on nucleotide range to search for gene"
                     default="1"/>
                                                                                                                             
        <stringParam name="end_location"
                     prompt="End Location (0 = end)"
                     help="Upper bound on nucleotide range to search for gene.  Use 0 to search to end of sequence."
                     default="0"/>

      




<!-- BLAST AND MOTIF PARAMS -->

        <flatVocabParam name="BlastQueryType"
                        id="BlastQueryType"
                        prompt="BLAST input sequence type"
                        help="The type of the query sequence (eg. DNA, protein)"
                        multiPick="false"
                        queryRef="VocabQueries.BlastQueryType"/>
                                                                                      
        <flatVocabParam name="BlastDatabaseTypeGene"
                        id="BlastDatabaseTypeGene"
                        prompt="BLAST target database type"
                        help="The type of the target database (eg CDS, translated CDS, Protein)"
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseTypeGene"/>
                                                                                      
        <flatVocabParam name="BlastDatabaseTypeGenome"
                        id="BlastDatabaseTypeGenome"
                        prompt="BLAST target database type"
                        help="The type of the target database (eg Genome)"
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseTypeGenome"/>

        <flatVocabParam name="BlastDatabaseTypeEST"
                        id="BlastDatabaseTypeEST"
                        prompt="BLAST target database type"
                        help="Select the type of database your want to search."
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseTypeEST"/>
        
        <flatVocabParam name="BlastDatabaseTypeORF"
                        id="BlastDatabaseTypeORF"
                        prompt="BLAST target database type"
                        help="Select the type of database your want to search."
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseTypeORF"/>


        <flatVocabParam name="BlastDatabaseOrganism"
                        id="BlastDatabaseOrganism"
                        prompt="BLAST target database organism"
                        help="Organism(s) from which the sequences in the BLAST database originated"
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseOrganism"/>


        <flatVocabParam name="BlastDatabaseOrganismGenomics"
                        id="BlastDatabaseOrganismGenomics"
                        prompt="BLAST target database species"
                        help="Select the species from which the sequences in the target database originated."
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseOrganismGenomics"/>

        <flatVocabParam name="BlastDatabaseOrganismEST"
                        id="BlastDatabaseOrganismEST"
                        prompt="BLAST target database species"
                        help="Select the species from which the sequences in the target database originated."
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseOrganismEST"/>
        
        <flatVocabParam name="BlastDatabaseOrganismORF"
                        id="BlastDatabaseOrganismORF"
                        prompt="BLAST target database species"
                        help="Select the species from which the sequences in the target database originated"
                        multiPick="false"
                        queryRef="VocabQueries.BlastDatabaseOrganismORF"/>




        <stringParam name="BlastQuerySequence"
                      id="BlastQuerySequence"
                     prompt="BLAST input sequence"
                     help="Blast Input Sequence"
                     length="4000"
                     default="GGATTACCTTTTGATGCATCAGAAGAAGAAATAAAAAATTTCTTTAGAGATTTCCAATTAACAAAAC"
                     sample="GGATTACCTTTTGATGCATCAGAAGAAGAAATAAAAAATTTCTTTAGAGATTTCCAATTAACAAAAC"/>
                             

                               
<!-- params.-filter -->
        <flatVocabParam name="-filter"
            id="-filter"
            prompt="Low complexity filter"
            queryRef="VocabQueries.Filter"
            help="Set the low complexity filter.  WUBLAST's default behavior is not to use this filter. NCBIBLAST's is to use it. When filter is set to 'yes' WUBLAST uses seg; NCBIBLAST uses dust for blastn, seg otherwise."
            default="yes"/>
                          
                                                                                      
        <stringParam name="-e"
                     id="-e"
                     prompt="Expectation value (E)"
                     help="Expected number of hits by chance"
                     default="0.05"
                     sample="1e-10"/>
                                                                                      
        <stringParam name="-v"
                     id="-v"
                     prompt="Maximum descriptions (V)"
                     help="Number of one-line descriptions to show"
                     default="50"/>
                                                                                      
        <stringParam name="-b"
                     id="-b"
                     prompt="Maximum alignments (B)"
                     help="Number of alignments to show"
                     default="50"/>

 
        <flatVocabParam name="Dataset"
                        id="Dataset"
                        prompt="Dataset"
                        help="Choose one or more datasets to search with the given motif"
                        multiPick="true"
                        queryRef="VocabQueries.MotifDataset"/>
        
        
        <flatVocabParam name="DatasetGene"
                        id="Dataset"
                        prompt="Gene Dataset"
                        help="Choose one or more datasets to search with the given motif"
                        multiPick="true"
                        queryRef="VocabQueries.MotifDatasetGene"/>
        
        <flatVocabParam name="DatasetORF"
                        id="Dataset"
                        prompt="ORF Dataset"
                        help="Choose one or more datasets to search with the given motif"
                        multiPick="true"
                        queryRef="VocabQueries.MotifDatasetORF"/>
        

        <stringParam name="Expression"
                     id="Expression"
                     prompt="Pattern"
                     help="Enter a Perl regular expression describing the desired motif.  Example: 'CC6+RK' searches for two consecutive cysteine residues followed by a stretch of hydrophobic amino acids followed by the aminoacids arginine and lysine."
                     sample="(Example: CC6+RK)"
                     default="CC6+RK"/>
           
             <!-- params.num_exons_gte -->
        <stringParam name="num_exons_gte"
                     prompt="Exon Count >="
                     help="Enter a minimum of exons per gene for which you would like to search. The gene exon counts are based on the gene annotations from the sequencing centers and official curators.Which genes in &#60;i&#62; Plasmodium &#60;/i&#62; are annotated as containing introns? One easy way to do this search is to look for genes with more than one annotated exon."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="2"/>


               <stringParam name="num_exons_lte"
                     prompt="Exon Count &lt;="
                     help="Enter a maximum number of exons you would like to search for as an integer, e.g. '3'."
                     sample="(Example: 2)"
                     substitute="yes"
                     default="20"/>


        <!-- params.bp_overlap_gte -->
        <stringParam name="bp_overlap_gte"
                     prompt="Minimum Base Overlap"
                     help="Enter minimum cutoff of EST and gene overlap. Genes having sequence overlap of at least this length with one or more ESTs will be returned. Useful lengths of sequence overlap between an EST sequence and a predicted gene sequence are usually 50nt or greater. "
                     sample="(Example: 100)"
                     substitute="yes"
                     default="100"/>


<historyParam name="historyId"
                     readonly="true"
                     prompt="History ID"
                     help="The number in the left column of My Query History"/>


<!-- april 26 cristina: next three are for genes by mass spec crypto -->
  <!-- params.min_sequence_count -->
        <stringParam name="min_sequence_count"
                     prompt="Minimum Number of&lt;br&gt;Unique Peptide Sequences"
                     help="Use this parameter to set a minimum for the number of unique peptide sequences found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment."
                     substitute="yes"
                     default="1"/>

        <!-- params.min_spectrum_count , already above -->

 <!-- params.ms_assay for crypto/toxo orfsbymassspec -->
        <flatVocabParam name="ms_assay" 
                     prompt="Assay Type"
                     help=''
                     multiPick="true"
                     visible="true"
                     queryRef="VocabQueries.MsAssay"/>


        <!-- params.c_ms_assay for crypto genesbymassspec -->
        <flatVocabParam name="c_ms_assay" 
                     prompt="Assay Type"
                     help=''
                     multiPick="true"
                     visible="true"
                     queryRef="VocabQueries.CMsAssay"/>

<!-- params.tg_ms_assay -->
        <flatVocabParam name="tg_ms_assay" 
                     prompt="Assay Type"
                     help=''
                     multiPick="true"
                     visible="true"
                     queryRef="VocabQueries.TgMsAssay"/>



    </paramSet>

<paramSet name="SrtParams">
<!-- SrtParams.genes_ids -->
        <stringParam name="genes_ids"
            id="genes_ids"
            prompt="Gene IDs"
            help="Gene IDs."
            default="cgd5_1020 Chro.60251"/>

<!-- SrtParams.contigs_ids -->
        <stringParam name="contigs_ids"
            id="contigs_ids"
            prompt="Contig IDs"
            help="Contig IDs."
            default="AAEL01000057"/>

<!-- SrtParams.orfs_ids -->
        <stringParam name="orfs_ids"
            id="orfs_ids"
            prompt="ORFs IDs"
            help="ORF IDs."
            default="AAEE01000001-3-285318-285470"/>

</paramSet>
<!-- ////////// END  PARAMETERS //////////// -->




<!-- //////////   XMLQUESTIONS  //////////// -->
    <xmlQuestionSet name="XmlQuestions"
                 displayName="Data contents from XML data sources">

        <description>
          Data contents from XML data sources
        </description>

        <xmlQuestion name="News"
                  displayName="ApiDB.org News"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="apidbNews.xml">
            <description>
                Retrieve news from XML data source
            </description>
        </xmlQuestion>

        <xmlQuestion name="NewsRss"
                  displayName="ApiDB News"
                  recordClassRef="XmlRecordClasses.NewsRecord"
                  xmlDataURL="apidbNews.xml">
            <description>
                News as RSS Feed
            </description>
        </xmlQuestion>

<xmlQuestion name="Tutorials"
                  displayName="Tutorials"
                  recordClassRef="XmlRecordClasses.TutorialsRecord"
                  xmlDataURL="tutorials.xml">
            <description>
                Tutorials.
            </description>
        </xmlQuestion>



    </xmlQuestionSet>


    <!-- xml record class set -->
    <xmlRecordClassSet name="XmlRecordClasses">

<xmlRecordClass
        	name="TutorialsRecord"
        	type="Tutorial"
        	idPrefix="Tut."
        	delimiter="@">
            <xmlAttribute name="title"/>
            <xmlAttribute name="description"/>
            <xmlAttribute name="projects"/>
            <xmlAttribute name="fileName"/>
            <xmlAttribute name="duration"/>
            <xmlAttribute name="size"/>
        </xmlRecordClass>


        <xmlRecordClass
            name="NewsRecord"
            type="News"
            idPrefix="NEWS."
            delimiter="@">
            <xmlAttribute name="headline"/>
            <xmlAttribute name="date"/>
            <xmlAttribute name="item"/>
            <xmlAttribute name="tag"/>
         </xmlRecordClass>

    </xmlRecordClassSet>

    <groupSet name="paramGroups">
        
        <group name="advancedParams" displayName="Advanced Parameters" displayType="ShowHide">
            <description>
                <![CDATA[
                ]]>
            </description>
        </group>
    </groupSet>



</wdkModel>


