#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile,$extDbSpec,$outFile,$verbose,$dbRefNAFeatureExtDbSpec);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "extDbSpec=s" => \$extDbSpec,
	    "dbRefNAFeatureExtDbSpec=s" => \$dbRefNAFeatureExtDbSpec,
	    "verbose!" => \$verbose,
	    "outfile=s" => \$outFile);



print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

my $extDbRlsId = getDbRlsId($extDbSpec);

my $dbRefNAFeatureExtDbRls;

if($dbRefNAFeatureExtDbSpec){

    my @dbRefNAFeatureExtDbSpecList = split(/,/, $dbRefNAFeatureExtDbSpec);

    foreach my $db (@dbRefNAFeatureExtDbSpecList){

	$dbRefNAFeatureExtDbRls .= getDbRlsId($db).",";

    }

    $dbRefNAFeatureExtDbRls =~ s/(,)$//g;
}

my $sql = "select source_id,na_feature_id from dots.genefeature where external_database_release_id = $extDbRlsId";

my $stmt1 = $dbh->prepareAndExecute($sql);

my %genes;

while(my ($sourceId,$naFeatId) = $stmt1->fetchrow_array()) {
  $genes{$sourceId}->{'nafeat'} = $naFeatId;
}

$sql = "select ng.name from dots.nagene ng,dots.nafeaturenagene nn where nn.na_feature_id = ? and ng.na_gene_id = nn.na_gene_id";

$sql .= " union select df.primary_identifier from SRes.DbRef df, DoTS.DbRefNAFeature dfnf where dfnf.db_ref_id=df.db_ref_id and df.primary_identifier is not null and df.external_database_release_id in ($dbRefNAFeatureExtDbRls) and dfnf.na_feature_id =?" if ($dbRefNAFeatureExtDbRls);

my $stmt2 = $dbh->prepare($sql);


foreach my $sourceId (keys %genes) {
    
    if ($dbRefNAFeatureExtDbRls){
	$stmt2->execute($genes{$sourceId}->{'nafeat'},$genes{$sourceId}->{'nafeat'});
    }else{
	$stmt2->execute($genes{$sourceId}->{'nafeat'});
    }

  while(my ($name) = $stmt2->fetchrow_array()){
    push(@{$genes{$sourceId}->{'aliases'}},$name);
  }
}

open(OUT,">$outFile"); 

foreach my $sourceId (keys %genes) {
  next  unless($genes{$sourceId}->{'aliases'});
  my $line = join("\t",$sourceId,@{$genes{$sourceId}->{'aliases'}});
  print OUT "$line\n";
}

sub getDbRlsId {

  my ($extDbRlsSpec) = @_;

  my ($extDbName, $extDbRlsVer) = &getExtDbInfo($extDbRlsSpec);

  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($extDbName,$extDbRlsVer);

  my ($extDbRlsId) = $stmt->fetchrow_array();

  return $extDbRlsId;
}

sub getExtDbInfo {
  my ($extDbRlsSpec) = @_;
  if ($extDbRlsSpec =~ /(.+)\|(.+)/) {
    my $extDbName = $1;
    my $extDbRlsVer = $2;
    return ($extDbName, $extDbRlsVer);
  } else {
    die("Database specifier '$extDbRlsSpec' is not in 'name|version' format");
  }
}


