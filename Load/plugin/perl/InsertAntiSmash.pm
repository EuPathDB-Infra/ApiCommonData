package ApiCommonData::Load::Plugin::InsertAntiSmash;
use lib "$ENV{GUS_HOME}/lib/perl";
@ISA = qw(GUS::PluginMgr::Plugin);

use strict;
use warnings;
use JSON;
use IO::Zlib;
use Bio::Tools::GFF;
use GUS::PluginMgr::Plugin;
use GUS::Supported::Util;
use GUS::Model::ApiDB::antiSmashCluster;
use GUS::Model::ApiDB::antiSmashFeatures;
use Data::Dumper;
use ApiCommonData::Load::AnalysisConfigRepeatFinder qw(displayAndBaseName);

sub getArgsDeclaration {
    my $argsDeclaration  =
            
       [   

        fileArg({ name => 'gffFile',
                     descr => 'gff file generated by talon',
                     constraintFunc=> undef,
                     reqd  => 1,
                     isList => 0,
                     mustExist => 1,
                     format=>'Text',
                   }), 
        fileArg({ name => 'analysisConfig',
                     descr => 'analysisConfig used for the analysis of the dataset',
                     constraintFunc=> undef,
                     reqd  => 1,
                     isList => 0,
                     mustExist => 1,
                     format=>'Text',
                   }), 
        stringArg({name => 'extDbSpec',
                     descr => 'External database from whence this data came|version',
                     constraintFunc=> undef,
                     reqd  => 1,
                     isList => 0
             })
        ];

    return $argsDeclaration;
}


sub getDocumentation {

    my $description = <<NOTES;
Load long read RNA seq transcript read counts obtained from talon.
NOTES

        my $purpose = <<PURPOSE;
Load long transcripts gene isoforms and read count determine by talon.
PURPOSE

        my $purposeBrief = <<PURPOSEBRIEF;
Load long read RNA seq transcripts counts.
PURPOSEBRIEF

        my $syntax = <<SYNTAX;
SYNTAX

        my $notes = <<NOTES;
NOTES

        my $tablesAffected = <<AFFECT;
ApiDB.longreadtranscript
AFFECT

        my $tablesDependedOn = <<TABD;
TABD

        my $howToRestart = <<RESTART;
There are no restart facilities for this plugin
RESTART

        my $failureCases = <<FAIL;
FAIL

        my $documentation = {purpose=>$purpose, purposeBrief=>$purposeBrief,tablesAffected=>$tablesAffected,tablesDependedOn=>$tablesDependedOn,howToRestart=>$howToRestart,failureCases=>$failureCases,notes=>$notes};

    return ($documentation);
}

sub new {
    my $class = shift;
    my $self = {}; 
    bless($self, $class);
        
    my $documentation = &getDocumentation();
        
    my $args = &getArgsDeclaration();
        
    $self->initialize({requiredDbVersion => 4.0,
                       cvsRevision => '$Revision$',
                       name => ref($self),
                       argsDeclaration   => $args,
                       documentation     => $documentation
                      }); 
    return $self;
}

