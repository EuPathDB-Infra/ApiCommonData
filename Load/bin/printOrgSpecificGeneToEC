#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

#########################################################################################################################################################################
## script to parse file downloaded from Uniprot using 
## wget --output-document=file --content-disposition "www.uniprot.org/uniprot/?query=taxonomy%3a5811+AND+keyword%3a181&force=yes&format=tab&columns=id,genes,organism,ec"
## script creates two column tab delimited file: gene(locus tag) and EC number, file is specific to the organism indicated by orgAbbrev
#########################################################################################################################################################################

my ($gusConfigFile,$inFile,$outFile,$orgAbbrev,$verbose);
 &GetOptions("gusConfigFile=s" => \$gusConfigFile,
 	    "verbose!" => \$verbose,
 	    "outfile=s" => \$outFile,
 	    "infile=s" => \$inFile,
            "orgAbbrev=s" => \$orgAbbrev);

die "printOrgSpecificGeneToECFile --infile --outfile --orgAbbrev" unless ($outFile && $inFile && $orgAbbrev);

print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

open(FILE,$inFile);

open(OUT,">$outFile");

my ($taxonId) = getTaxonId($orgAbbrev, $dbh);

my $genes = getLocusTags($taxonId);

parseInputAndPrint($genes);

sub getTaxonId {
  my ($abbrev, $dbh) = @_;

  my $stmt = $dbh->prepare("select taxon_id from apidb.organism where abbrev = ?");

  $stmt->execute($abbrev);

  my ($taxonId) = $stmt->fetchrow_array();

  return $taxonId;
}

# get all gene source_ids and previous and alternate IDs, to compare against uniprot
sub getLocusTags {
  my ($taxonId) = @_;

  my %genes;

  my $stmt = $dbh->prepare("select gf.source_id from dots.genefeature gf, dots.nasequence na where na.taxon_id = ? and na.na_sequence_id = gf.na_sequence_id");

  $stmt->execute($taxonId);

   while (my ($sourceId) = $stmt->fetchrow_array()){
     $genes{$sourceId} = 1;
   }

  my $sql = "select d.primary_identifier
from sres.dbref d, dots.dbrefnafeature dnf, sres.externaldatabaserelease dbr, dots.genefeature gf, dots.nasequence na 
where d.external_database_release_id = dbr.external_database_release_id 
and dbr.id_type in ('previous_id','alternate_id') 
and d.db_ref_id = dnf.db_ref_id 
and dnf.na_feature_id = gf.na_feature_id 
and gf.na_sequence_id = na.na_sequence_id 
and na.taxon_id = ?";

   my $stmt2 = $dbh->prepare($sql);

   $stmt2->execute($taxonId);

   while (my ($primaryId) = $stmt2->fetchrow_array()){
     $genes{$primaryId} = 1;
   }

  return \%genes;

}


sub parseInputAndPrint {
  my ($genes) = @_;

  while(<FILE>){
    chomp;

    my $tags;

    my $ec;

    my @line = split(/\t/, $_);

    if ($line[3] && $line[1] !~ /Gene/ && $line[1] !~ /names/){

      $tags = getTags(\@line);

      $ec = getECNums(\@line);
    }
    printFile($tags,$ec,$genes);
  }
}

sub getTags {
  my ($line)= @_;

  my @tags = split(/\s/,@$line->[1]);

  return \@tags;

}

sub getECNums {
  my ($line)= @_;

  my @ec = split(/\;\s*/,@$line->[3]);

  return \@ec;

}

sub printFile {
  my ($tags,$ec, $genes) = @_;

  foreach my $tag (@$tags){
    if (%$genes->{$tag} == 1){
      foreach my $ecNum (@$ec){
	print OUT "$tag\t$ecNum\n";
      }
    }
  }
}



