#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use FileHandle;
use Data::Dumper;
use HTTP::Date;
use DBI;
use Bio::SeqFeature::Tools::Unflattener;
use Bio::Tools::GFF;
use Bio::Seq::RichSeq;
use GUS::Supported::SequenceIterator;
use Bio::DB::GFF::Aggregator;


my ($date, ) = split(" ", HTTP::Date::time2iso());

$date = join("",split(/-/,$date)); 


my ($verbose, $help, $inFileDir, $outDir, $outFilePrefix, $outFileSuffix,$dbxrefFeature, $idQualifier, $parentFeature, $parentQualifier, $dbxrefQualifier, $format, $seqFileExtension,$gff2GroupTag,$dbxrefType);

my $append = 0;

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'fileOrDir=s' => \$inFileDir,
            'fileExt=s'  => \$seqFileExtension,
            'output_file_prefix=s' => \$outFilePrefix,
            'output_file_suffix=s' => \$outFileSuffix,
            'output_dir=s' => \$outDir,
	    'dbxreffeatid_qualifier=s'       =>  \$idQualifier,
 	    'geneid_qualifier=s'       =>  \$parentQualifier,
 	    'feat_with_geneid=s'       =>  \$parentFeature,
	    'feat_with_dbxref=s'       => \$dbxrefFeature,
	    'dbxref_qualifier=s'       => \$dbxrefQualifier,
	    'format=s'         => \$format,
            'append'          => sub {$append = 1},
            'gff2GroupTag=s' => \$gff2GroupTag,	
            
           );


&usage() if($help);
&usage("Missing Argument") unless(defined $inFileDir && $outFilePrefix && $format && $idQualifier && $dbxrefQualifier && $dbxrefFeature && $outDir);


my %outFileHash;

my %dbxrefFhHash;

if($outFileSuffix){
    my $outFile = "${outDir}/${outFilePrefix}_${outFileSuffix}.txt" ;

    $outFileHash{$outFileSuffix} = $outFile;
}



my @inputFiles = &getInputFiles($inFileDir,$seqFileExtension);


my %parentIDHash;



foreach my $inFile (@inputFiles){

    my $in;
    if ($format =~ m/^gff([2|3])$/i) {

	$in = &convertGFFStreamToSeqIO($inFile,$1,$gff2GroupTag);
    }else{
	$in  = Bio::SeqIO->new(-file => $inFile , '-format' => $format) or die("Could not open $inFile for reading\n");
    }



while ( my $seq = $in->next_seq() ) {
  if(!($seq->molecule =~ /rna/i)){


	foreach my $feature ($seq->all_SeqFeatures){
#	    print $feature->primary_tag()."\t$parentFeature\n";

	    if(!($parentFeature)){
		$parentFeature = $dbxrefFeature;
		$parentQualifier = $idQualifier;
	    }

	  if($feature->primary_tag eq $parentFeature){
	    my $parentId;
	    if ($feature->has_tag($parentQualifier)){
	      foreach my $value ($feature->get_tag_values($parentQualifier)){
		  $parentId = $value;

		  $parentId = &trimIds($parentId);

	      }

	      my @children;

	      if($parentFeature eq $dbxrefFeature){
		  push(@children,$feature);
		  $parentIDHash{$parentId}->{flag} = 0;
	      }else{
		  @children = $feature->get_SeqFeatures;
	      }


	      foreach my $child (@children){

		  if($child->primary_tag eq $dbxrefFeature){

		      if($parentIDHash{$parentId}->{count} >= 1){

			  $parentIDHash{$parentId}->{count} = $parentIDHash{$parentId}->{count} + 1;
			  $parentIDHash{$parentId}->{flag} = 1;
		      }else{

			  $parentIDHash{$parentId}->{count} = 1;
			  $parentIDHash{$parentId}->{flag} = 0;
		      }
		  }

		  if(!($outFileSuffix)){
		      if($child->has_tag($dbxrefQualifier)){
		      
			  my (@tagValuePairs) = $child->get_tag_values($dbxrefQualifier);
			  
			  foreach my $tagValuePair (@tagValuePairs){
			      
			      my($type,@ids) = split(/\:/,$tagValuePair);
			      $type = &trim($type);
			      $type =~ s/\//\-/;
			      $outFileHash{lc($type)} = "${outDir}/${outFilePrefix}_".lc($type).".txt";
			  }
		      }

		  }
	      }

	  }
	}

      }
    }
}

}


foreach my $type (keys %outFileHash){

    $dbxrefFhHash{$type} = FileHandle->new();

    if($append){
	$dbxrefFhHash{$type}->open(">>${outDir}/${outFilePrefix}_${type}.txt") or die("Could not open ${outDir}/${outFilePrefix}_${type}.txt for writing");
    }else{
	$dbxrefFhHash{$type}->open(">${outDir}/${outFilePrefix}_${type}.txt") or die("Could not open ${outDir}/${outFilePrefix}_${type}.txt for writing");
    }
}

foreach my $inFile (@inputFiles){

    my $in;
    if ($format =~ m/^gff([2|3])$/i) {

	$in = &convertGFFStreamToSeqIO($inFile,$1,$gff2GroupTag);
    }else{
	$in  = Bio::SeqIO->new(-file => $inFile , '-format' => $format) or die("Could not open $inFile for reading\n");
    }


while ( my $seq = $in->next_seq() ) {
  if(!($seq->molecule =~ /rna/i)){
	foreach my $feature ($seq->all_SeqFeatures){

	    if(!($parentFeature)){
		$parentFeature = $dbxrefFeature;
		$parentQualifier = $idQualifier;
	    }
	  if($feature->primary_tag eq $parentFeature){
	    my $parentId;
	    if ($feature->has_tag($parentQualifier)){
	      foreach my $value ($feature->get_tag_values($parentQualifier)){
		  $parentId = $value;

		  $parentId = &trimIds($parentId);

	      }

	      my @children;
	      if($parentFeature eq $dbxrefFeature){
		  push(@children,$feature);
		  $parentIDHash{$parentId}->{flag} = 0;
	      }else{
		  @children = $feature->get_SeqFeatures;
	      }

	      my $transcriptCtr = 0;
	      foreach my $child (@children){
		  if($child->primary_tag eq $dbxrefFeature){

		      $transcriptCtr++;

		      if($parentIDHash{$parentId}->{flag} == 1){
			  my ($id) = $child->get_tag_values($idQualifier) if $child->has_tag($idQualifier);
			  my (@dbxrefs) = $child->get_tag_values($dbxrefQualifier) if $child->has_tag($dbxrefQualifier);
			  
			  $id = &trimIds($id);

			  if($id eq $parentId){
			      $id .= "\.$transcriptCtr";
			  }
			  foreach my $dbxref (@dbxrefs){
			      $dbxref = &trim($dbxref);
			      if($dbxref ne ""){
		      
				  my($type,@ids) = split(/\:/,$dbxref);

				  my $dbxrefId = join("\t",@ids);
				  
				  $type = &trim($type);
				  $type =~ s/\//\-/;
				  $dbxrefId = &trimIds($dbxrefId);

				  $dbxrefFhHash{lc($type)}->print("$id\t$dbxrefId\n");
			      }
			  }

			  
		      }else{
			  my (@dbxrefs) = $child->get_tag_values($dbxrefQualifier) if $child->has_tag($dbxrefQualifier);
			  
			  my $id = $parentId;

			  $id = &trim($id);

			  foreach my $dbxref (@dbxrefs){
			      $dbxref = &trim($dbxref);
			      if($dbxref ne ""){
				  my $type;
				  my @ids;
				  my $dbxrefId;

				  if($outFileSuffix){
				      $type = $outFileSuffix;
				      $dbxrefId = $dbxref;

				  }else{
				      ($type,@ids) = split(/\:/,$dbxref);

				      $dbxrefId = join("\t",@ids);
				  }
				  $type = &trim($type);
				  $type =~ s/\//\-/;
				  $dbxrefId = &trimIds($dbxrefId);

				  $dbxrefFhHash{lc($type)}->print("$id\t$dbxrefId\n");
			      }
			  }

		      }
		  }

	      }
	  }

	}
      }

    }
}
}


foreach my $type (keys %dbxrefFhHash){
    $dbxrefFhHash{$type}->close();
}



#-------------------------------------------------------------------------------

sub trim($){
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}


#-------------------------------------------------------------------------------

sub trimIds($){
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	$string =~ s/:pep.*$//g;
	$string =~ s/:mRNA.*$//g;
	$string =~ s/:pseudogenic_transcript.*$//g;
	$string =~ s/;current=false*$//g;

	return $string;
}


#-------------------------------------------------------------------------------

sub usage {
  my ($m) = @_;

  print STDERR "$m\n" if($m);
  my $usage = "usage:  perl makeDbxrefFile \\
--format      <format of the annotation file (genbank, embl, gff)>
--fileOrDir <file or directory to be parsed> \\
[--fileExt  <extension of file in directory>] \\
--output_dir <directory to store output files> \\
--output_file_prefix <output dbxref file(s) prefix> \
[--output_file_suffix <if dbxref type is not specified>] \\
\--feat_with_dbxref <name of the feature in which dbxref is present> \\
--dbxref_qualifier <qualifier for dbxrefs within feat_with_dbxref> \\
--dbxreffeatid_qualifier <qualifier for source ids within feat_with_dbxref (could be gene source id)> \\
[--feat_with_geneid <name of feature containing gene source ids` -only required if dbxref is not in feature >] \\
[--geneid_qualifier <qualifier for gene source ids within feat_with_geneid` -only required if dbxref is not contained in this feature >] \\
[--append' <if dbxref list should be appended to file (boolean)>] \\
[--gff2GroupTag <group tag if gff2 file format>] \\	
[--verbose <boolean-a little extra STDERR out>] \\
--help|h
";
  print STDERR $usage;
  exit(0);
}

#-------------------------------------------------------------------------------

sub getInputFiles {
  my ($fileOrDir,$seqFileExtension) = @_;


  my @inputFiles;
  if (-d $fileOrDir) {
    opendir(DIR, $fileOrDir) || die "Can't open directory '$fileOrDir'";
    my @noDotFiles = grep { $_ ne '.' && $_ ne '..' } readdir(DIR);
    @inputFiles = map { "$fileOrDir/$_" } @noDotFiles;
    @inputFiles = grep(/.*\.$seqFileExtension$/, @inputFiles) if $seqFileExtension;
  } else {
    $inputFiles[0] = $fileOrDir;
  }
  return @inputFiles;
}


sub convertGFFStreamToSeqIO {

  my ($inputFile, $gffVersion, $gff2GroupTag) = @_;

  # convert a GFF "features-referring-to-sequence" stream into a
  # "sequences-with-features" stream; also aggregate grouped features.

  die("For now, gff formats only support a single file") if (-d $inputFile);

  my @aggregators = &makeAggregators($inputFile,$gffVersion,$gff2GroupTag);

  my $gffIO = Bio::Tools::GFF->new(-file => $inputFile,
				   -gff_format => $gffVersion
				  );

  my %seqs; my @seqs;
  while (my $feature = $gffIO->next_feature()) {
    push @{$seqs{$feature->seq_id}}, $feature;
  }

  while (my ($seq_id, $features) = each %seqs) {
    my $seq = Bio::Seq::RichSeq->new( -alphabet => 'dna',
                             -molecule => 'dna',
                             -molecule => 'dna',
			     -display_id => $seq_id,
			     -accession_number => $seq_id,
			   );

    if ($gffVersion < 3) {
      # GFF2 - use group aggregators to re-nest subfeatures
      for my $aggregator (@aggregators) {
	$aggregator->aggregate($features);
      }
    } else {
      # GFF3 - use explicit ID/Parent hierarchy to re-nest
      # subfeatures

      my %top;      # associative list of top-level features: $id => $feature
      my %children; # mapping of parents to children:
                    # $parent_id => [ [$child_id, $child],
                    #                 [$child_id, $child],
                    #               ]
      my @keep;     # list of features to replace flat feature list.

      # first, fill the datastructures we'll use to rebuild
      for my $feature (@$features) {
	my $id = 0;
	($id) = $feature->each_tag_value("ID")
	  if $feature->has_tag("ID");

	if ($feature->has_tag("Parent")) {
	  for my $parent ($feature->each_tag_value("Parent")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	} elsif ($feature->has_tag("Derives_from")) {
	  for my $parent ($feature->each_tag_value("Derives_from")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	} else {
	  push @keep, $feature;
	  $top{$id} = $feature if $id; # only features with IDs can
	                               # have children
	}
      }

      while (my ($id, $feature) = each %top) {
	# build a stack of children to be associated with their
	# parent feature:
	# [$child_id, $child_feature, $parent_feature]
	my @children;
	if($children{$id}){
	
	  foreach my $col (@{$children{$id}}){


	    push @children ,[@$col,$feature];

	      
	  }
	}
	delete($children{$id});

	# now iterate over the stack until empty:
        foreach my $child (@children) {

	  my ($child_id, $child, $parent) = @$child;
	  # make the association:
	  if($parent->location->start() > $child->location->start()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->start($child->location->start());
	  }

	  if($parent->location->end() < $child->location->end()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->end($child->location->end());
	  }

	  $parent->add_SeqFeature($child);

	  # add to the stack any nested children of this child
	  if($children{$child_id}){
	

	    foreach my $col (@{$children{$child_id}}){

	      push @children ,[@$col,$child];
	      
	    }
	  }
	  delete($children{$child_id});
	}
      }

      # the entire contents of %children should now have been
      # processed:
      if (keys %children) {
	warn "Unassociated children features (missing parents):\n  ";
	warn join("  \n", keys %children), "\n";
      }

      # replace original feature list with new nested versions:
      @$features = @keep;
    }

    $seq->add_SeqFeature($_) for @$features;
    push @seqs, $seq;
  }

  return GUS::Supported::SequenceIterator->new(\@seqs);
}

sub makeAggregators {
  my ($inputFile, $gffVersion,$gff2GroupTag) = @_;

  return undef if ($gffVersion != 2);

  die("Must supply --gff2GroupTag if using GFF2 format") unless $gff2GroupTag;

  # a list of "standard" feature aggregator types for GFF2 support;
  # only "processed_transcript" for now, but leaving room for others
  # if necessary.
  my @aggregators = qw(Bio::DB::GFF::Aggregator::processed_transcript Bio::DB::GFF::Aggregator::transcript);

  # build Feature::Aggregator objects for each aggregator type:
  @aggregators =
    map {
      Feature::Aggregator->new($_, $gff2GroupTag);
    } @aggregators;
  return @aggregators;
}

1;
