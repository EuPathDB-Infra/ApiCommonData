
#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Getopt::Long;

use Data::Dumper;
use FileHandle;
use HTTP::Date;

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;


my ($date, ) = split(" ", HTTP::Date::time2iso());
$date = join("",split(/-/,$date));

my ($verbose, $help, $organismAbbrev, $extDbName, $extDbRlsVer);

&GetOptions('help|h' => \$help,
            'organismAbbrev=s' => \$organismAbbrev,
            'extDbName=s' => \$extDbName,
            'extDbRlsVer=s' => \$extDbRlsVer,
           );

&usage() if($help);

&usage("Missing a Required Argument") unless (defined $organismAbbrev);
&usage("Missing Required Argument") unless (defined ($extDbName && $extDbRlsVer) );

my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";
my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);
my $u = $gusconfig->{props}->{databaseLogin}; 
my $pw = $gusconfig->{props}->{databasePassword}; 
my $dsn = $gusconfig->{props}->{dbiDsn}; 
my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{LongTruncOk} = 1;
$dbh->{LongReadLen} = 512 * 512 * 1024;

## get the extDbRlsId
my $extDbRlsId;
my $sqlExtDbRlsId = "
select edr.external_database_release_id from sres.externaldatabase ed, sres.externaldatabaserelease edr 
where ed.external_database_id=edr.external_database_id and ed.name like '$extDbName' and edr.version='$extDbRlsVer'
";
my $extDbRlsIdRef = readFromDatabase($dbh, $sqlExtDbRlsId);
$extDbRlsId = $extDbRlsIdRef->[0];
print STDERR "For $organismAbbrev, get extDbRlsId=$extDbRlsId\n";

## get the sequence info
my (%sSequences, %sChrs, %sChrOrders, %taxonIds, %sLengths, %naSeqIds);
my $sqlSeqsInfo = "select na_sequence_id, taxon_id, source_id, chromosome, chromosome_order_num, length, sequence
 from DOTS.externalnasequence where external_database_release_id=$extDbRlsId
";
my $seqsInfoRef = readFromDatabase($dbh, $sqlSeqsInfo);
foreach my $i (0..$#$seqsInfoRef) {
  my ($naSeqId, $taxonId, $sSeqId, $sChr, $sChrOrder, $sLength, $sSeq) = split(/\t/, $seqsInfoRef->[$i]);
  if ($naSeqId && $sSeqId && $sSeq) {
    $sSequences{$sSeqId} = $sSeq;
    $sChrs{$sSeqId} = $sChr;
    $sChrOrders{$sSeqId} = $sChrOrder;
    $taxonIds{$sSeqId} = $taxonId;
    $sLengths{$sSeqId} = $sLength;
    $naSeqIds{$sSeqId} = $naSeqId;
  }
}

## for each sequence
foreach my $k (sort keys %naSeqIds) {

  ## print the sequence file
  my $faFile = $k.".fsa";
  open (FA, ">$faFile") || die "can not open $faFile to write\n";
  my $defline = ">$k";
  my $sqlOrganism = "select t.ncbi_tax_id, tn.name from SRES.taxon t, SRES.taxonname tn
 where t.taxon_id=tn.taxon_id and t.taxon_id=$taxonIds{$k}";
  my $organismRef = readFromDatabase($dbh, $sqlOrganism);
  my ($ncbiTaxId, $organism) = split(/\t/, $organismRef->[0]);

  $defline .= " [organism=$organism]" if ($organism);
  $defline .= " [chromosome=$sChrs{$k}]" if ($sChrs{$k});
  $defline .= " \n";
  print FA "$defline";
  print FA "$sSequences{$k}\n";
  close FA;


  ## print the tbl file
  my $tblFile = $k.".tbl";
  open (TBL, ">$tblFile") || die "can not open $tblFile to write\n";
  print TBL "\>Feature\t$k\n";

  ## print source -- this is optional
  print TBL "1\t$sLengths{$k}\tsource\t\t\n";
  print TBL "\t\t\torganism\t$organism\n";
  print TBL "\t\t\tdb_xref\ttaxon:$ncbiTaxId\n";

  ## if genbank submission, need grep more info here, such as 

  ## get the genes in the sequence

  my $sqlGene = "select gf.source_id, gf.na_feature_id, gf.name, nl.start_min, nl.end_max, nl.is_reversed, gf.is_pseudo
 from dots.genefeature gf, DOTS.nalocation nl
 where gf.na_feature_id=nl.na_feature_id and gf.na_sequence_id=$naSeqIds{$k}
 and gf.external_database_release_id=$extDbRlsId order by nl.start_min
";

  my $geneRef = readFromDatabase($dbh, $sqlGene);
  foreach my $j (0..$#$geneRef) {
    my ($gSourceId, $gNaFeatureId, $gType, $gStart, $gEnd, $gStrand, $gIsPseudo) = split(/\t/, $geneRef->[$j]);
    $gType =~ s/\_gene//g;
    $gType = "mRNA" if ($gType !~ /RNA/i);

    ## get product info
    my $sqlProduct = "select product from APIDB.genefeatureproduct where na_feature_id=$gNaFeatureId";
    my $productRef = readFromDatabase($dbh, $sqlProduct);
    my $product = $productRef->[0];

    ## get if partial info
    my ($prefix5, $prefix3);
    if ($gType eq 'mRNA') {

      ## get the spliced na sequence
      my $sqlSplicedNaSeq = "select sequence from DOTS.splicednasequence where na_sequence_id in (
select na_sequence_id from dots.transcript where parent_id=$gNaFeatureId)";
      my $splicedNaSeqRef = readFromDatabase($dbh, $sqlSplicedNaSeq);
      my ($splicedNaSeq) = $splicedNaSeqRef->[0];

      ## get translation_start and translation_end
      my $sqlTranslatLoc = "select translation_start, translation_stop from DOTS.translatedaafeature 
where na_feature_id in (
select na_feature_id from DOTS.transcript where parent_id=$gNaFeatureId)"; 
      my $translatLocRef = readFromDatabase($dbh, $sqlTranslatLoc);
      my ($trsltStart, $trsltEnd) = split(/\t/, $translatLocRef->[0]);

      ## the sequences in dots.splicednasequence, the reversed strands have been upcased and reversed & complement
      ## so do not need to deal with strand here
      my @codons;
      for (my $j=0; $j<length($splicedNaSeq); $j+=3) {
        push @codons, substr($splicedNaSeq, $j, 3);
      }
      my $first_codon = shift(@codons);
      $prefix5 = "<" if ($first_codon ne 'ATG');
      #my $last_codon = pop @codons;

      my $last_codon = substr($splicedNaSeq,-3);
      #print STDERR "$gSourceId\t$first_codon\t$last_codon\n" if ($gSourceId eq 'ACA1_346150');
      $prefix3 = ">" if ( !($last_codon eq 'TAA' || $last_codon eq 'TAG' || $last_codon eq 'TGA') );
    } 


    ## print gene
    ($gStart, $gEnd) = addLocPrefix($gStrand, $gStart, $gEnd, $prefix5, $prefix3);

    ($gStrand != 1) ? print TBL "$gStart\t$gEnd\tgene\t\t\n" : print TBL "$gEnd\t$gStart\tgene\t\t\n";
    print TBL "\t\t\tlocus_tag\t$gSourceId\n";


    ## print is_psuedo
    if ($gIsPseudo == 1) {
      print TBL "\t\t\tpseudo\n";
      next;  ## skip to the next gene
    }


    ## get the codon_start and transl_table
    my $sqlCodonStart = "select codon_start, transl_table from DOTS.transcript where parent_id=$gNaFeatureId";
    my $codonStartRef = readFromDatabase($dbh, $sqlCodonStart);
    my ($codonStart, $translTable) = split(/\t/, $codonStartRef->[0]);

    ## print the transcipt coordinates
    ## get the transcript position from exon

    my $sqlExonLocRef = "select ef.order_number, nl.start_min, nl.end_max
 from dots.exonfeature ef, dots.nalocation nl
 where nl.na_feature_id=ef.na_feature_id and ef.parent_id=$gNaFeatureId
 order by ef.order_number";

    my $exonLocRef = readFromDatabase($dbh, $sqlExonLocRef);
    foreach my $i (0..$#$exonLocRef) {
      my ($order, $tStart, $tEnd) = split(/\t/, $exonLocRef->[$i]);

      ## need to add start and end seperately
      ($tStart, $tEnd) = addLocPrefix($gStrand, $tStart, $tEnd, $prefix5, '') if ($i == 0 && $prefix5);
      ($tStart, $tEnd) = addLocPrefix($gStrand, $tStart, $tEnd, '', $prefix3) if ($i == $#$exonLocRef && $prefix3);

      if ($i == 0) {
        ($gStrand != 1) ? print TBL "$tStart\t$tEnd\t$gType\t\t\n" : print TBL "$tEnd\t$tStart\t$gType\t\t\n";
      } else {
        ($gStrand != 1) ? print TBL "$tStart\t$tEnd\t\t\t\n" : print TBL "$tEnd\t$tStart\t\t\t\n";
      }
      print TBL "\t\t\tlocus_tag\t$gSourceId\n" if ($i == $#$exonLocRef);
    }

    if ($gType =~ /mRNA/) {

      ## if mRNA get CDS locations
      my $sqlCDSLoc = "select order_number, coding_start, coding_end from DOTS.exonfeature
 where parent_id=$gNaFeatureId order by order_number";
      my $CDSLocRef = readFromDatabase ($dbh, $sqlCDSLoc);
      ## need to slip over if reversed strand
      #@$CDSLocRef = sort {$a <=> $b} @$results;
      foreach my $i (0..$#$CDSLocRef) {
        my ($order, $cStart, $cEnd) = split(/\t/, $CDSLocRef->[$i]);
        $cStart = $prefix5.$cStart if ($i == 0 && $prefix5);
        $cEnd = $prefix3.$cEnd if ($i == $#$CDSLocRef && $prefix3);
        ($i == 0) ? print TBL "$cStart\t$cEnd\tCDS\t\t\n" : print TBL "$cStart\t$cEnd\t\t\t\n";
      }
      print TBL "\t\t\tlocus_tag\t$gSourceId\n";

      ## print product info
      ($product) ? print TBL "\t\t\tproduct\t$product\n" : print TBL "\t\t\tproduct\tunspecified product\n";

      ## need to print condon_start if $prefix5
      print TBL "\t\t\tcodon_start\t$codonStart\n" if ($codonStart && $prefix5);

      ## print transl_table ## TODO need to double check the transl_table
      $translTable = 1 if (!$translTable);
      print TBL "\t\t\ttransl_table\t$translTable\n" if ($translTable);


      ## add protein sequence
      my $sqlProteinSeq = "select sequence from DOTS.translatedaasequence where aa_sequence_id in
 (select aa_sequence_id from DOTS.translatedaafeature where na_feature_id in
 (select na_feature_id from DOTS.transcript where parent_id=$gNaFeatureId ) )";
      my $proteinSeqRef = readFromDatabase($dbh, $sqlProteinSeq);
      my $proteinSeq = $proteinSeqRef->[0];
      ($proteinSeq) ? print TBL "\t\t\ttranslation\t$proteinSeq\n" : print STDERR "ERROR: for $gNaFeatureId, can not find protein seq\n";

    } else {


      ## TODO for ncRNA need the info of ncRNA_class
      ## print TBL "\t\t\tncRNA_class\t$ncRNA_class\n";
      my $ncRNA_class;
      if ($gType =~ /ncRNA/) {
        ($ncRNA_class) ? print TBL "\t\t\tncRNA_class\t$ncRNA_class\n" : print TBL "\t\t\tncRNA_class\tother\n";
      }

      ## print product info  
      ($product) ? print TBL "\t\t\tproduct\t$product\n" : print TBL "\t\t\tproduct\tunspecified product\n";

      ## if not mRNA get exon location, actually this step can be ignored
      ## TODO can be combined into 1 query
      foreach my $i (0..$#$exonLocRef) {
	foreach my $m (0..$#$exonLocRef) {
	  my ($eOrder, $eStart, $eEnd) = split(/\t/, $exonLocRef->[$m]);
	  $eStart = $prefix5.$eStart if ($m == 0);
	  $eEnd = $prefix3.$eEnd if ($m == $#$exonLocRef);
	  if ($m == 0) {
	    ($gStrand != 1) ? print TBL "$eStart\t$eEnd\texon\t\t\n" : print TBL "$eEnd\t$eStart\texon\t\t\n";
	  }else{
	    ($gStrand != 1) ? print TBL "$eStart\t$eEnd\t\t\t\n" : print TBL "$eEnd\t$eStart\t\t\t\n";
	  }
	}
      }
      print TBL "\t\t\tlocus_tag\t$gSourceId\n";
    }

  }

  close TBL;
  print STDERR "done $k\n";
} ## end of foreach sequence


#####################

sub readFromDatabase {
  my ($dbh, $sql) = @_;
  my $stmt = $dbh->prepare($sql);
  $stmt->execute;
  my (@arrays);
  while (my @fetchs = $stmt->fetchrow_array()) {
    my $oneline= $fetchs[0];
    foreach my $i (1..$#fetchs) {
      $oneline .= "\t$fetchs[$i]";
    }
    push @arrays, $oneline;
  }
  $stmt->finish();
  return \@arrays;
}

sub addLocPrefix {
  my ($strand, $start, $end, $prefix5, $prefix3) = @_;
  if ($strand == 1) {
    return "$prefix3".$start, "$prefix5".$end;
  } else {
    return "$prefix5".$start, "$prefix3".$end;
  }
}

sub usage {
  die
"
A script to create genbank feature table file, .tbl
Usage:  perl createGenbankTableFile --organismAbbrev pvivSal1 --extDbName pvivSaI1_primary_genome_RSRC --extDbRlsVer 2013-05-01

NOTE: the output is a set of files ending with .fsa and .tbl,
      So it is better to run it in a subdirectory.
NOTE: the GUS_HOME should point to the instance that the annotation has been loaded

where
  --organismAbbrev: the organism Abbrev in the table apidb.organism
  --extDbName: the external database name for loading genome and annoation
  --extDbRlsVer: the external database release version for loading genome and annotation
";
}
