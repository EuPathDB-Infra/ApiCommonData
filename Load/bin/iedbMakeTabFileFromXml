#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;
use XML::LibXML;
use Getopt::Long;
use Data::Dumper;

# this file was copied from manual delivery.  its history is unknown.

# here are the steps:
# 1) use the provided species tax id to get a list of tax ids for that
#    species and its children.  (query the taxon table)
# 2) parse the very large IEDB organisms list file to get a mapping of those
#    tax ids to IEDB organism IDs
# 3) grep the 10s of thousands of .xml files we downloaded from IEDB
#    to find the small number of files that contain those organism IDs
# 4) parse those files to find the epitopes from our taxa, and reformat from
#    xml to tab

my ($outputFile, $dir, $help,$taxId,$organismListFile);
&GetOptions('help|h' => \$help,
            'outputfile=s' => \$outputFile,
            'input_dir=s' => \$dir,
	    'NCBITaxId=s' => \$taxId,
            'organismListFile=s' => \$organismListFile
           );

&usage() if($help);
&usage("input dir and organismListFile are required") unless(-e $dir && -e $organismListFile);

# expand species tax id to all organisms for that species
my $cmd = "getSubNCBITaxaList --NCBITaxId $taxId";
my $subNCBITaxaList = `$cmd`;
die "\nFailed running '$cmd'" if $? >> 8;
chomp $subNCBITaxaList;
#my $subNCBITaxaList = "29176,572307";
print STDERR "Finding epitopes for this set of taxa: '$subNCBITaxaList'\n";
my @taxaLists = split(/\,/,$subNCBITaxaList);
#print Dumper @taxaLists;
my %taxaListHash;
foreach (@taxaLists) { $taxaListHash{$_}=1; }


my %orgListHash;
open(ORG,$organismListFile);
print STDERR "Scanning organism file to find IEDB Organism IDs for those taxa\n";
my $parser = XML::LibXML->new();
my $doc = $parser->parse_file($organismListFile);
my $top = $doc->getDocumentElement;
my @organisms = $top->findnodes('/OrganismList/Organism');
foreach my $organism (@organisms) {
  my %h = (TaxId=>0, OrganismId=>0);
  findXmlValues($organism, \%h);
  $orgListHash{$h{OrganismId}}= 1 if ($h{TaxId} && $taxaListHash{$h{TaxId}} && $h{OrganismId});
}
print STDERR "Found: " . join(", ", keys(%orgListHash)) . "\n";

# find files that contain our taxa
my @files = findRelevantFiles($dir, keys(%orgListHash));

open (TABF, ">$outputFile") or die "could not open '$outputFile' for writing\n";
TABF->autoflush(1);
print TABF 
  'Reference',      "\t",
  'IEDB ID',      "\t",
  'Epitope Name',         "\t",
  'Epitope Structure Chemical Type',            "\t",
  'Epitope Linear Sequence',            "\t",
  'Epitope Conformational Sequence',  "\t",
  'Epitope SMILES Structure',    "\t",
  'Epitope Source Species',    "\t",
  'Epitope Source Species Strain',    "\t",
  'Epitope Source Name',    "\t",
  'Epitope Source Accession Number',    "\t",
  'Epitope Source PDB ID',       "\n",
  ;
#------------------------------------------------------------------------------

my $parser = XML::LibXML->new();
my $epitopeCount = 0;
foreach my $file (@files) {
  my @results;
  print STDERR "Parsing $file\n";
  my $tree = $parser->parse_file($file);
  my $root = $tree->getDocumentElement;

  my @epitopes = $root->findnodes('/References/Reference/Epitopes/Epitope') ;

  foreach my $epitope (@epitopes) {
    my ($result,$GenBankId,$ChemicalType,$LinearSequence,$SourceOrganismId);
    my %h = (EpitopeName=>0, EpitopeId=>0);
    findXmlValues($epitope, \%h);
    my ($EpitopeName, $EpitopeId) = ($h{EpitopeName}, $h{EpitopeId});

    my ($EpitopeStructure) = $epitope->findnodes('EpitopeStructure/FragmentOfANaturalSequenceMolecule') ;
    next unless $EpitopeStructure;

    my %h = (ChemicalType=>0, LinearSequence=>0, SourceOrganismId=>0);
    findXmlValues($EpitopeStructure, \%h);
    ($ChemicalType, $LinearSequence, $SourceOrganismId) =
      ($h{ChemicalType}, $h{LinearSequence}, $h{SourceOrganismId});

    next unless $orgListHash{$SourceOrganismId};

    my ($SourceMolecule) = $EpitopeStructure->findnodes('SourceMolecule');
    my %h = (GenBankId=>0, IedbAccession=>0);
    findXmlValues($SourceMolecule, \%h);
    $GenBankId = $h{GenBankId};
    $GenBankId = $h{IedbAccession} unless $GenBankId;

    $epitopeCount++;
    $result = {reference => '' ,
	       EpitopeId => $EpitopeId,
	       EpitopeName => $EpitopeName,
	       ChemicalType => $ChemicalType,
	       LinearSequence => $LinearSequence,
	       ConformationalSequence => '',
	       SMILESStructure => '',
	       SourceOrganismId => $SourceOrganismId ,
	       SourceSpeciesStrain => '',
	       SourceName => '',
	       GenBankId => $GenBankId,
	       SourcePDBID => '',
	      };
    push(@results, $result) if $LinearSequence;
    print STDERR "Epitopes examined: $epitopeCount \n" if $epitopeCount % 100 == 0;
  }
  writeTabFile(\@results);
  undef @results;
}
close TABF;
print STDERR "Found $epitopeCount epitopes\n";
#print Dumper (\@results);

#--------------------------------------------------------------------------------

sub writeTabFile {
  my ($results) = @_;

  for my $h (@$results) {

    print TABF
      $h->{reference},       "\t",
	$h->{EpitopeId},     "\t",
	  $h->{EpitopeName},        "\t",
	    $h->{ChemicalType},           "\t",
	      $h->{LinearSequence},           "\t",
		$h->{ConformationalSequence}, "\t",
		  $h->{SMILESStructure},   "\t",
		    $h->{SourceOrganismId},   "\t",
		      $h->{SourceSpeciesStrain},   "\t",
			$h->{SourceName},   "\t",
			  $h->{GenBankId},   "\t",
			    $h->{SourcePDBID},   "\n",
			      ;
  }

}

# we use this crazy approach instead of calling node->findvalue to workaround
# a serious performance problem findvalue seems to have
sub findXmlValues {
  my ($node, $fieldsHash) =  @_;
  for my $child ($node->childNodes()) {
    my $childName = $child->nodeName();
    $fieldsHash->{$childName} = $child->textContent()
      if defined($fieldsHash->{$childName});
  }
}

#--------------------------------------------------------------------------------

sub usage {
  my ($m) = @_;

  print STDERR "
Make a tab file for a specified organism, from a set of IEDB xml files
(that have been fixed with iedbFixXml).

usage: iedbMakeTabFileFromXml --input_dir INPUT_DIR --outputfile OUTPUT_FILE --NCBITaxId tax_id --organismListFile
";
  print STDERR "ERROR:  $m\n" if($m);
  exit(1);
}

#--------------------------------------------------------------------------------

sub findRelevantFiles {
  my $dir = shift @_;
  my @organismIds = @_;
  print STDERR "Finding files that contain our organisms\n";
  my @a = map {"<SourceOrganismId>$_</SourceOrganismId>"} @organismIds;
  my $expr = join("|", @a);

  my $f = `grep -lE "$expr" $dir/*.xml`;
  my @files =  split(/\n/,$f);
  print STDERR "Found " . scalar(@files) . " files\n";
  return @files;
}

1;

