#!/usr/bin/perl

use strict;

use XML::LibXML;

use Getopt::Long;

use Data::Dumper;

# this file was copied from manual delivery.  its history is unknown.

my ($fn, $dir, $help,$taxId,$organismListFile);

&GetOptions('help|h' => \$help,
            'outputfile=s' => \$fn,
            'input_dir=s' => \$dir,
	    'NCBITaxId=s' => \$taxId,
            'organismListFile=s' => \$organismListFile
           );

&usage() if($help);
&usage("input dir and organismListFile is required") unless(-e $dir && -e $organismListFile);
#my $subNCBITaxaList = `getSubNCBITaxaList --NCBITaxId $taxId`;
my $subNCBITaxaList = "29176,572307";
print STDERR "Finding epitopes for this set of taxa: $subNCBITaxaList\n";

my @taxaLists = split(/\,/,$subNCBITaxaList);

my %taxaListHash;

foreach (@taxaLists) {
  $taxaListHash{$_}=1;
}

my %orgListHash;

open(ORG,$organismListFile);

print STDERR "Scanning organism file to find IEDB Organism IDs for those taxa\n";
my $parser = XML::LibXML->new();
my $doc = $parser->parse_file($organismListFile);
my $top = $doc->getDocumentElement;
my @organisms = $top->findnodes('/OrganismList/Organism');
foreach my $organism (@organisms) {
  my %h = (TaxId=>0, OrganismId=>0);
  findXmlValues($organism, \%h);
  $orgListHash{$h{OrganismId}}= 1 if ($h{TaxId} && $taxaListHash{$h{TaxId}} && $h{OrganismId});
}

print STDERR "Found: " . join(", ", keys(%orgListHash)) . "\n";

my @files = findRelevantFiles($dir, keys(%orgListHash));

my $n=@files;

open (TABF, ">> $fn") or die "could not APPEND to $fn\n";;
TABF->autoflush(1);
print TABF 
  'Reference',      "\t",
  'IEDB ID',      "\t",
  'Epitope Name',         "\t",
  'Epitope Structure Chemical Type',            "\t",
  'Epitope Linear Sequence',            "\t",
  'Epitope Conformational Sequence',  "\t",
  'Epitope SMILES Structure',    "\t",
  'Epitope Source Species',    "\t",
  'Epitope Source Species Strain',    "\t",
  'Epitope Source Name',    "\t",
  'Epitope Source Accession Number',    "\t",
  'Epitope Source PDB ID',       "\n",
  ;
#--------------------------------------------------------------------------------

my $parser = XML::LibXML->new();
my $epitopeCount;
for (my $i=0; $i<$n; $i++) {
  my @results;
  my $singleFile = $files[$i];
  print STDERR "Parsing $singleFile\n";
  my $tree = $parser->parse_file($singleFile);
  my $root = $tree->getDocumentElement;

  my ($result,$GenBankId,$ChemicalType,$LinearSequence,$SourceOrganismId);
  my @epitopes = $root->findnodes('/References/Reference/Epitopes/Epitope') ;

  foreach my $epitope (@epitopes) {
    $epitopeCount++;
    my %h = (EpitopeName=>0, EpitopeId=>0);
    findXmlValues($epitope, \%h);
    my ($EpitopeName, $EpitopeId) = ($h{EpitopeName}, $h{EpitopeId});

    my @EpitopeStructures = $epitope->findnodes('EpitopeStructure/FragmentOfANaturalSequenceMolecule') ;

    # presumably there is only one structure?  ask the original author of
    # this script.
    foreach my $EpitopeStructure (@EpitopeStructures) {
      my %h = (ChemicalType=>0, LinearSequence=>0, SourceOrganismId=>0);
      findXmlValues($EpitopeStructure, \%h);

      ($ChemicalType, $LinearSequence, $SourceOrganismId) =
	($h{ChemicalType}, $h{LinearSequence}, $h{SourceOrganismId});

      my @SourceMolecules = $EpitopeStructure->findnodes('SourceMolecule');

      foreach my $SourceMolecule (@SourceMolecules) {
	my %h = (GenBankId=>0, IedbAccession=>0);
	findXmlValues($SourceMolecule, \%h);
	$GenBankId = $h{GenBankId};
	$GenBankId = $h{IedbAccession} unless $GenBankId;
      }
    }

    $result = {reference => '' ,
	       EpitopeId => $EpitopeId,
	       EpitopeName => $EpitopeName,
	       ChemicalType => $ChemicalType,
	       LinearSequence => $LinearSequence,
	       ConformationalSequence => '',
	       SMILESStructure => '',
	       SourceOrganismId => $SourceOrganismId ,
	       SourceSpeciesStrain => '',
	       SourceName => '',
	       GenBankId => $GenBankId,
	       SourcePDBID => '',
	      };
    push(@results, $result) if $LinearSequence && $orgListHash{$SourceOrganismId}==1;
    print STDERR "Epitopes examined: $epitopeCount \n" if $epitopeCount % 100 == 0;
  }
#  print STDERR "Finished Reading $singleFile file\n";
  writeTabFile(\@results);
  undef @results;
}
close TABF;
print STDERR "Found $epitopeCount epitopes\n";
#print Dumper (\@results);

#--------------------------------------------------------------------------------

sub writeTabFile {
  my ($results) = @_;

  for my $h (@$results) {

    print TABF
      $h->{reference},       "\t",
	$h->{EpitopeId},     "\t",
	  $h->{EpitopeName},        "\t",
	    $h->{ChemicalType},           "\t",
	      $h->{LinearSequence},           "\t",
		$h->{ConformationalSequence}, "\t",
		  $h->{SMILESStructure},   "\t",
		    $h->{SourceOrganismId},   "\t",
		      $h->{SourceSpeciesStrain},   "\t",
			$h->{SourceName},   "\t",
			  $h->{GenBankId},   "\t",
			    $h->{SourcePDBID},   "\n",
			      ;
  }

}

sub findXmlValues {
  my ($node, $fieldsHash) =  @_;
  for my $child ($node->childNodes()) {
    my $childName = $child->nodeName();
    $fieldsHash->{$childName} = $child->textContent()
      if defined($fieldsHash->{$childName});
  }
}

#--------------------------------------------------------------------------------

sub usage {
  my ($m) = @_;

  print STDERR "
Make a tab file for a specified organism, from a set of IEDB xml files
(that have been fixed with iedbFixXml).

usage: iedbMakeTabFileFromXml --input_dir INPUT_DIR --outputfile OUTPUT_FILE --NCBITaxId tax_id --organismListFile
";
  print STDERR "ERROR:  $m\n" if($m);
  exit(1);
}

#--------------------------------------------------------------------------------

sub findRelevantFiles {
  my $dir = shift @_;
  my @organismIds = @_;
  print STDERR "Finding files that contain our organisms\n";
  my @a = map {"<SourceOrganismId>$_</SourceOrganismId>"} @organismIds;
  my $expr = join("|", @a);

  my $f = `grep -lE "$expr" $dir/*.xml`;
  my @files =  split(/\n/,$f);
  print STDERR "Found " . scalar(@files) . " files\n";
  return @files;
}

1;

