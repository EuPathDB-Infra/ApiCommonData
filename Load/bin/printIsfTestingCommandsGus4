#!/usr/bin/perl

use Getopt::Long;
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;

my ($organismAbbrev, $format, $dbVer, $mappingFile, $soTerm, $organismFullName,
     $buildNum, $inputFileOrDir, $sequenceFile, $regexSourceId, $help);

&GetOptions('organismAbbrev=s' => \$organismAbbrev,
            'dbVer=s' => \$dbVer,
            'format=s' => \$format,
            'soTerm=s' => \$soTerm,
            'mappingFile=s' => \$mappingFile,
            'organismFullName=s' => \$organismFullName,
            'buildNumber=s' => \$buildNum,
            'inputFileOrDir=s' => \$inputFileOrDir,
            'sequenceFile=s' => \$sequenceFile,
            'regexSourceId=s' => \$regexSourceId,
	    'help|h' => \$help,
	    );
&usage() if($help);
&usage("Missing a Required Argument") unless(defined $organismAbbrev && $format && $dbVer);

my $dbName = $organismAbbrev."_primary_genome_RSRC";

## based on organismFullName, retrieve ncbiTaxId from db
my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";
my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);
my $u = $gusconfig->{props}->{databaseLogin}; 
my $pw = $gusconfig->{props}->{databasePassword}; 
my $dsn = $gusconfig->{props}->{dbiDsn}; 
my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{LongTruncOk} = 1;

my $sql = <<SQL;
select t.ncbi_tax_id from SRES.taxon t, SRES.taxonname tn
where t.taxon_id=tn.taxon_id and tn.name='$organismFullName'
SQL

my $stmt = $dbh->prepare($sql);
$stmt->execute();
my ($ncbiTaxId) = $stmt->fetchrow_array();
print STDERR "For $organismFullName, get ncbiTaxId=$ncbiTaxId\n";
$stmt->finish();

#print "reportFeatureQualifiers --format $format --file_or_dir ../final/genome.gff > report.txt\n\n";

print "ga GUS::Supported::Plugin::InsertExternalDatabase --name $dbName --commit\n";
print "ga GUS::Supported::Plugin::InsertExternalDatabaseRls --databaseName $dbName --databaseVersion $dbVer --commit\n\n";

if ($format =~ /gff/i) {
  $inputFileOrDir = "../whole_genome.gff" if (!$inputFileOrDir);
  $sequenceFile = "../whole_genome.fasta" if (!$sequenceFile);
  $regexSourceId = ">(\\S+?)(\\|\\w\+\$|\$)" if (!$regexSourceId);

  print STDERR "format = $format\n";
  print "ga GUS::Supported::Plugin::LoadFastaSequences --externalDatabaseName $dbName --externaldatabaseversion $dbVer --ncbitaxid $ncbiTaxId --sequenceFile $sequenceFile --SOTermName $soTerm --SOExtDbRlsSpec 'SO_RSRC|%' --regexSourceId '$regexSourceId' --tableName DoTS::ExternalNASequence --chromosomeMap ../../final/chromosomeMap.txt --commit > fasta.log 2>&1 &\n\n";

  print "\n## for transcriptInfo\n";
  print "ga GUS::Supported::Plugin::InsertSequenceFeatures --extDbName $dbName --extDbRlsVer $dbVer --mapFile $mappingFile --inputFileOrDir $inputFileOrDir --inputFileExtension gff  --fileFormat gff3 --soExtDbSpec 'SO_RSRC|%' --organism '$organismFullName' --seqSoTerm $soTerm --validationLog validation.log --bioperlTreeOutput bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile ../../final/chromosomeMap.txt --postprocessingDirective PRINT_TRANSCRIPT_IDS --postprocessingDir ./ > isf.log 2>&1 &\n\n";

  print "cp transcriptIds ../../final/transcriptInfoAndIds\n\n";

  print "\n## for loading\n";
  print "ga GUS::Supported::Plugin::InsertSequenceFeatures --extDbName $dbName --extDbRlsVer $dbVer --mapFile $mappingFile --inputFileOrDir ../whole_genome.gff --inputFileExtension gff  --fileFormat gff3 --soExtDbSpec 'SO_RSRC|%' --organism '$organismFullName' --seqSoTerm $soTerm --validationLog validation.log --bioperlTreeOutput bioperlTree.out --seqIdColumn source_id --naSequenceSubclass ExternalNASequence --chromosomeMapFile ../../final/chromosomeMap.txt --postprocessingDirective SET_TRANSCRIPT_IDS --postprocessingDir ../../final/ --commit > isf.log 2>&1 &\n\n";

} elsif ($format =~ /genbank/i) {
  $inputFileOrDir = "../whole_genome.gbf" if (!$inputFileOrDir);
  $mappingFile = "\$PROJECT_HOME/ApiCommonData/Load/lib/xml/isf/genbankGenbank2Gus.xml" if (!$mappingFile);

  print STDERR "format = $format\n";

  print "\n## for transcriptInfo\n";
  print "ga GUS::Supported::Plugin::InsertSequenceFeatures --extDbName $dbName --extDbRlsVer $dbVer --mapFile $mappingFile --inputFileOrDir $inputFileOrDir --inputFileExtension gbf --fileFormat genbank --soExtDbSpec 'SO_RSRC|%' --organism '$organismFullName' --seqSoTerm $soTerm --chromosomeMapFile ../../final/chromosomeMap.txt --validationLog validation.log --bioperlTreeOutput bioperlTree.out --postprocessingDirective PRINT_TRANSCRIPT_INFO --postprocessingDir ./ > isf.log 2>&1 &\n\n";

  print "apiGenerateTranscriptIds $buildNum transcriptInfo > ../../final/transcriptInfoAndIds\n\n";

  print "\n## for loading\n";
  print "ga GUS::Supported::Plugin::InsertSequenceFeatures --extDbName $dbName --extDbRlsVer $dbVer --mapFile $mappingFile --inputFileOrDir $inputFileOrDir --inputFileExtension gbf --fileFormat genbank --soExtDbSpec 'SO_RSRC|%' --organism '$organismFullName' --seqSoTerm $soTerm --chromosomeMapFile ../../final/chromosomeMap.txt --validationLog validation.log --bioperlTreeOutput bioperlTree.out --postprocessingDirective SET_TRANSCRIPT_IDS --postprocessingDir ../../final/ --commit > isf.log 2>&1 &\n\n";

} elsif ($format =~ /embl/i) {
  $inputFileOrDir = "../whole_genome.embl" if (!$inputFileOrDir);

  print STDERR "format = $format\n";

  print "ga GUS::Supported::Plugin::InsertSequenceFeatures --extDbName $dbName --extDbRlsVer $dbVer --mapFile \$trunk/project_home/ApiCommonData/Load/lib/xml/isf/$mappingFile --inputFileOrDir $inputFileOrDir --inputFileExtension embl --fileFormat embl --soCvsVersion 1.45 --organism '$organismFullName' --seqSoTerm $soTerm --chromosomeMap ../../final/chromosomeMap.txt --validationLog validation.log --bioperlTreeOutput bioperlTree.out --commit > isf.log 2>&1 &\n\n";

} else {
  print STDERR "format has not been configured\n";
}

## print post load validation
print "postLoadIsfQA --organismAbbrev $organismAbbrev --extDbName $dbName --extDbRlsVer $dbVer > postLoadQA.txt 2>&1 &\n\n";

print "createGenbankTableFile --organismAbbrev $organismAbbrev --extDbName $dbName --extDbRlsVer $dbVer\n\n";
print "tbl2asn -p $organismAbbrev -t ~/template.sbt -V v -Z $organismAbbrev/discrep\n\n";


sub usage {
  die
"
Usage: printisttestingcommands --format genbank --organismAbbrev gassAWB --dbVer 2010-03-10 --soTerm contig --mappingFile genbankGenbank2Gus.xml ...
 

where
  --format:  the format of annotation file
  --organismAbbrev:    the organism abbrev
  --buildNumber:    the build number, it is required when format is genbank and embl
  --dbVer:  the version of annotation
  --soTerm: contig, supercontig, or chromosome
  --mappingFile: the isf mappping file
  --organismFullName: organism full name
  --inputFileOrDir: input annotation file or dir, default is Genbank: ../whole_genome.gbf, GFF3: ../whole_genome.gff, embl: ../whole_genome.embl
  --sequenceFile: input fasta sequence file name, only for gff3 format, default is ../whole_genome.fasta, 
  --regexSourceId: optional, regExp for sequence source id on the defline of the fasta file, only for gff3 format, default is >(\\S+?)(\\|\\w\+\$|\$)

";
}
