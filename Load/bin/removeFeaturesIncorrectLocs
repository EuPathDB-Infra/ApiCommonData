#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use Data::Dumper;

my ($verbose, $help, $inputGff,$outputGff, $errList);


&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'input_gff=s' => \$inputGff,
	    'output_gff=s' => \$outputGff,
            'feat_list=s' => \$errList,

 
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $inputGff && $outputGff && $errList);

open(ERRLIST,"$errList");
open(INGFF,"$inputGff");
open(OUTGFF,">$outputGff");


my %ids;

foreach my $line (<ERRLIST>){
    
    chomp $line;

    if (!($line =~ /^\s+$/)){
	my($id,$type) = split(/\:/,$line);


	if($id eq "match"){
	    my @cols = split(/\:/,$type);

	    $id .= ":$cols[0]";
	}
	$ids{$id} = $id;
    }



}



foreach my $line(<INGFF>){
    chomp $line;

    my(@cols) = split(/\t/,$line);


    my($tag) = split(/\;/,$cols[8]);

    my($tagname,$value) = split(/\s/,$tag);

    $value =~ s/^\"//;
    $value =~ s/\"$//;


    if($value eq 'LbrM02_V2.0315:ncRNA'){

	$line =~ s/mRNA/ncRNA/g;
    }
    my($id,$type) = split(/\:/,$value);


    if($id eq "match"){
	my @cols = split(/\:/,$type);
	
	$id .= ":$cols[0]";
    }

   

    if(!($ids{$id})){
	print OUTGFF "$line\n";
    }else{
        print STDERR "$value will not be loaded\n";
    }
    
}

close(IN);
close(OUT);
close(OUTGFF);


sub usage{

}
