#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use Switch;
use strict;

my ($excelDir, $outDir);

&GetOptions("excelDir=s" => \$excelDir,
	    "outDir=s" => \$outDir,
	   );

if (!$excelDir || !$outDir) {
  die "usage: createEpitopeFilesFromExcel --excelDir <DIRPATH> --outDir <DIRPATH>\n";
}

&createEpitopeFiles($excelDir,$outDir);
&createEpitopeFastaFiles($outDir);

sub createEpitopeFiles{
  my ($excelDir,$outDir) = @_;

  unless (-d $outDir){
    my $cmd = "mkdir -p $outDir";

    &exeCmd($cmd);

  }

  if (-d $excelDir) {
    my $file;

    opendir(DIR, $excelDir) or die "can't opendir $excelDir: $!";

    while (defined($file = readdir(DIR))) {
      next if $file =~ /^\.\.?$/;     # skip . and ..

      my $inFile = "$excelDir/$file";
      next unless qx(od -c $inFile | head -1 |egrep '376 067 000 043|320 317 021 340|333 245-000 000 000'); # MS Office format

      my $outFile = $file;
      $outFile =~ s/(\w+).\w+/$1/;
      $outFile = "$outDir/$outFile.txt";

      my $cmd = "extractFromExcel --inputFile $inFile --outputFile $outFile";

      &exeCmd($cmd);

    }

    closedir(DIR);

  }else{
    die "Cannot locate the directory '$excelDir'\n";
  }
}

sub createEpitopeFastaFiles{
  my($inputDir) = @_;

    if (-d $inputDir) {
      my $file;
      my $outputDir = "$inputDir/fasta";

      &exeCmd("mkdir $outputDir") unless (-d $outputDir);

      opendir(DIR, $inputDir) or die "can't opendir $inputDir: $!";

      while (defined($file = readdir(DIR))) {

	my $inFile = "$inputDir/$file";

	next unless -f $inFile;

	my $outFile = $file;
	$outFile =~ s/(\w+).\w+/$1/;
	$outFile = "$outputDir/$outFile.fsa";

	my $cmd = "generateEpitopeFastaFile --inputFile $inFile --outputFile $outFile";

	&exeCmd($cmd);

      }

      closedir(DIR);


    }else{
      die "Cannot locate the directory '$inputDir'\n";
    }
}


sub exeCmd{
  my ($cmd) = @_;

  print STDERR "$cmd\n";
  system($cmd);
  my $status = $? >> 8;
  die "Failed with status '$status running cmd: $cmd'" if $status;
}
