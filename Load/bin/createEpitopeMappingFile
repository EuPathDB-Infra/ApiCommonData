#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use Switch;
use strict;

my ($inputDir, $queryDir, $outputDir, $blastDatabase, 
    $subjectPath, $idRegex, $verbose, $speciesKey, $ncbiBlastPath);

my $speciesRegex = 'IEDBExport([a-zA-Z][a-zA-Z])\w*';

&GetOptions("inputDir=s" => \$inputDir,
	    "queryDir=s"=> \$queryDir,
	    "outputDir=s" => \$outputDir,
        "ncbiBlastPath=s" => \$ncbiBlastPath,
	    "blastDatabase=s" => \$blastDatabase,
	    "subjectPath=s" => \$subjectPath,
	    "speciesRegex=s" => \$speciesRegex,
	    "speciesKey=s" => \$speciesKey, # lookup database name in runBlast()
	    "idRegex=s" => \$idRegex,
	    "verbose!" => \$verbose,
	   );

if (!$inputDir || !$queryDir || !$outputDir || !$blastDatabase) {
  die "usage: createEpitopeMappingFile.pl --inputDir <DIRPATH> --queryDir <DIRPATH> --outputDir <DIRPATH> --blastDatabase <PATH> --subjectPath <DIRPATH> [--speciesRegex <STRING>] [--speciesKey <STRING>] [--idRegex <STRING>] [--verbose]\n";
}


&getGenPetSeqs($inputDir, $queryDir);
&runBlast($outputDir, $queryDir, $inputDir, $blastDatabase, $speciesRegex, $idRegex, $verbose, $ncbiBlastPath);
&exactMapEpitopes($outputDir, $inputDir, $subjectPath, $speciesRegex, $verbose);
print STDERR "Mapping Complete\n";

sub getGenPetSeqs{
  my ($inputDir, $queryDir) = @_;

  unless (-d $queryDir){
    my $cmd = "mkdir -p $queryDir";

    &exeCmd($cmd);

  }

  die "Cannot locate the directory '$inputDir':$!\n" unless (-d $inputDir);

  opendir(DIR, $inputDir) or die "can't opendir '$inputDir': $!";

  my $file;
  while (defined($file = readdir(DIR))) {
    my $inFile = "$inputDir/$file";

    next unless -f "$inFile";

    my $outFile = $file;
    $outFile =~ s/(\w+).\w+/$1/;
    $outFile = "$queryDir/$outFile.fsa";

    my $cmd = "retrieveSeqsFromGenPept --inFile $inFile --outFile $outFile";

    &exeCmd($cmd);

  }
  closedir(DIR);
}

sub runBlast{
  my ($outputDir, $queryDir, $inputDir, $blastDatabase, $speciesRegex, $idRegex,$verbose, $ncbiBlastPath) = @_;

  unless(-d $queryDir){ die "Could not find the query file directory '$queryDir':$!";}

  unless (-d $outputDir){
    my $cmd = "mkdir -p $outputDir";
    &exeCmd($cmd);
  }

  opendir(EDIR, $inputDir) or die "can't opendir '$inputDir': $!";

  my $file;
  while (defined($file = readdir(EDIR))) {
    next unless -f "$inputDir/$file";

    my $baseFileName = $file;
    $baseFileName =~ s/(\w+).\w+/$1/;

    #get the files and database that go together
    my $epitopeFile = "$inputDir/$file";

    my $queryFile = "$queryDir/$baseFileName.fsa";

    my $species;
    if ($speciesKey) {
        $species = $speciesKey;
    } else {
        $species = $baseFileName;
        $species =~ s/$speciesRegex/$1/;
    }

    my $database;
    switch ($species) {

      case "Pb"  { $database = "Pberghei_proteins";}
      case "Pc"  { $database = "Pchabaudi_proteins";}
      case "Pf"  { $database = "Pfalciparum_proteins";}
      case "Pk"  { $database = "Pknowlesi_proteins";}
      case "Pv"  { $database = "Pvivax_proteins";}
      case "Py"  { $database = "Pyoelii_proteins";}
      case "Tg"  { $database = "Tgondii_proteins";}
      case "Cp"  { $database = "Cparvum_proteins";}
      case "Cp6" { $database = "CparvumChr6_proteins";}
      case "Ch"  { $database = "Chominis_proteins";}
      case "Gl"  { $database = "Glamblia_proteins";}
      case "Lm"  { $database = "Lmajor_proteins";}
      case "Li"  { $database = "Linfantum_proteins";}
      case "Lb"  { $database = "Lbraziliensis_proteins";}
      case "Tc"  { $database = "Tcruzi_proteins";}
      case "Tb"  { $database = "Tbrucei_proteins";}
      else       { print "$species does not match a known database." }
    }

    $database = "$blastDatabase/$database";

    my $indivOutDir = "$outputDir/$species";

    unless (-d $indivOutDir){
      my $cmd = "mkdir -p $indivOutDir";
      &exeCmd($cmd);
    }

    my $outFile = "$indivOutDir/$baseFileName.out";

    print STDERR "SPECIES: $species\t" if $verbose;
    print STDERR "DATABASE: $database\n" if $verbose;
    print STDERR "OUTDIR: $outputDir\n" if $verbose;
    print STDERR "INDIVIDUAL OUT DIR: $indivOutDir\n" if $verbose;

    my $cmd = "runAndParseBlast --ncbiBlastPath $ncbiBlastPath --queryFile $queryFile --database $database --epitopeFile $epitopeFile --outputFile $outFile";

    if ($idRegex){
      $cmd .= " --regex $idRegex";
    }

    print STDERR "CMD: $cmd\n" if $verbose;

    &exeCmd($cmd);
  }

  closedir(EDIR);
}


sub exactMapEpitopes{
  my ($outputDir, $inputDir, $subjectPath, $speciesRegex, $verbose) = @_;

#TODO: Make sure we don't get exact matches for epitope:sequence pairs that we have matches on BLAST hits for

  unless (-d $outputDir){
    my $cmd = "mkdir -p $outputDir";
    &exeCmd($cmd);
  }

  opendir(EDIR, $inputDir) or die "can't opendir '$inputDir': $!";

  my $file;
  while (defined($file = readdir(EDIR))) {
    next unless -f "$inputDir/$file";

    my $baseFileName = $file;
    $baseFileName =~ s/(\w+).\w+/$1/;

    #get the files and database that go together
    my $epitopeFile = "$inputDir/$file";

    my $species;
    if ($speciesKey) {
        $species = $speciesKey;
    } else {
        $species = $baseFileName;
        $species =~ s/$speciesRegex/$1/;
    }

    my $subjectFile;
    switch ($species) {

      case "Pb"  { $subjectFile = "PbergheiAnnotatedProteins.fsa"; }
      case "Pc"  { $subjectFile = "PchabaudiAnnotatedProteins.fsa"; }
      case "Pf"  { $subjectFile = "PfalciparumAnnotatedProteins.fsa"; }
      case "Pk"  { $subjectFile = "PknowlesiAnnotatedProteins.fsa"; }
      case "Pv"  { $subjectFile = "PvivaxAnnotatedProteins.fsa"; }
      case "Py"  { $subjectFile = "PyoeliiAnnotatedProteins.fsa"; }
      case "Tg"  { $subjectFile = "TgondiiAnnotatedProteins.fsa"; }
      case "Cp"  { $subjectFile = "CparvumAnnotatedProteins.fsa";}
      case "Cp6" { $subjectFile = "CparvumChr6AnnotatedProteins.fsa";}
      case "Ch"  { $subjectFile = "ChominisAnnotatedProteins.fsa";}
      case "Gl"  { $subjectFile = "GlambliaAnnotatedProteins.fsa";}
      case "Lb"  { $subjectFile = "LbraziliensisAnnotatedProteins.fsa";}
      case "Li"  { $subjectFile = "LinfantumAnnotatedProteins.fsa";}
      case "Lm"  { $subjectFile = "LmajorAnnotatedProteins.fsa";}
      case "Tb"  { $subjectFile = "TbruceiAnnotatedProteins.fsa";}
      case "Tc"  { $subjectFile = "TcruziAnnotatedProteins.fsa";}
      else       { print "$species does not match a known database." }
    }

    my $indivOutDir = "$outputDir/$species";

    unless (-d $indivOutDir){
      my $cmd = "mkdir -p $indivOutDir";
      &exeCmd($cmd);
    }

    my $outFile = "$indivOutDir/$baseFileName.out";

    $subjectFile = "$subjectPath/$subjectFile";

    print STDERR "SPECIES: $species\t" if $verbose;
    print STDERR "DATABASE: $subjectFile\n" if $verbose;
    print STDERR "INDIVIDUAL OUT DIR: $indivOutDir\n" if $verbose;

    my $cmd = "exactMapEpitopes --subjectFile $subjectFile --epitopeFile $epitopeFile --outputFile $outFile --rejectDuplicates";

    &exeCmd($cmd);
  }

  closedir(EDIR);
}

sub exeCmd{
  my ($cmd) = @_;

  print STDERR "$cmd\n";
  system($cmd);
  my $status = $? >> 8;
  die "Failed with status '$status running cmd: $cmd'" if $status;
}
