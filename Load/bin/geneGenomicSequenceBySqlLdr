#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;

use Bio::Seq;
use Bio::SeqIO;

my ($verbose,$outFile,$inFile);
&GetOptions("verbose!"=> \$verbose,
            "outFile=s"=> \$outFile,
	    "inFile=s"=> \$inFile);




open (IN,$inFile) || die "Can't open input file $inFile for reading\n";

open (OUT,"> $outFile") || die "Can't open output file $outFile for writing\n";

print OUT "LOAD DATA
INFILE *
INTO TABLE apidb.GeneGenomicSequence
FIELDS TERMINATED BY '\\t' OPTIONALLY ENCLOSED BY ' '
TRAILING NULLCOLS
(source_id,
 gene_genomic_sequence char(40000)
)
BEGINDATA\n";

my $seqIn  = Bio::SeqIO->new( '-format' =>  "fasta", -file => $inFile);

my %seqHash;

while (my $mySeq = $seqIn->next_seq){

$seqHash{$mySeq->id}.=$mySeq->seq;

}

foreach (keys %seqHash){

print OUT "$_\t$seqHash{$_}\n";

}
