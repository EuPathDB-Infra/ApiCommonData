#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;
use Data::Dumper;

my ($gusConfigFile,$extDbSpec,$outFile,$verbose,$inFile,$headerFile);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "extDbSpec=s" => \$extDbSpec,
	    "infile=s" => \$inFile,
            "headerfile=s" => \$headerFile,
	    "verbose!" => \$verbose,
	    "outfile=s" => \$outFile);


unless($extDbSpec && -e $inFile && $outFile) {
  print STDERR "usage plitDataForSeparateOrgs --inFile map_file --outFile out_put_file --extDbSpec 'Name|Version' [--headerfile][--gus_config_file]\n";
  exit;
}


print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());



my $dbh = $db->getQueryHandle(0);

my $extDbRlsId;

if($extDbSpec){

    my @extDbSpecList = split(/,/, $extDbSpec);

    foreach my $db (@extDbSpecList){

	$extDbRlsId .= getDbRlsId($db).",";

    }

    $extDbRlsId =~ s/(,)$//g;
}

my $sql = "select source_id,na_feature_id from dots.genefeature where external_database_release_id in ($extDbRlsId)";

my $stmt1 = $dbh->prepareAndExecute($sql);

my %genes;

while(my ($sourceId,$naFeatId) = $stmt1->fetchrow_array()) {
  $genes{$sourceId} = $naFeatId;
}

$sql = "select drf.primary_identifier from SRes.DbRef drf, DoTS.DbRefNAFeature drnf where drnf.db_ref_id=drf.db_ref_id and drnf.na_feature_id = ?";

my $stmt2 = $dbh->prepare($sql);

foreach my $sourceId (keys %genes) {
  $stmt2->execute($genes{$sourceId});

  while(my ($aliasName) = $stmt2->fetchrow_array()){
    $genes{$aliasName}=1;
  }
}
#print Dumper (\%genes);
open(FILE, $inFile) or die "Cannot open file $inFile for reading:$!";

open(OUT,">$outFile"); 

if($headerFile){
  open(HEADERFILE, $headerFile) or die "Cannot open file $headerFile for reading:$!";
  while(<HEADERFILE>){
    next unless($_);
    print OUT "$_";
  }
}
while(<FILE>) {

  next unless($_);

  my ($sourceId) = split(/\t/, $_);

  if($genes{$sourceId}){
        print OUT "$_";
    }

}


sub getDbRlsId {

  my ($extDbRlsSpec) = @_;

  my ($extDbName, $extDbRlsVer) = &getExtDbInfo($extDbRlsSpec);

  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($extDbName,$extDbRlsVer);

  my ($extDbRlsId) = $stmt->fetchrow_array();

  return $extDbRlsId;
}

sub getExtDbInfo {
  my ($extDbRlsSpec) = @_;
  if ($extDbRlsSpec =~ /(.+)\|(.+)/) {
    my $extDbName = $1;
    my $extDbRlsVer = $2;
    return ($extDbName, $extDbRlsVer);
  } else {
    die("Database specifier '$extDbRlsSpec' is not in 'name|version' format");
  }
}


