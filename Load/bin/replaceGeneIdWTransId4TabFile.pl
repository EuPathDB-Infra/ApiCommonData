#!/usr/bin/perl

use strict;
use Getopt::Long;

## usage: replaceGeneIdWTransId4TabFile.pl --gene2TransFile geneToTranscriptId.txt --inputTabFile products.txt --fileType productName > ../final/products.txt
## only for genes that do not have alternative splicing
 


my ($gene2TransFile, $inputTabFile, $fileType, $help);

&GetOptions('gene2TransFile=s' => \$gene2TransFile,
            'inputTabFile=s' => \$inputTabFile,
            'fileType=s' => \$fileType,
            'help|h' => \$help,
            );
&usage() if($help);
&usage("Missing a Required Argument") unless(defined $gene2TransFile && $inputTabFile && $fileType);

my %gene2Trans;

open (GT, $gene2TransFile) || die "can not open file to read\n";
while (<GT>) {
  chomp;
  my @items = split (/\s+/, $_);
  $items[0] =~ s/^>//;
  push (@{$gene2Trans{$items[0]}}, $items[1]) if ($items[0] && $items[1]);
}
close GT;

#foreach my $k (sort keys %gene2Trans) {
#  foreach my $i (0..$#{$gene2Trans{$k}}) {
#    print "$k, $gene2Trans{$k}[$i]\n";
#  }
#}

open (IN, $inputTabFile) || die "can not open input file to read.\n";
while (<IN>) {
  chomp;
  my @vals = split (/\t/, $_);
  my @newVals = @vals;

  if ($fileType =~ /go/i ) {  ## for GO
    if ($gene2Trans{$vals[1]}) {
      foreach my $i (0..$#{$gene2Trans{$vals[1]}}) {
	$newVals[1] = $gene2Trans{$vals[1]}[$i];
	$newVals[2] = $gene2Trans{$vals[2]}[$i];
	&printTabColumn (\@newVals);
      }
    }
#    $vals[1] = $gene2Trans{$vals[1]} if ($gene2Trans{$vals[1]});
#    $vals[2] = $gene2Trans{$vals[2]} if ($gene2Trans{$vals[2]});

  } elsif ($fileType =~ /product/i) {  ## for product
    if ($gene2Trans{$vals[0]}) {
      foreach my $i (0..$#{$gene2Trans{$vals[0]}}) {
	$newVals[0] = $gene2Trans{$vals[0]}[$i];
	&printTabColumn (\@newVals);
      }
    }
    #$vals[0] = $gene2Trans{$vals[0]} if ($gene2Trans{$vals[0]});

  } else {
    print "file Type has not been coded yet\n";
  }

#  &printTabColumn (\@vals);

}
close IN;


sub printTabColumn {
  my $array = shift;
  foreach my $i (0..$#{$array}) {
    ($i == $#{$array}) ? print "$array->[$i]\n" : print "$array->[$i]\t";
  }
  return 0;
}


sub usage {
  die
"
A script to replace gene ID with transcript ID generated by the script gusExtractSequences

usage: replaceGeneIdWTransId4TabFile.pl --gene2TransFile geneToTranscriptId.txt --inputTabFile products.txt --fileType productName > ../final/products.txt
 

where
  --gene2TransFile:  A gene ID to Transcript ID file that generated by gusExtractSequences script
  --inputTabFile:    A tab delimited file, for example, products.txt, go_associations.gas, comments.txt
  --fileType:        product, GO, and etc. 

";
}
