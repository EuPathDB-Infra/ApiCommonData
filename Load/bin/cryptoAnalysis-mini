#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use GUS::Pipeline::Manager;
use GUS::Pipeline::MakeTaskDirs;
use GUS::Pipeline::NfsCluster;
use GUS::Pipeline::SshCluster;
use CBIL::Util::PropertySet;
use CBIL::Util::GenomeDir;
use File::Basename;

# the "Steps" module contains all the pipeline-step routines
# that are called below.

use ApiComplexa::DataLoad::Steps;

$| = 1;
umask 002;


my $propertiesFile = $ARGV[0];

&usage unless -e $propertiesFile;

# [name, default (or null if reqd), comment]
my @properties = 
(
 # properties required by Pipeline API  - incomplete, waiting for steps
 ["blastmatrix.taskSize", "",  "number of seqs to process per blastmatrix subtask"],
 ["blastsimilarity.params", "", "paramters for blastsimilarity"],
 ["blastsimilarity.taskSize", "",  "number of seqs to process per blastsimilarity subtask"],
 ["buildDir",   "",  "root of the build's directory tree"],
 ["cap4Dir", "", "directory containing executable cap4"],
 ["clusterServer", "",  "full name of cluster server"],
 ["contigDbName", "", "sres.externaldatabase.name for contigs"],
 ["contigDbRlsVer", "", "sres.externaldatabaserelease.version for contigs"],
 ["externalDbDir", "", "directory for downloading data from external databases"],
 ["fileOfRepeats", "", "repeat file for use by repeatmasker"],
 ["gb_db_rel_id", "", "genbank external_database_release_id"],
 ["genusNickname", "", "e.g Crypto"],
 ["gusConfigFile",           "",  ""],
 ["includeSubspecies", "", "yes or no, get a list of taxon_ids for the subspecies of the given taxon_id(ncbi_tax_id)"],
 ["intermedCluster.length",  "",  "min length cut-off for clustering algorithm"],
 ["intermedCluster.percent",  "",  "min percent identity cutoff for clustering algorithm"],
 ["intermedCluster.logbase",  "",  ""],
 ["intermedCluster.consistentEnds",  "",  "requirement for consistent ends, yes or no"],
 ["intermedCluster.cliqueSzArray",  "",  ""],
 ["intermedCluster.logbaseArray",  "",  ""],
 ["gusConfigFile",  "",  "gus configuration file"],
 ["loadContigs-nrdbRestart",  "",  "algorithm_invocation_id(s) of previous starts, for restart of BLAST similarity loading plugin"],
 ["nrdbDbName" , "","the externaldatabase.name for nrdb"],
 ["nrdbDbRlsVer" , "","the externaldatabaserelease.version for the current nrdb"],
 ["nodePath",             "",  "full path of scratch dir on cluster node"],
 ["phrapDir",             "",  "full path of directory containing phrap software"],
 ["projectId",             "",  "project_id from core.projectInfo"],
 ["release",   "",  "build release number"],
 ["repeatmask.dangleMax", "","option for trimDangling in repeatMasker"],
 ["repeatmask.options",   "",  "number of seqs to process per blastmatrix subtask"],
 ["repeatmask.path",      "",  "path on node of repeatmask executable"],
 ["repeatmask.taskSize",  "",  "number of seqs to process per repeatmask subtask"],
 ["serverPath", "",  "full path of update dir on cluster server"],
 ["speciesNickname", "",  "list eg Cparvum,Chominis"],
 ["stopBefore",   "none",  "the step to stop before.  uses the signal name"],
 ["taskSize",  "",  "number of seqs to process per subtask"],
 ["ncbiTaxId", "", "tax_id from NCBI taxonomy db"],
 ["testNextPlugin", "false", "'true' to run in no-commit mode the first plugin not yet done and then exit"],
 ["wuBlastBinPathCluster",         "",  "path of wu blast bin dir on Liniac"]
 ); 

my $propertySet  = CBIL::Util::PropertySet->new($propertiesFile, \@properties, 1);

my $buildDir = $propertySet->getProp('buildDir');
my $release = $propertySet->getProp('release');
my $genusNickname = $propertySet->getProp('genusNickname');
my $buildName = "$release/analysis_pipeline/$genusNickname";
my $pipelineDir = "$buildDir/$buildName";

##########################  The Pipeline  ##########################

my $cluster;
if ($propertySet->getProp('clusterServer') ne "none") {
  $cluster = GUS::Pipeline::SshCluster->new($propertySet->getProp('clusterServer'),
					  $propertySet->getProp('clusterUser') );
} else {
  $cluster = GUS::Pipeline::NfsCluster->new();
}

my $mgr = GUS::Pipeline::Manager->new($pipelineDir, $propertySet, 
				      $propertiesFile, $cluster, 
				      $propertySet->getProp('testNextPlugin'));


$mgr->{buildName} = $buildName;
$mgr->{pipelineDir} = $pipelineDir;
$mgr->{propertiesFile} = $propertiesFile;
$mgr->{propertySet} = $propertySet;

my $taxonHsh = &getTaxonIdFromTaxId($mgr);
$mgr->{taxonHsh} = $taxonHsh;

my $contigDbRlsHsh = &getContigDbRlsHsh($mgr);
$mgr->{contigDbRlsHsh} = $contigDbRlsHsh;

&createPipelineDir($mgr); # signal createDir

&copyPipelineDirToComputeCluster($mgr); # signal dir2cluster

##ED ADDED HERE BELOW.  ADD THIS TO FINAL PIPELINE
#&extractAnnotatedProteins($mgr, "SignalP", "70");
#&copyFilesToComputeCluster($mgr,"SignalP"); # signal unalignedtranscriptsToCluster
#&runSignalP($mgr, "SignalP","signalp -t euk -f short -m nn+hmm -q -d ","/usr/local/jk/signalp-3.0/")
#	#&copyFilesFromComputeCluster($mgr,"SignalP" "/scratch/erobinso/analysisPipeline"); # signal copy${name}ResultsFromCluster
#&loadSignalPData($mgr, "SignalP", "SignalP", "3.0", "SignalP-3.0", "gusproject", "/home/erobinso/siggy.txt")

#&extractAnnotatedProteins($mgr, "TMHmm");
#&copyFilesToComputeCluster($mgr,"TMHmm"); # signal unalignedtranscriptsToCluster
#&runTMHmm($mgr, "TMHmm", "tmhmm -short -workdir=", "/usr/local/TMHMM/bin/")
	#&copyFilesFromComputeCluster($mgr,"TMHmm"); # signal copy${name}ResultsFromCluster
#&loadTMHmmData($mgr, "TMHmm", "TMHmm.out", "TMHmm", "2.0", "CBS_TMHmm-2.0", "gusproject", "/home/erobinso/tmm.txt");

&extractAnnotatedProteins($mgr, "Pfam");
&copyFilesToComputeCluster($mgr,"Pfam"); # signal unalignedtranscriptsToCluster
&cutFastaFileOnCluster($mgr, "Pfam");
&runPfamHmm($mgr, "Pfam", "--cut_ga -A 0 --acc Pfam_ls", "/usr/local/bin/");
#&copyFilesFromComputeCluster($mgr,"PfamHmm"); # signal copy${name}ResultsFromCluster
#&loadPfamHmmData($mgr, "Pfam", "Pfam.out", "Pfam", "unk", "Pfam-hmm", "gusproject", "/home/erobinso/PfamHmm.txt");`


$mgr->goodbye("Pipeline complete!\n");





