#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use FileHandle;

my ($file,$verbose);
&GetOptions("file=s" => \$file,
	    "verbose!" => \$verbose);


die "usage:filterDbXRefOutput --file
     creates subfiles of dbXRefBySeqIdentity output based on source db abreviation
     must supply the output file from dbXRefBySeqIdentity and the file must
     contain 4 columns: queryIdentifier nrdb_gi nrdb_accession db_abbreviation\n" if (! -e $file);


my %db;

my $fh = new FileHandle("$file","<") || die "Can't open $file\n";

while(my $line = $fh->getline){
  $line =~ s/\s+$//;
  my @ln = split(/\t/,$line);

  push(@{$db{$ln[3]}},$line);
}

foreach my $database (keys %db) {

  my $filename = "${file}_$database";
  my $dbFH = new FileHandle("$filename",">") || die "Can't open $filename for writing\n";

  foreach my $line (@{$db{$database}}) {
    print $dbFH ("$line\n");
  }
}

