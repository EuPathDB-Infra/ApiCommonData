#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | broken
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | broken
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;
use GUS::Model::Study::OntologyEntry;
use GUS::Model::Core::UserInfo;
use GUS::Model::SRes::Contact;

# This script is to be used before LoadArrayDesign plugin can be employed.
# It adds an entry in Study.OntologyEntry and if need be, in SRes.Contact.
# All args are to be input from user, to allow for the script re-use.

# For SAGE data, the args values needed are:
#  category ="TechnologyType"
#  value="SAGE"
#  manufacturer is contact_name, who should be present in, else is added to SRes.Contact

# Example run, for SAGE data:
#  perl preLoadArrayDesign --category TechnologyType --value SAGE  --manufacturer "Michael White" --verbose


my ($verbose, $category, $value, $manufacturer, $gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "category=s"=> \$category,
	    "value=s" => \$value,
	    "manufacturer=s" => \$manufacturer,
            "gusConfigFile=s" => \$gusConfigFile);

die "usage: preLoadArrayDesign --category <string> --value <string> --manufacturer <string>  --verbose --gusConfigFile [\$GUS_CONFIG_FILE]\n" 
    unless ($category && $value);


print STDERR "Establishing dbi login\n" if $verbose;

$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName()
				       );
my $dbh = $db->getQueryHandle();


# OntologyEntry
my $oeHash;
$oeHash->{category}=$category;
$oeHash->{value}=$value;
$oeHash->{name}='user_defined';

my $oe = GUS::Model::Study::OntologyEntry->new($oeHash);

if ($oe->retrieveFromDB()){
  my $id = $oe->getId();
  print "Found ontology_entry_id=$id with category='$category' and value='$value'\n" if $verbose;
}
else {
  print "Could not find OntologyEntry with category='$category' and value='$value'\n" if $verbose;

  my $uiHash;
  $uiHash->{login} = $gusconfig->getUserName;
  my $ui= GUS::Model::Core::UserInfo->new($uiHash);
  $ui->retrieveFromDB();

  $oeHash->{row_user_id}=$ui->getId();
  $oeHash->{row_alg_invocation_id}=0;
  $oe = GUS::Model::Study::OntologyEntry->new($oeHash);
  print "Found user='$uiHash->{login}' with user_id=$oeHash->{row_user_id}\n" if $verbose;

  $oe->submit();
  my $id = $oe->getId();

  print "Added row in OntologyEntry with ontology_entry_id=$id for category='$category' and value='$value'\n" if $verbose;

}

# SRes.Contact
my $contactHash;
$contactHash->{name} = $manufacturer;

my $contact= GUS::Model::SRes::Contact->new($contactHash);

if ($contact->retrieveFromDB()){
  my $id = $contact->getId();
  print "Found contact='$manufacturer' with contact_id=$id\n" if $verbose;
} else {
  print "Could not find contact with name='$manufacturer'\n" if $verbose;

  my $uiHash;
  $uiHash->{login} = $gusconfig->getUserName;
  my $ui= GUS::Model::Core::UserInfo->new($uiHash);
  $ui->retrieveFromDB();

  $contactHash->{row_user_id}=$ui->getId();
  $contactHash->{row_alg_invocation_id}=0;
  $contact = GUS::Model::SRes::Contact->new($contactHash);
  print "Found user='$uiHash->{login}' with user_id=$contactHash->{row_user_id}\n" if $verbose;

  $contact->submit();
  my $id = $contact->getId();

  print "Added contact='$manufacturer' in Sres.Contact with contact_id=$id\n" if $verbose;

}

