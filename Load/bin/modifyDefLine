#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | broken
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

#only use --strain if there is no strain info associated with the taxon name
my ($gusConfigFile,$inFile,$type,$strain,$outFile,$extDb,$extDbVer,$sequenceTable,$seqExtDb,$seqExtDbVer,$verbose);

&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "sequenceTable=s" => \$sequenceTable,
	    "type=s" => \$type,
	    "strain:s" => \$strain,
	    "extDb=s" => \$extDb,
	    "extDbVer=s" => \$extDbVer,
	    "seqExtDb=s" => \$seqExtDb,
	    "seqExtDbVer=s" => \$seqExtDbVer,
	    "verbose!" => \$verbose,
	    "outfile=s" => \$outFile,
	    "infile=s" => \$inFile);



print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

my $extDbRls = getDbRlsId();

my $seqDbRls = getSeqDbRls() if ($seqExtDb && $seqExtDbVer);

my $sql = "select v.na_sequence_id,s.term_name from dots.transcript v,sres.sequenceontology s where v.source_id = ? and external_database_release_id = $extDbRls and v.sequence_ontology_id = s.sequence_ontology_id";

my $stmt1 = $dbh->prepare($sql);

$extDbRls = $seqDbRls if $seqDbRls;

$sql = "select ns.source_id,tn.name from dots.$sequenceTable ns,sres.taxonname tn where ns.external_database_release_id = $extDbRls and ns.na_sequence_id = ? and ns.taxon_id = tn.taxon_id and tn.name_class = 'scientific name'";

my $stmt2 = $dbh->prepare($sql);

open(FILE,$inFile);

open(OUT,">$outFile");

while(<FILE>){
  if ($_ =~ />(\S+)/){
    my $sourceId = $1;
    my ($naSeqId,$soTerm) = getIdAndSOTerm($1);
    my $desc = getDesc($soTerm);
    my ($chrSourceId,$taxonName) = getChrAndTaxonName($naSeqId);
    my $dataSource = $seqDbRls ? getPredictionSource() : getDataSource($chrSourceId);

    if ($strain){
      $taxonName .= "_$strain";
    }

    my $defline = ">$taxonName|$chrSourceId|$sourceId|$type Annotation|$dataSource|$desc";

    if ($_ =~ />\S+\s+(.+)\s+length/){$defline .= " $1";}

    $defline .= "\n";

    print OUT "$defline";
  }
  else {
    print OUT "$_";
  }
}

sub getDbRlsId {
  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($extDb,$extDbVer);

  my ($extDbRlsId) = $stmt->fetchrow_array();

  return $extDbRlsId;
}


sub getSeqDbRls {
  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($seqExtDb,$seqExtDbVer);

  my ($seqExtDbRlsId) = $stmt->fetchrow_array();

  return $seqExtDbRlsId;
}

sub getIdAndSOTerm {
  my ($id) = @_;

  $stmt1->execute($id);

  my ($naSeqId,$soTerm) = $stmt1->fetchrow_array;

  $stmt1->finish();

  return ($naSeqId,$soTerm);
}

sub getDesc {
  my ($soTerm) = @_;

  my $desc;

  $desc = "(protein coding)" if ($soTerm =~ /protein_coding/);
  $desc = "(pseudogenic)" if ($soTerm =~ /pseudogenic/);
  $desc = "(non_coding)" if ($soTerm =~ /nc_primary/);

  return $desc;
}

sub getChrAndTaxonName {
  my ($naSeqId) = @_;

  $stmt2->execute($naSeqId);

  my ($chrSourceId,$taxonName) = $stmt2->fetchrow_array;

  $stmt1->finish();

  $taxonName =~ s/\s/\_/g;

  return ($chrSourceId,$taxonName);
}

sub getDataSource {
  my ($chrSourceId) =@_;

  my $source;

  if ($type eq 'Tg'){
    $source = 'Toxoplasma_gondii_TIGR';
  }
  elsif ($type eq 'Pv') {
    $source = 'Plasmodium_vivax_TIGR';
  }
  elsif ($type eq 'Py') {
    $source = 'Plasmodium_yoelii_TIGR';
  }
  elsif ($type eq 'Pb') {
    $source = 'Plasmodium_berghei_Sanger';
  }
  elsif ($type eq 'Pc') {
    $source = 'Plasmodium_chabaudi_Sanger';
  }
  else {
    $chrSourceId =~ s/\s//g;
    $source = 'Plasmodium_falciparum_TIGR' if ($chrSourceId =~ /MAL2\b|MAL10\b|MAL11\b|MAL14\b/);
    $source = 'Plasmodium_falciparum_Sanger' if ($chrSourceId =~ /MAL1\b|MAL3\b|MAL4\b|MAL5\b|MAL6\b|MAL7\b|MAL8\b|MAL9\b|MAL13\b/);
    $source = 'Plasmodium_falciparum_Stanford' if ($chrSourceId =~ /MAL12\b/);
    $source = 'Plasmodium_falciparum_plastid_NCBI' if ($chrSourceId =~ /X9527/);
  }

  return $source;

}


sub getPredictionSource {
  my $source;

  if ($type eq 'Tg'){
    $source = 'Toxoplasma_gondii_predicted';
  }
  elsif ($type eq 'Pv') {
    $source = 'Plasmodium_vivax_predicted';
  }
  elsif ($type eq 'Py') {
    $source = 'Plasmodium_yoelii_predicted';
  }
  elsif ($type eq 'Pb') {
    $source = 'Plasmodium_berghei_predicted';
  }
  elsif ($type eq 'Pc') {
    $source = 'Plasmodium_chabaudi_predicted';
  }
  else {
    $source = 'Plasmodium_falciparum_predicted';
  }

  return $source;
}
