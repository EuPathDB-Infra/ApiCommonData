#!/usr/bin/perl -w
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

####################################################################
# $this db_name 
# db_name: the name of database of interest, for instance,'crypto'

#Notes:
# 1. you need to start pathway-tools with option '-api'
# 2. install perlcyc modules to make the script work

###################################################################

use strict;
use perlcyc;

chomp(my $this = `basename $0`);

if(@ARGV!=1) {
   print ("Usage:\n $this db_name \n");
   exit;
};

my  $db = $ARGV[0];
my $cyc = perlcyc->new($db);

my @genes = $cyc -> get_class_all_instances("|Genes|");

for my $g (@genes) {
  my @p = $cyc->pathways_of_gene($g);
  next if ! @p;
  my @c;
  for my $p (@p) {
    push @c, $cyc->get_slot_value($p, "common-name"); 
  }
  print $g . "\t";
  print join('; ', @c);
  print "\n";
}

exit;

__END__
my @pathways = $cyc -> all_pathways();

for my $p (@pathways) {
  print $p . "\t";
  my @genes = $cyc->genes_of_pathway($p);
  foreach my $g (@genes) {
	print $g . ",";
  }
  print "\n";
}

exit;


