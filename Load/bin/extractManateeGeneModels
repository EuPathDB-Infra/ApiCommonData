#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use warnings;

use DBI;
use List::Util qw(min max);
use Getopt::Long qw(GetOptions);

my ($database, $user, $password,
    $outfile, $annotation, $source);

GetOptions("user:s" => \$user,
	   "database|db=s" => \$database,
	   "password|pw=s" => \$password,
	   "outfile:s" => \$outfile,
	   "annotation" => \$annotation,
	   "source:s" => \$source,
	  );

if ($annotation && $source) {
  die "Please choose either --annotation *or* --source flags, not both\n";
}

if ($annotation) {
  $source = "working";
}

my $dbh = DBI->connect("dbi:mysql:$database", $user, $password)
  or die $DBI::errstr;

if ($outfile) {
  open(OUT, ">$outfile") or die "Can't open file $outfile: $!\n";
} else {
  *OUT = \*STDOUT;
}

my $sthTU = $dbh->prepare(<<EOSQL);
  SELECT tu_link.parent_feat,
         LEAST(tu.end5, tu.end3) AS tu_start,
         GREATEST(tu.end5, tu.end3) AS tu_stop,
         ident.com_name,
         ident.is_pseudogene,
         ident.ec_
  FROM   ident
         INNER JOIN asm_feature AS tu USING (feat_name)
         INNER JOIN feat_link AS tu_link ON (tu_link.parent_feat = tu.feat_name)
  WHERE  tu_link.child_feat = ?
    AND  tu.feat_type = "TU"
  ORDER BY tu.date DESC
  LIMIT 1
EOSQL

my $sthPubLocus = $dbh->prepare(<<EOSQL);
  SELECT ident.pub_locus
  FROM   clone_info 
         INNER JOIN asm_feature AS tu USING (asmbl_id) 
         INNER JOIN ident USING (feat_name)
  WHERE  tu.feat_type = "TU"
  AND    is_public = 1
  AND    ident.feat_name = ?
EOSQL

my $sthModel = $dbh->prepare(<<EOSQL);
  SELECT clone_info.clone_name AS scaffold,
         model.feat_name AS model_id,
         LEAST(model.end5, model.end3) AS model_start,
         GREATEST(model.end5, model.end3) AS model_stop,
         IF(model.end5 > model.end3, 1, 0) AS is_reversed,
         model.protein AS protein
  FROM   clone_info
         INNER JOIN asm_feature AS model USING (asmbl_id)
         INNER JOIN phys_ev USING (feat_name)
  WHERE  model.feat_type = "model"
    AND  phys_ev.ev_type = ?
    AND  clone_info.is_public = 1
EOSQL

my $sthExon = $dbh->prepare(<<EOSQL);
  SELECT LEAST(exon.end5, exon.end3) AS exon_start,
         GREATEST(exon.end5, exon.end3) AS exon_stop,
         exon.feat_name AS feat_name
  FROM   feat_link AS model_link
         INNER JOIN asm_feature AS exon ON (model_link.child_feat = exon.feat_name)
  WHERE  model_link.parent_feat = ?
    AND  exon.feat_type = "exon"
  ORDER BY IF(exon.end5 > exon.end3, -exon.end5, exon.end5) ASC
EOSQL

my $sthCDS = $dbh->prepare(<<EOSQL);
  SELECT cds.end5 AS cds_start,
         cds.end3 AS cds_stop
  FROM   feat_link AS exon_link
         INNER JOIN asm_feature AS cds ON (exon_link.child_feat = cds.feat_name)
  WHERE  exon_link.parent_feat = ?
    AND  cds.feat_type = "CDS"
EOSQL

# RNAs ...
my $sthRNA = $dbh->prepare(<<EOSQL);
  SELECT clone_info.clone_name AS scaffold,
         model.feat_name AS model_id,
         LEAST(model.end5, model.end3) AS model_start,
         GREATEST(model.end5, model.end3) AS model_stop,
         IF(model.end5 > model.end3, 1, 0) AS is_reversed,
         model.feat_type
  FROM   clone_info
         INNER JOIN asm_feature AS model USING (asmbl_id)
  WHERE  model.feat_type in ("tRNA","rRNA")
    AND  clone_info.is_public = 1
EOSQL

my $sthRnaDesc = $dbh->prepare(<<EOSQL);
 select com_name,pub_locus from ident where feat_name = ?
EOSQL



$sthModel->execute($source);
while (my ($scaffold, $sourceId, $modelStart, $modelStop, $isReversed, $proteinSeq) = $sthModel->fetchrow_array()) {

  my $strand = $isReversed ? "-" : "+";

  $sthTU->execute($sourceId);
  my ($tuName, $tuStart, $tuStop, $product, $isPseudo, $ecNumber) = $sthTU->fetchrow_array();

  # extract pub_locus if stored in mysql database (as is for pv and py)
  my $pubLocus;
  $sthPubLocus->execute($tuName);
  $pubLocus = $sthPubLocus->fetchrow_array();
  my $aliases;

  my $exonCount = 0;

  my ($minStart, $maxStop);
  my @exons;

  # select all exons from this model
  $sthExon->execute($sourceId);

  # if pub_locus exists (as does for pv and py) capture sourceId as alias, and pub_locus as sourceId
  if ($pubLocus){
      $aliases = $sourceId;
      $sourceId = $pubLocus if ($pubLocus);
  }

  while (my ($exonStart, $exonStop, $exonFeature) = $sthExon->fetchrow_array()) {
    $exonCount++;

    $minStart = $minStart ? min($exonStart, $minStart) : $exonStart;
    $maxStop  = $maxStop ? max($exonStop, $maxStop) : $exonStop;

    # select all CDS from this exon
    $sthCDS->execute($exonFeature);
    my $cdsCount = 0;
    while (my ($CDSStart, $CDSStop) = $sthCDS->fetchrow_array()) {
      $cdsCount++;

      if ($cdsCount > 1) {
	die "model $sourceId, exon $exonFeature has more than one CDS !?!\n";
      }


      push @exons, join("\t",
			$scaffold,
			$annotation ? "annotation" : $source,
			"exon",
			$exonStart,
			$exonStop,
			".",
			$strand,
			"0",
			join(" ; ",
			     qq{GenePrediction "$sourceId"},
			     qq{OrderNumber $exonCount},
			     qq{CodingStart $CDSStart},
			     qq{CodingEnd $CDSStop},
			    ),
		       );
    }

    unless ($cdsCount) {
      push @exons, join("\t",
			$scaffold,
			$annotation ? "annotation" : $source,
			"exon",
			$exonStart,
			$exonStop,
			".",
			$strand,
			"0",
			join(" ; ",
			     qq{GenePrediction "$sourceId"},
			     qq{OrderNumber $exonCount},
			     qq{CodingStart @{[$annotation ? -1 : $exonStart]}},
			     qq{CodingEnd @{[$annotation ? -1 : $exonStop]}},
			    ),
		       );
    }
  }


  print OUT join("\t",
		 $scaffold,
		 $annotation ? "annotation" : $source,
		 "transcript",
		 $minStart,
		 $maxStop,
		 ".",
		 $strand,
		 ".",
		 join(" ; ",
		      qq{GenePrediction "$sourceId"},
		      ($product    ? qq{Note "$product"} : ()),
		      ($aliases    ? qq{Aliases "$aliases"} : ()),
		      ($tuName     ? qq{TU "$tuName"} : ()),
		      ($isPseudo   ? "Pseudo 1" : ()),
		      qq(GeneType "protein_coding"),
		      ($ecNumber   ? qq{ECNumber "$ecNumber"} : ()),
		      ($proteinSeq ? qq{Protein "$proteinSeq"} : ()),
		     )
		), "\n";

  print OUT join("\n", @exons), "\n";
}

##now do the RNAs.  NOTE that for trich all are single exons ... this will now work otherwise!
$sthRNA->execute();
while (my ($scaffold, $sourceId, $modelStart, $modelStop, $isReversed, $rnaType) = $sthRNA->fetchrow_array()) {
  my $strand = $isReversed ? "-" : "+";
  $sthRnaDesc->execute($sourceId);
  my($product,$gene_id) = $sthRnaDesc->fetchrow_array();


  print OUT join("\t",
		 $scaffold,
		 $annotation ? "annotation" : $source,
		 "transcript",
		 $modelStart,
		 $modelStop,
		 ".",
		 $strand,
		 ".",
		 join(" ; ",
		      ($gene_id ? qq{GenePrediction "$gene_id"} : qq{GenePrediction "$sourceId"}),
		      ($product    ? qq{Note "$product"} : ()),
		      ($gene_id ? qq{Aliases "$sourceId"} : ()),
		      qq{GeneType "$rnaType"},
		     )
		), "\n";

  print OUT join("\t",
                 $scaffold,
                 $annotation ? "annotation" : $source,
                 "exon",
                 $modelStart,
                 $modelStop,
                 ".",
                 $strand,
                 "0",
                 join(" ; ",
		      ($gene_id ? qq{GenePrediction "$gene_id"} : qq{GenePrediction "$sourceId"}),
                      qq{OrderNumber 1},
                     ),
                ), "\n";
}

close(OUT);
$sthTU->finish();
$sthModel->finish();
$sthExon->finish();
$sthCDS->finish();
$sthPubLocus->finish();
$sthRNA->finish();
$sthRnaDesc->finish();
$dbh->disconnect();
