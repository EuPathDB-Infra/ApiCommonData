#!/usr/bin/perl

use strict;
use warnings;
use List::Util qw(min max);

use DBI;
use Getopt::Long qw(GetOptions);

my ($database, $user, $password);
GetOptions("user:s" => \$user,
       "database|db:s" => \$database,
       "password|pw:s" => \$password,
      );

my $dbh = DBI->connect("dbi:mysql:$database", $user, $password)
  or die $DBI::errstr;

#Fetch all TU from manateeTg
my $sql = <<EOSQL;
SELECT clone_info.clone_name as scaffold, ident.com_name as product, tu.feat_name AS feat_name, ident.is_pseudogene FROM clone_info, asm_feature AS tu, ident WHERE tu.asmbl_id = clone_info.asmbl_id AND clone_info.is_public = 1 AND tu.feat_type = "TU" AND tu.feat_name = ident.feat_name
EOSQL

my $sthTu = $dbh->prepare($sql);
$sthTu->execute();

while ( my($scaffold, $product, $featName, $isPseudo) = $sthTu->fetchrow_array()) {

  #fetch all models for each featName

  my $featNameQuoted = $dbh->quote($featName);

  $sql = <<EOSQL;
SELECT model.feat_name as source_id from feat_link AS tu_link, asm_feature AS model, phys_ev WHERE tu_link.parent_feat = $featNameQuoted AND tu_link.child_feat = model.feat_name AND model.feat_type = "model" AND model.feat_name = phys_ev.feat_name AND phys_ev.ev_type = "working"
EOSQL

  my $sthModel = $dbh->prepare($sql);
  $sthModel->execute();
  while ( my($sourceId) = $sthModel->fetchrow_array()) {

    my $exonCount = 0;

    #select all exons from manateeTg

    my $sourceIdQuoted = $dbh->quote($sourceId);

    $sql = <<EOSQL;
SELECT least(exon.end5, exon.end3) as exon_start, greatest(exon.end5, exon.end3) as exon_stop, exon.feat_name AS feat_name FROM feat_link AS model_link, asm_feature AS exon WHERE model_link.parent_feat = $sourceIdQuoted AND model_link.child_feat = exon.feat_name AND exon.feat_type = "exon"
EOSQL

    my $sthExon = $dbh->prepare($sql);
    $sthExon->execute();
    while ( my($exonStart, $exonEnd, $exonFeature) = $sthExon->fetchrow_array()) {

      $exonCount ++;

      # select all CDS from manateeTg

      my $exonFeatureQuoted = $dbh->quote($exonFeature);

      $sql = <<EOSQL;
SELECT least(cds.end5, cds.end3) as cds_start, greatest(cds.end5, cds.end3) as cds_stop, if(cds.end5 > cds.end3, 1, 0) as is_reversed FROM feat_link AS exon_link LEFT JOIN asm_feature AS cds ON (exon_link.child_feat = cds.feat_name) WHERE exon_link.parent_feat = $exonFeatureQuoted AND cds.feat_type = "CDS"
EOSQL

      my $sthCDS = $dbh->prepare($sql);
      $sthCDS->execute();
      while ( my($CDSStart, $CDSEnd, $isReversed) = $sthCDS->fetchrow_array()) {

	if ($isReversed == 1){
	  $isReversed = "-";
	}
	else{
	  $isReversed = "+";
	}

	#print gff
	print join("\n", join("\t", $scaffold, "TIGRannot", "transcript", $exonStart, $exonEnd, ".", $isReversed, ".", "GenePrediction \"$sourceId\" ;", "Note \"$product\" ;", "Protein"), join("\t", $scaffold, "TIGRannot", "exon", $exonStart, $exonEnd, ".", $isReversed, "0", "GenePrediction \"$sourceId\" ;", "OrderNumber $exonCount ;", "CodingEnd $CDSEnd ;", "CodingStart $CDSStart"));
print "\n";

	if ($isPseudo){
	  print join("\n", join("\t", $scaffold, "TIGRannot", "transcript", $exonStart, $exonEnd, ".", $isReversed, ".", "GenePrediction \"$sourceId\" ;", "Note \"$product\" ;", "Pseudogene 1 ;", "Protein"), join("\t", $scaffold, "TIGRannot", "exon", $exonStart, $exonEnd, ".", $isReversed, "0", "GenePrediction \"$sourceId\" ;", "OrderNumber $exonCount ;", "CodingEnd $CDSEnd ;", "CodingStart $CDSStart"));
print "\n";

	}

      }
      $sthCDS->finish();
    }
    $sthExon->finish();
  }
  $sthModel->finish();
}


$sthTu->finish();
$dbh->disconnect()
    or warn "Disconnection failed: $DBI::errstr\n";
