#!@perl@
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | reviewed
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^


###################################################################################
##                                                                               ##
## This script is used to create a config file to extractQualifierFromAnnotation ##
## 
## locus_tag:	method="sourceId"
## product:	    method="products"
## EC_number:	method="ec"
## protein_id:	method="aliases"
## note:	    method="comments"
## db_xref:	    method="dbxref"
## GO_component:	method="associationsC"
## GO_function:		method="associationsF"
## GO_process:		method="associationsP"
## GO:			method="associations"
## gO:			method="associations"
##
## gene:	    method="geneName"   ## sometime gene in genbank format is sourceId
## 
## gene_synonym:	method="altId_aliases"
## gene_synonym: sometime is aliases with idType as alternative id, but not always
## 
## see the end of this script for an example of config.xml file
##################################################################################


use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Bio::SeqFeature::Tools::Unflattener;
use Bio::Tools::GFF;
use Bio::Seq::RichSeq;
use GUS::Supported::SequenceIterator;
use Bio::DB::GFF::Aggregator;
use Getopt::Long;

use Data::Dumper;

my ($format,$fileOrDir, $xmlOutput, $unflatten, $gff2GroupTag, $verbose, $help);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'format=s' => \$format,
            'fileOrDir=s' => \$fileOrDir,
            'xmlOutput' => \$xmlOutput,
            'unflatten' => \$unflatten,
            'gff2GroupTag=s' => \$gff2GroupTag,
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $format && $fileOrDir && $xmlOutput);
#&usage("Missing a Required Argument") unless(defined $format && $fileOrDir);
&usage("gff2 files require gff2GroupTag argument") if($format eq 'gff2' && !($gff2GroupTag));


die "File or directory '$fileOrDir' does not exist\n" unless -e $fileOrDir;

my @files;
if (-d $fileOrDir) {
	opendir(DIR, $fileOrDir) || die "Can't open directory '$fileOrDir'";
	my @noDotFiles = grep { $_ ne '.' && $_ ne '..' } readdir(DIR);
	@files = map { "$fileOrDir/$_" } @noDotFiles;
} else {
	$files[0] = $fileOrDir;
}

my $features = {};
my %featureCounts;

my $unflattener = Bio::SeqFeature::Tools::Unflattener->new();

foreach my $file (@files) {
	my $bioperlSeqIO;
	if ($format =~ m/^gff([2|3])$/i) {
		$bioperlSeqIO = &convertGFFStreamToSeqIO($file,$1,$gff2GroupTag);
	} else {
		$bioperlSeqIO = Bio::SeqIO->new(-format => $format,   -file   => $file);
	}	

	while (my $bioperlSeq = $bioperlSeqIO->next_seq() ) {
		if ($unflatten && ( ($format eq 'genbank') || ($format eq 'embl') ) ) {
			$unflattener->unflatten_seq(-seq => $bioperlSeq,
							-use_magic => 1);
    		}	

		foreach my $bioperlFeature ($bioperlSeq->get_SeqFeatures()) {
			processFeature($bioperlFeature, "root");
		}
	}
}

sub processFeature {
	my ($bioperlFeature, $parent) = @_;

	my $feature = $bioperlFeature->primary_tag();
	$featureCounts{$feature}->{$parent}++;
	foreach my $qualifier ($bioperlFeature->get_all_tags()) {
		$features->{$feature}->{$parent}->{$qualifier}++;
	}

	for my $subFeature ($bioperlFeature->get_SeqFeatures()) {
		processFeature($subFeature, $feature);
	}
}

if ($xmlOutput) {
	my $header = <<HEADER;
<mapping>

<!-- if feature or qualifier does not need to be mapped      -->
<!-- replace related method="" with ignore="true"            -->


HEADER

	print $header;
	foreach my $feature (sort(keys %{$features})) {
		foreach my $parent (sort(keys %{$features->{$feature}})) {
			print "  <feature name=\"$feature\"\tparent=$parent\tmethod=\"\">\n";
			foreach my $qualifier (sort(keys %{$features->{$feature}->{$parent}})) {
				print "    <qualifier name=\"$qualifier\"\tmethod=\"\"/>\n";
			}
			print "  </feature>\n\n";
		}
	}
	print "</mapping>\n";

} else {
	foreach my $feature (sort(keys %{$features})) {
		foreach my $parent (sort(keys %{$features->{$feature}})) {
			print "$feature:$parent ($featureCounts{$feature}->{$parent})\n";
			foreach my $qualifier (sort(keys %{$features->{$feature}->{$parent}})) {
				print "  $qualifier ($features->{$feature}->{$parent}->{$qualifier})\n";
			}
			print "\n";
		}
  	}
}


sub usage {
  die
"
Make a template of config.xml file for script extractQualifierFromAnnotation 
based on a sequence features file

Usage:  makeConfigFile4ExtractQualifier --format --fileOrDir --xmlOutput [--noUnflatten]

where
  --format:       embl, genbank, tigr (or any format supported by bioperl's SeqIO)
  --fileOrDir:    a seq/feature file, or a directory containing a set of them
  --xmlOutput:    if present, the output is an xml file 
  --unflatten:    if present, use bioperl's unflattener (only applicable
                    to genbank and embl)
  --gff2Group:    if present, specify gff2 group tag (only applicable
                    to gff2)
";
}

sub convertGFFStreamToSeqIO {

  my ($inputFile, $gffVersion, $gff2GroupTag) = @_;

  # convert a GFF "features-referring-to-sequence" stream into a
  # "sequences-with-features" stream; also aggregate grouped features.

  die("For now, gff formats only support a single file") if (-d $inputFile);

  my @aggregators = &makeAggregators($inputFile,$gffVersion,$gff2GroupTag);

  my $gffIO = Bio::Tools::GFF->new(-file => $inputFile,
				   -gff_format => $gffVersion
				  );

  my %seqs; my @seqs;
  while (my $feature = $gffIO->next_feature()) {
    push @{$seqs{$feature->seq_id}}, $feature;
  }

  while (my ($seq_id, $features) = each %seqs) {
    my $seq = Bio::Seq::RichSeq->new( -alphabet => 'dna',
                             -molecule => 'dna',
                             -molecule => 'dna',
			     -display_id => $seq_id,
			     -accession_number => $seq_id,
			   );

    if ($gffVersion < 3) {
      # GFF2 - use group aggregators to re-nest subfeatures
      for my $aggregator (@aggregators) {
	$aggregator->aggregate($features);
      }
    } else {
      # GFF3 - use explicit ID/Parent hierarchy to re-nest
      # subfeatures

      my %top;      # associative list of top-level features: $id => $feature
      my %children; # mapping of parents to children:
                    # $parent_id => [ [$child_id, $child],
                    #                 [$child_id, $child],
                    #               ]
      my @keep;     # list of features to replace flat feature list.

      # first, fill the datastructures we'll use to rebuild
      for my $feature (@$features) {
	my $id = 0;
	($id) = $feature->each_tag_value("ID")
	  if $feature->has_tag("ID");

	if ($feature->has_tag("Parent")) {
	  for my $parent ($feature->each_tag_value("Parent")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	}  elsif ($feature->has_tag("Derives_from")) {
	  for my $parent ($feature->each_tag_value("Derives_from")) {
	    push @{$children{$parent}}, [$id, $feature];
	  }
	} else {
	  push @keep, $feature;
	  $top{$id} = $feature if $id; # only features with IDs can
	                               # have children
	}
      }

      while (my ($id, $feature) = each %top) {
	# build a stack of children to be associated with their
	# parent feature:
	# [$child_id, $child_feature, $parent_feature]
	my @children;
	if($children{$id}){
	
	  foreach my $col (@{$children{$id}}){


	    push @children ,[@$col,$feature];

	      
	  }
	}
	delete($children{$id});

	# now iterate over the stack until empty:
        foreach my $child (@children) {

	  my ($child_id, $child, $parent) = @$child;
	  # make the association:
	  if($parent->location->start() > $child->location->start()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->start($child->location->start());
	  }

	  if($parent->location->end() < $child->location->end()){
	      warn "Child feature $child_id does not lie within parent boundaries.\n";

	      $parent->location->end($child->location->end());
	  }

	  $parent->add_SeqFeature($child);

	  # add to the stack any nested children of this child
	  if($children{$child_id}){
	

	    foreach my $col (@{$children{$child_id}}){

	      push @children ,[@$col,$child];
	      
	    }
	  }
	  delete($children{$child_id});
	}
      }

      # the entire contents of %children should now have been
      # processed:
      if (keys %children) {
	warn "Unassociated children features (missing parents):\n  ";
	warn join("  \n", keys %children), "\n";
      }

      # replace original feature list with new nested versions:
      @$features = @keep;
    }

    $seq->add_SeqFeature($_) for @$features;
    push @seqs, $seq;
  }

  return GUS::Supported::SequenceIterator->new(\@seqs);
}

sub makeAggregators {
  my ($inputFile, $gffVersion,$gff2GroupTag) = @_;

  return undef if ($gffVersion != 2);

  die("Must supply --gff2GroupTag if using GFF2 format") unless $gff2GroupTag;

  # a list of "standard" feature aggregator types for GFF2 support;
  # only "processed_transcript" for now, but leaving room for others
  # if necessary.
  my @aggregators = qw(Bio::DB::GFF::Aggregator::processed_transcript Bio::DB::GFF::Aggregator::transcript);

  # build Feature::Aggregator objects for each aggregator type:
  @aggregators =
    map {
      Feature::Aggregator->new($_, $gff2GroupTag);
    } @aggregators;
  return @aggregators;
}


#############################################################################################################
#############################################################################################################
## 
##  Sample of config file
##
##  <feature name="CDS"   method="">
##    <qualifier name="EC_number"       method="ec"/>
##    <qualifier name="GO_component"    method="associationsC"/>
##    <qualifier name="GO_function"     method="associationsF"/>
##    <qualifier name="GO_process"      method="associationsP"/>
##    <qualifier name="GO"      		method="associations"/>
##    <qualifier name="gO"      		method="associations"/>
##    <qualifier name="db_xref"         method="dbxref"/>
##    <qualifier name="gene"            method="geneName"/>
##    <qualifier name="locus_tag"       method="sourceId"/>
##    <qualifier name="note"            method="comments"/>
##    <qualifier name="product"         method="products"/>
##    <qualifier name="protein_id"      method="aliases"/>
##    <qualifier name="function"        ignore="true"/>
##    <qualifier name="citation"        ignore="true"/>
##    <qualifier name="codon_start"     ignore="true"/>
##    <qualifier name="transl_table"    ignore="true"/>
##    <qualifier name="translation"     ignore="true"/>
##  </feature>
##
##  <feature name="rRNA"  method="">
##    <qualifier name="citation"        ignore="true"/>
##    <qualifier name="db_xref"         method="dbxref"/>
##    <qualifier name="locus_tag"       method="sourceId"/>
##    <qualifier name="note"            method="comments"/>
##    <qualifier name="product"         method="products"/>
##  </feature>
##
##  <feature name="tRNA"  method="">
##    <qualifier name="locus_tag"       method="sourceId"/>
##    <qualifier name="product"         method="products"/>
##  </feature>
##
##  <feature name="repeat_region" ignore="true">
##    <qualifier name="citation"        ignore="true"/>
##    <qualifier name="rpt_type"        ignore="true"/>
##  </feature>
##
##
##
## Note:
##  1. For the feature that includes qualifier need to be extracted, make it as method=""
##     For the feature that does not include qualifier need to be extracted, make it as ignore="true"
##  2. For the qualifier that need to be extracted, assign the method, such as method="products"
##     For the qualifier that does not need to be extracted, make it as ignore="true"
##
################################################################################################################
################################################################################################################
