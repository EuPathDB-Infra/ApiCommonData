#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use Switch;
use strict;

my ($inputDir, $outputFile, $verbose);

&GetOptions("inputDir=s" => \$inputDir,
	    "outputFile=s" => \$outputFile,
	    "verbose!" => \$verbose,
	   );

if (!$inputDir ||!$outputFile) {
  die "usage: createEpitopeDbRefFile --inputDir <DIRPATH> --outputFile <DIRPATH> [--verbose]\n";
}


opendir(EDIR, $inputDir) or die "Cannot opendir '$inputDir': $!";

open(OUT, ">>$outputFile") or die "Cannot open file '$outputFile': $!";

my $file;
while (defined($file = readdir(EDIR))) {
  next if $file =~ /^\.\.?$/;     # skip . and ..
  next if $file =~ /fasta/;       # skip the fasta dir

  $file = "$inputDir/$file";
  open(FILE, $file) or die "Cannot open file '$file' for reading: $!\n";

  while(<FILE>){
    chomp;

    my @data = split('\t',$_);

    next if ($data[0] eq 'Accession');

    print OUT $data[1]."\t".$data[1]."\t".$data[2]."\n";

  }

  close(FILE);

}

close(OUT);
close(EDIR);
