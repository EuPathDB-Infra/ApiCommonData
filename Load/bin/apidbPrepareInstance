#!/usr/bin/perl


#########################################################################
#########################################################################
#
# A wrapper to intall gus schema and apidb schema by one command.
# intall gusSchema -> install apidb schema -> bld gus objects
#
#########################################################################
#########################################################################

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::Supported::GusConfig;

my ($gusConfigFile, $drop,$db);

&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	   "dropAllSchemas!" => \$drop,
	   "db=s" => \$db);

if (!$db) {
  die "
Either create or drop the GUS and ApiDB schemas.

Usage: apidbPrepareInstance --db database [--dropAllSchemas] [--gusConfigFile gus_config_file]

Caution:  --dropAllSchemas will drop all data and schemas from the database.

";
}

if ($drop){
    runCmd("installApidbSchema --db $db --drop");
    $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config" unless($gusConfigFile);
    my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);
    my $login = $gusconfig->getDatabaseLogin();
    my $password = $gusconfig->getDatabasePassword();
    &runSql($login, $password, $db, 'dropEntireGusSchema.sql');
    
} else {
    runCmd('build GUS install  -append -installDBSchemaSkipRoles');
    runCmd("rm $ENV{PROJECT_HOME}/GUS/Model/lib/perl/generated");
    runCmd('build GUS install -append');
}


#############################################################################
sub runCmd {
    my ($cmd) = @_;
    system($cmd);

    my $status = $? >>8;

    die "Failed with status '$status running cmd: \n$cmd'\n" if $status;
}

sub runSql {

  my ($login, $password, $db, $file) = @_;

  my $fullFile = "$ENV{GUS_HOME}/lib/sql/apidbschema/$file";

  -e $fullFile || die "File '$fullFile' does not exist";

  runCmd("sqlplus $login\@$db/$password \@$fullFile");
}



