#!/usr/bin/perl

# Find open reading frames in DNA sequences.
# Bio::SeqIO supported formats accepted for input.
#
# mheiges@uga.edu 26 Feb 2006
# $$Id$$

use strict qw(subs vars);;
use warnings;
use Getopt::Long;
use Bio::Seq;
use Bio::SeqFeature::Generic;
use Bio::SeqIO;
use Bio::Species;
use Bio::Tools::GFF;

use constant DEBUG => 0;

##########################
#### default settings ####

my $stopCodon = 'taa|tga|tag';
my $outFormat = 'gff';
my $minPepLength = 50;
my $translTable = 1; # Genbank genetic code

##########################

chomp(my $thisScript = `basename $0`);

my ($startCodon, $dataset, $outFile, $organism);
&GetOptions(
    "dataset=s"       => \$dataset,
    "outFile=s"       => \$outFile,
    "outFormat=s"     => \$outFormat,
    "startCodon=s"    => \$startCodon,
    "stopCodon=s"     => \$stopCodon,
    "minPepLength=i"  => \$minPepLength,
    "organism=s"      => \$organism,
    "translTable=i"  => \$translTable);

unless ($dataset) { usage() and exit(1) };
unless (-e $dataset) { die "$dataset not found\n" };
my $_writeTo = getSubForWriteTo();
open (STDOUT, ">>$outFile") if ($outFile); # look at me clobbering STDOUT!
my $stopRegex  = qr/(?=$stopCodon)/i;
my $startRegex = qr/$startCodon/i if $startCodon;


##########################
##### "main()" ###########

if ( -f $dataset ) {
    warn "Processing $dataset\n" if DEBUG;
    processOneFile($dataset);
} elsif ( -d $dataset ) {
    opendir(DIR, $dataset) or die("Cannot open directory $dataset\n");
    while (my $file = readdir(DIR)) {
        next if ($file =~ /^\.\.?$/);
        warn "Processing $file\n" if DEBUG;
        processOneFile("$dataset/$file");
    }
    closedir(DIR);
 }
 
##########################



###############################################################
## subroutines ################################################

sub processOneFile {
    my ($inputFile) = @_;
    $inputFile =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    $inputFile =~ s/(.*\.Z)\s*$/uncompress -c < $1|/;
    
    my $seqIO = Bio::SeqIO->new(-file => $inputFile);
    
    while (my $richSeqObj = $seqIO->next_seq) {
        # create new seq object to remove pre-existing features so they
        # don't end up in our new report
        my $seqObj = Bio::Seq->new( -id => $richSeqObj->id,
                                    -accession_number => $richSeqObj->id,
                                    -seq => $richSeqObj->seq,
                                    -species => $richSeqObj->species,
                                    -alphabet => 'dna');
      if ($organism) {
          my @classification = reverse $organism;
          my $species = Bio::Species->new(-classification => \@classification);
          $seqObj->species($species);
      }
        processOneSeq($seqObj);
    }
}

sub processOneSeq {
    my ($seqObj) = @_;
    my %strand = ( '1' => $seqObj,
                  '-1' => $seqObj->revcom);
    
    for my $direction (keys %strand) {
        warn "\n* ", $strand{$direction}->seq , "\n" if DEBUG;
        for (my $frame = 1; $frame <= 3; $frame++) {
            warn "\nFrame $frame\n" if DEBUG;
            findOrfs($seqObj, $strand{$direction}, $frame, $direction);
        }
    }
    &{$_writeTo}($seqObj, \*STDOUT);
}

# find orfs on $strandObj, add them as features on main, printed $seqObj
sub findOrfs {
    my ($seqObj, $strandObj, $frame, $direction) = @_;
    my ($pos, $start, $end);

    $start = $frame if (! $startCodon);
    
    my $seq = $strandObj->seq;
    
    my $shift = $frame -1;
    
    # on first inspection of $seq the regex will match $shift number of 
    # nucleotides at the beginning via the regex's LHS, thereby introducing
    # the desired frame shift. Subsequent searches of the string will match 
    # codons via the RHS of the regex
    while ($seq =~ m/^.{$shift}|(.{3})/g) {
        $pos = pos($seq);
    
        $start = $pos -2 if ($startCodon && $1 =~ $startRegex);

        if ($1 and $1 =~ $stopRegex) { 
            $end = $pos  - 3;
            if (isValid($start, $end)) {
                ($start, $end) = revCoords($seqObj, $start, $end) if (-1 == $direction);
                printNaSeq($strandObj, $start, $end) if DEBUG;
                addFeat($seqObj, $start, $end, $frame, $direction);
            }
            
            $end   = undef;            
            $start = ($startCodon) ? undef : $pos +1;
        }
    }
    
    # collect any ORF that runs off the end of the strand (do we even want this 
    # incomplete ORF?)
    my $l = $strandObj->length - $frame +1;
    $end = length($strandObj->length - $l %3);
    if (isValid($start, $end)) {
        ($start, $end) = revCoords($seqObj, $start, $end) if (-1 == $direction);
        printNaSeq($strandObj, $start, $end) if DEBUG;
        addFeat($seqObj, $start, $end, $frame, $direction);
    }
     
      
}

sub addFeat {
    my ($seqObj, $start, $end, $frame, $direction) = @_;

    $frame += 3 if (-1 == $direction);

    my $translation = (-1 == $direction) ? 
    $seqObj->trunc($start, $end)->revcom->translate(undef, undef, undef, $translTable)->seq :
    $seqObj->trunc($start, $end)->translate(undef, undef, undef, $translTable)->seq;

    my $locus_tag = (-1 == $direction) ?
        "@{[$seqObj->id]}-${frame}-${end}-${start}" :
        "@{[$seqObj->id]}-${frame}-${start}-${end}";
    
    my $translTableOpt = {};
    ($translTable != 1) and $translTableOpt = {transl_table => $translTable};
    my $feat = new Bio::SeqFeature::Generic(
            -start      => $start,
            -end        => $end,
            -strand     => $direction,
            -primary    => 'ORF',
            -source_tag => $thisScript,
            -seq_id     => $seqObj->id,
            -tag        => {
                locus_tag   => $locus_tag,
                translation => $translation,
                %{$translTableOpt}
             },
          );
      $seqObj->add_SeqFeature($feat);
      
}

sub revCoords {
    my ($refSeq, $start, $end) = @_;
    my $oend = $end;
    $end = $refSeq->length - $start +1;
    $start = $refSeq->length - $oend +1;
    return ($start, $end);
}

sub isValid {
    my ($start, $end) = @_;
    return ($start and
            $start < $end and
            (($end - $start +1) / 3) >= $minPepLength);
}

# for debugging
sub printNaSeq {
        my ($seqObj, $s, $e) = @_;
        return if $e <= $s;
        my $orf = Bio::Seq->new(-seq=>$seqObj->seq)->subseq($s, $e);
      #  $orf =~ s/(...)/$1 /g;
        warn $orf, "\n";
}

# for given --outFormat, figure out which subroutine to use for writing
sub getSubForWriteTo {
    my $writeFormat = '_writeTo' . ucfirst(lc $outFormat);
    $writeFormat =~ s/Gff3/Gff/;
    unless (defined (&{$writeFormat})) {
    die <<EOF;
I don't know how to write to --outFormat '$outFormat'.
Choose from 'gff', 'genbank', 'fasta'
EOF
    }
    return $writeFormat;
}

# ORFs as features, genomic sequence not included
sub _writeToGff {
    my ($seqObj, $fh) = @_;
    foreach my $feat ( $seqObj->top_SeqFeatures() ) {
        if( $feat->primary_tag eq 'ORF' ) {
            print $fh $feat->gff_string, "\n";
        }
    }
}

# ORFs as features on included genomic sequences
sub _writeToGenbank {
    my ($seqObj, $fh) = @_;
    my $io = Bio::SeqIO->new(-format => 'genbank', -fh => $fh );       
    $io->write_seq($seqObj);
}

# orfs only. with locus_tag as defline
sub _writeToFasta {
    my ($seqObj, $fh) = @_;
    foreach my $feat ( $seqObj->top_SeqFeatures() ) {
        if( $feat->primary_tag eq 'ORF' ) {
            print $fh '>', $feat->get_tag_values('locus_tag'), "\n";
            print $fh $feat->get_tag_values('translation'), "\n";
        }
    }
}

sub usage {
    print <<"EOF";
usage: $thisScript --dataset pathToInput [options]

  --dataset *string* (Required)
        One sequence file or a directory of sequence files for ORF extraction.
        Files can be any BioPerl Bio::SeqIO supported format.
        gzip (.gz) and compress (.Z) files are supported.
  
  --outFile *string*
        Path to file to receive output. Defaults to STDOUT.
        
  --outFormat *string*
        Format for file output. Defaults to GFF3. Options are 
            'gff' - ORFs as features, genomic sequence not included.
            'fasta' - orfs protein seqs, with locus_tag as defline
            'genbank' - ORFs as features on included genomic sequences
            
  --minPepLength *integer*
        Minimum length of translated ORF to keep. Default is 50aa.
  
  --startCodon *string*
        Regular expression for start codon. Default is none, all ORFs having 
        minPepLength between Stop codons are returned. 
        Examples: 'ATG', 'CUG|UUG'

  --stopCodon *string*
        Regular expression for stop codon. Default is '$stopCodon'. 
        See also, --translTable

  --translTable *integer*
        Codon table used for translation. Default is '1' for the 
        Standard Code. For other values, see
        http://www.ncbi.nlm.nih.gov/Taxonomy/Utils/wprintgc.cgi?mode=c
EOF
}

__DATA__

