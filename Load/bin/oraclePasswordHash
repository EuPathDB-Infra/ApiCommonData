#!/usr/bin/perl
#
# adapted from orapass.pl
# http://users.aber.ac.uk/auj/freestuff/orapass.pl.txt
# Written by Alun Jones, auj@aber.ac.uk, 2007. This is in the public
# domain - do with it whatever you like but don't blame me if it breaks.
#
# Given a username and a password, the oracle_hash method will
# return the Oracle hashed password. 

use Crypt::CBC;
use Crypt::DES;

chomp(my $this = `basename $0`);

my ($username, $password) = ($ARGV[0], $ARGV[1]);

die usage() unless ($username && $password);

my $hash = &oracle_hash($username, $password);
printf "%-12s %s %s %s\n", $username, $correcthash, $hash;

sub oracle_hash {
	my ($username, $password) = @_;

	my $userpass = pack('n*', unpack('C*', uc($username.$password)));
	$userpass .= pack('C', 0) while (length($userpass) % 8);

	my $key = pack('H*', "0123456789ABCDEF");
	my $iv = pack('H*', "0000000000000000");

	my $c = new Crypt::CBC(
		-literal_key => 1,
		-cipher => "DES",
		-key => $key,
		-iv => $iv,
		-header => "none"
	);
	my $key2 = substr($c->encrypt($userpass), length($userpass)-8, 8);

	my $c2 = new Crypt::CBC(
		-literal_key => 1,
		-cipher => "DES",
		-key => $key2,
		-iv => $iv,
		-header => "none"
	);
	my $hash = substr($c2->encrypt($userpass), length($userpass)-8, 8);

	return uc(unpack('H*', $hash));
}

sub usage() {
    warn <<"EOF";
Generate an Oracle password hash. 
Usage:
    $this username password
EOF
    exit 1;
}