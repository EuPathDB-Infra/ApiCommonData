#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

## script for creating removing invalid sequences from fasta file

## NOTE:  This is not a general script.  Many things are hard coded

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;

use strict;

my $debug = 0;
my ($inputFile, $outputFile);

&GetOptions("inputFile=s" => \$inputFile,
	    "outputFile=s" => \$outputFile,
	    "debug!" => \$debug,
            );

unless (-e $inputFile){ die "You must provide valid input and output files. Usage: fixYoeliiGFF --inputFile <FILE> --outputFile <FILE> [--debug]";}

open(IN,"$inputFile");
open(OUT, ">$outputFile");




my $order = 1;
my %in;
foreach my $line (<IN>){
  chomp $line;

  if(!($line =~ /^\s+$/)){
  my ($contig,$source,$type,$start,$end,$stat,$strand,$frame,$ann) = split(/\t/,$line);

  if($type eq 'transcript'){
      $order = 1;
      $line =~ s/ID=/GenePrediction /;
      print OUT "$line\n";
  }else{
      $line =~ s/ID=/GenePrediction /;
      $line =~ s/\tCDS\t/\texon\t/;
      
      if($order == 1 && $frame > 0){
	  my $codingStart;
	  if($strand eq '-'){
	      $codingStart = $end - $frame;
	      $line =~ s/CodingStart $end/CodingStart $codingStart/;
	  }else{
	      $codingStart = $start + $frame;
	      $line =~ s/CodingStart $start/CodingStart $codingStart/;
	  }
      }
      $order++;

      print OUT "$line\n";

  }
}
}

close(IN);
close(OUT);

