#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use Data::Dumper;

my ($verbose, $help, $inputFile, $outputControl);

&GetOptions('input_file=s' => \$inputFile,
	    'output_control=s' => \$outputControl,
           );

die "missing a required argument" unless(defined $inputFile && $outputControl);

open(IN,"$inputFile");
open(CONTROL,">$outputControl");

my %isolateList;
my @productList;
my @chromosomeList;

foreach my $line (<IN>){
	chomp($line);
	$line =~ s/\cM//g;
	my @cols = split(/\t/,$line);

	if($line =~ /^Country/){
	    @productList = @cols[8..18];
	    print CONTROL "Name\tFile\tSource ID Type\tInput ProtocolAppNodes\tProtocol\tProtocol Params\tStudy Name\n";
	}elsif($line =~ /^Chromosome/){
	    @chromosomeList = @cols[8..18];
	}else{

	    $cols[19] =~ s/^\s+//;
	    $cols[19] =~ s/\s+$//;
	    #$cols[19] =~ s/\(.*\)//g;
	    $cols[19] =~ s/\(.*?\)//g;
	    $cols[19] =~ s/\s+,/,/g;
	    $cols[19] =~ s/,\s+/,/g;
	    $cols[19] =~ s/,$//;

	    if($cols[19] =~ /^Tg/){


		my @isolate = split(/,/,$cols[19]);

		# if the isolate-count column is larger than the number of isolate-name strings. . .
		if($cols[7] > scalar(@isolate)){

                    # then convert ranges (e.g. "17-21") to lists ("17,18,19,20,21")
		    while(($cols[19] =~ /(\d+)\-(\d+)/)){

			my $repStr = '';
			for(my $i = $1; $i <= $2; $i++){
			    $repStr .= "$i,";
			}
			$repStr =~ s/,$//;

#			print "$cols[19]\n";
			$cols[19] =~ s/\d+\-\d+/$repStr/;

			@isolate = split(/,/,$cols[19]);
#			print "$cols[7]\t$cols[19]\t".scalar(@isolate)."\n";

		    }
		}

		# prefix the non-digit part of the initial isolate to each of the others
		my @temp = split(/,/,$cols[19]);
		$temp[0] =~ s/\d+$//;
		$cols[19] =~ s/,/,$temp[0]/g;
	}
	    my @isolates = split(/,/,$cols[19]);

	    foreach my $isolate (@isolates){

		# strip leading and trailing whitespace
		$isolate =~ s/^\s+//g;
		$isolate =~ s/\s+$//g;

		# convert remaining whitespace to underscores
		$isolate =~ s/\s+/_/g;

                # pre-GUS 4 version:
		# print GFF "$isolate\tChunlei Su RFLP Data\tsource\t0\t0\t.\t+\t.\tlocus_tag \"${isolate}-1\" ; host \"$cols[1]\" ; collection_date \"$cols[3]\" ; country \"$cols[0]\"; note \"$cols[4]\" ; isolation_source \"$cols[5]\" ; " ;

		my $genotypeNumberFile = $isolate . "RflpGenotypeNumber.tab";
		print CONTROL "$isolate\t$genotypeNumberFile\tliteral\t\tRFLPGenotypeNumber\t\tChunlei Su RFLP Data\n";
		open(GENONUMFILE, ">$genotypeNumberFile");
		print GENONUMFILE "genotype_number\n";
		print GENONUMFILE "$cols[6]\n";
		close(GENONUMFILE);

		my $genotypeFile = $isolate . "RflpGenotype.tab";
		print CONTROL "$isolate\t$genotypeFile\tliteral\t\tRFLPGenotype\t\tChunlei Su RFLP Data\n";
		open(GENOFILE, ">$genotypeFile");
		print GENOFILE "locus_tag\tgenotype\n";


		# process PubMed IDs
		if($cols[2] ne ''){
		    my @pmids = split(/;/,$cols[2]);

		    foreach my $pmid (@pmids){
			# print "literature \"PMID:$pmid\" ; "; 
		    }
		}

		for(my $i =1;$i<= scalar @productList;$i++){

		    if($cols[$i+7] =~ /\Sor/ || $cols[$i+7] =~ /or\S/){
			$cols[$i+7] =~ s/or/ or/g if $cols[$i+7] =~ /\Sor/;
			$cols[$i+7] =~ s/or/or /g if $cols[$i+7] =~ /or\S/;

			$cols[$i+7] =~ s/\s+or/ or/g;
			$cols[$i+7] =~ s/or\s+/or /g;

		    }

		    # pre-GUS 4 version
		    # print CONTROL "$isolate\tChuneli Su RFLP Data\tRFLP\t0\t0\t.\t+\t.\tlocus_tag \"${isolate}-$i\" ; product \"$productList[$i-1]\" ; chromosome \"$chromosomeList[$i-1]\" ; GeneType  \"$cols[$i+7]\" ;  genotype_number $cols[6] ; \n";

		    print GENOFILE "$productList[$i-1]\t$cols[$i+7]\n";
		}
		close(GENOFILE);
	    }

	}
}

close(IN);
close(CONTROL);
