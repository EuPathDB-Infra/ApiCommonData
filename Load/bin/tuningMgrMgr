#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Data::Dumper;
use XML::Simple;
use DBI;
use Getopt::Long qw(GetOptions);
use ApiCommonData::Load::TuningConfig::TuningRegistry;

my ($propFile, $connectName, $password, $instanceNickname, $family, $svn);

my $subcommand = $ARGV[0];

GetOptions("propFile=s" => \$propFile,
           "connectName=s" => \$connectName,
           "password=s" => \$password,
           "instanceNickname=s" => \$instanceNickname,
           "family=s" => \$family,
           "svn=s" => \$svn,
	  );

my $badUsage;

if (!$propFile && !$password) {
  print STDERR "ERROR: A password must be specified, either with the -password parameter or in a property file specified with the -propFile parameter\n";
  $badUsage = 1;
}

if ($subcommand ne "addinstance" && $subcommand ne "removeinstance" && $subcommand ne "list" && $subcommand ne "changesvn") {
  print STDERR "ERROR: invalid subcommand \"$subcommand\"\n";
  $badUsage = 1;
}

if ($subcommand ne "list" && $subcommand ne "changesvn" && !$connectName && !$instanceNickname) {
  print STDERR "ERROR: An instance must be specified, by either the \"-connectName\" or the \"-instanceNickname\" parameter.";
  $badUsage = 1;
}

if ($subcommand eq "changesvn" && !$svn) {
  print STDERR "ERROR: Subversion setting (e.g. \"trunk\" or \"branches/api-aug-08\") must be specified with \"-svn\" parameter";
  $badUsage = 1;
}

if ($subcommand eq "changesvn" && !$family) {
  print STDERR "ERROR: Subversion setting must be done by family (with \"-family\" parameter)";
  $badUsage = 1;
}

if ($subcommand eq "addinstance") {
  if (!$connectName) {
    print STDERR "ERROR: the \"addinstance\" subcommand requires the \"-connectName\" parameter\n";
    $badUsage = 1;
  }

  if (!$instanceNickname) {
    print STDERR "ERROR: the \"addinstance\" subcommand requires the \"-instanceNickname\" parameter\n";
    $badUsage = 1;
  }

  if (!$family) {
    print STDERR "ERROR: the \"addinstance\" subcommand requires the \"-family\" parameter\n";
    $badUsage = 1;
  }
}

if ($badUsage) {
  usage();
  die;
}

my $dblink = "\@apidb.login_comment";
if (!$connectName) {
  $connectName = "apicomm";
  $dblink = "";
}

my $dbh = getDbHandle($connectName, $propFile, $password);

list($dbh, $dblink) if $subcommand eq "list";
addInstance($dbh, $instanceNickname, $family, $svn)
  if $subcommand eq "addinstance";
removeInstance($dbh, $dblink, $instanceNickname)
  if $subcommand eq "removeinstance";
changeSvn($dbh, $dblink, $family, $svn)
  if $subcommand eq "changesvn";

###############################################################################

sub usage {
  ApiCommonData::Load::TuningConfig::Log::addLog(
q{
Usage:

tuningMgrMgr addinstance -connectName xxxx {-password xxxx | -propFile xxxx} -instanceNickname xxxx -family xxxx {-svn xxxx}
tuningMgrMgr removeInstance {-connectName xxxx  | -instanceNickname } {-password xxxx | -propFile xxxx}
tuningMgrMgr list {-password xxxx | -propFile xxxx}
tuningMgrMgr changesvn {-connectName xxxx  | -instanceNickname } {-password xxxx | -propFile xxxx} -svn xxxx

options:
  propFile         pathname of a file containing database username and password, as with tuningManager
  connectName      tnsping name to use to connect to database
  instanceNickname unique name to identify instance in registry and in email subject-lines
  family           name of family of instances (e.g. "toxo440") to which this instance belongs
  password         database login password
  svn              Subversion trunk/branch info, e.g. "trunk" or "branches/api-aug-08"

Sample prop file:
<tuningProps>
  <password>JoeSentMe</password>
  <username>apidb</username>
</tuningProps>
});
}


sub getDbHandle {
  my ($instance, $propFile, $password) = @_;
  my $username = 'apidb';

  if ($propFile) {
    my $simple = XML::Simple->new();
    my $props = $simple->XMLin($propFile);
    $password = $props->{password} if !$password;
    $username = $props->{username} if $props->{username};
  }

  my $dsn = "dbi:Oracle:" . $instance;

  my $dbh = DBI->connect(
                $dsn,
                $username,
                $password,
                { PrintError => 1, RaiseError => 0}
                ) or die "Can't connect to the database: $DBI::errstr\n";
  $dbh->{LongReadLen} = 1000000;
  $dbh->{LongTruncOk} = 1;
  return $dbh;
}

sub list {
  my ($dbh, $dblink) = @_;

  my $stmt = $dbh->prepare(<<SQL);
      select ti.instance_nickname,
             replace(replace(tf.subversion_url, 'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/', ''), '/Load/lib/xml', ''),
             ti.family_name,
             to_char(last_check, 'yy-mon-dd hh24:mi'),
             to_char(last_update, 'yy-mon-dd hh24:mi')
      from apidb.TuningInstance$dblink ti, apidb.TuningFamily$dblink tf
      where ti.family_name = tf.family_name(+)
      order by ti.family_name, ti.instance_nickname
SQL

  $stmt->execute()
    or print STDERR $dbh->errstr;

  my $printedSomething;
  my $lastFamily = 'gambino';
  my $instanceCount;
  while (my ($nickname, $svn, $family, $lastCheck, $lastUpdate) = $stmt->fetchrow_array()) {
    $instanceCount++;

    print "\n--family---- --instance--------------- --subversion--------------- --checked-------- --updated------\n"
      if !$printedSomething;
    $printedSomething = 1;

    if ($family eq $lastFamily) {
      $family = "";
      $svn = "";
    } else {
      $lastFamily = $family;
    }

    printf "%-12s %-25s %-25s %17s %17s\n", $family, $nickname, $svn, $lastCheck, $lastUpdate;
  }
  $stmt->finish();

  printf "\n%d instance" . ($instanceCount == 1 ? '' : 's') . " configured\n\n", $instanceCount;
}

sub addInstance {
  my ($dbh, $instanceNickname, $family, $svn) = @_;

  # find out whether this family exists
  my $stmt = $dbh->prepare(<<SQL);
      select replace(replace(subversion_url, 'https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/', ''), '/Load/lib/xml', '')
      from apidb.TuningFamily\@apidb.login_comment
      where family_name = '$family'
SQL

  $stmt->execute()
    or print STDERR $dbh->errstr;
  my ($existingSvn) = $stmt->fetchrow_array();
  $stmt->finish();

  if ($svn && $svn ne $existingSvn) {
    # update to new svn
    print "Changing svn configuration from \"$existingSvn\" to \"$svn\" for family \"$family\"\n";
    my $url = svnUrl($svn);
    $dbh->do(<<SQL) or die $dbh->errstr;
      update apidb.TuningFamily\@apidb.login_comment
      set subversion_url = '$url'
      where family_name = '$family'
SQL
  } elsif ($svn && !$existingSvn) {
    # insert new family
      my $url = svnUrl($svn);
      $dbh->do(<<SQL) or die $dbh->errstr;
        insert into apidb.TuningFamily\@apidb.login_comment (family_name, subversion_url, notify_emails)
        values ('$family', '$url',
                'TuningMgr\@pcbi.upenn.edu')
SQL
  } elsif (!$svn && !$existingSvn) {
    # new family, but subversion config not supplied
    die "ERROR: Subversion setting (e.g. \"trunk\" or \"branches/api-aug-08\") must be specified (using \"-svn\" parameter) for new family \"$family\"\n"
  }

  # remove old InstanceMetaInfo
  $dbh->do("delete from apidb.InstanceMetaInfo")
    or die $dbh->errstr;

  # add new InstanceMetaInfo
  $dbh->do("insert into apidb.InstanceMetaInfo (instance_nickname) values ('$instanceNickname')")
    or die $dbh->errstr;

  # insert new TuningInstance
  $dbh->do(<<SQL) or die $dbh->errstr;
      insert into apidb.TuningInstance\@apidb.login_comment
          (instance_nickname, family_name, instance_name, service_name)
      values ('$instanceNickname', '$family', '$instanceNickname', '$instanceNickname')
SQL
}

sub removeInstance {
  my ($dbh, $dblink, $instanceNickname) = @_;

  # get instanceNickname from InstanceMetaInfo, if not supplied
  if (!$instanceNickname) {
    my $stmt = $dbh->prepare("select instance_nickname from apidb.InstanceMetaInfo");
    $stmt->execute() or print STDERR $dbh->errstr;
    ($instanceNickname) = $stmt->fetchrow_array();
    $stmt->finish();
  }

  # get family name
  my $stmt = $dbh->prepare(<<SQL);
    select family_name from apidb.TuningInstance$dblink
    where instance_nickname = '$instanceNickname'
SQL
  $stmt->execute() or print STDERR $dbh->errstr;
  my ($family) = $stmt->fetchrow_array();
  $stmt->finish();

  # remove instance
  my $rowCount = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from apidb.TuningInstance$dblink
    where instance_nickname = '$instanceNickname'
SQL

  printf "removed %d " . ($rowCount == 1 ? "instance" : "instances") . ", nicknamed \"$instanceNickname\", from the family \"$family\"\n", $rowCount;

  # is this the last member of the family?
  my $stmt = $dbh->prepare("select count(*) from apidb.TuningInstance$dblink where family_name = '$family'");
  $stmt->execute() or print STDERR $dbh->errstr;
  my ($familyCount) = $stmt->fetchrow_array();
  $stmt->finish();

  # if so, remove the family
  if (!$familyCount) {
    $dbh->do("delete from apidb.TuningFamily$dblink where family_name = '$family'")
      or die $dbh->errstr;
  }
}

sub changeSvn {
   my ($dbh, $dblink, $family, $svn) = @_;

   # set svn, based on family
   my $url = svnUrl($svn);
   my $familyCount = $dbh->do(<<SQL);
     update apidb.TuningFamily$dblink
       set subversion_url = '$url'
       where family_name = '$family'
SQL
  printf "updated subversion URL to \"$url\" (from config of \"$svn\") for %d "
    . (($familyCount == 1) ? "family" : "families") . " named \"$family\".\n", $familyCount;
}

sub svnUrl {
  my ($svn) = @_;
  return "https://www.cbil.upenn.edu/svn/apidb/ApiCommonData/$svn/Load/lib/xml"
}
