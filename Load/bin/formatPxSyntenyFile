#!/usr/bin/perl

# This plugin takes a file in the format
#
# Pxchr  Pxstart Pxstop Pxstrand Pfchr Pfstart Pfstop Pf strand
#
# and reformats it as
#
# Pfchr Pxchr Pfstart Pflength Pxstart Pxlength Pfstrand

use strict;
use warnings;

use Data::Dumper;

use List::Util qw[min max];

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long qw(GetOptions);

my $verbose = 0;
my $inputFile;
my $outputFile;
my $agpFile;

my $JOIN_DISTANCE = 100;

GetOptions("verbose!"        => \$verbose,
           "inputFile=s" => \$inputFile,
           "outputFile=s"    => \$outputFile,
           "agpFile=s" => \$agpFile,
         );

unless ($inputFile){ 
  print STDERR "Please provide input file\n\nUSAGE: formatPxSyntenyFile --inputFile <FILEPATH> --outputFile <FILEPATH> --agpFile <AGPFILE> [--verbose]\n";
  exit;
}

$outputFile = $inputFile . "-synteny" unless($outputFile);

my $agp = &readAgpFile($agpFile) if($agpFile);

my $joined = &readInputFile($inputFile);
&unassembleAndPrint($outputFile, $joined);


#--------------------------------------------------------------------------------

sub makeControledHash {
  my ($contig, $start, $end, $strand) = @_;

  return {contig => $contig,
          start => min($start, $end),
          end => max($start, $end),
          strand => $strand,
         };
}


#--------------------------------------------------------------------------------

sub readInputFile {
  my ($fn) = @_;

  open(FILE, $fn) or die "Could not open file $fn for reading: $!\n";

  my @lines;
  my $prevSynteny;

  while(<FILE>){
    chomp;

    my @values = split("\t",$_);

    my $a_seq = &makeControledHash($values[0], $values[1], $values[2], $values[3]);
    my $b_seq = &makeControledHash($values[4], $values[5], $values[6], $values[7]);

    unless($a_seq->{strand} eq '+') {
      my $contig = $b_seq->{contig};
      die "Expected [+] strand for the contig $contig";
    }

    my $synteny = [$a_seq, $b_seq];

    push @lines, $synteny;
=pod
    if(my $newPrev = &combinePrev($prevSynteny, $synteny)) {
      $prevSynteny = $newPrev;
      next;
    }

    push @lines, $prevSynteny;
    $prevSynteny = $synteny;
=cut
  }


#  $prevSynteny = $synteny;  
#  push @lines, $prevSynteny;

  close FILE;

  return \@lines;
}

#--------------------------------------------------------------------------------

sub unassembleAndPrint {
  my ($outFile, $lines) = @_;

  open(OUT, ">$outFile") or die "Could not open file '$outFile' for writing: $!\n";

  foreach my $synteny (@$lines) {
    my ($a_seq, $b_seq) = @$synteny;

    if($b_seq->{contig} =~ /^assembled/ && $agpFile) {
      my $unassembled = &replaceAssembled($agp, $b_seq);

      my $bLength = abs($b_seq->{end} - $b_seq->{start});

      my $shift = 0;
      foreach(@$unassembled) {
        $_->{shift} = $shift;

        $shift = printLine($a_seq, $_, $bLength, $b_seq->{strand});
      }
    }
    elsif($b_seq->{contig} !~ /^assembled/) {
      printLine($a_seq, $b_seq, 0);
    }
    else {
      die "Cannot use assembled as the reference genome";
    }
  }
  close OUT;
}

#--------------------------------------------------------------------------------

sub readAgpFile {
  my ($fn) = @_;

  open(FILE, $fn) or die "Cannot open file $fn for reading:$!";

  my @agp;

  while(<FILE>) {
    chomp;
    push(@agp, $_);
  }
  close FILE;

  return \@agp;
}

#--------------------------------------------------------------------------------

sub printLine {
  my ($a, $b, $bTot, $bTotStrand) = @_;

print "BTOT=$bTot\n";

  my $aContig = $a->{contig};
  my $aStart = $a->{start};
  my $aEnd = $a->{end};
  my $aLength = $aEnd - $aStart;
  my $aStrand = $a->{strand};
  print "ALENGTH=$aLength\n";

  my $bContig = $b->{contig};
  my $bStart = $b->{start};
  my $bEnd = $b->{end};
  my $bLength = $bEnd - $bStart;
  my $bStrand = $b->{strand};

 # print "BLENGTH=$bLength\n";
 # print "BTOTSTRAND=$bTotStrand\n";

#  print "----\n";
  my $shift = $b->{shift};

#  print "Shift: $shift\n";
  if($bTot) {
    $aLength = int ((($bEnd - $bStart) / $bTot ) * $aLength);
    $bLength = $bEnd - $bStart;
    if($bTotStrand eq "-"){
	$aStart = $aEnd - $aLength - $shift;
    }else{
	$aStart = $aStart + $shift;
    }
  }

  if($aLength <= 0 ) {
 #   print "Btot=$bTot\n";
 #   print "ALength=$aLength\n";
    print Dumper $a;
    print Dumper $b;
    die "aLength cannot have length < 0, $aLength";
}elsif($aLength == 0){
    print STDERR "aLength cannot have length=0";
}else{
  #print  "$aContig\t$aStart\t$aEnd\t$aStrand\t$bContig\t$bStart\t$bEnd\t$bStrand\n";
  print OUT "$bContig\t$aContig\t$bStart\t$bLength\t$aStart\t$aLength\t$bStrand\n";    
}

  return $aLength + $shift;
}

#--------------------------------------------------------------------------------

sub combinePrev {
  my ($prev, $this) = @_;

  # first row
  if(!$prev) {
    return $this;
  }

  my ($prevA, $prevB) = @$prev;
  my ($thisA, $thisB) = @$this;

  # is the previous line continuous with the current line?
  if($prevA->{contig} eq $thisA->{contig} && $prevB->{contig} eq $thisB->{contig} && 
     $prevB->{strand} eq $thisB->{strand} && $thisA->{start} - $prevA->{end} <= $JOIN_DISTANCE &&
     $prevA->{start} < $thisA->{start}) {

    if($prevB->{start} < $thisB->{start} && $thisB->{start} - $prevB->{end} <= $JOIN_DISTANCE) {

      $prevA->{end} = $thisA->{end};
      $prevB->{end} = $thisB->{end};

      return [$prevA, $prevB];
    }

    if($prevB->{start} > $thisB->{start} && $prevB->{start} - $thisB->{end} <= $JOIN_DISTANCE) {
      $prevA->{end} = $thisA->{end};
      $prevB->{start} = $thisB->{start};

      return [$prevA, $prevB];
    }
  }
}

#--------------------------------------------------------------------------------

sub replaceAssembled { 
  my ($agp, $seq) = @_; 

  my $strand = $seq->{strand}; 
  my $input = $seq->{contig};
  my $start = min($seq->{start}, $seq->{end}) ;
  my $stop = max($seq->{start}, $seq->{end});

#  print "$start\t$stop\t$input\t$strand\n";
  my @v; 

  foreach my $line (@$agp) {

    my @ar = split(/\t/, $line); 
 
    my $assembly = $ar[0]; 
    my $assemblyStart = $ar[1]; 
    my $assemblyStop = $ar[2]; 
    my $type = $ar[4]; 
 
    my $contig = $ar[5]; 
    my $contigStart = $ar[6]; 
    my $contigStop = $ar[7]; 
    my $contigStrand = $ar[8]; 

    next unless($type eq 'D'); 
    my $shift = $assemblyStart - $contigStart; 
    my $checkShift = $assemblyStop - $contigStop; 
 
    die("Cannot determine shift") unless($shift == $checkShift); 

    if($assembly eq $input && (($start >= $assemblyStart && $start <= $assemblyStop) ||
                               ($stop >= $assemblyStart && $stop <= $assemblyStop) ||  
                               ($start < $assemblyStart && $stop > $assemblyStop))) { 

#      print $line."\n";

      my ($newStart, $newStop, $newStrand); 
 
      # the +1 and -1 is because of a 1 off error in the sliceAlign program 
      if($contigStrand eq '+') { 
        $newStart = $start < $assemblyStart ? $contigStart : $start - $assemblyStart + $contigStart + 1; 
        $newStop = $stop > $assemblyStop ? $contigStop : $stop - $assemblyStart + $contigStart;  
        $newStrand = $strand; 
      } 
      else { 
        $newStart = $start < $assemblyStart ? $contigStop : $assemblyStop - $start + $contigStart - 1; 
        $newStop = $stop > $assemblyStop ? $contigStart : $assemblyStop - $stop + $contigStart;   
        $newStrand = $strand eq '+' ? '-' : '+'; 
      } 


      if($newStart < 0) {
        print "$start-$stop:$strand\n";
        print "$newStart-$newStop:$newStrand\n";
        print join("\t", @ar) . "\n";
        die "Error in new start and end locations: $newStart-$newStop";
      }


      my $new;
      if($newStart <= $newStop) { 
        $new = {contig => $contig,
                start => $newStart,
                end => $newStop,
                strand => $newStrand,
               };
      } 
      else { 
        $new = {contig => $contig,
                start => $newStop,
                end => $newStart,
                strand => $newStrand,
               };
      }
      push @v, $new;
    }
  }
print Dumper \@v;

  return \@v; 
} 
