#!/usr/bin/perl

# This plugin takes a file in the format
#
# Pxchr  Pxstart Pxstop Pxstrand Pfchr Pfstart Pfstop Pf strand
#
# and reformats it as
#
# Pfchr Pxchr Pfstart Pflength Pxstart Pxlength Pfstrand

use strict;
use warnings;

use Data::Dumper;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long qw(GetOptions);

my $verbose = 0;
my $inputFile;
my $outputFile;

my $JOIN_DISTANCE = 5000;

GetOptions("verbose!"        => \$verbose,
           "inputFile=s" => \$inputFile,
           "outputFile=s"    => \$outputFile,
          );

unless ($inputFile){ 
  print STDERR "Please provide input file\n\nUSAGE: formatPxSyntenyFile --inputFile <FILEPATH> --outputFile <FILEPATH> [--verbose]\n";
  exit;
}


open(FILE, "$inputFile") or die "Could not open file '$inputFile': $!\n";

open(OUT, ">$outputFile") or die "Could not open file '$outputFile' for writing: $!\n";


my $prevSynteny;

while(my $line = <FILE>){
  chomp $line;

  my @values = split("\t",$line);


  my $a_seq = {contig => $values[0],
               start => $values[1],
               end => $values[2],
               strand => $values[3],
              };

  my $b_seq = {contig => $values[4],
               start => $values[5],
               end => $values[6],
               strand => $values[7],
              };


  unless($a_seq->{strand} eq '+') {
    my $contig = $b_seq->{contig};
    die "Expected [+] strand for the contig $contig";
  }

  my $synteny = [$a_seq, $b_seq];

  if($b_seq->{contig} =~ /^assembled/) {
    die "Cannot use assembled as the reference genome";
  }

  if(my $newPrev = &combinePrev($prevSynteny, $synteny)) {
    $prevSynteny = $newPrev;
    next;
  }

  &printLine(@$prevSynteny);
  $prevSynteny = $synteny;
}

# dont' forget the last one
&printLine(@$prevSynteny);


close(OUT);
close(FILE);

#--------------------------------------------------------------------------------

sub printLine {
  my ($a, $b) = @_;

  my $aContig = $a->{contig};
  my $aStart = $a->{start};
  my $aEnd = $a->{end};
  my $aLength = $aEnd - $aStart;
  my $aStrand = $a->{strand};

  my $bContig = $b->{contig};
  my $bStart = $b->{start};
  my $bEnd = $b->{end};
  my $bLength = $bEnd - $bStart;
  my $bStrand = $b->{strand};

#  print OUT "$aContig\t$aStart\t$aEnd\t$aStrand\t$bContig\t$bStart\t$bEnd\t$bStrand\n";
  print OUT "$bContig\t$aContig\t$bStart\t$bLength\t$aStart\t$aLength\t$bStrand\n";    
}

#--------------------------------------------------------------------------------

sub combinePrev {
  my ($prev, $this) = @_;

  # first row
  if(!$prev) {
    return $this;
  }

  my ($prevA, $prevB) = @$prev;
  my ($thisA, $thisB) = @$this;

  # is the previous line continuous with the current line?
  if($prevA->{contig} eq $thisA->{contig} && $prevB->{contig} eq $thisB->{contig} && 
     $prevB->{strand} eq $thisB->{strand} && $thisA->{start} - $prevA->{end} <= $JOIN_DISTANCE) {

    if($thisB->{start} - $prevB->{end} <= $JOIN_DISTANCE && $prevB->{strand} eq '+') {

      $prevA->{end} = $thisA->{end};
      $prevB->{end} = $thisB->{end};

      return [$prevA, $prevB];
    }

    if($prevB->{start} - $thisB->{end} <= $JOIN_DISTANCE && $prevB->{strand} eq '-') {

      $prevA->{end} = $thisA->{end};
      $prevB->{start} = $thisB->{start};

      return [$prevA, $prevB];
    }
  }
}
