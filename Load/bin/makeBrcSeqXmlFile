#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;
use Data::Dumper;

my ($changedSeqsFile, $extDbName, $extDbRlsVer, $gffFileName, $strain,
    $brcSubmitsToRefseq, $curatorsString, $dbName, $submittedToGenbank,
    $downloadedFrom);
&GetOptions("extDbName=s" => \$extDbName,
	    "extDbRlsVer=s" => \$extDbRlsVer,
	    "brcSubmits=s" => \$brcSubmitsToRefseq,
	    "submittedToGenbank!" => \$submittedToGenbank,
	    "gffFile=s" => \$gffFileName,
	    "downloadedFrom=s" => \$downloadedFrom,
	    "curators=s" => \$curatorsString,
            "strain=s" => \$strain,
            "changesFile=s" => \$changedSeqsFile,
            "dbName=s" => \$dbName
             );

&usage() unless ($extDbName && $extDbRlsVer && $gffFileName &&
		 $brcSubmitsToRefseq && $curatorsString && $downloadedFrom);

my $gusconfig = GUS::Supported::GusConfig->new();


my $dsn = $dbName? "dbi:Oracle:$dbName" : $gusconfig->getDbiDsn();

my $db = GUS::ObjRelP::DbiDatabase->new($dsn,
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        0,0,1,
                                        $gusconfig->getCoreSchemaName());

my $changedSeqs = &parseChangedSeqs($changedSeqsFile);

my $seqXml = &makeSeqXml($extDbName, $extDbRlsVer, $changedSeqs, $db,
			 $submittedToGenbank);

my $curationXml = &makeCurationXml($curatorsString);

my ($taxonId, $organism) = &getTaxonInfo($extDbName, $extDbRlsVer, $db);

print &makeXml($organism, $taxonId, $strain, $gffFileName, $extDbRlsVer,
      $brcSubmitsToRefseq, $seqXml, $curationXml, $downloadedFrom);

#################################################################

sub parseChangedSeqs {
  my ($file) = @_;

  my $changedSeqsHash = {};
  if ($file) {
    open(FILE, $file) || die "can't open config file '$file'\n";
    while (<FILE>) {
      chomp;
      /(\S+)\s+(1|0)/ || die "illegal line in config file: '$_'";
      my $key = $1;
      my $value = $2;
      $changedSeqsHash->{$key} = $value;
    }
  }
  return $changedSeqsHash;
}

sub makeSeqXml {
  my ($extDbName, $extDbRlsVer, $changedSeqsHash, $db, $submittedToGenbank) = @_;

  my $dbh = $db->getQueryHandle(0);

# query to get seq ids
my $sql = "
SELECT distinct ens.source_id
FROM sres.ExternalDatabase ed,
     sres.ExternalDatabaseRelease edr, dots.NaSequence ens,
     sres.SequenceOntology so
WHERE ed.name = '$extDbName'
AND edr.version = '$extDbRlsVer'
AND ed.external_database_id = edr.external_database_id
AND ens.external_database_release_id = edr.external_database_release_id
AND ens.sequence_ontology_id = so.sequence_ontology_id
AND (so.term_name = 'supercontig' OR so.term_name = 'contig' OR so.term_name = 'chromosome')
ORDER BY ens.source_id
";

  my $stmt = $dbh->prepareAndExecute($sql);

  my @seqXmls;
  while(my ($sourceId) = $stmt->fetchrow_array()) {
    my $changed = 'no';
    my $submit = $submittedToGenbank? 'yes' : 'no';
    if (defined($changedSeqsHash->{$sourceId})) {
      $changed = 'yes';
      $submit = 'yes' if $changedSeqsHash->{$sourceId};
    }
    my $genbankXml;
    if ($submittedToGenbank) {
      $genbankXml = qq{
      <genbank>
        <parameter name="latest_accession">$sourceId</parameter>
        <parameter name="latest_version">1</parameter>
        <parameter name="owner">ApiDB</parameter>
      </genbank>};
    }
    my $seqXml = qq{
    <sequence>
      <internal>
        <parameter name="sequence_identifier">$sourceId</parameter>
      </internal>
      <modified>
        <parameter name="sequence_changed">$changed</parameter>
        <parameter name="submitted_to_genbank">$submit</parameter>
      </modified>$genbankXml
    </sequence>
    };
    push(@seqXmls, $seqXml);
  }
  scalar(@seqXmls) || die "\nerror: no sequences found\n";
  return join("\n", @seqXmls);
}

sub makeCurationXml {
  my ($curationString) = @_;

  my @curations = split(/\%\%/, $curationString);

  my @curationXml;
  foreach my $curation (@curations) {
    $curation =~ /(.+)\s*\|\s*(.+)/ || die "illegal format for curation property '$curation'";
    my $annot = $1;
    my $gene_ends = $2;
    my $xml = qq{
    <parameter name="annotation">$annot</parameter>
    <parameter name="gene_ends">$gene_ends</parameter>
};
  push(@curationXml, $xml);
  }
  return join("\n", @curationXml);
}

sub getTaxonInfo {
  my ($extDbName, $extDbRlsVer, $db) = @_;

  # query to get: taxon_id, taxon_name,
  my $sql = "
SELECT distinct t.ncbi_tax_id, tn.name
FROM sres.Taxon t, sres.TaxonName tn, sres.ExternalDatabase ed,
     sres.ExternalDatabaseRelease edr, dots.ExternalNaSequence ens
WHERE ed.name = '$extDbName'
AND edr.version = '$extDbRlsVer'
AND ed.external_database_id = edr.external_database_id
AND ens.external_database_release_id = edr.external_database_release_id
AND t.taxon_id = ens.taxon_id
AND tn.taxon_id = t.taxon_id
";

  my $dbh = $db->getQueryHandle(0);
  my $stmt = $dbh->prepareAndExecute($sql);

  my ($ncbi_tax_id, $name) = $stmt->fetchrow_array();
  return ($ncbi_tax_id, $name);
}

sub makeXml {
  my ($organism, $taxonId, $strain, $gffFileName, $extDbRlsVer,
      $brcSubmitsToRefseq, $seqInfo, $curationInfo, $downloadedFrom) = @_;

  if ($strain) {
    $strain = qw{
    <parameter name="strain">$strain</parameter>"};
  } else {
    $strain = "";
  }

  return qq{
<source>
  <category name="brc">
    <parameter name="name">ApiDB</parameter>
    <parameter name="acronym">ApiDB</parameter>
  </category>

  <category name="organism">
    <parameter name="name">$organism</parameter>$strain
    <parameter name="taxon_id">$taxonId</parameter>
  </category>

  <category name="gff3">
    <parameter name="corresponding_gff3_file">$gffFileName</parameter>
    <parameter name="ftp_url">ftp://ftp.brc-central.org/</parameter>
  </category>

  <category name="submission">
    <parameter name="brc_central_submits_to_refseq">$brcSubmitsToRefseq</parameter>
  </category>

  <category name="sequence_info">
  $seqInfo
  </category>

  <category name="curatorship">
  $curationInfo
  </category>

  <category name="ownership">
    <parameter name="original_source"/>
    <parameter name="original_sequence"/>
    <parameter name="original_annotation"/>
    <parameter name="downloaded_from">$downloadedFrom</parameter>
    <parameter name="date_of_download"/>
    <parameter name="owner_url"/>
  </category>

</source>
};

}

sub usage {
  print STDERR q{
Create an XML file to send to BRC Central specifying the sequence meta info 
for a GFF file.  Uses $GUS_HOME/config/gus.config for db connection info.

usage: makeBrcSeqXmlFile --extDbName --extDbRlsVer --gffFile --brcSubmits --curators [--strain] [--changesFile file] [--dbName]

where:
  extDbName:   ExternalDatabase.name for the genome sequence
  extDbRlsVer: ExternalDatabaseRelease.version for the genome sequence
  gffFile:     name of gff file which this xml will describe.
  brcSubmits:  'yes' if the BRC submits this genome to refseq. 'no' otherwise
  strain:      optional. only needed if taxon name doesn't already include it
  curators:    '%%' delimited list of curation info.  each element is a '|'
               delimited list of who_is_responsible_for_annotating and
               who_is_responsible_for_modifying 
  changesFile: a file with a list of sequences that have changed since
                   the original, as discussed below

  dbName:      optional.  to override the db name in gus.config.  Example: toxo43penn

Sample command line:
% makeBrcSeqXmlFile --extDbName "Sanger P. falciparum chromosomes"  --extDbRlsVer "2005-09-26"  --gffPrefix PfalciparumGeneModels_PlasmoDB --brcSubmits no --curators "Sanger|Haiming%%TIGR|Mark"


Changed Seqs File

A two column tab delimited file, with one row per changed sequence, and
with these columns:
 sequence_source_id
 submitted to genbank (1 or 0)

};
  exit(1);
}
