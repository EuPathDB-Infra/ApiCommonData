#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::Supported::GusConfig;

my ($gusConfigFile, $drop, $create, $db);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	   "drop!" => \$drop,
	   "create!" => \$create,
	   "db=s" => \$db);

if (!$db || !($drop || $create) || ($drop && $create)) {
  die "usage: plasmodbSchema --db database [--drop | --create] [--gusConfigFile gus_config_file]\n";
}

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $login = $gusconfig->getDatabaseLogin();
my $password = $gusconfig->getDatabasePassword();

die "this script must log in to the database as apidb" if ( lc($login) ne 'apidb');

my @create = qw( createBfmv.sql
                 createApidbTuning.sql
	       );

my @delete = qw( 
	       );

if ($create) {

  for my $sql (@create) {
    &runSql($login, $password, $db, $sql);
  }

} else {

  for my $sql (@delete) {
    &runSql($login, $password, $db, $sql);
  }

}

sub runSql {
  my ($login, $password, $db, $file) = @_;

  my $fullFile = "$ENV{GUS_HOME}/lib/sql/$file";

  -e $fullFile || die "File '$fullFile' does not exist";

  my $cmd = "sqlplus $login\@$db/$password \@$fullFile";
print STDERR "$cmd\n";
  system($cmd);
  my $status = $? >> 8;
  die "Failed with status '$status running cmd: $cmd'" if $status;
}
