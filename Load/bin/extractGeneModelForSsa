#!/usr/bin/perl

use strict;
use DBI;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqFeature::Gene::Exon;
use CBIL::Util::PropertySet;
use Getopt::Long;

#----------------Get UID and PWD/ database handle---------------

my ($verbose,$gusConfigFile,$outputFile,$taxonId);

&GetOptions("verbose!" => \$verbose,
            "outputFile=s" => \$outputFile,
            "gusConfigFile=s" => \$gusConfigFile,
            "taxonId=s" => \$taxonId,
	    );


$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

unless(-e $gusConfigFile) {
  print STDERR "gus.config file not found! \n";
  exit;
}


my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) ||  die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 0;


my ($species,$indexFile,$geneFastaFile,$seqFastaFile);


#------------------------------


open(OUTINDX,">$outputFile");

print("Preparing to export genes model for Ssa...\n");

my $GeneQuery = &GetGeneQuery($taxonId);

my $sth = $dbh->prepare($GeneQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;  
$sth->execute ||  die "Couldn't execute statement: " . $sth->errstr;

my $sth2 = $dbh->prepare($ExonQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;  

while (my ($SOURCE_ID, $NA_FEATURE_ID,$START_MIN,$END_MAX, $STRAND, $SEQUENCE_ID, $NA_SEQUENCE_ID, $EXON_COUNT ) = $sth->fetchrow_array()) {
  
  print OUTINDX $SEQUENCE_ID."\t".$STRAND."\t".$START_MIN."\t".$END_MAX."\t".$EXON_COUNT."\t";
  
  my $ExonQuery = &GetExonQuery($NA_FEATURE_ID,$NA_SEQUENCE_ID);
  
  $sth2->execute ||  die "Couldn't execute statement: " . $sth2->errstr;
  
  my ($exonStarts,$exonEnds);
  while (my  ($START_MIN,$END_MAX) = $sth2->fetchrow_array()) {
    $exonStarts .= $START_MIN.",";
    $exonEnds .= $END_MAX.",";
  }
  
  print OUTINDX "$exonStarts\t$exonEnds\t".$SOURCE_ID."\n";
  
}

close(OUTINDX);

 
$dbh->disconnect;



#----------SUBROUTINES------------------#


#--------QUERIES-----------------#


sub GetGeneQuery {

  my ($TaxonID) = @_;

  # return ("SELECT ga.source_id, ga.na_feature_id,
#                   least(nl.start_min, nl.start_max, nl.end_min, nl.end_max)-1 as start_min,
#                   greatest(nl.start_min, nl.start_max, nl.end_min, nl.end_max) as end_max,
#                   decode(nl.is_reversed, 1, '-', '+') as strand,
#                   ga.sequence_id AS sequence_id,
#                   exons.exon_count
#              FROM apidb.geneattributes ga, dots.NaLocation nl, dots.NaSequence ens,
#                   (SELECT parent_id, count(*) AS exon_count
#                      FROM dots.ExonFeature
#                  GROUP BY parent_id) exons, sres.SequenceOntology so
#             WHERE ga.source_id is not null
#               AND ga.na_feature_id = nl.na_feature_id
#               AND ga.na_sequence_id = ens.na_sequence_id
#               AND ens.taxon_id = $TaxonID
#               AND ens.sequence_ontology_id = so.sequence_ontology_id
#               AND so.term_name != 'EST'
#               AND so.term_name != 'oligo'
#               AND ga.na_feature_id = exons.parent_id(+)
#             ORDER BY sequence_id,start_min,end_max,source_id");





return ("SELECT ga.source_id, ga.na_feature_id,
                  least(fl.start_min, fl.end_max)-1 as start_min,
                  greatest(fl.start_min, fl.end_max) as end_max,
                  decode(fl.is_reversed, 1, '-', '+') as strand,
                  ga.sequence_id AS sequence_id,ga.na_sequence_id
                  exons.exon_count
             FROM apidb.geneattributes ga, apidb.featurelocation fl, dots.NaSequence ens,
                  (SELECT parent_id, count(*) AS exon_count
                     FROM dots.ExonFeature
                 GROUP BY parent_id) exons, sres.SequenceOntology so
            WHERE ga.source_id is not null
              AND ga.na_feature_id = fl.na_feature_id
              AND ga.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id = $TaxonID
              AND ens.sequence_ontology_id = so.sequence_ontology_id
              AND so.term_name != 'EST'
              AND so.term_name != 'oligo'
              AND ga.na_feature_id = exons.parent_id(+)
            ORDER BY sequence_id,start_min,end_max,source_id");

}

sub GetExonQuery {

  my ($parentID,$na_sequence_id) = @_;

  return ("SELECT least(fl.start_min, fl.start_max, fl.end_min, fl.end_max)-1 as start_min,
                  greatest(fl.start_min, fl.start_max, fl.end_min, fl.end_max) as end_max
             FROM apidb.featurelocation fl
            WHERE fl.feature_type = 'ExonFeature'
              AND fl.parent_id = $parentID
              AND fl.na_sequence_id = $na_sequence_id
         ORDER BY start_min,end_max");
}


