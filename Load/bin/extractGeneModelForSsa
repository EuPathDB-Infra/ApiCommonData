#!/usr/bin/perl

use strict;
use DBI;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqFeature::Gene::Exon;
use CBIL::Util::PropertySet;
use Getopt::Long;

#----------------Get UID and PWD/ database handle---------------

my ($verbose,$gusConfigFile,$outputFile,$taxonId,$coordinates,$GeneQuery,$ExonQuery,$topLevel,$dbName,$dbVersion);

&GetOptions("verbose!" => \$verbose,
            "outputFile=s" => \$outputFile,
            "gusConfigFile=s" => \$gusConfigFile,
            "taxonId=s" => \$taxonId,
            "coordinates=s" => \$coordinates,
	    "topLevel!" => \$topLevel,
            "dbName=s" => \$dbName,
            "dbVersion=s" => \$dbVersion);


$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

unless(-e $gusConfigFile) {
  print STDERR "gus.config file not found! \n";
  exit;
}


my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) ||  die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 0;


my ($species,$indexFile,$geneFastaFile,$seqFastaFile);


#------------------------------


open(OUTINDX,">$outputFile");

print("Preparing to export genes model for Ssa...\n");

if(uc $coordinates eq "CDS"){
    $GeneQuery = &GetGeneQueryOnCDS;
}else{
    $GeneQuery = &GetGeneQuery;
}

my $sth = $dbh->prepare($GeneQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;
$sth->execute($taxonId) ||  die "Couldn't execute statement: " . $sth->errstr;
if(uc $coordinates eq "CDS"){
    $ExonQuery = &GetExonQueryOnCDS;
}else{
    $ExonQuery = &GetExonQuery;
}

my $sth2 = $dbh->prepare($ExonQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;  

while (my ($source_id, $na_feature_id,$start_min,$end_max, $strand, $sequence_id, $na_sequence_id, $exon_count ) = $sth->fetchrow_array()) {
  next unless ($exon_count);

  print OUTINDX $sequence_id."\t".$strand."\t".$start_min."\t".$end_max."\t".$exon_count."\t";

  $sth2->execute($na_feature_id,$na_sequence_id) ||  die "couldn't execute statement: " . $sth2->errstr;

  my ($exonStarts,$exonEnds);
  while (my  ($start_min,$end_max) = $sth2->fetchrow_array()) {
    $exonStarts .= $start_min.",";
    $exonEnds .= $end_max.",";
  }
  
  print OUTINDX "$exonStarts\t$exonEnds\t".$source_id."\n";
  
}

close(OUTINDX);

 
$dbh->disconnect;


#----------SUBROUTINES------------------#


#--------QUERIES-----------------#


sub GetGeneQuery {


  my $sql = "select gf.source_id, gf.na_feature_id,
                  nl.start_min -1 as start_min ,
                  nl.end_max,
                  decode(nl.is_reversed, 1, '-', '+') as strand,
                  substr(ns.source_id, 1, 50) AS sequence_id,gf.na_sequence_id,
                  exons.exon_count
             from dots.GeneFeature gf, dots.NaLocation nl, dots.NaSequence ns, sres.externaldatabase db, sres.externaldatabaserelease dbr,
                  (select parent_id, count(*) as exon_count
                   from dots.ExonFeature
                   group by parent_id) exons
            where gf.source_id is not null
              and gf.na_feature_id = nl.na_feature_id
              and gf.na_sequence_id = ns.na_sequence_id
              and ns.taxon_id = ?
              and exons.parent_id = gf.na_feature_id
              and db.name = $dbName
              and dbr.version = $dbVersion
              and gf.external_database_release_id = dbr.external_database_release_id
            order by sequence_id,start_min,end_max,source_id";
  if ($topLevel) {
    $sql = "select source_id, na_feature_id,
            start_min -1 as start_min, end_max,
            decode(is_reversed, 1, '-', '+') as strand,
            substr(sequence_id, 1, 50) AS sequence_id,na_sequence_id,
            exon_count
            from apidbtuning.geneattributes
            where source_id is not null
            and taxon_id = ?
            order by sequence_id,start_min,end_max,source_id";
  }
  return $sql;
}

sub GetExonQuery {


  my $sql = "select least(nl.start_min, nl.end_max)-1 as start_min,
                  greatest(nl.start_min, nl.end_max) as end_max
             from dots.ExonFeature ef, dots.NaLocation nl,dots.genefeature gf,
            where ef.na_feature_id = nl.na_feature_id
              and ef.parent_id =  ?
              and ef.na_sequence_id =  ?
              and ef.parent_id = gf.na_feature_id
            order by start_min,end_max";

  if ($topLevel) {
    $sql = "select least(start_min, end_max)-1 as start_min,
                   greatest(start_min,end_max) as end_max
            from apidbtuning.FeatureLocation
            where parent_id = ?
            and na_sequence_id = ?
            and feature_type = 'ExonFeature'
            and is_top_level = 1";
  }

  return $sql;
}

sub GetGeneQueryOnCDS {


  my $sql = "select gf.source_id, gf.na_feature_id,
                exons.start_min, exons.end_max,
                decode(exons.is_reversed, 1, '-', '+') as strand,
                substr(ns.source_id, 1, 50) as sequence_id,
                gf.na_sequence_id, exons.exon_count
           from dots.GeneFeature gf, dots.NaSequence ns, sres.externaldatabase db, sres.externaldatabaserelease dbr,
                (  select parent_id, least(min(coding_start), min(coding_end)) - 1 as start_min,
                          greatest(max(coding_start), max(coding_end)) as end_max,
                          count(*) as exon_count,
                          min(is_reversed) as is_reversed
                     from dots.ExonFeature ef, dots.NaLocation nl
                    where ef.na_feature_id = nl.na_feature_id
                 group by parent_id
                ) exons
          where exons.parent_id = gf.na_feature_id
            and gf.source_id is not null
            and gf.na_sequence_id = ns.na_sequence_id
            and ns.taxon_id = ?
            and db.name = $dbName
            and dbr.version = $dbVersion
            and gf.external_database_release_id = dbr.external_database_release_id
          order by sequence_id, start_min, end_max, source_id";

  if ($topLevel) {
    $sql = "select source_id, na_feature_id, 
            least(coding_start, coding_end) - 1 as start_min,
            greatest(coding_start, coding_end) as end_max,
            decode(is_reversed, 1, '-', '+') as strand,
            substr(sequence_id, 1, 50) as sequence_id,
            na_sequence_id, exon_count
            from apidbtuning.geneattributes
            where taxon_id = ?
            order by sequence_id, start_min, end_max, source_id";
  }

  return $sql;
}

sub GetExonQueryOnCDS {


  my $sql = "select least(ef.coding_start, ef.coding_end)-1 as start_min,
                  greatest(ef.coding_start, ef.coding_end) as end_max
             from dots.ExonFeature ef,dots.genefeature gf
            where ef.parent_id = ?
              and ef.na_sequence_id =  ?
              and ef.coding_start is not null
              and ef.parent_id = gf.na_feature_id
         order by start_min, end_max";

  if ($topLevel) {
    $sql = "select least(coding_start, coding_end)-1 as start_min,
                   greatest(coding_start, coding_end) as end_max
            from apidbtuning.FeatureLocation
            where parent_id = ?
            and na_sequence_id = ?
            and coding_start is not null
            and feature_type = 'ExonFeature'
            and is_top_level = 1";
  }

  return $sql;

}


