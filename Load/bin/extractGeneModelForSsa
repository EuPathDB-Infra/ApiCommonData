#!/usr/bin/perl

use strict;
use DBI;
use Bio::SeqFeature::Gene::Exon;
use CBIL::Util::PropertySet;
use Getopt::Long;

#----------------Get UID and PWD/ database handle---------------

my ($verbose,$gusConfigFile,$outputFile,$taxonId);

&GetOptions("verbose!" => \$verbose,
            "outputFile=s" => \$outputFile,
            "gusConfigFile=s" => \$gusConfigFile,
            "taxonId=s" => \$taxonId,
	    );


$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

unless(-e $gusConfigFile) {
  print STDERR "gus.config file not found! \n";
  exit;
}


my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) ||  die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 0;


my ($species,$indexFile,$geneFastaFile,$seqFastaFile);


#------------------------------


   open(OUTINDX,">$outputFile");

  print("Preparing to export genes model for Ssa...\n");

  my $GeneQuery = &GetGeneQuery($taxonId);

  my $sth = $dbh->prepare($GeneQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;  
  $sth->execute ||  die "Couldn't execute statement: " . $sth->errstr;


  while (my  $resultset = $sth->fetchrow_array()) {

      print OUTINDX $resultset->{SEQUENCE_ID}."\t".$resultset->{STRAND}."\t".$resultset->{START_MIN}."\t".$resultset->{END_MAX}."\t".$resultset->{EXON_COUNT}."\t";

      my $ExonQuery = &GetExonQuery($resultset->{NA_FEATURE_ID});
  
      my $sth2 = $dbh->prepare($ExonQuery) || die "Couldn't prepare the SQL statement: " . $dbh->errstr;  
      $sth2->execute ||  die "Couldn't execute statement: " . $sth2->errstr;

      my ($exonStarts,$exonEnds);
      while (my  $resultset2 = $sth2->fetchrow_array()) {
	  $exonStarts .= $resultset2->{START_MIN}.",";
	  $exonEnds .= $resultset2->{END_MAX}.",";
      }

      print OUTINDX "$exonStarts\t$exonEnds\t".$resultset->{SOURCE_ID}."\n";

  }

      close(OUTINDX);

 
$dbh->disconnect;



#----------SUBROUTINES------------------#


#--------QUERIES-----------------#


sub GetGeneQuery {

  my ($TaxonID) = @_;

  return ("SELECT gf.source_id, gf.na_feature_id,
                  least(nl.start_min, nl.start_max, nl.end_min, nl.end_max) as start_min,
                  greatest(nl.start_min, nl.start_max, nl.end_min, nl.end_max) as end_max,
                  nl.is_reversed,
                  ens.source_id AS sequence_id,
                  exons.exon_count
             FROM dots.GeneFeature gf, dots.NaLocation nl, dots.ExternalNaSequence ens,
                  (SELECT parent_id, count(*) AS exon_count
                     FROM dots.ExonFeature
                 GROUP BY parent_id) exons, sres.SequenceOntology so
            WHERE gf.source_id is not null
              AND gf.na_feature_id = nl.na_feature_id
              AND gf.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id = $TaxonID
              AND ens.sequence_ontology_id = so.sequence_ontology_id
              AND so.term_name != 'EST'
              AND so.term_name != 'oligo'
              AND gf.na_feature_id = exons.parent_id(+)
            ORDER BY sequence_id,start_min,end_max,source_id");
  


}
sub GetExonQuery {

  my ($parentID) = @_;

  return ("SELECT least(nl.start_min, nl.start_max, nl.end_min, nl.end_max) as start_min,
                  greatest(nl.start_min, nl.start_max, nl.end_min, nl.end_max) as end_max,
             FROM dots.NaLocation nl, dots.NaFeature nf
            WHERE nf.subclass_view = 'ExonFeature'
              AND nf.parent_id in ($parentID)
              AND nf.na_feature_id = nl.na_feature_id
         ORDER BY start_min,end_max");
}


