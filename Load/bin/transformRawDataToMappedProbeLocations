#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile,$extDbSpec,$outputFile,$inputFile,$verbose);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
            "extDbSpec=s" => \$extDbSpec,
            "inputFile=s" => \$inputFile,
            "verbose!" => \$verbose,
            "outputFile=s" => \$outputFile);

print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

my $extDbRlsId = getDbRlsId($extDbSpec);


my $sql = "select aef.source_id,l.sequence_source_id, l.start_min
from apidb.featurelocation l,DoTS.ArrayElementFeature aef
where aef.external_database_release_id=$extDbRlsId
and aef.na_feature_id=l.na_feature_id
and l.is_top_level = 1
order by l.sequence_source_id, l.start_min";

my %probeFeatureHash;
my $sh = $dbh->prepareAndExecute($sql);

while(my @ar = $sh->fetchrow_array()) {
  $probeFeatureHash{$ar[0]}="$ar[1]\t$ar[2]";
}
$sh->finish();
$dbh->disconnect();


open (TABFILE, "$inputFile") or die "Cannot open file for reading:  $!";;
open(FILE, "> $outputFile") or die "Cannot open file for writing:  $!";
while (<TABFILE>){
  chomp;
  my @myArray = split(/\t/, $_);
  if($probeFeatureHash{$myArray[0]}){
	  print FILE "$probeFeatureHash{$myArray[0]}\t$myArray[1]\n";
      }
}
close(TABFILE);
close FILE;

sub getDbRlsId {

  my ($extDbRlsSpec) = @_;

  my ($extDbName, $extDbRlsVer) = &getExtDbInfo($extDbRlsSpec);

  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($extDbName,$extDbRlsVer);

  my ($extDbRlsId) = $stmt->fetchrow_array();

  return $extDbRlsId;
}

sub getExtDbInfo {
  my ($extDbRlsSpec) = @_;
  if ($extDbRlsSpec =~ /(.+)\|(.+)/) {
    my $extDbName = $1;
    my $extDbRlsVer = $2;
    return ($extDbName, $extDbRlsVer);
  } else {
    die("Database specifier '$extDbRlsSpec' is not in 'name|version' format");
  }
}

