#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

# RUM 
#  0         1           2                                     3        4
# query_id   target_id  target_start-target_end(offset from 0) strand   query_sequence
#seq.12a Pf3D7_09        134425-134452   +       ACGATTCCAAAGATTCATAAGTNNTNTA

use strict;
use Getopt::Long;

my $filename;
my $sample;
my $extDbSpecs;


&GetOptions("filename|f=s" => \$filename, 
            "sample|e=s"=> \$sample,
            "extDbSpecs|s=s" => \$extDbSpecs,
            );

die "usage: makeNGSAlignFileFromRUM 
             --filename|f <filename> 
             --sample <sample name (reqired)> 
             --extDbSpecs|s <external_database_name|version for this experiment>"; 


my ($extDbName,$extDbRlsVer)=split(/\|/,$extDbSpecs);

my $sql = "select external_database_release_id from sres.externaldatabaserelease d, sres.externaldatabase x where x.name = '${extDbName}' and x.external_database_id = d.external_database_id and d.version = '${extDbRlsVer}'";

my $extDbRlsId= `getValueFromTable --idSQL \"$sql\"`;


my $ct = 0;
my $data = {};
my %dis;

open(F,"$filename") || die "unable to open $filename\n";
while(<F>){
  chomp;
  my @line = split("\t",$_);
  my $target_Id = $line[1];
  my ($start, $end) = split("-",$line[2]);
  push(@{$data->{$target_Id}},[$target_Id,$line[0],$line[3],$start+1,$end, undef, undef, undef,1]);
  }

foreach my $val (values %{$data}){
  foreach my $h (sort {$a->[2] <=> $b->[2]} @{$val}){
    print "\t$extDbRlsId\t$sample\t",join("\t",@{$h}),"\n";
  }
}


