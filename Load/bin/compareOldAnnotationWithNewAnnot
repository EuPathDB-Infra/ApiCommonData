#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Getopt::Long;

use Data::Dumper;
use FileHandle;
use HTTP::Date;

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;

my ($date, ) = split(" ", HTTP::Date::time2iso());
$date = join("",split(/-/,$date));

my ($verbose, $help, $organismAbbrev, $extDbName, $extDbRlsVer, $oldTranscriptFile, $newAliasesFile);

&GetOptions('help|h' => \$help,
            'organismAbbrev=s' => \$organismAbbrev,
            'extDbName=s' => \$extDbName,
            'extDbRlsVer=s' => \$extDbRlsVer,
	    'oldTranscriptFile=s' => \$oldTranscriptFile,
	    'newAliasesFile=s' => \$newAliasesFile,
           );

&usage() if($help);

&usage("Missing a Required Argument") unless (defined ($organismAbbrev && $oldTranscriptFile ));
&usage("Missing Required Argument") unless (defined ($extDbName && $extDbRlsVer) );

my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";
my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);
my $u = $gusconfig->{props}->{databaseLogin}; 
my $pw = $gusconfig->{props}->{databasePassword}; 
my $dsn = $gusconfig->{props}->{dbiDsn}; 
my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{LongTruncOk} = 1;
$dbh->{LongReadLen} = 512 * 512 * 1024;

## get the extDbRlsId
my $extDbRlsId;
my $sql = "
select edr.external_database_release_id from sres.externaldatabase ed, sres.externaldatabaserelease edr 
where ed.external_database_id=edr.external_database_id and ed.name like '$extDbName' and edr.version='$extDbRlsVer'
";

my $extDbRlsIdRef = readFromDatabase ($sql, $dbh);
($extDbRlsId) = @$extDbRlsIdRef;
print STDERR "For $organismAbbrev, get extDbRlsId=$extDbRlsId\n";

## get the new transcript sequence
my (%newSourceIds, %newSeqs, %newLengths);
my $sql = "select source_id, length, sequence from DOTS.splicednasequence where na_sequence_id in 
( select na_sequence_id from DOTS.transcript where parent_id in 
( select na_feature_id from DOTS.genefeature where external_database_release_id=?) )";

my $stmt = $dbh->prepare($sql);
$stmt->execute($extDbRlsId);

while ( my ($tSourceId, $tLength, $tSeq) = $stmt->fetchrow_array()) {
  $tSourceId =~ s/\-\d$//g;
  $newSourceIds{$tSourceId} = $tSourceId;
  $newSeqs{$tSourceId} = $tSeq;
  $newLengths{$tSourceId} = $tLength;
}
$stmt->finish();


## get the old transcript info
my (%oldSeqs, %oldLengths, $sourceId);
open (OLD, "$oldTranscriptFile") || die " can not open old transcript file to read.\n";
while (<OLD>) {
  if ($_ =~ /^>(\S+).*length=(\d+)/) {
    $sourceId = $1;
    $oldLengths{$sourceId} = $2;
    print STDERR "duplicated sourceId $sourceId in the old transcipt file\n" if ($oldSeqs{$sourceId});
  } else {
    my $curr = $_;
    $curr =~ s/\s+//g;
    $curr =~ s/\n//g;
    $oldSeqs{$sourceId} .= uc($curr);
  }
}
close OLD;

## get the aliases info
my (%aliases, %newIdToOld);
if ($newAliasesFile) {
  open (ALI, "$newAliasesFile") || die " can not open the aliases file to read\n";
  while (<ALI>) {
    chomp;
    my @items = split (/\t/, $_);
    $aliases{$items[1]} = $items[0];
    $newIdToOld{$items[0]} = $items[1];
  }
  close ALI;
}

## compare if the old sourceId in the new transcript
my ($ct, $sameCt, $reuseCt, $newIdCt, $aliasCt, $notAliasCt, $geneModelChangeCt);
foreach my $k (sort keys %oldSeqs) {
  if ($newSourceIds{$k}) {
    if ($newSeqs{$k} eq $oldSeqs{$k}) {
      $sameCt++;
      #print "new source Id derived from old source Id -- $k\n";
    } else {
      ## possible sourceId reusing.

      ## further development, decide if gene model changed or sourceId reused
      if ( ($newSeqs{$k} =~ $oldSeqs{$k}) || ($oldSeqs{$k} =~ $newSeqs{$k}) ) {
	print "gene model change -- $k\n";
	$geneModelChangeCt++;
      } else {
	#print "WARNING 1: possible source Id reused -- $k\n";
	#print ">old\n$oldSeqs{$k}\n";
	#print ">new\n$newSeqs{$k}\n";
	my $if = compare2seqs($oldSeqs{$k}, $newSeqs{$k});
	print "WARNING: possible $k is $if\n";
	if ($if =~ /geneModel/i) {
	  $geneModelChangeCt++;
	} else {
	  $reuseCt++;
	}
      }
    }
  } else {
    ## check if in the aliases file
    if ($aliases{$k}) {
      $aliasCt++;
    } else {
      print "WARNING 2: old source Id retired -- $k\n";
      $notAliasCt++;
    }
    $newIdCt++;
  }
  $ct++;
}
print "Total old source Id = $ct\n" if ($ct);
print "    same as the new source Id = $sameCt\n" if ($sameCt);
print "    gene model change = $geneModelChangeCt\n" if ($geneModelChangeCt);
print "    possible reuse source Id = $reuseCt\n" if ($reuseCt);
print "    but not in the new source Id = $newIdCt\n" if ($newIdCt);
print "For those that not in the new source Id\n";
print "    in the aliases file = $aliasCt\n" if ($aliasCt);
print "    not in the aliases file = $notAliasCt\n" if ($notAliasCt);
$sameCt=0;
$reuseCt=0;
$newIdCt=0;
$aliasCt=0;
$notAliasCt=0;


sub compare2seqs {
  my ($seq1, $seq2) = @_;

  open (SE1, ">seq1.fa") || die "can not write seq1.fa\n";
  print SE1 ">seq1\n";
  print SE1 "$seq1\n";
  close SE1;

  open (SE2, ">seq2.fa") || die "can not write seq2.fa\n";
  print SE2 ">seq2\n";
  print SE2 "$seq2\n";
  close SE2;

  my $blast = "bl2seq -i seq1.fa -j seq2.fa -p blastn -o bl2seq.out -D 1";
  `$blast`;

  my @matches;
  foreach my $i (0..length($seq2)-1) {
    $matches[$i] = 0;
  }

  open (BOUT, "bl2seq.out") || die "can not open bl2seq.out file to read\n";
  <BOUT>; <BOUT>; <BOUT>;
  while (<BOUT>) {
    my @items = split (/\t/, $_);
    if ($items[2] > 90 ) {  ## sequence similarity set to 95
      foreach my $i ($items[8]..$items[9]) {
	$matches[$i] = 1;
      }
    }
  }
  close BOUT;

  my $matchCts = 0;
  foreach my $i (0..$#matches) {
    $matchCts++ if ($matches[$i] == 1);
  }

  if ($matchCts/$#matches > 0.1) {  ## set the percentage of similarity to 10%
    return "geneModelChange";
  } else {
    return "idReused, $matchCts of $#matches";
  }
}

sub getSeqsInfoFromFasta {
  my ($inputFile) = @_;
  my ($sId, %seqs, %lengths, %codings);

  open (IN, "$inputFile") || die "can not open $inputFile to read.\n";
  while (<IN>) {
    chomp;
    if ($_ =~ /^>(\S+) \|.*length=(\d+) \|.*\| SO=(\S+)/) {
      $sId = $1;
      $lengths{$sId} = $2;
      $codings{$sId} = $3;
      print STDERR "duplicated sourceId $sId in the file $inputFile\n" if ($seqs{$sId});
    } else {
      my $curr = $_;
      $curr =~ s/\s+//g;
      $curr =~ s/\n//g;
      $seqs{$sId} .= uc($curr);
    }
  }
  close IN;
  return (\%seqs, \%lengths, \%codings);
}


sub readFromDatabase {
  my ($sql, $dbh) = @_;
  my $stmt = $dbh->prepare($sql);
  $stmt->execute;
  my (@arrays);
  while (my @fetchs = $stmt->fetchrow_array()) {
    my $oneline;
    foreach my $i (0..$#fetchs) {
      $oneline .= "$fetchs[$i] ";
    }
    push @arrays, $oneline;
  }
  $stmt->finish();
  return \@arrays;
}

sub usage {
  die
"
A script to compare the gene ID in the previous annotation with the newer annotation 
based on the transcript sequence and length

Usage: perl compareOldAnnotationWithNewAnnot --organismAbbrev pyoeyoelii17XNL 
--extDbName pyoeyoelii17XNL_primary_genome_RSRC --extDbRlsVer 2013-10-01 
--oldTranscriptFile PlasmoDB-9.3_Pyoelii17XNL_AnnotatedTranscripts.fasta 
--newAliasesFile pyoeyoelii17XNL_aliases.txt > warning.log

NOTE: the GUS_HOME should point to the instance that has the new annotation has been loaded

where
  --organismAbbrev: the organism Abbrev in the table apidb.organism
  --extDbName: the external database name for loading the new genome and annoation
  --extDbRlsVer: the external database release version for loading the new genome and annotation
  --oldTranscriptFile: the old transcript file that can be gotten from /eupath/data/apiSiteFiles/downloadSite/ dir
  --newAliasesFile: the tab delimited aliases file that extracted from the new annotation file
                    it is optional.


";
}


