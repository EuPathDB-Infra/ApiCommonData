#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Data::Dumper;
use XML::Simple;
use Getopt::Long qw(GetOptions);
use ApiCommonData::Load::TuningConfig::Log;
use ApiCommonData::Load::TuningConfig::Utils;
use ReFlow::DataSource::DataSource;
use ReFlow::DataSource::DataSources;
use CBIL::Util::PropertySet;

BEGIN {
  # This variable is declared inside a BEGIN block, to make it behave
  # like a Java "static" variable, whose state persists from one invocation to
  # another.
  my $errorFlag;

  sub setErrorFlag {
    $errorFlag = 1;
  }

  sub getErrorFlag {
    return $errorFlag;
  }
}

my ($propfile, $instance, $password, $logfile, $suffix, $project, $version, $debug);
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "password=s" => \$password,
           "logfile=s" => \$logfile,
           "suffix=s" => \$suffix,
           "project=s" => \$project,
           "version=s" => \$version,
           "debug!" => \$debug,
	  );

ApiCommonData::Load::TuningConfig::Log::setLogfile($logfile);
my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $propfile, $password);


createTables($dbh, $suffix);

chdir "$ENV{GUS_HOME}/lib/xml/datasources";

my $projectQuery = $dbh->prepare(<<SQL);
  select project_id, lower(project_id) as lower_project_id
  from (select distinct project_id from apidb.SequenceAttributes)
SQL

$projectQuery->execute() or die "getting a list of project IDs";
while (my ($project, $lowerProject) = $projectQuery->fetchrow_array()) {

  loadDataSources($dbh, "globalResources.xml", $project, $version, $suffix, $debug);

  foreach my $file (`ls $lowerProject/*.xml`) {
  ApiCommonData::Load::TuningConfig::Log::addLog("loading $file");
    loadDataSources($dbh, $file, $project, $version, $suffix, $debug);
  }
}

createIndexes($dbh);
dropConstraints($dbh, $suffix);

die if getErrorFlag();

################################################################################

sub loadDataSources {

    my ($dbh, $infile, $project, $version, $suffix, $debug) = @_;

    my $props = CBIL::Util::PropertySet->new("$ENV{PROJECT_HOME}/workflows/$project/$version/config/stepsShared.prop",[], 1);
    my $dataSources = ReFlow::DataSource::DataSources->new($infile, $props);
  ApiCommonData::Load::TuningConfig::Log::addLog(Dumper($dataSources)) if $debug;

    my $insertDs = $dbh->prepare(<<SQL);
      insert into apidb.DataSource$suffix
                  (data_source_id, display_name, version, categories, organisms,
                   project, description, contact, institution)
                  values (?, ?, ?, ?, ?, ?, ?, ?, ?)
SQL

    my $insertDsp = $dbh->prepare(<<SQL);
      insert into apidb.DataSourcePublication$suffix
                  (data_source_publication_id, data_source_id, pmid, doi, citation, abstract)
      select DataSourcePublication_sq$suffix.nextval, ?, ?, ?, ?, ?
      from dual
SQL

    my $insertDsr = $dbh->prepare(<<SQL);
      insert into apidb.DataSourceReference$suffix
                  (data_source_reference_id, data_source_id, record_type, target_type, target_name)
      select DataSourceReference_sq$suffix.nextval, ?, ?, ?, ?
      from dual
SQL

    foreach my $dsName ($dataSources->getDataSourceNames()) {
      my $ds = $dataSources->getDataSource($dsName);
      ApiCommonData::Load::TuningConfig::Log::addLog("loading data source: \"$dsName\"") if $debug;
      my $dataSourceId = getNextDataSourceId($dbh, $suffix);
      $insertDs->execute($dataSourceId, $ds->getDisplayName(),
                       $ds->getVersion(), $ds->getCategory(), $ds->getOrganisms(),
                       $project, # not $ds->getProject()
                       $ds->getDescription(), $ds->getContact(),
                       $ds->getInstitution())
	or die "inserting a DataSource record";

      foreach my $publicationList ($ds->getPublications()) {
	ApiCommonData::Load::TuningConfig::Log::addLog("Dumping publication:\n" . Dumper($publicationList)) if $debug;
	foreach my $publication (@$publicationList) {
          $insertDsp->execute($dataSourceId, $publication->{pmid}, $publication->{doi}, $publication->{citation}, $publication->{abstract})
	    or die "inserting a DataSetPublication record";
	}
      }

      foreach my $referenceList ($ds->getWdkReferences()) {
	ApiCommonData::Load::TuningConfig::Log::addLog("Dumping referenceList:\n" . Dumper($referenceList) ) if $debug;
	foreach my $reference (@$referenceList) {
	    $insertDsr->execute($dataSourceId, $reference->{recordClass}, $reference->{type}, $reference->{name})
	      or die "inserting a DataSetReference record";
	}
      }

    }
}

sub getNextDataSourceId {
  my ($dbh, $suffix) = @_;

  my $query = $dbh->prepare(<<SQL);
    select apidb.DataSource_sq$suffix.nextval from dual
SQL

  $query->execute()
    or die "getting a primary key for DataSource from its sequence";
  my ($id) = $query->fetchrow_array();

  return $id;
}

sub createTables {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating DataSource table";
      create table apidb.DataSource$suffix (
        data_source_id               number(12),
        external_database_release_id number(12),
        display_name                 varchar2(200),
        version                      varchar2(60),
        public_url                   varchar2(80),
        categories                   varchar2(80),
        organisms                    varchar2(1000),
        project                      varchar2(30),
        description                  varchar2(4000),
        contact                      varchar2(80),
        institution                  varchar2(120),
        constraint DataSource_pk$suffix primary key (data_source_id),
        constraint DataSource_extdb_fk$suffix foreign key (external_database_release_id) references sres.ExternalDatabaseRelease
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourcePublication table";
      create table apidb.DataSourcePublication$suffix (
        data_source_publication_id   number(12),
        data_source_id               number(12),
        pmid                         varchar2(60),
        doi                          varchar2(60),
        citation                     varchar2(1000),
        abstract                     varchar2(2000),
        constraint DataSourcePub_pk$suffix primary key (data_source_publication_id),
        constraint DataSourcePub_parent_fk$suffix foreign key (data_source_id) references apidb.DataSource$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceReference table";
      create table apidb.DataSourceReference$suffix (
        data_source_reference_id     number(12),
        data_source_id               number(12),
        record_type                  varchar2(50),
        target_type                  varchar2(20),
        target_name                  varchar2(60),
        constraint DataSourceRef_pk$suffix primary key (data_source_reference_id),
        constraint DataSourceRef_parent_fk$suffix foreign key (data_source_id) references apidb.DataSource$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSource table";
      create sequence apidb.DataSource_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourcePublication table";
      create sequence apidb.DataSourcePublication_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceReference table";
      create sequence apidb.DataSourceReference_sq$suffix
SQL

}

sub createIndexes {

}

sub dropConstraints {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourcePublication table";
        alter table apidb.DataSourcePublication$suffix drop constraint DataSourcePub_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceReference table";
        alter table apidb.DataSourceReference$suffix drop constraint DataSourceRef_parent_fk$suffix
SQL
}

