#!/usr/bin/perl

use strict;

my $type = $ARGV[0];
my $project = $ARGV[1];
my $tag = $ARGV[2];
my $projectHome = $ARGV[3];

&usage unless (scalar(@ARGV) == 4
               && ($type eq "dataprod" || $type eq "website")
	       && ($project eq "ApiDB"
		   || $project eq "CryptoDB"
		   || $project eq "PlasmoDB"
		   || $project eq "ToxoDB"
		   || $project eq "GiardiaDB"
		   || $project eq "TrichDB"
		   || $project eq "Common"));

my $urlRoot = "https://www.cbil.upenn.edu/svn";

my $urlRootProj = "$urlRoot/apidb/$project";
my $urlRootApiComm = "$urlRoot/apidb/ApiCommon";

my %web2data = ('ApiDB' => 'ApiDB',
		'CryptoDB' => 'CryptoDB',
		'PlasmoDB' => 'PlasmoDB',
		'ToxoDB' => 'ToxoDB',
		'GiardiaDB' => 'AmitoDB',
		'TrichDB' => 'AmitoDB',
	       );

-d $projectHome || die "projectHome '$projectHome' is not a directory\n";

if ($type eq 'website') {

  if ($project eq 'Common') {
    foreach my $sub (("ApiCommonWebsite","ApiCommonWebService","ApiCommonData")){
      &doIt("$urlRoot/apidb/$sub", "branches", $sub);
    }

    &doIt("$urlRoot/gus/CBIL", "branches/internal", "CBIL");
  }

  else {
    foreach my $sub (("Data", "Website")) {
      my $p = $project;
      $p = $web2data{$project} if $sub eq 'Data';
      &doIt("$urlRoot/apidb/$p$sub", "branches", "$project$sub");
    }
    # until we move plasmodbwebservices into apicommonwebservices
    if ($project eq 'PlasmoDB') {
      &doIt("$urlRoot/apidb/PlasmoDBWebService", "branches", "PlasmoDBWebService");
    }

  }
} else {

  die "All data production branches should have a tag ending in '-dp'\n" unless $tag =~/\-dp$/;

  if ($project eq 'Common') {
    foreach my $sub (("ApiCommonData")){
      &doIt("$urlRoot/apidb/$sub", "branches", $sub);
    }

    &doIt("$urlRoot/gus/CBIL", "branches/internal", "CBIL");
    &doIt("$urlRoot/gus/GUS", "branches/internal", "GUS");
  }

  else {
    foreach my $sub (("Data")) {
      &doIt("$urlRootProj$sub", "branches", "$project$sub");
    }
  }
}

##################################################################################3


sub doIt {
  my ($urlRoot, $branchesDir, $targetDir) = @_;
  die "Can't 'svn co' into $projectHome/$targetDir, it already exists\n"
    if -e "$projectHome/$targetDir";
  &cmd("svn copy $urlRoot/trunk $urlRoot/$branchesDir/$tag -m \"\"");
  &cmd("svn co $urlRoot/$branchesDir/$tag $projectHome/$targetDir");
}

sub cmd {
    my ($cmd) = @_;

    print STDERR "Running '$cmd'\n\n";
    my $output = `$cmd`;
    my $status = $? >> 8;
    die "\n" if ($status);
}

sub usage {
  print STDERR "
usage:  apiBranch dataprod|website ApiDB|CryptoDB|PlasmoDB|ToxoDB|GiardiaDB|TrichDB|Common <tag> <projectHome>

<tag>          = the tag to give the branch
<projectHome>  = an empty project_home directory into which

Branch either the website or data production code for either your project or
for the common code.  (The branch is created internally in svn, so it does not
matter what is in your local working copy.)

And, check out the new branches into the provided projectHome (it throws an
error if the projectHome already contains that project).  The projectHome
directory must exist.

We branch the project code and common code as separate operations because
two or more project branches may depend on the same branch of the common
code.

For data production (dataprod):

  NOTE: All tags should end in 'd' to distinguish data production branches.

  If you specify a project name, it creates these branches:
      -yourprojectData

  If you specify 'Common' it creates these common branches:
    -CBIL    (branched into /CBIL/branches/internal/your_tag)
    -GUS    (branched into /CBIL/branches/internal/your_tag)
    -ApiCommonData

For website:
  If you specify a project name, it creates these branches:
      -yourprojectWebsite
      -yourprojectWebService

  If you specify 'Common' it creates these common branches:
    -CBIL    (branched into /CBIL/branches/internal/your_tag)
    -ApiCommonWebsite
    -ApiCommonWebService

Note: the WDK and WSF must be branched separately.
    -yourprojectWebsite
    -yourprojectWebService

IMPORTANT: once this operation is complete, be sure to EDIT the build.xml
files of each project, specifying the version of its dependencies!

";
  exit(1);
}
