#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

# given a fasta file with proteins and a GFF file with transcript 
# features that correspond to the proteins, append a Protein attribute
# to the transcript features in the GFF

# NOTE: this is a simple program that assumes that the fasta sequence
# can fit in memory


use strict;

my $proteinFile = $ARGV[0];
my $gffFile = $ARGV[1];

if (!$proteinFile || !$gffFile) {
  die "usage:  addProteinsToGff protein_fasta_file gff_file\n";
}

open(FASTA, $proteinFile) || die "couldn't open fasta file '$proteinFile'\n";

my $line = <FASTA>;
my $id = &getId($line);
my $seq = "";
my %proteins;
while (<FASTA>) {
  chomp;
  if (/\>/) {
    $proteins{$id} = $seq;
    $id = getId($_);
    $seq = "";
  } else {
    $seq .= $_;
  }
}
$proteins{$id} = $seq;


open(GFF, $gffFile) || die "can't open gff file '$gffFile'\n";

while (<GFF>) {
  chomp;
  my $line = $_;
  if (/transcript/) {
    $line =~ /GenePrediction \"([^\"]+)\"/;
    my $id = $1;
    $proteins{$id} || die "couldn't find a protein for '$id'\n";
    $line .= " ; Protein $proteins{$id}";
  }
  print "$line\n";
}

sub getId {
  my ($line) = @_;

  my @fields = split(/\|/, $line);
  $fields[0] =~ /\>(\S+)\s*/;
  my $id = $1
}

