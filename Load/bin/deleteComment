#!/usr/bin/perl

use strict;
# don't think so use lib "$ENV{GUS_HOME}/lib/perl";
use Data::Dumper;
use DBI;
use Getopt::Long qw(GetOptions);

my ($password, $commentId);

GetOptions("commentId=s" => \$commentId,
           "password=s" => \$password,
	  );

if (!$commentId || !$password) {
  usage();
  die;
}

my $dbh = DBI->connect("dbi:Oracle:apicomm", "apidb", $password,
                       { PrintError => 1, RaiseError => 0}
                      ) or die "Can't connect to the database: $DBI::errstr\n";

showComment($dbh, $commentId);
if (weReallyWantTo()) {
  deleteComment($dbh, $commentId);
}

###############################################################################

sub usage {
  print (
q{
Usage:

deleteComment -password <password> -commentId <ID>

options:
   password -- database login password for user apidb in apicomm instance
  commentId -- comment_id of comment to delete

});
}


sub showComment {

  my ($dbh, $commentId) = @_;

  my $stmt = $dbh->prepare(<<SQL);
    select stable_id, project_name, project_version, organism, comment_target_id, is_visible, email, headline, content
    from comments2.comments
    where comment_id = $commentId
SQL

  $stmt->execute()
    or print STDERR $dbh->errstr;

  if (my ($stableId, $projectName, $projectVersion, $organism, $commentTargetId, $isVisible, $email, $headline, $content)
           = $stmt->fetchrow_array()) {

    print "\ncomment $commentId:\n\n";
    print "          source_id: $stableId\n";
    print "         project_id: $projectName\n";
    print "    project version: $projectVersion\n";
    print "           organism: $organism\n";
    print "comment target type: $commentTargetId\n";
    print "          isVisible: $isVisible\n";
    print "              email: $email\n";
    print "           headline: $headline\n";
    print "            content: $content\n";
    print "\n";


  } else {
    die("Error: no comment found with comment_id $commentId");
  }

  $stmt->finish();
}

sub weReallyWantTo {

  print "Are you CERTAIN you want to DELETE THIS COMMENT IRRETRIEVABLY (yes/no)? ";

  my $response = <>;
  chomp($response);
  return $response eq 'yes';
}

sub deleteComment {
  my ($dbh, $commentId) = @_;
  my $rows;

  print "\ndeleting comment $commentId\n";
  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.Locations where comment_id = $commentId
SQL
  $rows += 0;
  print "Locations: $rows row(s)\n";

  print "\ndeleting comment $commentId\n";
  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.Comment_External_Database where comment_id = $commentId
SQL
  $rows += 0;
  print "Comment_External_Database: $rows row(s)\n";

  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.CommentTargetCategory where comment_id = $commentId
SQL
  $rows += 0;
  print "CommentTargetCategory: $rows row(s)\n";

  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.CommentStableId where comment_id = $commentId
SQL
  $rows += 0;
  print "CommentStableId: $rows row(s)\n";

  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.CommentReference where comment_id = $commentId
SQL
  $rows += 0;
  print "CommentReference: $rows row(s)\n";

  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.CommentFile where comment_id = $commentId
SQL
  $rows += 0;
  print "CommentFile: $rows row(s)\n";

  $rows = $dbh->do(<<SQL) or die $dbh->errstr;
    delete from comments2.Comments where comment_id = $commentId
SQL
  $rows += 0;
  print "Comments: $rows row(s)\n";
}
