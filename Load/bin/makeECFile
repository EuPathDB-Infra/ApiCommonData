#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use FileHandle;
use Data::Dumper;
use HTTP::Date;
use DBI;

my ($date, ) = split(" ", HTTP::Date::time2iso());

$date = join("",split(/-/,$date)); 


my ($verbose, $help, $inFileDir, $outFile, $idQualifier, $ecQualifier, $format, $seqFileExtension);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'fileOrDir=s' => \$inFileDir,
            'fileExt=s'  => \$seqFileExtension,
            'output_file=s' => \$outFile,
	    'id_qualifier=s'       =>  \$idQualifier,
	    'ec_qualifier=s'       => \$ecQualifier,
	    'format=s'         => \$format,	
            
           );


&usage() if($help);
&usage("Missing Argument") unless(defined $inFileDir && $outFile && $format);



my $ecFh = FileHandle->new();
$ecFh->open(">$outFile");

my @inputFiles = &getInputFiles($inFileDir,$seqFileExtension);

foreach my $inFile (@inputFiles){

if(!($format =~ /gff/)){ 
my $in  = Bio::SeqIO->new(-file => $inFile , '-format' => $format) or die("Could not open $inFile for reading\n");;



while ( my $seq = $in->next_seq() ) {
  if(!($seq->molecule =~ /rna/i)){
	foreach my $feature ($seq->get_SeqFeatures){
	  if($feature->primary_tag eq "CDS"){
	    my $sourceId = '';
	    my $ecId;
	    if ($feature->has_tag($idQualifier)){
	      foreach my $value ($feature->get_tag_values($idQualifier)){
		$sourceId = $value;
	      }
	    }
	
	    if ($feature->has_tag($ecQualifier)){
	      foreach my $value ($feature->get_tag_values($ecQualifier)){
		$ecId = $value;

		if($ecId =~ /\,/){
		  my @ecIds = split(/\,/,$ecId);

		  foreach my $ec (@ecIds){
		    $ecFh->print("$sourceId\t$ec\n");
		  }
		}else{
		  $ecFh->print("$sourceId\t$ecId\n");
		}

	      }
	    }

	  }
	}
      }
}


}else{
  open(IN,"$inFile");
  foreach my $line (<IN>){
    chomp($line);

    if($line =~ /$idQualifier/ && $line =~ /$ecQualifier/){

      $line =~ /$idQualifier \"([^\"]*)\";/;


      my $sourceId = $1;

      $line =~ /$ecQualifier \"([^\"]*)\";/;
      my $ecId = $1;



	    if($ecId =~ /\,/){

		my @ecIds = split(/\,/,$ecId);

		foreach my $ec (@ecIds){

		  $ec =~ s/^EC://;

		  if($ec =~ /^\d+\:\d+\:/){
		     $ecFh->print("$sourceId\t$ec\n");
		   }
		}
	      }else{
		$ecId =~ s/^EC://;

		if($ecId =~ /^\d+\.\d+\./){
		  $ecFh->print("$sourceId\t$ecId\n");
		}

	    }
	    

	    
    }
  }
}
}

$ecFh->close();



#-------------------------------------------------------------------------------

sub trim($){
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}


#-------------------------------------------------------------------------------

sub usage {
  my ($m) = @_;

  print STDERR "$m\n" if($m);
  my $usage = "usage:  perl makeEcFile \\
--format      <format of the annotation file (genbank, embl, gff)>
--fileOrDir <file or directory to be parsed> \\
[--fileExt  <extension of file in directory>] \\
--output_file <output ec file> \\
--id_qualifier <qualifier for source id in input file> \\
--ec_qualifier <qualifier for EC number in input file> \\
[--verbose <boolean-a little extra STDERR out>] \\
--help|h
";
  print STDERR $usage;
  exit(0);
}

#-------------------------------------------------------------------------------

sub getInputFiles {
  my ($fileOrDir,$seqFileExtension) = @_;


  my @inputFiles;
  if (-d $fileOrDir) {
    opendir(DIR, $fileOrDir) || die "Can't open directory '$fileOrDir'";
    my @noDotFiles = grep { $_ ne '.' && $_ ne '..' } readdir(DIR);
    @inputFiles = map { "$fileOrDir/$_" } @noDotFiles;
    @inputFiles = grep(/.*\.$seqFileExtension$/, @inputFiles) if $seqFileExtension;
  } else {
    $inputFiles[0] = $fileOrDir;
  }
  return @inputFiles;
}



1;
