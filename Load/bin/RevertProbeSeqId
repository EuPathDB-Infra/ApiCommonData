#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use Bio::SeqIO;

my $debug = 0;
my ($originalShortSeqsFile, $inputFile, $outputFile);

&GetOptions( "originalShortSeqsFile=s" => \$originalShortSeqsFile,
	    "inputFile=s" => \$inputFile,
	    "outputFile=s" => \$outputFile,
	    "debug!" => \$debug,
            );

unless (-e $originalShortSeqsFile && -e $inputFile) { 
  die "You must provide valid input and shortSeqsFile files. Usage: RevertProbeSeqId --originalShortSeqsFile <FILE> --inputFile <FILE> --outputFile <FILE> [--debug]";
}

my $seqio  = Bio::SeqIO->new( '-format' => 'fasta' , 
                              -file => $originalShortSeqsFile
                            );

my %originalSeqIds;

while(my $seq = $seqio->next_seq()) {
  my $sequence = $seq->seq();
  my $oligoId = $seq->id();

  push @{$originalSeqIds{$sequence}}, $oligoId;
}

open(IN, $inputFile) or die "Cannot open file $inputFile for reading:  $!";
open(OUT, ">$outputFile") or die "Cannot open file $outputFile for writing:  $!";

my %seen;

while(<IN>){
  chomp;
  my @list = split(/\t/, $_);

  #rm Greg's id
  shift @list;

  my $sequence = $list[3];
  if($seen{$sequence}) {
    die "We've already seen sequence $sequence.";
  }

  foreach my $id (@{$originalSeqIds{$sequence}}) {
    print OUT $id . "\t" . join("\t", @list) . "\n";
  }
}
close(IN);
close(OUT);

