#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use Data::Dumper;
use strict;

my $debug = 0;
my ($originalShortSeqsFile, $inputFile, $outputFile);

&GetOptions( "originalShortSeqsFile=s" => \$originalShortSeqsFile,
	    "inputFile=s" => \$inputFile,
	    "outputFile=s" => \$outputFile,
	    "debug!" => \$debug,
            );

unless (-e $originalShortSeqsFile && -e $inputFile){ die "You must provide valid input and shortSeqsFile files. Usage: RevertProbeSeqId --originalShortSeqsFile <FILE> --inputFile <FILE> --outputFile <FILE> [--debug]";}

my (%originalSeqIds, %seqIds, $idNum);

open(ORI, "$originalShortSeqsFile");

while(<ORI>){
  chomp;
  if(/\>\s*(\S+)/){
      $idNum++;
      my $newSeqId="seq.".$idNum."a";
      $originalSeqIds{$newSeqId} = $1;
  }
}
close(ORI);


open(IN, "$inputFile");
open(OUT, ">$outputFile");

while(<IN>){
  chomp;
  my @list = split(/\t/, $_);
  $_ =~ s|$list[0]|$originalSeqIds{$list[0]}|;
  print OUT "$_\n";
}
close(IN);
close(OUT);

