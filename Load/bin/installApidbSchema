#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::Supported::GusConfig;
use ApiCommonData::Load::InstallSchemaUtils qw( runSql dropSchemaSetTables dropSchemaSetPostgres );
use DBI;

$| = 1;

my ($gusConfigFile, $dropApiDB, $dropGUS, $create, $db, $dbVendor, $allowFailures, $verbose);

&GetOptions("gusConfigFile=s" => \$gusConfigFile,
           "dropApiDB!" => \$dropApiDB,
           "dropGUS!" => \$dropGUS,
           "allowFailures!" => \$allowFailures,
           "create!" => \$create,
           "verbose!" => \$verbose,
           "db=s" => \$db);

my $x = $dropApiDB + $dropGUS + $create;
if (!$db || ($x != 1)) {
  die "

Install the ApiDB and ApiDBTuning schemas and the ApidDB patches to GUS, or uninstall them (or uninstall the GUS schemas)

usage: installApidbSchema --db database [--create | --dropApiDB | --dropGUS] [--gusConfigFile gus_config_file] [--allowFailures] [--verbose]

Caution: only use --allowFailures if you know what you are doing

create - creates the ApiDB and ApiDBTuning schemas and patches GUS.

dropApiDB - drops the ApiDB and ApiDBTuning schemas, and ApiDB patches to GUS.

dropGUS - drops the Core, DoTS, PROT, RAD, SRes, STUDY, TESS (and all VER) schemas

Log is printed to STDOUT

Verbose prints commands run to STDERR

";
}

my $d = 'GUS schema';
$d = 'ApiDB and ApiDBTuning schemas' if $dropApiDB;

if ($dropApiDB || $dropGUS) {
    print "\nYou are about to UNINSTALL the $d on:\n  $db\nType the name of the instance to confirm: ";
    my $confirm = <STDIN>;
    chomp $confirm;
    die "You did not correctly confirm the db instance\n" unless $db eq $confirm;
}

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $login = $gusconfig->getDatabaseLogin();
my $password = $gusconfig->getDatabasePassword();
my $dbVendor = $gusconfig->getDatabaseVendor();
my $dbiDsn = $gusconfig->getDbiDsn();
$dbiDsn =~ /(:|;)host=((\w|\.)+);?/ ;
my $dbHostname = $2;   # needed to connect to postgres
die "dbVendor in $gusConfigFile must be either 'Oracle' or 'Postgres'\n" unless ($dbVendor eq 'Oracle' || $dbVendor eq 'Postgres');


# PLEASE READ BEFORE ADDING TO @create
#
# The list is ordered according to these rules:
# first:  changes to GUS
# second: create ApidbTuning schema
# third:  create Apidb schema
# fourth: create tables within Apidb, in dependency order as needed
#
# This ordering helps ensure that when/if we drop, the dropping proceeds
# in the correct order, avoiding bogus failures from dropping what was
# not yet created.
#
# ALSO: if you are adding a create script for the Apidb schema
#       it is good practice to write a parallel drop script
#       so that if needed, the create can be manually reversed

my @create = qw(
  removeNullConstraintsFromSimilarityTables.sql
  createGusTuning.sql
  createApidbTuningSchema.sql
  createApidbUserDatasetsSchema.sql
  createTestTuningSchema.sql
  createApidbSchema.sql
  createChebiSchema.sql
  createHmdbSchema.sql
  createEdaSchema.sql
  createHMDBTables.sql
  createAnalysisMethodInvocation.sql
  createDatasource.sql
  createSnpTables.sql
  createGeneInteractionTables.sql
  createGeneFeatureProduct.sql
  createGeneFeatureName.sql
  createOrthologGroup.sql
  createPhylogeneticProfile.sql
  createPhylogeneticTree.sql
  createRelatedNaFeature.sql
  createReportCache.sql
  createSequenceAttributeTables.sql
  createOrganism.sql
  createStoredProcedures.sql
  createPivotProcedure.sql
  createSyntenyTables.sql
  createSpliceSiteFeature.sql
  createPubChemSubstance.sql
  createPubChemCompound.sql
  createDbRefCompound.sql
  createOldAnnotation.sql
  createOldCodingSequence.sql
  createTuningManager.sql
  createWorkflow.sql
  createIntronJunction.sql
  createNAFeatureHaploblock.sql
  createBlatProteinAlignment.sql
  createGFF3Table.sql
  createEcNumberGenus.sql
  createSpliceSiteGenes.sql
  createPolyAGenes.sql
  createMassSpecSummary.sql
  createCompoundMassSpec.sql
  createPathwayTables.sql
  createTranscriptProduct.sql
  createIsolateGPS.sql
  createPhenotype.sql
  createNAFeaturePhenotype.sql
  createPhenotypeScore.sql
  createPhenotypeMutants.sql
  createPhenotypeGrowthRate.sql
  createHaplotypeResult.sql
  createOntologyTermResult.sql
  createSubjectResult.sql
  createSeqEdit.sql
  createWHOStandards.sql
  createLOPITResults.sql
  createWGCNAResults.sql
  createWGCNAModuleEigengeneResults.sql
  createNAFeatureMetaCycle.sql
  createCNVTables.sql
  createRflpTables.sql
  createNAFeatureImage.sql
  createSequenceTaxon.sql
  createFeatureLocation.sql
  createCrisprPhenotype.sql
  createGoSubset.sql
  createUserDatasetCoreTables.sql
  createUserDatasetTypeTables.sql
  createDatabaseTableMapping.sql
  createEntityGraphTables.sql
  createEdaUdModifications.sql
  createExternalResourceUrl.sql
  createAGPPiece.sql
  createAlphaFoldTable.sql
  createLegacyDatasetNames.sql
  createBusco.sql
  createCellxgene.sql
  grantChebiTables.sql
);


# drop GUS first, then ApidbTuning, then Apidb (reverse of order they were created in).
# for GUS, we only drop the tuning indexes, as the other GUS changes don't
# need to be reversed.  The trick here is to order these to avoid failures
my @delete = qw(
  restoreNullConstraintsFromSimilarityTables.sql
  dropGusTuning.sql
  dropDbLinks.sql
  dropTestTuningSchema.sql
  dropApidbTuningSchema.sql
  dropApidbUserDatasetsSchema.sql
  dropVdiControlTables.sql
  dropApidbSchema.sql
  dropChebiSchema.sql
  dropHMDBSchema.sql
  dropExternalResourceUrl.sql
);

my @gusSchemas = qw(
  CORE
  DOTS
  MODEL
  PLATFORM
  RESULTS
  SRES
  STUDY
  COREVER
  DOTSVER
  MODELVER
  PLATFORMVER
  RESULTSVER
  SRESVER
  STUDYVER
);

my @apiDbSchemas = qw(
  APIDB
  APIDBTUNING
  APIDBUSERDATASETS
  CHEBI
  HMDB
  EDA
  EDA_UD
  TESTTUNING
);

if ($create) {
  for my $sqlFile (@create) {
     print STDOUT "\n==============================================================\n";
     print STDOUT "$sqlFile\n";     
     print STDOUT "==============================================================\n";
     
     my @sqlplusParamValues;
     if($sqlFile eq 'createEntityGraphTables.sql') {
       $sqlplusParamValues[0] = "EDA";
       $sqlplusParamValues[1] = "SRES";
       runSql($login, $password, $db, $dbHostname, $dbVendor, $sqlFile, $allowFailures, @sqlplusParamValues);
       $sqlplusParamValues[0] = "ApidbUserDatasets";
       $sqlplusParamValues[1] = "ApidbUserDatasets";
       runSql($login, $password, $db, $dbHostname, $dbVendor, $sqlFile, $allowFailures, @sqlplusParamValues);
     }

     else {
       runSql($login, $password, $db, $dbHostname, $dbVendor, $sqlFile, @sqlplusParamValues);
     }
  }
} elsif ($dropApiDB) {
    if (lc $dbVendor eq 'oracle') {
      my $schemaSetStr = join ', ', map "'$_'", @apiDbSchemas;
      dropSchemaSetTables($login, $password, $db, $schemaSetStr);
    } elsif (lc $dbVendor eq 'postgres') {
      dropSchemaSetPostgres($dbiDsn, $login, $password, $db, $dbHostname, @apiDbSchemas);
    } else {
      die "Unsupported dbVendor:$dbVendor.";
    }
} elsif ($dropGUS) {
  if (lc $dbVendor eq 'oracle') {
    my $schemaSetStr = join ', ', map "'$_'", @gusSchemas;
    dropSchemaSetOracle($login, $password, $db, $schemaSetStr);
  } elsif (lc $dbVendor eq 'postgres') {
    dropSchemaSetPostgres($dbiDsn, $login, $password, $db, $dbHostname, @gusSchemas);
  } else {
    die "Unsupported dbVendor:$dbVendor.";
  }
}

print STDERR "\nDone.\n";
