#!/usr/bin/perl -w
#
use LWP::Simple;
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;


$| = 1;

my $PRINT_URLS = 1;

my ($speciesNcbiTaxonId, $outputFile) = @ARGV;

&usage unless $speciesNcbiTaxonId && $outputFile;

die "Output file '$outputFile' already exists\n" if -e $outputFile;

my $db      = "nuccore";
my $utils = "http://www.ncbi.nlm.nih.gov/entrez/eutils";


# use eutils to run query at ncbi.  returns a handle on a set of records
my $query = buildQueryString($speciesNcbiTaxonId);
my $esearch = "$utils/esearch.fcgi?db=$db&retmax=1&usehistory=y&term=";
my $esearch_result = get("$esearch$query");
print STDERR "$esearch$query\n\n" if $PRINT_URLS;
die "Failed running esearch query" unless defined $esearch_result;

$esearch_result =~ m|<Count>(\d+)</Count>.*<QueryKey>(\d+)</QueryKey>.*<WebEnv>(\S+)</WebEnv>|s || die "Can't parse results from esearch\n";

# We matched $Count genbank records.  We can get them using $QueryKey and
# $WebEnv as IDs for our query result
my $Count    = $1;
my $QueryKey = $2;
my $WebEnv   = $3;

print STDERR "Query found $Count genbank records\n";
exit(0) unless $Count;

my @uniqueAccs = getAccs($Count, $QueryKey, $WebEnv);

my $uniqueAccCount = scalar(@uniqueAccs);

my $batchSize = 100;
print STDERR "found $uniqueAccCount unique genbank Ids\n";
my $batchCount = int($uniqueAccCount / $batchSize + 1);

# group the GIs into batches, to reduce internet accesses.
my @batches;
my $totcount;
for (my $i=0; $i<$batchCount; $i++) {
  my $sliceStart = $i*$batchSize;
  my $sliceEnd = ($i+1)*$batchSize-1;
  $sliceEnd = $#uniqueAccs if $sliceEnd > $#uniqueAccs;
  my @tmp = @uniqueAccs[$sliceStart .. $sliceEnd];
  $batches[$i] = join(",", @tmp) if (scalar @tmp>0);
}

foreach my $batch (@batches) {
  print STDERR ".";
  my $url = "$utils/efetch.fcgi?db=$db&id=$batch&rettype=gb&retmode=text";
  my $gb_result = get($url);
  print STDERR "\n$url\n\n" if $PRINT_URLS;

  die "Failed getting gb result\n" unless $gb_result;
  open(FILE, ">>$outputFile") || die "Could not open output file '$outputFile'\n";
  print FILE "$gb_result";
  close(FILE);
}


print STDERR "\nFetched " . scalar(@batches) . " isolate batches containing $uniqueAccCount unique isolate records.\n";


sub usage {
  print STDERR "

Use NCBI's eutils to fetch isolate sequences from genbank.  All sequences
are concatenated into a single genbank file.  Gets isolates for all NCBI
taxon IDs that are children of the provided speciesNcbiTaxonId

usage: getIsolatesFromGenbank speciesNcbiTaxonId outputFile

(Prints a . to STDERR for each batch of sequences it gets.)

";

  exit(1);

}

sub buildQueryString {
  my ($speciesNcbiTaxonId) = @_;

  my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";
  my @properties = ();
  my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);
  my $u = $gusconfig->{props}->{databaseLogin};
  my $pw = $gusconfig->{props}->{databasePassword};
  my $dsn = $gusconfig->{props}->{dbiDsn};
  my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
  $dbh->{RaiseError} = 1;

  my $sql = <<SQL;
  select ncbi_tax_id
  from SRes.Taxon
  start with ncbi_tax_id in ($speciesNcbiTaxonId)
  connect by prior taxon_id = parent_id
SQL

  my $stmt = $dbh->prepare($sql);
  $stmt->execute();

  my %ncbiTaxIds;
  while (my($currentTaxon) = $stmt->fetchrow_array()) {
    $ncbiTaxIds{$currentTaxon} = 1;
    print STDERR "including NCBI taxon id $currentTaxon\n";
  }

  my @queries = map {"(((txid${_}[Organism:exp]) AND (isolate)) NOT (genome))"} keys(%ncbiTaxIds);
  my $query = join("OR", @queries);
  return $query;
}

sub getAccs {
    my ($Count, $QueryKey, $WebEnv) = @_;
     my $summaryBatches = int($Count / 10000 + 1);
     my $retstart = 1;
     my %uniqueAccs;

     while(1) {
	 # gets at most 10000
	 my $efetch = "$utils/esummary.fcgi?db=$db&query_key=$QueryKey&WebEnv=$WebEnv&retstart=$retstart&retmax=10000";

	 print STDERR "$efetch\n\n" if $PRINT_URLS;
	 my $efetch_result = get($efetch);

	 die "Failed getting efetch result\n" unless $efetch_result;

	 my @accs = $efetch_result =~ /\<Id\>(\d+)/g; # get unique accs
	 map { $uniqueAccs{$_} = 1} @accs;
	 $retstart += 10000;
	 $summaryBatches--;
	 last unless $summaryBatches;
     }

     return keys(%uniqueAccs);
}
