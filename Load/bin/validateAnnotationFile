#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use DBI;
use DBD::Oracle;
#use CBIL::Util::PropertySet;
use CBIL::Util::Utils;
use ApiCommonData::Load::BioperlTreeUtils qw{makeBioperlFeature};
use ApiCommonData::Load::AnnotationUtils;
use ApiCommonData::Load::Unflattener;


## TODO
## 1. catch the CDS locationis outside of transcript location
## 2. catch the aa sequence length, report if it is less than 10

my ($inputFileOrDir, $inputFileFormat, $outputFileDir, $help);
&GetOptions('inputFileOrDir=s' => \$inputFileOrDir,
	    'inputFileFormat=s' => \$inputFileFormat,
	    'outputFileDir=s' => \$outputFileDir,
	    'help|h' => \$help
	    );
&usage() if ($help);
&usage("Missing a Required Argument") unless (defined $inputFileOrDir && $inputFileFormat);

if (!$outputFileDir) {
  $outputFileDir = ".";
}

my $wholeGenomeFile = ($inputFileFormat =~ /gff/i) ? "$outputFileDir/whole_genome.gff" : "$inputFileOrDir";
my ($idSymbol);

## pre1. if gff3, run makeCustomFastaAndGffFromGff3 and preprocessGFF3o
if ($inputFileFormat =~ /gff/i) {
  my $pGC1 = "makeCustomFastaAndGffFromGff3 --input_dir $inputFileOrDir --output_fasta $outputFileDir/whole_genome.fasta --output_gff $outputFileDir/whole_genome.noseq.gff3";
  print STDERR "running...\n  $pGC1\n";
  &runCmd($pGC1);
  print STDERR "Done:\n  $pGC1\n";

  my $pGC2 = "preprocessGFF3 --input_gff $outputFileDir/whole_genome.noseq.gff3 --output_gff $wholeGenomeFile ";
  print STDERR "running...\n  $pGC2\n";
  &runCmd($pGC2);
  print STDERR "Done:\n  $pGC2\n";

}

## if genbank, check the organims names are same in the DEFINITION line 
if ($inputFileFormat =~ /genbank/i) {
  &checkOrganismName();
}


## 1. run reportFeatureQualifiers
&runReportFeatureQualifiers($inputFileFormat, $wholeGenomeFile);

## 2. check gene model
my $bioperlSeqIO = ApiCommonData::Load::AnnotationUtils::getSeqIO($wholeGenomeFile, $inputFileFormat);
while (my $bioperlSeq = $bioperlSeqIO->next_seq() ) {
  my $seqType = 'DNA';
  print STDERR "Processing ...\n";

  if (defined $bioperlSeq->molecule) {
    $seqType = $bioperlSeq->molecule;
  } elsif (defined $bioperlSeq->alphabet) {
    $seqType = $bioperlSeq->alphabet;
  }

  my @topSeqFeatures;
  if ($seqType !~ /rna/i) {
    if ($inputFileFormat =~ /gff/i) {
      @topSeqFeatures = $bioperlSeq->remove_SeqFeatures;
      $idSymbol = "ID";
    } elsif ($inputFileFormat =~ /embl/i) {
      @topSeqFeatures = $bioperlSeq->remove_SeqFeatures;
      $idSymbol = "locus_tag";
    } elsif ($inputFileFormat =~ /genbank/i) {
      @topSeqFeatures = processWithGenbank($bioperlSeq);
      $idSymbol = "locus_tag";
    } else {
      print STDERR "ERROR: The format $inputFileFormat have not been coded yet\n";
    }
  }
  print STDERR "\$idSymbol = $idSymbol\n";

## 3.1. check if gene has ID
  &checkIfGeneID (\@topSeqFeatures);

## 3.2. check if gene ID is unique
  &checkIfGeneIDIsUnique (\@topSeqFeatures);

## 3.3. check if gene, rna, exon or CDS are on the same strand
## 3.4. check if overlapped exons 
  &checkGeneStructure (\@topSeqFeatures);


}

sub getGeneInfoFromGenbank {
  my ($inputFile) = @_;
  my (%seqId, %geneStart, %geneEnd, %geneStrand);

  my $bioperlSeqIO = Bio::SeqIO->new(-format => 'genbank',
                                     -file => $inputFile);
  while (my $seq = $bioperlSeqIO->next_seq() ) {
    my $sId = ($seq->id) ? ($seq->id) : ($seq->accession());
    my @seqFeatures = $seq->get_SeqFeatures;
    foreach my $feature (@seqFeatures) {
      my $type = $feature->primary_tag();
      if ($type eq "gene" || $type eq "pseudogene") {
        my ($geneId) = $feature->get_tag_values('locus_tag');
        if ($geneId) {
          $seqId{$geneId} = $sId;
          $geneStart{$geneId} = $feature->location->start;
          $geneEnd{$geneId} = $feature->location->end;
          $geneStrand{$geneId} = $feature->location->strand;
           print STDERR "process pro $geneId...$seqId{$geneId}\n";
        }
      }
    }
  }
  return (\%seqId, \%geneStart, \%geneEnd, \%geneStrand);
}

sub checkOrganismName {
  my ($input) = @_;
}

sub processWithGenbank {
  my ($bioperlSeq) = @_;
  my $unflattener = ApiCommonData::Load::Unflattener->new;

  $unflattener->error_threshold(1);
  $unflattener->report_problems(\*STDERR);
  $unflattener->unflatten_seq(-seq=>$bioperlSeq,
			      -use_magic=>1);
  return $bioperlSeq->get_SeqFeatures;

}
sub processWithEmbl {
}
sub processWithGff {
}

sub checkIfGeneID {   ## Done with test
  my $geneFeature = shift;

  foreach my $feature (@{$geneFeature}) {
    my $type = $feature->primary_tag();
    if ($type eq 'gene' || $type eq 'pseudogene'
	|| $type eq 'mRNA' || $type eq 'pseudogenic_transcript'
	|| $type =~ /RNA$/
	|| $type eq 'CDS'   ## for genbank format
       ) {

      my $cid = getIdOrLocusTag($feature);

      if (!$cid) {
	print STDERR "ERROR: GeneID does not found for '$type'\n";
	exit;
      }
    }
  }
  return 1;
}

sub checkIfGeneIDIsUnique {  ## Done test
  my $geneFeature = shift;

  my %ids;

  foreach my $feature (@{$geneFeature}) {
    my $type = $feature->primary_tag();
    if ($type eq 'gene' || $type eq 'pseudogene') {

      my $cid = getIdOrLocusTag($feature);

      ## test gene structures
##      &printGeneStructures($feature) if ($cid eq "I317_00002");
      &printGeneStructures($feature) if ($cid eq "PVL_010005500");

      my $s = $feature->location->start;
      my $e = $feature->location->end;

      if ($ids{$cid}) {
	die "\nERROR: the gene ID: '$cid' is not unique. duplicated at $ids{$cid} and $s..$e\n";
      } else {
	$ids{$cid} = "$s..$e";
      }
    }
  }
  return 1;
}

## check if gene, rna, exon or CDS are on the same strand
## check if overlapped exon
sub checkGeneStructure {  ## Done test
  my $geneFeature = shift;

  foreach my $gene (@{$geneFeature} ) {
    my $type = $gene->primary_tag();
    if ($type eq 'gene' || $type eq 'pseudogene') {
      my @RNAs = $gene->get_SeqFeatures;
      foreach my $RNA (sort {$a->location->start <=> $b->location->start
			       || $a->location->end <=> $b->location->end} @RNAs){

	&checkIfSameStrand($gene, $RNA);

	&checkIfOverlapExon ($RNA, 'exon');
	&checkIfOverlapExon ($RNA, 'CDS');

      }
    }
  }
  return 1;
}

sub checkIfOverlapExon {  ## $type is text of 'exon' OR 'CDS'
                          ## check overlap for exon only, because there is only one CDS in exon features
                          ## but check if same strand for both CDS and exon
  my ($RNA, $type) = @_;
  my ($cId) = getIdOrLocusTag ($RNA);
  my @exons = $RNA->get_SeqFeatures;

  my (%preEnd);
  foreach my $exon (sort {$a->location->start <=> $b->location->start} @exons ) {
    my $cStart = $exon->location->start;
    my $cEnd = $exon->location->end;
    my $cType = $exon->primary_tag();

    &checkIfSameStrand($RNA, $exon) if ($cType eq $type );

    if ($cType eq $type) {
      if ($preEnd{$cType}) {
	print STDERR "ERROR: overlapped exon found at '$cType' '$cId': $cStart....$cEnd\n" if ($preEnd{$cType} >= $cStart);
      }
      $preEnd{$cType} = $cEnd;
    }
  }
  return 1;
}

sub checkIfSameStrand {
  my ($feat1, $feat2) = @_;
  my ($cId) = getIdOrLocusTag ($feat1);
  my $type1 = $feat1->primary_tag();
  my $type2 = $feat2->primary_tag();

  if ($feat1->location->strand != $feat2->location->strand) {
    print STDERR "ERROR, at $cId, $type1 and $type2 are not on the same strand\n";
    my $feat1S = $feat1->location->start;
    my $feat1E = $feat1->location->end;
    my $feat1St = $feat1->location->strand;
    my $feat2S = $feat2->location->start;
    my $feat2E = $feat2->location->end;
    my $feat2St = $feat2->location->strand;
    print STDERR "  $type1: $feat1S..$feat1E at $feat1St; $type2: $feat2S..$feat2E at $feat2St\n";

  }
  return 1;
}

sub getIdOrLocusTag {
  my ($feature) = @_;

  my ($cId, $cType, $cStart, $cEnd);

  if ($feature->has_tag("ID")) {
    ($cId) = $feature->get_tag_values('ID');
  } elsif ($feature->has_tag("locus_tag")) {
    ($cId) = $feature->get_tag_values('locus_tag');
  } else {
    $cType = $feature->primary_tag();
    $cStart = $feature->location->start;
    $cEnd = $feature->location->end;
    die "\nFor this version, the unique gene ID, 'ID' or 'locus_tag' tag is required in the annotation file.
\nError: The unique gene ID has not been coded for feature '$cType' at $cStart ... $cEnd\n\n";
  }
  return $cId;
}

## reportFeatureQualifiers --format gff3 --file_or_Dir whole_genome.gff > report.txt
sub runReportFeatureQualifiers {
  my ($format, $genomeFile, $outputDir) = @_;
  $outputDir = "." if (!$outputDir);
  my $pc = "reportFeatureQualifiers --format $format --file_or_Dir $genomeFile > $outputDir/report.txt";
  print STDERR "running...\n  $pc\n";
  &runCmd($pc);
  print STDERR "Done:\n  $pc\n";
  return 1;
}

sub printGeneStructures {
  my ($gene) = @_;

  &printBioPerlStructures($gene);

  foreach my $rna (sort {$a->location->start <=> $b->location->start} $gene->get_SeqFeatures) {
    &printBioPerlStructures($rna, "  ");
    foreach my $exon (sort {$a->location->start <=> $b->location->start} $rna->get_SeqFeatures) {
      &printBioPerlStructures ($exon, "    ");
    }
  }
  return 1;
}

sub printBioPerlStructures {
  my ($feat, $prefix) = @_;
  my $t = $feat->primary_tag();
  my $s = $feat->location->start;
  my $e = $feat->location->end;
  my $strand = $feat->location->strand;
  print STDERR "$prefix$t: $s..$e at $strand\n";
}

sub usage {
  die
"
A script to validate gene model for annotation that has standard structure.
  gene: or pseudogene, required
  transcript: mRNA, tRNA, rRNA, and ect, optional
  exon: or pseudogenic_exon, optional
  CDS: optional

Usage: validateAnnotationFile --inputFileOrDir genome.gbf --inputFileFormat genbank

where:
  --inputFileOrDir: required, the annotation file name or directory containing annotation files
  --inputFileFormat: required, the format of annotation file(s)
  --outputFileDir: optional, the directory name for output file

";
}

