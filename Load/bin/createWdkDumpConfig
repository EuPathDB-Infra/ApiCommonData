#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;
use Data::Dumper;

my ($project,$release,$loadTable,$createFile,$outputFile,$gusConfigFile);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
            "project=s"=> \$project,
            "release=s"=> \$release,
	    "createFile!"=> \$createFile,
            "loadTable!"=> \$loadTable,
            "outputFile=s" => \$outputFile);

my $verbose = 0;

if (!$project || !$release || !$outputFile) {
die "createWdkDumpConfig <--gusConfigFile> --project --release <--createFile> <--loadTable> --outputFile\n
project (e.g. ToxoDB), release (release number as it appears in the download dir), outputFile (name of config file) required.  loadTable (load rows into Details tables if true) and createFile (create txt files in download dir if true) are booleans. gusConfigFile (use gus_home/config/gus.config by default)";} 

print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose, 0, 1,
                                        $gusconfig->getCoreSchemaName());


my $dbh = $db->getQueryHandle(0);

my $sql = "select o.name_for_filenames, tn.name, o.is_annotated_genome from apidb.organism o, sres.taxonname tn where tn.taxon_id = o.taxon_id and tn.name_class = 'scientific name'";

#get na_sequence_id from EnxternalNASequence for ESTs
print STDERR "sql: $sql\n ";

my $stmt1 = $dbh->prepareAndExecute($sql);

my %annotated;
my %unannotated;
 
while(my ($filename,$org,$isAnnot) = $stmt1->fetchrow_array()) {

  if ($isAnnot){
    $annotated{$filename} = $org;
  }
  else{
    $unannotated{$filename} = $org;
  }
}

$stmt1->finish();

open (FILE,">>$outputFile") or die "Cannot open file $outputFile  for writing\n";

my $create=$createFile?"yes":"no";
my $load=$loadTable?"yes":"no";

print FILE "project=" . $project .  " release=" . $release .  " loadDetailTable=" . $load . " createFile=" . $create . "\n";

my $fn;

foreach $fn (keys %annotated){

    print FILE "org=" . $fn . "|" . $annotated{$fn} . "\n" 
. "type=Gene detailTable=apidb.GeneDetail fields=all otherSql=0 dir=" . $fn . "\n"
. "type=Sequence detailTable=apidb.SequenceDetail fields=all dir=" . $fn . "\n";
}
foreach $fn (keys %unannotated){

    print FILE "org=" . $fn . "|" . $unannotated{$fn} . "\n"
. "type=Sequence detailTable=apidb.SequenceDetail fields=all dir=" . $fn . "\n";
}

print FILE "//\n";

close(FILE);





