#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use Spreadsheet::ParseExcel;
use Spreadsheet::XLSX;
use Text::Iconv;
use Getopt::Long;

my ($fileOrDir, $outputFile, $inputFileExt, $verbose, $help);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'file_or_dir=s' => \$fileOrDir,
	    'inputFileExt=s' => \$inputFileExt,
            'outputFile=s' => \$outputFile,
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $fileOrDir);
die "File or directory '$fileOrDir' does not exist\n" unless -e $fileOrDir;

$inputFileExt = "xlsx" if (!$inputFileExt);

my @files;
if (-d $fileOrDir) {
  opendir(DIR, $fileOrDir) || die "Can't open directory '$fileOrDir'";
  my @noDotFiles = grep { $_ ne '.' && $_ ne '..' && $_ =~ /\.$inputFileExt/ } readdir(DIR);
  @files = map { "$fileOrDir/$_" } @noDotFiles;
} else {
  $files[0] = $fileOrDir;
}


open (OUT, ">$outputFile") || die "can not open outputFile to write.\n";

if ($inputFileExt eq 'xls') {
  foreach my $file(@files) {
    my $parser   = Spreadsheet::ParseExcel->new();
    my $workbook = $parser->Parse($file);
    die "can not parse $file, which is not in excel format\n" unless ($workbook);

    for my $worksheet ( $workbook->worksheets() ) {


      my ( $row_min, $row_max ) = $worksheet->row_range();
      my ( $col_min, $col_max ) = $worksheet->col_range();

      for my $row ( $row_min .. $row_max ) {
        for my $col ( $col_min .. $col_max ) {

            my $cell = $worksheet->get_cell( $row, $col );
            #next unless $cell;

            #print OUT $cell->unformatted();
            print OUT $cell->value() if ($cell);
	    print OUT "\t" if ($col != $col_max);
        }
	print OUT "\n";
      }
    }
  }
} elsif ($inputFileExt eq 'xlsx') {
  my $converter = Text::Iconv -> new ("utf-8", "windows-1251");

  foreach my $file(@files) {
    my $excel = Spreadsheet::XLSX -> new ($file, $converter);
    foreach my $sheet (@{$excel -> {Worksheet}}) {
        $sheet -> {MaxRow} ||= $sheet -> {MinRow};
        foreach my $row ($sheet -> {MinRow} .. $sheet -> {MaxRow}) {
                $sheet -> {MaxCol} ||= $sheet -> {MinCol};
                foreach my $col ($sheet -> {MinCol} ..  $sheet -> {MaxCol}) {
                        my $cell = $sheet -> {Cells} [$row] [$col];
			#print OUT $cell->{Val};
			print OUT $cell->{_Value};
			print OUT "\t" if ($col != $sheet -> {MaxCol});
                }
		print OUT "\n";
        }
      }
  }
}
close OUT;


sub usage {
  die
"
A Script to transfer a file from Excel format to tab delimited txt format

Usage: excel2tab --file_or_dir whole_proteome --inputFileExt xls --outputFile outTab.txt

where
  --file_or_dir:    an Excel format file, or a directory containing a set of them
  --inputFileExt:   the input file extension, default: xls
  --outputFile:     the output file name

";
}
