#!/usr/bin/perl

## extract qualifiers value from bioperlTree file that made by ISF

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Bio::SeqFeature::Tools::Unflattener;
use Bio::Tools::GFF;
use Bio::Seq::RichSeq;
use GUS::Supported::SequenceIterator;
use Bio::DB::GFF::Aggregator;
use Getopt::Long;

use Data::Dumper;
use FileHandle;
use HTTP::Date;

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;

my ($date, ) = split(" ", HTTP::Date::time2iso());
$date = join("",split(/-/,$date));


my ($help, $bioperlTreeFile, $qualifierList, $outputDir, $db, $taxonId);

&GetOptions(
            'help|h' => \$help,
            'bioperlTreeFile=s' => \$bioperlTreeFile,
	    'qualifierList=s' => \$qualifierList,
	    'outputDir=s' => \$outputDir,
	    'db=s' => \$db,
	    'taxonId=s' => \$taxonId,
           );

&usage() if($help);
&usage("Missing a Required Argument") unless (defined $qualifierList);

## set default value
$bioperlTreeFile = "isfTest/bioperlTree.out.save" if (!$bioperlTreeFile);
$outputDir = "extractQualifiers" if (!$outputDir);

my $makeOutputDir = "mkdir $outputDir";
system ($makeOutputDir) unless ($outputDir && -e $outputDir);

my @lists = split (/\;/, $qualifierList);
my (%outputFiles, %outputFhs, $outputFile, %dbxrefFiles, %dbxrefFhs);

foreach my $list (@lists) {
  next if ($list =~ /dbxref/i || $list =~ /db_xref/i );

  $list =~ s/^\s+//;
  $list =~ s/\s+$//;

  if ($list =~ /\w+/) {
    $list = "GO" if ($list =~ /^GO/);

    $outputFile = $list.".txt";

    $outputFiles{$list} = ($outputDir) ? "$outputDir\/$outputFile" : "$outputFile";

  }
}

foreach my $k (sort keys %outputFiles) {
    $outputFhs{$k} = FileHandle->new();
    $outputFhs{$k}->open(">$outputFiles{$k}") || die "can not open $outputFiles{$k} to write\n";

}

my ($key, %gene);
open (IN, $bioperlTreeFile) || die "can not open bioperlFile to read\n";
while (<IN>) {
  chomp;
  if ($_ =~ /^\s*\</) {
    $key = "";
  } elsif ($_ =~ /gus source_id: (\S+)/) {
    $key = $1;
    $key =~ s/\'//g;
    $key =~ s/^\s+//;
    $key =~ s/\s+$//;
  } elsif ($_ =~ /\s*(\S+?)\: (.+)/ && $key) {
    my $qual = $1;
    my $value = $2;
    my (@values, @dbxrefValues);
    if ($qual =~ /product/i || $qual =~ /description/i) {  ## multiple products separated by ",term="
                                                           ## in some cases description also represents product
      @values = split (/\,[term=|rank=1;]/, $value);
      foreach my $i (0..$#values) {
	my $isPreferred=1 if ($values[$i] =~ /is_preferred=true/i);
	if ($values[$i] =~ /.*term=(.+?);.*/) {
	  $values[$i]= $1;
	} elsif ($values[$i] =~ /term=(.+)/i ) {
	  $values[$i] = $1;
	} elsif ($values[$i] =~ /(.*?);.*/) {
	  $values[$i] = $1;
	}
	$values[$i] =~ s/^term=//;
	$values[$i] =~ s/^erm=//;
	$values[$i] =~ s/,rank=1$//;
	$values[$i] .= "\ttrue" if ($isPreferred == 1);
      }
    } elsif ($qual =~ /comment/i || $qual =~ /note/i) {  ## comment or note do not separate
      push @values, $value;
    } elsif ($qual =~ /Dbxref/i || $qual =~ /db_xref/i ) { ## special need for dbxref
      ($qual, $value) = split (/\:/, $value);
      $qual =~ s/(\/.*$)//;
      $qual = "dbxref_".$qual;
      push @values, $value;
      $dbxrefFiles{$qual} = $qual.".txt";
    } elsif ($qual =~ /literature/i) { ## for literature
      $value =~ s/\,/ /g;
      $value =~ s/\./ /g;
      @values = split (/\s+/, $value);
      foreach my $i (0..$#values) {
	$values[$i] =~ s/^PMID://;
      }

    } elsif ($qual =~ /^GO/) { ## for GO
      $value = $qual.": ".$value;
      push @values, $value;
      $qual = "GO";

    } else {
      @values = split (/\,/, $value);
    }

    foreach my $v (@values) {
      $v =~ s/;current=false$//; ## for synonym, previous_systematic_id
      $v =~ s/^PMID://; ## for pmid in literature
      push @{$gene{$key}{$qual}}, $v;
    }
  }
}
close IN;

foreach my $k (sort keys %dbxrefFiles) {
  $dbxrefFiles{$k} = ($outputDir) ? "$outputDir\/$dbxrefFiles{$k}" : "$dbxrefFiles{$k}";
  $outputFhs{$k} = FileHandle->new();
  $outputFhs{$k}->open(">$dbxrefFiles{$k}") || die "can not open $dbxrefFiles{$k} to write\n";
}

foreach my $k (sort keys %gene) {
  foreach my $kk (sort keys %{$gene{$k}}) {
    if ($outputFiles{$kk} || $dbxrefFiles{$kk} ) {
      foreach my $i (0..$#{$gene{$k}{$kk}}) {
	if ($kk =~ /^GO/) {    ## print GO
	  &printGOFile($outputFhs{$kk}, $k, $gene{$k}{$kk}[$i]);
	  #$outputFhs{$kk}->print("$k\t$gene{$k}{$kk}[$i]\n");  ## for testing
	} else {
	  $outputFhs{$kk}->print("$k\t$gene{$k}{$kk}[$i]\n");
	}
      }
    }
  }
}

foreach my $k (sort keys %outputFhs) {
  $outputFhs{$k}->close();
}

############
sub printGOFile {
  my ($fileH, $sourceId, $line) = @_;
  my ($aspect, $goId, $dbxref, $evidenceCode, $withOrFrom, $product, $synonym, $sourceIdType);

  $evidenceCode = "IEA";  ## default value

  if ($line =~ /^GO_component/ || $line =~ /^GO_function/ || $line =~ /^GO_process/) {
    ($aspect) = split (/\:/,$line);
    if ($line =~ /(GO_\w+?): (GO:\d+?) - (.+?);ev_code=(\w+?)$/) {
      $aspect = &getAspectForGo ($1);
      $goId = $2;
      $product = $3;
      $evidenceCode = $4;
    } elsif ($line =~ /GO:(\d+) - (.+)$/) {
      $goId = $1;
      $product = $2;
      $aspect = &getAspectForGo ($line);
    }
  } else {
    my @facts = split (/\;/, $line);
    foreach my $fact (@facts) {
      my ($f, $v) = split (/\=/, $fact);
      if ($f eq "aspect") {
	$v =~ s/GO:\s+//;
	$aspect = $v;
      } elsif ($f eq "GOid" ) {
	$goId = $v;
	$goId =~ s/GO://;
      } elsif ($f eq "term" ) {
	$product = $v;
      } elsif ($f eq "evidence") {
	$evidenceCode = $v;
      }
    }
  }

  my @items;
  $items[0] = $db;
  $items[1] = $sourceId;
  $items[2] = $sourceId;                 ## DB Object Symbol, eg geneName
  $items[3] = "";                        ## Qualifier, 0 or greater
  $items[4] = $goId;
  $items[5] = $dbxref;                   ## DB:Reference, eg PMID:2676709;
  $items[6] = $evidenceCode;
  $items[7] = $withOrFrom;               ## With or From
  $items[8] = $aspect;
  $items[9] = $product;                  ## db object name, 0 or 1
  $items[10] = $synonym;                 ## db object synonym, 0 or greater
  $items[11] = "transcript";             ## db object type
  $items[12] = "taxon:".$taxonId;        ## eg taxon:9606
  $items[13] = $date;                    ## eg 20150817
  $items[14] = $db;                      ## Assigned By
  foreach my $i (0..14) {
    ($i == 14) ? $fileH->print ("$items[$i]\n") : $fileH->print ("$items[$i]\t");
  }

  return $fileH;
}

sub getAspectForGo {
  my ($line) = @_;
  my $aspect;

  if ($line =~ /[C|F|P]/) {
    $aspect = $line; 
  } elsif (lc($line) =~ /component/) {
    $aspect = 'C';
  } elsif (lc($line) =~ /function/) {
    $aspect = 'F';
  } elsif (lc($line) =~ /process/) {
    $aspect = 'P';
  } else {
    $aspect = '';
  }
  return $aspect;
}

sub getGoEvidenceCode {
  my ($string) = @_;

  if ($string =~ /INFERRED FROM ELECTRONIC ANNOTATION/i) {
    return "IEA";
  } elsif ($string =~ /INFERRED FROM SEQUENCE ORTHOLOGY/i) {
    return "ISO";
  } elsif ($string =~ /NOT RECORDED/i) {
    return "NR";
  } elsif ($string =~ /INFERRED FROM DIRECT ASSAY/i) {
    return "IDA";
  } elsif ($string =~ /No biological Data available/i) {
    return "ND";
  } elsif ($string =~ /INFERRED FROM SEQUENCE OR STRUCTURAL SIMILARITY/i) {
    return "ISS";
  } elsif ($string =~ /Inferred from Sequence Alignment/i) {
    return "ISA";
  } elsif ($string =~ /Inferred from Sequence Model/i) {
    return "ISM";
  } elsif ($string =~ /Inferred from Genomic Context/i) {
    return "IGC";
  } elsif ($string =~ /Inferred from Biological aspect of Ancestor/i) {
    return "IBA";
  } elsif ($string =~ /Inferred from Biological aspect of Descendant/i) {
    return "IBD";
  } elsif ($string =~ /Inferred from Key Residues/i) {
    return "IKR";
  } elsif ($string =~ /Inferred from Rapid Divergence /i) {
    return "IRD";
  } elsif ($string =~ /inferred from Reviewed Computational Analysis/i) {
    return "RCA";
  } elsif ($string =~ /Inferred from Experiment/i) {
    return "EXP";
  } elsif ($string =~ /Inferred from Physical Interaction/i) {
    return "IPI";
  } elsif ($string =~ /Inferred from Mutant Phenotype/i) {
    return "IMP";
  } elsif ($string =~ /Inferred from Genetic Interaction/i) {
    return "IGI";
  } elsif ($string =~ /Inferred from Expression Pattern/i) {
    return "IEP";
  } elsif ($string =~ /Traceable Author Statement/i) {
    return "TAS";
  } elsif ($string =~ /Non-traceable Author Statement/i) {
    return "NAS";
  } elsif ($string =~ /Inferred by Curator/i) {
    return "IC";
  } else {
    return $string;
  }
}

############
sub usage {
  die
"
Extract function data from bioperlTree output file
Function data includes product, go, ec_number, gene name, and synonym

Usage:  extractQualifiersFromBioperlTree --bioperlTreeFile --qualifierList [--outputDir]

where
  --qualifierList:	Required, a semi-colon seperated list of qualifiers that want to extract
  --bioperlTreeFile:	The bioperlTree file that generated by ISF. The default is the file 'isftest/bioperlTree.out.save'
  --outputDir:          An file dir that the output files will write to. The default is the dir '../extractQualifiers'
  --db:                 Required if extract GO, eg. GenBank, GeneDB, EupathDB
  --taxonId:            Required if extract GO, the NCBI taxon ID

";
}



