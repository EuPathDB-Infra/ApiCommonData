#!/usr/bin/perl

## extract qualifiers value from bioperlTree file that made by ISF

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Bio::SeqFeature::Tools::Unflattener;
use Bio::Tools::GFF;
use Bio::Seq::RichSeq;
use GUS::Supported::SequenceIterator;
use Bio::DB::GFF::Aggregator;
use Getopt::Long;

use Data::Dumper;
use FileHandle;
use HTTP::Date;

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;

my ($date, ) = split(" ", HTTP::Date::time2iso());
$date = join("",split(/-/,$date));


my ($help, $bioperlTreeFile, $qualifierList);

&GetOptions(
            'help|h' => \$help,
            'bioperlTreeFile=s' => \$bioperlTreeFile,
	    'qualifierList=s' => \$qualifierList,
           );

&usage() if($help);
&usage("Missing a Required Argument") unless (defined $bioperlTreeFile && $qualifierList);

my @lists = split (/\;/, $qualifierList);
my (%outputFiles, %outputFhs);

foreach my $list (@lists) {
  $list =~ s/^\s+//;
  $list =~ s/\s+$//;

  if ($list =~ /\w+/) {
    $outputFiles{$list} = $list.".txt";

    $outputFhs{$list} = FileHandle->new();
    $outputFhs{$list}->open(">$outputFiles{$list}") || die "can not open $outputFiles{$list} to write\n";
  }
}

my ($key, %gene);
open (IN, $bioperlTreeFile) || die "can not open bioperlFile to read\n";
while (<IN>) {
  chomp;
  if ($_ =~ /source_id: (\S+)/) {
    $key = $1;
  } elsif ($_ =~ /\s*(\S+?)\: (.+)/) {
    $gene{$key}{$1} = $2;
  }
}
close IN;

foreach my $k (sort keys %gene) {
  foreach my $kk (sort keys %{$gene{$k}}) {
    #print "$k; $kk; $gene{$k}{$kk}\n" if ($outputFiles{$kk});
    $outputFhs{$kk}->print("$k\t$gene{$k}{$kk}\n") if ($outputFiles{$kk});
  }
}

foreach my $k (sort keys %outputFhs) {
  $outputFhs{$k}->close();
}

############
sub usage {
  die
"
Extract function data from bioperlTree output file
Function data includes product, go, ec_number, gene name, and synonym

Usage:  extractQualifiersFromAnnotation --bioperlTreeFile --qualifierList

where
  --bioperlTreeFile:	bioperlTree file that generated by ISF
  --qualifierList:	a semi-colon seperated list of qualifiers that want to extract

";
}



