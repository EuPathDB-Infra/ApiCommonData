#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use Data::Dumper;

my ($verbose, $help, $inputFile, $outputFasta,$outputGFF);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'output_fasta=s' => \$outputFasta,
            'input_file=s' => \$inputFile,
	    'output_gff=s' => \$outputGFF,

 
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $inputFile && $outputFasta && $outputGFF);




open(IN,"$inputFile");

open(FASTA,">$outputFasta");

open(GFF,">$outputGFF");




my %isolateList;
my @productList;
my @chromosomeList;

foreach my $line (<IN>){
	chomp($line);
	$line =~ s/\cM//g;
	my @cols = split(/\t/,$line);


	if($line =~ /^Country/){
	    @productList = @cols[8..18];
	}elsif($line =~ /^Chromosome/){
	    @chromosomeList = @cols[8..18];
	}else{

	    
	    $cols[19] =~ s/^\s+//;
	    $cols[19] =~ s/\s+$//;
	    $cols[19] =~ s/\(.*\)//g;
	    $cols[19] =~ s/\s+,/,/g;
	    $cols[19] =~ s/,\s+/,/g;
	    $cols[19] =~ s/,$//;

	    if($cols[19] =~ /^Tg/){


		my @isolate = split(/,/,$cols[19]);

		if($cols[7] > scalar(@isolate)){		
		    while(($cols[19] =~ /(\d+)\-(\d+)/)){
			
			my $repStr = '';
			for(my $i = $1; $i <= $2; $i++){
			    $repStr .= "$i,";
			}
			$repStr =~ s/,$//;

#			print "$cols[19]\n";
			$cols[19] =~ s/\d+\-\d+/$repStr/;			


			
			@isolate = split(/,/,$cols[19]);
#			print "$cols[7]\t$cols[19]\t".scalar(@isolate)."\n";

		    }
		    
		}
		
		my @temp = split(/,/,$cols[19]);
		$temp[0] =~ s/\d+$//;
		$cols[19] =~ s/,/,$temp[0]/g;
	}
	    my @isolates = split(/,/,$cols[19]);
	    

	    foreach my $isolate(@isolates){


		$isolate =~ s/^\s+//g;
		$isolate =~ s/\s+$//g;

		$isolate =~ s/\s+/_/g;

		print FASTA ">$isolate\n";
		print GFF "$isolate\tChunlei Su RFLP Data\tsource\t0\t0\t.\t+\t.\tlocus_tag \"${isolate}-1\" ; host \"$cols[1]\" ; collection_date \"$cols[3]\" ; country \"$cols[0]\"; note \"$cols[4]\" ; isolation_source \"$cols[5]\" ; " ;

		if($cols[2] ne ''){
		    my @pmids = split(/;/,$cols[2]);
		    
		    foreach my $pmid (@pmids){
			print GFF "literature \"PMID:$pmid\" ; "; 
		    }
		}
		print GFF "\n";
	


		for(my $i =1;$i<= scalar @productList;$i++){
		    
		    if($cols[$i+7] =~ /\Sor/ || $cols[$i+7] =~ /or\S/){
			$cols[$i+7] =~ s/or/ or/g if $cols[$i+7] =~ /\Sor/;
			$cols[$i+7] =~ s/or/or /g if $cols[$i+7] =~ /or\S/;

			$cols[$i+7] =~ s/\s+or/ or/g;
			$cols[$i+7] =~ s/or\s+/or /g;

		    }
		    print GFF "$isolate\tChuneli Su RFLP Data\tRFLP\t0\t0\t.\t+\t.\tlocus_tag \"${isolate}-$i\" ; product \"$productList[$i-1]\" ; chromosome \"$chromosomeList[$i-1]\" ; GeneType  \"$cols[$i+7]\" ;  genotype_number $cols[6] ; \n";
		}
	    }
	    



	}
	
}






close(IN);
close(GFF);
close(FASTA);

sub usage {
print STDERR "

parse the tab file containing RFLP data from Chunlei Su (Tgondii ME49).

the output is a .fasta file with deflines but NO sequence.

and a .gff file that has the RFLPs as features on those sequences (location 0-0).

usage:  unpackChunleiSuRFLP --input_file --output_fasta --output_gff

";
exit(1);
}
