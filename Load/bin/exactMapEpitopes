#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use CBIL::Bio::Blast::BlastAnal;
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;
use ApiCommonData::Load::MapAndPrintEpitopes;
use Getopt::Long;
use String::Approx 'amatch';

use strict;

my $debug = 0;

$| = 1;

my $subjectFile;
my $epitopeFile;
my $outputFile;
my $rejectDuplicates;

&GetOptions("subjectFile=s" => \$subjectFile,
	    "epitopeFile=s" => \$epitopeFile,
	    "outputFile=s" => \$outputFile,
	    "rejectDuplicates" => \$rejectDuplicates,
	    "debug!" => \$debug,
            );

unless ($subjectFile && $epitopeFile && $outputFile){ die "Usage: ExactMapEpitopes --subjectFile <FILE> --epitopeFile <FILE> --outputFile <FILEPATH> [--rejectDuplicates] [--debug]";}

die "Cannot find '$subjectFile':$!\n" unless (-e $subjectFile);
die "Cannot find '$epitopeFile':$!\n" unless (-e $epitopeFile);

print "Establishing dbi login\n" if $debug;

#create the error file
my $errorLog = $outputFile;
$errorLog =~ s/\.out/.err/;

open (ERR, ">>$errorLog") || die "Could not open error log '$errorLog' for writing: $!";


#get the epitopes...we only want to do this once
my %epitopes;
&ApiCommonData::Load::MapAndPrintEpitopes::makeEpitopeHash($epitopeFile, \%epitopes);


#create hash of subject seqs
my %subjects;
&makeSubjectHash($subjectFile, \%subjects);

my %seen;
if ($rejectDuplicates && -e $outputFile){
  &getSeen(\%seen, $outputFile, $debug);
}

print STDERR "Finding exact matches...\n";

foreach my $seq (keys %epitopes){

  #do exact string comparison
  my ($matches) = &getExactMatches($seq, \%epitopes, \%subjects, \%seen);

  foreach my $match (keys %$matches){
    my $subId = $match;
    my $subjSeq = $subjects{$match}->{'primary_seq'}->{'seq'};

    &ApiCommonData::Load::MapAndPrintEpitopes::mapEpitopes($subjSeq, $subId, $seq, \%epitopes, $outputFile, $debug);
  }
}


#----------------Subroutines----------------------

sub makeSubjectHash{
  my ($subjectFile, $subjects) = @_;

  print STDERR "Getting database sequences from file...\n";

  my $seqFile  = Bio::SeqIO->new(-file => $subjectFile , '-format' => 'Fasta');

  while ( my $seq = $seqFile->next_seq() ) {
    $$subjects{$seq->id()} = $seq;
  }
}

sub getExactMatches{
  my ($seq, $epitopes, $subjects, $seen) = @_;
  my %matches;

  foreach my $epitope (keys %{$epitopes{$seq}}){
    my $pept = $epitopes{$seq}->{$epitope}->{'seq'};

    foreach my $subject (keys %$subjects){
      next if($seen->{$epitope} eq $subject);

      my $subjSeq = $subjects{$subject}->{'primary_seq'}->{'seq'};

      if ($subjSeq =~ /$pept/i){
	push(@{$matches{$subject}},$epitope);
      }

    }
  }

  return \%matches;
}

sub getSeen{
  my ($seen, $outputFile, $debug) = @_;

  open(FILE, "< $outputFile") || die "Could not open file '$outputFile' for reading: $!\n";

  while(<FILE>){
    chomp;

    my @values = split('\t',$_);

    my $seqId = $values[0];

    my $epiId = $values[1];

    print STDERR "SEQUENCE ID: $seqId\tEPITOPE ID: $epiId\n" if $debug;

    $seen->{$epiId} = $seqId;
  }

  close(FILE);

}
