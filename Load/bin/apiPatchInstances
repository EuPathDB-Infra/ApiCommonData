#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
# die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use File::Basename;
use XML::Simple;

use Getopt::Long qw(GetOptions);
use File::Basename;

my ($propfile, $regex, $script, $list, $help);
my $password;

GetOptions("propfile=s" => \$propfile,
           "regex=s" => \$regex,
           "script=s" => \$script,
           "list!" => \$list,
           "help!" => \$help,
	  );

if ($help) {
  &usage;
  exit;
}

if ($script) {
  die "\$script parameter requires \$propfile"
    unless $propfile;

  my $simple = XML::Simple->new();
  my $props = $simple->XMLin($propfile);
  $password = $props->{password};;
  }

if (!$list && !$script) {
  &usage;
  die "either -list or -script parameter must be supplied";
}

my $instances = `apiTnsSummary | cut -c61- | sed 's/,.*\$//' `;
foreach my $instance (split /\n/, $instances) {
  if ($regex) {
    next unless $instance =~ /$regex/;
  }

  print "instance: " . $instance . "\n";
  if ($script) {
    print `sqlplus apidb/$password\@$instance \@$script`;
  }

}

sub usage {

  my $scriptname = basename($0);
  print STDERR <<USAGE;

Run an SQL script in multiple instances. Uses apiTnsSummary to find instances.

usage:
$scriptname [ -list ]
                  [ -regex <expression> ]
                  [ -propfile <file> [ -script <file without .sql suffix> ] ]
                  [ -help ]

options:
 list     list instances that match regex (or all instances if no regex is supplied)
 regex    regular expression for instance names
 propfile tuning-manager-style property XML file
 script   SQL script (without .sql extension). The script must end with an sqlplus "exit" command.
 help     print this usage message

USAGE
}
