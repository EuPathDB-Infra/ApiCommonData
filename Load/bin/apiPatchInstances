#!/usr/bin/perl

use strict;
use File::Basename;
use XML::Simple;

use Getopt::Long qw(GetOptions);
use File::Basename;

my ($propfile, $regex, $script, $list, $help);
my $password;
my $schema;

GetOptions("propfile=s" => \$propfile,
           "regex=s" => \$regex,
           "script=s" => \$script,
           "list!" => \$list,
           "help!" => \$help,
	  );

if ($help) {
  &usage;
  exit;
}

if ($script) {
  die "\$script parameter requires \$propfile"
    unless $propfile;

  my $simple = XML::Simple->new();
  my $props = $simple->XMLin($propfile);
  $password = $props->{password};
  $schema = $props->{schema};
  $schema = "apidb" unless $schema;
  }

if (!$list && !$script) {
  &usage;
  die "either -list or -script parameter must be supplied";
}

my $instances = `apiTnsSummary -all | cut -c61- | sed 's/,.*\$//' `;
foreach my $instance (split /\n/, $instances) {
  if ($regex) {
    next unless $instance =~ /$regex/;
  }

  print "instance: " . $instance . "\n";
  if ($script) {
    print `sqlplus $schema/$password\@$instance \@$script`;
  }

}

sub usage {

  my $scriptname = basename($0);
  print STDERR <<USAGE;

Run an SQL script in multiple instances. Uses apiTnsSummary to find instances.

usage:
$scriptname [ -list ]
                  [ -regex <expression> ]
                  [ -propfile <file> [ -script <file without .sql suffix> ] ]
                  [ -help ]

options:
 list     list instances that match regex (or all instances if no regex is supplied)
 regex    regular expression for instance names
 propfile tuning-manager-style property XML file
 script   SQL script (without .sql extension). The script must end with an sqlplus "exit" command.
 help     print this usage message

USAGE
}
