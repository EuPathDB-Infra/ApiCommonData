#!/usr/bin/perl
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile,$ncbiTaxonId,$outFile,$verbose);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "ncbiTaxonId=s" => \$ncbiTaxonId,
	    "outFile=s" => \$outFile,
	    "verbose!" => \$verbose);

die "createSamHeader --ncbiTaxonId --outFile {--verbose} {--gusConfigFile <file>}\n" if (!$ncbiTaxonId || !$outFile );

print STDERR "Establishing dbi login\n";

$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);

my  $sql="select 'SN:'||sa.source_id||chr(9)||'LN:'||sa.length from ApidbTuning.SequenceAttributes sa, dots.nasequence ns where sa.na_sequence_id = ns.na_sequence_id and sa.NCBI_TAX_ID = $ncbiTaxonId and is_top_level = 1";

print STDERR "SQL: $sql\n";

open (OUT,"> $outFile");

my $sth = $dbh->prepareAndExecute($sql);

while (my ($string) = $sth->fetchrow_array()) {
  print OUT ("\@SQ\t$string\n");
}

$sth->finish();

close OUT;





