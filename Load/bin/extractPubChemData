#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | absent
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

## Retrieves XML-formatted PubChem data (substance or compound) from NCBI based on a file of IDs

use strict;
use LWP::Simple;
use Getopt::Long;

my ($idFile, $outFile, $db_type, $property);
&GetOptions( "idFile=s" => \$idFile,
	     "outFile=s" => \$outFile,
	     "type=s" => \$db_type,
	     "property=s" => \$property,
	   );

if (!$idFile || !$outFile || !$db_type) {
  die ' USAGE: extractPubChemData.pl -idFile <idFile>  -outFile <outFile>  -type <pcsubstance | pccompound> (-property <CID | Synonym> )';
}
unless(-e $idFile) {
  print STDERR "$idFile file not found! \n";
  exit;
}
unless($db_type eq 'pcsubstance' || $db_type eq 'pccompound') {
  print STDERR "type must be 'pcsubstance' or 'pccompound' \n";
  exit;
}
if ($db_type eq 'pcsubstance' ){
    unless( $property eq 'CID' || $property eq 'Synonym' ) {
	print STDERR "property must be 'CID ' or 'Synonym' \n";
	exit;
    }
}

my $num =100;  # max number of records to download at a time

my $base_url;
my $end_url ='';

if ($db_type eq 'pccompound') {
    $base_url = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?api_key=f2006d7a9fa4e92b2931d964bb75ada85a08&db=' . $db_type . '&id=';
} else {
    $base_url = 'http://pubchem.ncbi.nlm.nih.gov/rest/pug/substance/sid/';
    if ($property eq 'CID') {
      $end_url ='/cids/XML' ;
    } else {
      $end_url = '/synonyms/XML';
    }
    print "DEBUG $end_url\n";
}


my $ct = 0;
my @idArr;
my $resultString;

open (FILE, "$idFile");
while(<FILE>){
   chomp;
   $ct++;
   push @idArr, $_;
   if ($ct % $num == 0) {
     $resultString .= extractData(@idArr);
     @idArr =();
   }
 }
$resultString .= extractData(@idArr);
close(FILE);
processResult($resultString);



sub extractData {
  my (@ids) = @_;
  my $idList = join( ',', @ids );
  my $efetch_url = $base_url . $idList . $end_url;
  my $efetch_out = get($efetch_url);

  return $efetch_out;
}

sub processResult { 
  my ($result) = @_;
  my @lines = split /\n/, $result;
  my $show = 1;
  my $end_tag; 

  open (OUT, ">$outFile.tmp");

  foreach my $line (@lines) {
    if (($line =~ /\<\/InformationList\>/ || $line =~ /\<\/eSummaryResult\>/ ) && ($show)) {
      $show =0;
      $end_tag = $line;
    } elsif (($line =~ /\<Information\>/ || $line =~ /\<DocSum\>/) && !($show)) {
      $show =1;
      print OUT $line ."\n";
    } elsif ($show) {
      print OUT $line ."\n";
    }
  }
  print OUT $end_tag ."\n";

  system("piconv -t UTF-8 < $outFile.tmp > $outFile");

  unlink("$outFile.tmp") if (-e "$outFile") ;

}
