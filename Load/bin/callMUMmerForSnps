#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | reviewed
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use CBIL::Util::V;

my ($verbose, $help, $referenceStrain, $queryFile, $snpFile, $out, $mummerDir);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'query_file=s' => \$queryFile,
            'snp_file=s' => \$snpFile,
            'output_file=s' => \$out,
	    'mummerDir=s' => \$mummerDir
           );

&usage() if($help);
&usage("Missing Argument") unless(-e $queryFile && -e $snpFile && $out && $mummerDir);

my $seqIO = Bio::SeqIO->new( -file => $snpFile, -format => 'fasta');

my @lengths;

while(my $seq = $seqIO->next_seq()) {
  push(@lengths, $seq->length());
}

my $max = CBIL::Util::V::max(@lengths);
my $min = CBIL::Util::V::min(@lengths);


unless($min == $max) {
  die "FASTA file contains mixed sequence lengths:  Max sequence length $max should equal the min sequence length $min";
}

system("$mummerDir/mummer -maxmatch -l $max -b $queryFile $snpFile >>$out");


sub usage {
  my $m = shift;

  print STDERR "$m\n" if($m);
  die "usage: perl callMUMmerForSnps --snp_file <s-<FILE> --query_file <s-FILE> --output_file <OUT> --mummerDir\n";
}
