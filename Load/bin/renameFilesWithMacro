#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use Cwd;

my ($macro, $value, $rootDir) = @ARGV;

usage() unless ($macro && $value && $rootDir);

die "rootDir must be a full path" unless $rootDir =~ /^\//;

correctDir($rootDir, '');
correctFile($rootDir, '');

sub correctDir {
  my ($pwd, $dir) = @_;

  opendir(DIR, "$pwd/$dir") || die "Can't open dir '$pwd/$dir'\n";
  my @files = readdir(DIR);
  close(DIR);

  foreach my $file (@files)  {
    next if $file =~ /^\.+$/;
    if (-d "$pwd/$dir/$file") {
      correctDir("$pwd/$dir", $file);
      correctFile("$pwd/$dir", $file);
    }
  }

  foreach my $file (@files)  {
    next if $file =~ /^\.+$/;
    if (-f "$pwd/$dir/$file") {
      correctFile("$pwd/$dir", $file);
    }
  }

}

sub correctFile {
  my ($pwd, $file) = @_;

  if ($file =~ /$macro/) {
    my $newFile = $file;
    $newFile =~ s/$macro/$value/;
    print STDERR "renaming $file to $newFile\n";
    rename("$pwd/$file", "$pwd/$newFile") || die "Could not rename $file to $newFile\n";
  }
}


sub usage {
  print STDERR "

rename all files and directories in a directory structure, replacing an embedded macro with a value.  For example, rename all files with the macro CURRENT to have instead 2.0.  Such as release-CURRENT-ORFs.fasta

usage: renameFilesWithMacro macro value rootDir

Note:  to test if this succeeded, run this command in the root dir:
  % dir -R | grep YOUR_MACRO

";

  exit 1;
}
