#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use Data::Dumper;

my ($verbose, $help, $inputFileOrDir, $outputFasta,$outputGff,$inputFileExt);


&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'input_dir=s' => \$inputFileOrDir,
	    'output_fasta=s' => \$outputFasta,
	    'output_gff=s' => \$outputGff,
	    'inputFileExt=s' => \$inputFileExt,
 
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $inputFileOrDir && $outputFasta && $outputGff);



if(!($inputFileExt)){
	$inputFileExt = "gff";
}


open(OUT,">$outputFasta");

	
if(-d $inputFileOrDir){
  opendir(DIR, $inputFileOrDir) || die "can't opendir $inputFileOrDir: $!";
}else{
  open(IN,$inputFileOrDir);
}


open(OUTGFF,">$outputGff");
if(-d $inputFileOrDir){



  foreach my $file (readdir(DIR)){
    if($file =~ /\.$inputFileExt$/){
      open(FILE,"$inputFileOrDir/$file");

      my $flag = 0;




      foreach my $line (<FILE>){
      chomp $line;
      

      if($line =~ /##FASTA/){
	$flag = 1;
      }elsif($flag == 1){
	if($line=~/0*(\d+)$/){
	    $line = $line."|".$1;
	}elsif($line=~/bin$/){
	    	    $line = $line."|un";
	}  
	print OUT "$line\n";
      }else{
	print OUTGFF "$line\n";
      }
    }
      close(FILE);
  
    }
  }
  closedir(DIR);
}else{
      my $flag = 0;


      foreach my $line (<IN>){
      chomp $line;
      
      if($line =~ /##FASTA/){
	$flag = 1;
      }elsif($flag == 1){
	print OUT "$line\n";
      }else{
	print OUTGFF "$line\n";
      }
    }

      close(IN);

}


close(OUTFILE);
close(OUT);
close(OUTGFF);


sub usage{
  my ($m) = @_;

  print STDERR "$m\n" if($m);
  my $usage = "usage:  perl splitGff3FilesIntoFastaAndCustomGff3  \\
DESCRIPTION
This script takes one or more gff3 files, splits and merges them into one fasta file and one customized gff3 file. This is to allow loading using ISF for systems running bioperl 1.4 and below.
--input_file_or_dir <input file or dir containing gff3 files (required)> \\
--inputFileExt <input file extension: default gff> \\
--output_fasta <output fasta file (required)> \\
--output_gff <output gff file (required)> \\
--verbose <boolean-a little extra STDERR out> \\
--help|h
";
  print STDERR $usage;
  exit(0);
}


1;
