#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use Getopt::Long;

use Data::Dumper;
use FileHandle;
use HTTP::Date;

use DBI;
use DBD::Oracle;
use CBIL::Util::PropertySet;


my ($date, ) = split(" ", HTTP::Date::time2iso());
$date = join("",split(/-/,$date));

my ($verbose, $help, $organismAbbrev, $extDbName, $extDbRlsVer, $ecFile);
my (%gene2organism);

&GetOptions('help|h' => \$help,
            'organismAbbrev=s' => \$organismAbbrev,
            'extDbName=s' => \$extDbName,
            'extDbRlsVer=s' => \$extDbRlsVer,
            'ecFile=s' => \$ecFile,
           );

&usage() if($help);

&usage("Missing a Required Argument") unless (defined $organismAbbrev && $ecFile);
#&usage("Missing Required Argument") unless (defined ($extDbName && $extDbRlsVer) );

my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";
my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);
my $u = $gusconfig->{props}->{databaseLogin}; 
my $pw = $gusconfig->{props}->{databasePassword}; 
my $dsn = $gusconfig->{props}->{dbiDsn}; 
my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{LongTruncOk} = 1;
$dbh->{LongReadLen} = 512 * 512 * 1024;

my $extDbName = $organismAbbrev."_primary_genome_RSRC";
my $sqlGene = "select gf.source_id, ed.name from dots.genefeature gf, sres.externaldatabase ed, SRES.externaldatabaserelease edr
 where edr.external_database_id=ed.external_database_id and gf.external_database_release_id=edr.external_database_release_id
 and ed.name like '$extDbName'
";

my $geneRef = readFromDatabase($dbh, $sqlGene);
foreach my $i (0..$#$geneRef) {
  my ($sourceId, $dbName) = split(/\t/, $geneRef->[$i]);
  my $org = $dbName;
  $org =~ s/^(\S+?)\_.+$/$1/;
  $gene2organism{$sourceId} = $org;
  print STDERR ".";
}

my $orgECFile = "$organismAbbrev"."_EC.txt";

open (ECOUT, ">$orgECFile") || die "can not open file to write\n";

open (EC, $ecFile) || die "can not open EC file to read\n";
while (<EC>) {
  chomp;
  my ($id, $ec) = split (/\t/, $_);
  if ($gene2organism{$id} eq $organismAbbrev) {
    print ECOUT "$_\n";
  } 
}
close EC;
close ECOUT;


#####################

sub readFromDatabase {
  my ($dbh, $sql) = @_;
  my $stmt = $dbh->prepare($sql);
  $stmt->execute;
  my (@arrays);
  while (my @fetchs = $stmt->fetchrow_array()) {
    my $oneline= $fetchs[0];
    foreach my $i (1..$#fetchs) {
      $oneline .= "\t$fetchs[$i]";
    }
    push @arrays, $oneline;
  }
  $stmt->finish();
  return \@arrays;
}


sub usage {
  die
"
A script to 
Usage:  

NOTE: the GUS_HOME should point to the instance that the script want to report

where
  --organismAbbrev: the organism Abbrev in the table apidb.organism
  --ecFile:  a 2 columns tab delimited EC file name
  --extDbName: the external database name for loading genome and annoation
  --extDbRlsVer: the external database release version for loading genome and annotation
";
}
