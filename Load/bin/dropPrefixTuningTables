#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use DBI;
use Getopt::Long qw(GetOptions);

my ($instance, $schema, $password, $prefix);

GetOptions("instance=s" => \$instance,
           "schema=s" => \$schema,
           "password=s" => \$password,
           "prefix=s" => \$prefix,
	  );


usage() if !$instance or !$password or !$prefix;
$schema = "ApidbTuning" if !$schema;

my $dbh = DBI->connect("dbi:Oracle:" . $instance, $schema, $password,
		       { PrintError => 1, RaiseError => 0}
		      )
  or die $DBI::errstr;

my $select = $dbh->prepare(<<SQL);
     select synonym_name, table_name
     from all_synonyms, (select replace(upper('$prefix%'), '_', '\\_') as string from dual) prefix
     where synonym_name like prefix.string escape '\\'
       and table_name like prefix.string escape '\\'
       and table_owner = sys_context ('USERENV', 'CURRENT_SCHEMA')
SQL

$select->execute() or die $DBI::errstr;

my $count;
while (my ($synonym, $table) = $select->fetchrow_array()) {
  $count++;
  print "dropping synonym $schema.$synonym\n";
  $dbh->do("drop synonym $schema.$synonym") or die $DBI::errstr;

  print "dropping table $schema.$table\n";
  $dbh->do("drop table $schema.$table") or die $DBI::errstr;
}

if ($count) {
  print "dropped $count table/synonym set(s).\n";
} else {
  print "no tuning tables found with prefix \"$prefix\" in instance $instance, schema $schema.\n";
}

sub usage {

  print <<END;
Create/update "tuning tables", denormalized copies of data used to improve web site performance.

Usage: dropPrefixTuningTables -instance <instance>  -password <password> -prefix <prefix> [-schema <schema>]

parameters:
  instance  database instance
  schema    database user (defaults to "ApidbTuning")
  password  database password
  prefix    table-name prefix (e.g. "Pf_")
END

die;
}
