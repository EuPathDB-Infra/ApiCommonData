#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;

my ($gusConfigFile,$inFile,$outFile,$filterFile,$verbose);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "verbose!" => \$verbose,
	    "outfile=s" => \$outFile,
	    "contaminantfile=s" => \$filterFile,
            "seqFile=s" => \$inFile,);


open(FILE,$filterFile) || die "$filterFile can't be opened for reading\n";

open(SEQFILE,$inFile) || die "$inFile can't be opened for reading\n";

open(OUT,">$outFile") || die "Can't open $outFile for writing\n";

my %contaminant;

while(<FILE>){
  chomp;

  $contaminant{$_} = $_;
}

  my($locusLine,$contigId);  
while(<SEQFILE>){
  chomp;

  if ($_ =~ /^LOCUS/){$locusLine = $_; undef $contigId;}
  if($_ =~ /^DEFINITION/){
      if($_ =~ /contig (\S+)/){
	  $contigId = $1;
	  $contigId =~ s/,$//;
#	  print $contigId;
      }
  }

  if($contigId && !($contaminant{$contigId})){
      if($locusLine){
	  print OUT "$locusLine\n";
	  undef $locusLine;
      }
      print OUT "$_\n";
  }



}

