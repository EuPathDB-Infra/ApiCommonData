#!/usr/bin/perl

use strict;
use warnings;

use lib "$ENV{GUS_HOME}/lib/perl";

use Bio::SeqIO;
use Getopt::Long qw(GetOptions);

my $proteinFile;
my $nrFile;
my $gusConfigFile;
my $outputFile;
my $refSeqs;
my $sourceIdRegex;
my $verbose;


GetOptions("verbose!"        => \$verbose,
           "gusConfigFile=s" => \$gusConfigFile,
           "proteinFile=s"   => \$proteinFile,
           "nrFile=s"        => \$nrFile,
           "outputFile=s"    => \$outputFile,
	   "refSeqs!"        => \$refSeqs,
	   "sourceIdRegex=s" => \$sourceIdRegex,
          );

unless (-e $proteinFile && -e $nrFile && $sourceIdRegex) {
  die "Must supply a valid path to the protein and NRDB files and a valid regex for parsing the accession number!\n usage: dbXRefBySeqIdentity --proteinFile <string> --nrFile <string> --outputFile <string> --gusConfigFile [\$GUS_CONFIG_FILE] --sourceIdRegex <string> --refSeqs --verbose\n";
}

open(OUT, ">$outputFile")
  or die "Couldn't open outputFile for writing: $!\n";

my %proteins;
my $proteins = Bio::SeqIO->new(-file => "$proteinFile",
			       -format => "fasta");

while (my $protein = $proteins->next_seq()) {
  my $proteinSeq = $protein->seq();
  $proteinSeq =~ s/\*//; #proteins in toxo have '*' at end

  $proteins{uc($proteinSeq)} = $protein->display_id();
}

my $nr = Bio::SeqIO->new(-file => "$nrFile",
			 -format => "fasta");

while(my $seq = $nr->next_seq()) {

  if(my $sourceId = $proteins{uc($seq->seq())}) {
#    my @data;
    my $giNumber;
    my $extDb;
    my $accession;
    my $defLine = $seq->display_id();

my @defLines = split('gi',$defLine);
    foreach my $def (@defLines){
      if ($def eq ''){next;}  #ignore leading empty space

      $def =~ s/^\|(\d+)\|//;
      $giNumber = $1;

      if ($refSeqs){
print OUT "Regex: $sourceIdRegex\n";
print OUT "Def: $def\n";
	if ($def =~ /$sourceIdRegex/){
	  $accession = $1;
	}else{next;}
      }else{
print OUT "Regex: $sourceIdRegex\n";
print OUT "Def: $def\n";
	if($def =~ $sourceIdRegex){
#if ($def =~ m/(gb|emb|dbj)\|(\w+)/){
print OUT "matched: $&\n";
if($2){
  $accession = $2;
}else{
	  $accession = $1;
	  }
print OUT "accession: $accession\n";
	}else{
	  print OUT "NEXT\n";
	  next;}
      }

#      @data = split(',',$def);
#      $extDb = $data[1];

#      if ($refSeqs){
#	if ($extDb eq ref){
#	  $giNumber = $data[0];
#	  $accession = $data[2];
#	}else{next;}
#      }else{
#	if ($extDb eq 'dbj' || $extDb eq 'emb' || $extDb eq 'gb'){
#	  $giNumber = $data[0];
#	  $accession = $data[2];
#	}else{next;}
#      }

      print OUT "gi: $giNumber, db: $extDb, accession: $accession\n" if $verbose;

      print OUT "$sourceId\t$giNumber\t$accession\n";

      print OUT "\n" if $verbose;
    }

  }

}

close(OUT);
