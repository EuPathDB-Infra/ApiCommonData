#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use Bio::Seq;
use Bio::Tools::GFF;
use Getopt::Long qw(GetOptions);

my $verbose = 0;
my $inputFile;
my $outputFile;

# reduce and rearrange columns from IEDB file

GetOptions("verbose!"        => \$verbose,
           "inputFile=s"     => \$inputFile,
           "outputFile=s"    => \$outputFile,
          );

unless (-e $inputFile) {
  die "Must supply a valid input file!

Usage: iedbSimplifyTabFile --inputFile <FILE> --outputFile <FILE> [--verbose]

Rearrange the columns in an IEDB tab file produced by iedbMakeTabFileFromXml

\n";
}

open(OUT, "> $outputFile");

print OUT "Accession\tIEDB ID\tStrain\tSequence\tEpitope Name\n";

open (TAB, "$inputFile") || die "$inputFile not found\n";

while(<TAB>){

    chomp;
    next if (/^\n/);
    next if /Accession/;

    my @data=split(/\t/, $_);

  my $iedbId = $data[1];
  my $epiName = $data[2];
  my $seq = $data[4];
  my $accession = $data[10];
  my $strain = $data[7];

  print OUT "$accession\t$iedbId\t$strain\t$seq\t$epiName\n" if $seq;
}

close (OUT);


###TODO####
# Generalize plugin by making columns to take and order to print in
# customizable via the command line
###########
