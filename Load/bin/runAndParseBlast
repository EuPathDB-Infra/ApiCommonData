#!/usr/bin/perl

## script for running blast over a batch of sequences against a database and outputting the top match that matches in length and with at least 98% identity

use lib "$ENV{GUS_HOME}/lib/perl";
use Bio::SeqIO;
use CBIL::Bio::Blast::BlastAnal;
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;
use ApiCommonData::Load::MapAndPrintEpitopes;
use Getopt::Long;

use strict;

my $debug = 0;

$| = 1;

my $regex = '\S*?\|\S*?\|(\S*?)\|';
my $queryFile;
my $epitopeFile;
my $outputFile;
my $database;
my $gusConfigFile = "$ENV{GUS_HOME}/config/gus.config";

&GetOptions("regex=s" => \$regex,
            "queryFile=s" => \$queryFile,
	    "database=s" => \$database,
	    "gusConfigFile=s" => \$gusConfigFile,
	    "epitopeFile=s" => \$epitopeFile,
	    "outputFile=s" => \$outputFile,
	    "debug!" => \$debug,
            );

unless ($queryFile && $database && $epitopeFile && $outputFile){ die "Usage: runAndParseBlast --queryFile <FILE> --database <PATH> --epitopeFile <FILE> --outputFile <FILEPATH> [--regex <STRING>] [--gusConfigFile <FILE>] [--debug]";}

die "Cannot find '$queryFile':$!\n" unless (-e $queryFile);
die "Cannot find '$epitopeFile':$!\n" unless (-e $epitopeFile);

print STDERR "Establishing dbi login\n" if $debug;

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $debug,0,1,
                                        $gusconfig->getCoreSchemaName()
				       );
my $dbh = $db->getQueryHandle();


#create the files
my $tempFile = $queryFile;
$tempFile =~ s/(\S+\/)+(\w+).\w+/$1/;
$tempFile .="tmp.out";

my $errorLog = $outputFile;
$errorLog =~ s/\.out/.err/;

open (ERR, ">>$errorLog") || die "Could not open error log '$errorLog' for writing: $!";


#get the epitopes...we only want to do this once
my %epitopes;
&ApiCommonData::Load::MapAndPrintEpitopes::makeEpitopeHash($epitopeFile, \%epitopes);

#first create a query file object using seqio ...

my $batchQueryFile  = Bio::SeqIO->new(-file => $queryFile , '-format' => 'Fasta');

print STDERR "Running BLAST...\n";

#loop through those sequences one at a time
while ( my $seq = $batchQueryFile->next_seq() ) {
  my $queryLength = $seq->length();
  my $seqId = $seq->id();

  #create file containing single sequence
  &createSeqFile($tempFile, $seq);

  #run blast on this single sequence
  my $blast = &runBlast($database, $tempFile, $queryLength, $regex, $debug);

  print STDERR "Count: ".$blast->getSubjectCount()."\n" if $debug;

  my @subjects = $blast->getSubjects();


  if($blast->getSubjectCount() > 1){
    ##do something here ... test if the first one is 100% and rest are less then OK, just use first otherwise throw error
    my $top = shift @subjects;
    my $percMatch = $top->getTotalIdentities();
    my $score = $top->getTotalHSPPercent();
    my $equal = 0;
print "more than one hit\n";
    foreach my $sub (@subjects){
      if($sub->getTotalIdentities() == $percMatch){
        print STDERR "The subjects '".$top->getID()."' and '".$sub->getID."' match the sequence '$seqId' with the same percent identity.\n";
	$equal = 1;
        next;
      }
    }

    if(my ($subId, $subjSeq) = &validateHit($queryLength, $top, $seqId)){
      &setBlastHit(\%epitopes, $seqId, $score);
      &ApiCommonData::Load::MapAndPrintEpitopes::mapEpitopes($subjSeq, $subId, $seqId, \%epitopes, $outputFile, $debug) unless($equal);
    }

  }elsif($blast->getSubjectCount() == 0){

    print ERR "No blast hits returned for $seqId\n";

  }else{
    ##we're good
    my $subject = $subjects[0];
    my $score = $subject->getTotalHSPPercent();

    if(my ($subId, $subjSeq) = &validateHit($queryLength, $subject, $seqId)){
      &setBlastHit(\%epitopes, $seqId, $score);
      &ApiCommonData::Load::MapAndPrintEpitopes::mapEpitopes($subjSeq, $subId, $seqId, \%epitopes, $outputFile, $debug);
    }

  }

  my $cmd = "rm $tempFile";
  system($cmd);
  my $status = $? >> 8;
  die "Failed with status '$status running cmd: $cmd'" if $status;
}

close (ERR);


#----------------Subroutines----------------------

sub createSeqFile{
  my ($tempFile, $seq) = @_;

    my $singleQueryFile = Bio::SeqIO->new(-file => ">$tempFile" , '-format' => 'Fasta');

  $singleQueryFile->write_seq($seq);

}

sub runBlast{
  my ($database, $tempFile, $queryLength, $regex, $debug) = @_;

  my $cmd = "/files/cbil/software/ncbi-blast2/current/blastall -p blastp -d $database -i $tempFile -v 3 -b 3 -F F";

  my @blastOutput = `$cmd`;

  if ($debug){
    foreach my $entry (@blastOutput){
      print "$entry\n";
    }
  }

  my $blast = CBIL::Bio::Blast::BlastAnal->new($debug);

  $blast->parseBlast($queryLength,97,1,$regex,\@blastOutput);

  return $blast;
}

sub validateHit{
  my ($queryLength, $subject, $seqId) = @_;
  my $subId = $subject->getID()."-1";
  my $subjSeq;

  my $msg = "Query ID: $seqId Query Length: $queryLength\tBLAST Result: $subId Subject Length: ".$subject->getLength().".";

  my $diff = $queryLength - $subject->getLength();
  unless ($diff <= 50 && $diff >= -50){

    print ERR "LENGTH ERROR: $msg BLAST hit rejected.\n"

  }else{
    print ERR "WARNING: $msg BLAST hit accepted.\n" unless ($queryLength == $subject->getLength());

    ## extract this sequence from the db ...
    $subjSeq = &getSequence($subId);
  }

  return ($subId, $subjSeq);
}

sub getSequence{
  my ($subId) = @_;

  my $sql = <<EOSQL;
SELECT sequence
FROM DoTs.TranslatedAASequence
WHERE source_id = '$subId'
EOSQL

  my $sth = $dbh->prepareAndExecute($sql);
  my ($sequence) = $sth->fetchrow_array();

  return $sequence;
}

sub setBlastHit{
  my($epitopes, $seqId, $score) = @_;

  foreach my $epitope (keys %{$$epitopes{$seqId}}){
    $epitopes{$seqId}->{$epitope}->{blastHit} = 1;
    $epitopes{$seqId}->{$epitope}->{score} = $score;
  }
}
