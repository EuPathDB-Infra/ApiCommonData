#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Data::Dumper;
use LWP::Simple;
use LWP::UserAgent;
use DBI;
use DBD::Oracle;
use WDK::Model::ModelConfig;
use JSON;
use URI::Escape;
use Tie::IxHash;
use CBIL::Util::PropertySet;

my ($gusConfigFile, $organismAbbrev, $projectName, $jbrowseConf) = @ARGV;

    
#    my $modelConfig = new WDK::Model::ModelConfig($projectName);
#    my $dbh = DBI->connect( $modelConfig->getAppDbDbiDsn(),
#                            $modelConfig->getAppDbLogin(),
#                            $modelConfig->getAppDbPassword()
#        )
#        || die "unable to open db handle to ", $modelConfig->getAppDbDbiDsn();

$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

unless(-e $gusConfigFile) {
  print STDERR "gus.config file not found! \n";
  exit;
}

my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $usr = $gusconfig->{props}->{databaseLogin};
my $pwd = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $usr, $pwd) ||  die "Couldn't connect to database: " . DBI->errstr;


	#my $dir = $ENV{OLDPWD} . "/temporaryWebservices/$organismAbbrev";
	#mkdir $dir unless(-d $dir);
	open(FILE, '>>', $jbrowseConf) or die "Cannot open file $jbrowseConf for reading: $!";


	my $result = {"jBrowseMetadata" => [] };	

        my $taxonId = &getTaxonId($dbh, $result, $organismAbbrev);
	&addCentromereCount($dbh, $result, $organismAbbrev);
	&addScaffoldCount($dbh, $result, $organismAbbrev);
	&addUnifiedSnpCount($dbh, $result, $organismAbbrev); 
	&addChipChipTracks($dbh, $result, $organismAbbrev); 
	&addUnifiedMassSpecCount($dbh, $result, $organismAbbrev);
	&addTRNACount($dbh, $result);
	&addCnvArray($dbh, $result);

	print FILE $organismAbbrev."::centromereCount=".$result->{jBrowseMetadata}[0]{centromereCount}."\n";
	print FILE $organismAbbrev."::scaffoldCount=".$result->{jBrowseMetadata}[1]{scaffoldCount}."\n";
	print FILE $organismAbbrev."::unifiedSnpCount=".$result->{jBrowseMetadata}[2]{unifiedSnpCount}."\n";
	print FILE $organismAbbrev."::unifiedMassSpecCount=".$result->{jBrowseMetadata}[4]{unifiedMassSpecCount}."\n";
	print FILE $organismAbbrev."::tRNACount=".$result->{jBrowseMetadata}[5]{tRNACount}."\n\n";

	my $chipChipVarsArrayRef = $result->{jBrowseMetadata}[3]{chipChipVars};

		foreach my $key (@{$chipChipVarsArrayRef}) {
		    print FILE $organismAbbrev."::dataset=".$key->{dataset}."\n";
		    print FILE $organismAbbrev."::study=".$key->{study}."\n";
		    print FILE $organismAbbrev."::panName=".$key->{panName}."\n";
	    	    print FILE $organismAbbrev."::panId=".$key->{panId}."\n\n";
		}

	close FILE;

sub getTaxonId {
  my ($dbh, $result, $organismAbbrev) = @_;
  my $sql = "select taxon_id from apidb.organism o where o.abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $result = $sh->fetchrow_array();
  $sh->finish();
  return $result;
}

sub addCentromereCount {
  my ($dbh, $result, $organismAbbrev) = @_;
  my $sql = "select count(*) from apidbtuning.organismattributes where hasCentromere = 1 and  internal_abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $centromereCount = {centromereCount => $count};
  push @{$result->{jBrowseMetadata}}, $centromereCount;
  $sh->finish(); 
  return $result;
}


sub addScaffoldCount {
  my ($dbh, $result, $organismAbbrev) = @_;
  my $sql = "select count(*)  from dots.scaffoldgapfeature sgf, apidb.organism o, dots.ExternalNaSequence na where na.na_sequence_id = sgf.na_sequence_id and o.taxon_id = na.taxon_id and o.abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $scaffoldCount = {scaffoldCount => $count};
  push @{$result->{jBrowseMetadata}}, $scaffoldCount;  
  $sh->finish();
  return $result;
}


sub addUnifiedSnpCount {
  my ($dbh, $result, $organismAbbrev) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%HTS_SNP_%'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $snpCount = $sh->fetchrow_array();
  my $unifiedSnpCount = {unifiedSnpCount => $snpCount};
  push @{$result->{jBrowseMetadata}}, $unifiedSnpCount; 
  $sh->finish();
  return $result;
}


sub addUnifiedMassSpecCount {
  my ($dbh, $result, $organismAbbrev) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%massSpec%'";
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $unifiedMassSpecCount = {unifiedMassSpecCount => $count};
  push @{$result->{jBrowseMetadata}}, $unifiedMassSpecCount;
  $sh->finish();
  return $result;
}


sub addTRNACount {
  my ($dbh, $result) = @_;

  my $sql = "select count(*) from dots.rnafeature rnaf, sres.ontologyterm ot
where ot.ontology_term_id = rnaf.sequence_ontology_id
and ot.name ='tRNA'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $tRNACount = {tRNACount => $count};
  push @{$result->{jBrowseMetadata}},  $tRNACount;
  $sh->finish();
  return $result;
}


sub addCnvArray {
  my ($dbh, $result) = @_;

  my $sql = "select distinct pan.name
from study.protocolappnode pan
   , study.study s
   , study.studylink sl
where pan.PROTOCOL_APP_NODE_ID = sl.PROTOCOL_APP_NODE_ID
and sl.study_id = s.study_id
and s.name like 'tcruCLBrenerEsmeraldo-like_cghArrayExper_Tarelton_GSE23576_CNV_RSRC%'
order by pan.name";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($panName) = $sh->fetchrow_array()){
        my $cnvArray = {cnvArray => $panName,
        }; 
  push @{$result->{jBrowseMetadata}}, $cnvArray;
  }
  $sh->finish();
  return $result;
}

#TODO: should use query apidb.organism table (test toxo inc)
sub addChipChipTracks {
  my ($dbh, $result, $organismAbbrev) = @_;
  
 my $sql = "select d.name, s.name, pan.name
from study.study s
   , SRES.EXTERNALDATABASERELEASE r
   , SRES.EXTERNALDATABASE d
   , study.protocolappnode pan
   , study.studylink sl
where d.name like '${organismAbbrev}%_chipChipExper_%'
and s.EXTERNAL_DATABASE_RELEASE_ID = r.EXTERNAL_DATABASE_RELEASE_ID
and r.EXTERNAL_DATABASE_ID = d.EXTERNAL_DATABASE_ID
and s.study_id = sl.study_id
and sl.protocol_app_node_id = pan.PROTOCOL_APP_NODE_ID
and s.investigation_id is null";
  
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $chipChipVarsArray = {"chipChipVars" => [] };
  while(my ($dataset, $study, $panName, $panId) = $sh->fetchrow_array()){
      my $chipChipVars = {dataset => $dataset,
                          study => $study,
                          panName => $panName,
	};
  
  push @{$chipChipVarsArray->{chipChipVars}}, $chipChipVars;
  }
  push @{$result->{jBrowseMetadata}}, $chipChipVarsArray;
  $sh->finish();
  return $result;
}




