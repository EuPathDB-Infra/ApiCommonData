#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use Bio::Seq;
use Bio::Tools::GFF;
use Getopt::Long qw(GetOptions);

my $verbose = 0;
my ($inputDir, $outputDir, $configFile);

GetOptions("verbose!"        => \$verbose,
           "inputDir=s"     => \$inputDir,
           "outputDir=s"    => \$outputDir,
           "configFile=s"    => \$configFile,
          );

unless (-e $inputDir) {
  die "Must supply a valid input Dir!\nUsage: copyExpressionProfilesToDownloadDir --inputDir <DIR> --outputDir <DIR> --configFile <FILE>[--verbose]";
}

open (IN, "$configFile") || die "$configFile not found\n";

while(<IN>){

    chomp;
    next if (/^\n/);

    my @data=split(/\t/, $_);

    my $fileName = $data[0];

    my $cmd="cp $inputDir/$fileName $outputDir/$fileName";

    system ($cmd); 

    #my $lcFileName = lc $fileName;

    #system ($cmd) unless ($lcFileName =~ /pct$/);

}

close (IN);

