#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use lib "$ENV{GUS_HOME}/lib/perl";
use strict;
use Getopt::Long;
use Bio::SeqIO;
use File::Basename;
use Data::Dumper;

my ($verbose, $help, $bowtieOutputFile, $tag2SeqFile,$outputGff,$inputFileExt);

&GetOptions('verbose' => \$verbose,
            'help|h' => \$help,
            'bowtie_output_file=s' => \$bowtieOutputFile,
	    'tag2seq_file=s' => \$tag2SeqFile,
 
           );

&usage() if($help);
&usage("Missing a Required Argument") unless(defined $bowtieOutputFile && $tag2SeqFile);


open(IN,"$bowtieOutputFile");
open(OUT,">$tag2SeqFile");

foreach my $line (<IN>){
	chomp($line);

	my(@fields) = split(/\t/,$line);

	if($fields[1] eq '+'){
		$fields[1] = 'forward';
	}else{
		$fields[1] = 'reverse';
	}	
	
	my $end = $fields[3] + length($fields[4]);

	
	print OUT "$fields[0] matched against $fields[2] from $fields[3] to $end on $fields[1] strand\n";
	
}

close(IN);
close(OUT);


sub usage{

}