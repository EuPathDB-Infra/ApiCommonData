#!/usr/bin/perl

use strict;
use DBI;
use Data::Dumper;
use Getopt::Long qw(GetOptions);

my $sqlDelim = '===';
my $eofDelim = '###';

my ($configFile, $noRun, $optimizerStatsTables);

GetOptions("configFile=s" => \$configFile,
           "optimizerStats=s" => \$optimizerStatsTables,
           "noRun!" => \$noRun,
	  );

usage() unless $configFile && scalar(@ARGV) < 3;

open(F, $configFile) || die "Can't open config file '$configFile'\n";
my $config = {trackingInstance=> "",
	      trackingLogin=> "",
	      trackingPassword=> "",
	      project=> "",
	      appInstance=> "",
	      appLogin=> "",
	      appPassword=> "",
	      sql=> "",
	      description=> "",
	      nickname=> "",
	      hide=> "",
	      };
my $propertyCount = scalar(keys(%$config));

my $optionalConfig = {
	      description=> 1,
	      nickname=> 1,
	      hide=> 1,
	      };

my $processingSql;

while (<F>) {
  next unless /\S/;
  last if /^$eofDelim/;
  if ($processingSql) {
    if (/^$sqlDelim/) {    # done processing sql
      $processingSql = 0;
    } else {
      $config->{sql} .= $_;
    }
  } else {
    if (/^$sqlDelim/) {
      $processingSql = 1; # start processing sql
    } else {
      chomp;
      /(\w+)\=(.+)/;
      $config->{$1} = $2;
    }
  }
}

chomp($config->{sql});

#print STDERR Dumper $config;

# validate the configuration
if (scalar(keys(%$config)) != $propertyCount) {
  print STDERR "ERROR: looks like you have an unsupported property in your config file\n\n";
  usage();
}

foreach my $prop (keys(%$config)) {
  if (!$config->{$prop} && !$optionalConfig->{$prop}) {
    print STDERR "ERROR: missing required property '$prop' in your config file\n\n";
  usage();
  }
}

my $trackingDbh = DBI->connect('dbi:Oracle:' . $config->{trackingInstance},
			      $config->{trackingLogin},
			      $config->{trackingPassword},
			      { PrintError => 1, RaiseError => 0}
			     )
  or die "Can't connect to the tracking database: $DBI::errstr\n";

my $appDbh = DBI->connect('dbi:Oracle:' . $config->{appInstance},
			  $config->{appLogin},
			  $config->{appPassword},
			  { PrintError => 1, RaiseError => 0}
			 )
  or die "Can't connect to the app database: $DBI::errstr\n";

my ($fetchTime, $totalTime, $prepareTime, $executeTime, $statistics, $consistentGets, $rowCount);

my $dbaTabStatistics = getDbaTabStatistics($optimizerStatsTables, $appDbh);
my $dbaTabColStatistics = getDbaTabColStatistics($optimizerStatsTables, $appDbh);
my $dbaHistograms = getDbaHistograms($optimizerStatsTables, $appDbh);
my $dbaIndStatistics = getDbaIndStatistics($optimizerStatsTables, $appDbh);

if (!$noRun) {
# execute query to get timing and row count
  my $startTime = time;
  my $query = $appDbh->prepare($config->{sql} . ' -- timestamp: ' . `date`);
  my $finishedPrepare = time;
  $query->execute();
  my $finishedExecute = time;
  $rowCount = 0;
  while (my @row = $query->fetchrow_array()) {
    $rowCount++;
  }
  $query->finish();

  $fetchTime = time - $finishedExecute;
  $totalTime = time - $startTime;
  $prepareTime = $finishedPrepare - $startTime;
  $executeTime = $finishedExecute - $finishedPrepare;

  # get statistics
  my $statQ = $appDbh->prepare(<<SQL);
  select ms.value, sn.name
  from v\$mystat ms, v\$statname sn
  where ms.statistic# = sn.statistic#
    and sn.name in ('recursive calls', 'db block gets', 'consistent gets', 
                    'physical reads', 'redo size', 'bytes sent via SQL*Net to client', 
                    'bytes received via SQL*Net from client', 
                    'SQL*Net roundtrips to/from client', 'sorts (memory)', 
                    'sorts (disk)')
SQL
  $statQ->execute();
  while (my ($value, $statistic) = $statQ->fetchrow_array()) {
    $statistics .= sprintf('%10d %s', $value, $statistic) . "\n";
    $consistentGets = $value if $statistic eq 'consistent gets';
  }
  $statQ->finish();
}

# get plan
my $plan;

$appDbh->do("explain plan for " . $config->{sql})
         or die "explaining plan";
my $planQ = $appDbh->prepare("select * from table(dbms_xplan.display())");
$planQ->execute();
while (my ($line) = $planQ->fetchrow_array()) {
  $plan .= $line . "\n"
}
$planQ->finish();

# save benchmark record
my $insert = $trackingDbh->prepare(<<SQL);
  insert into apidb.BenchmarkedQuery
              (bqid, run_date, project, query, trace, plan, instance, login, hide, nickname,
               description, rows_returned, prepare_time, execute_time, fetch_time,
               total_time, consistent_gets,
               dba_tab_statistics, dba_tab_col_statistics, dba_histograms, dba_ind_statistics)
  values (apidb.BenchmarkedQuery_sq.nextval, sysdate, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SQL
$insert->bind_param(1, $config->{project});
$insert->bind_param(2, $config->{sql});
$insert->bind_param(3, $statistics);
$insert->bind_param(4, $plan);
$insert->bind_param(5, $config->{appInstance});
$insert->bind_param(6, $config->{appLogin});
$insert->bind_param(7, $config->{hide});
$insert->bind_param(8, $config->{nickname});
$insert->bind_param(9, $config->{description});
$insert->bind_param(10, $rowCount);
$insert->bind_param(11, $prepareTime);
$insert->bind_param(12, $executeTime);
$insert->bind_param(13, $fetchTime);
$insert->bind_param(14, $totalTime);
$insert->bind_param(15, $consistentGets);
$insert->bind_param(16, $dbaTabStatistics);
$insert->bind_param(17, $dbaTabColStatistics);
$insert->bind_param(18, $dbaHistograms);
$insert->bind_param(19, $dbaIndStatistics);

$insert->execute();
$insert->finish();

# fetch bqid for display
my $bqidQ = $trackingDbh->prepare(<<SQL);
select apidb.BenchmarkedQuery_sq.currval from dual
SQL
$bqidQ->execute();
my ($bqid) = $bqidQ->fetchrow_array();
print "created new BenchmarkedQuery record in instance  " . $config->{trackingInstance} . " with bqid $bqid\n";
print "select * from apidb.BenchmarkedQuery where bqid = $bqid;\n";
$bqidQ->finish();

$appDbh->disconnect();
$trackingDbh->disconnect();


###############################################################################

sub usage {
  print (
qq{
Usage:

apiSqlBenchmarker -configFile config_file [-noRun] [-optimizerStats {table_list}]

options:
-noRun           don't execute the query
-optimizerStats  capture optimizer stats for tables in (comma-delimited list)

Config file format:

trackingInstance=
trackingLogin=
trackingPassword=
project=
appInstance=
appLogin=
appPassword=

$sqlDelim
select *
from whatever
where whatever
$sqlDelim

description=
nickname=
hide=

$eofDelim

Junk below the above delimiter is ignored.

});
  exit(1);
}

###############################################################################

sub getDbaTabStatistics {
  my ($optimizerStatsTables, $dbh) = @_;

  return '' if !$optimizerStatsTables;

  my $stats = "owner\ttable_name\tpartition_name\tpartition_position\tsubpartition_name\tsubpartition_position\tobject_type\tnum_rows\tblocks\tempty_blocks\tavg_space\tchain_cnt\tavg_row_len\tavg_space_freelist_blocks\tnum_freelist_blocks\tavg_cached_blocks\tavg_cache_hit_ratio\tsample_size\tlast_analyzed\tglobal_stats\tuser_stats\tstattype_locked\tstale_stats\n";

  foreach my $tableFullName (split(/,/, $optimizerStatsTables)) {

    my ($schema, $table) = split(/\./, $tableFullName);

    my $query = $dbh->prepare(<<SQL);
      select owner, table_name, partition_name, partition_position, subpartition_name, subpartition_position, object_type, num_rows, blocks, empty_blocks, avg_space, chain_cnt, avg_row_len, avg_space_freelist_blocks, num_freelist_blocks, avg_cached_blocks, avg_cache_hit_ratio, sample_size, last_analyzed, global_stats, user_stats, stattype_locked, stale_stats
      from dba_tab_statistics
      where owner = upper('$schema')
        and table_name
              in (
                  select table_name from all_tables where owner = upper('$schema') and table_name = upper('$table')
                 union
                  select table_name from all_synonyms where owner = upper('$schema') and synonym_name = upper('$table'))
      order by owner, table_name
SQL

    $query->execute();
    while (my @row = $query->fetchrow_array()) {
      $stats .= join("\t", @row) . "\n";
    }
    $query->finish();
  }

  return $stats;
}

sub getDbaTabColStatistics {
  my ($optimizerStatsTables, $dbh) = @_;

  return '' if !$optimizerStatsTables;

  my $stats = "owner\ttable_name\tcolumn_name\tnum_distinct\tlow_value\thigh_value\tdensity\tnum_nulls\tnum_buckets\tlast_analyzed\tsample_size\tglobal_stats\tuser_stats\tavg_col_len\thistogram\n";

  foreach my $tableFullName (split(/,/, $optimizerStatsTables)) {

    my ($schema, $table) = split(/\./, $tableFullName);

    my $query = $dbh->prepare(<<SQL);
select owner, table_name, column_name, num_distinct, low_value, high_value, density, num_nulls, num_buckets, last_analyzed, sample_size, global_stats, user_stats, avg_col_len, histogram
 from dba_tab_col_statistics
where owner = upper('$schema')
  and table_name
        in (
            select table_name from all_tables where owner = upper('$schema') and table_name = upper('$table')
           union
            select table_name from all_synonyms where owner = upper('$schema') and synonym_name = upper('$table'))
order by owner, table_name, column_name
SQL

    $query->execute();
    while (my @row = $query->fetchrow_array()) {
      $stats .= join("\t", @row) . "\n";
    }
    $query->finish();
  }
  return $stats;
}

sub getDbaHistograms {
  my ($optimizerStatsTables, $dbh) = @_;

  return '' if !$optimizerStatsTables;

  my $stats = "owner\ttable_name\tcolumn_name\tendpoint_number\tendpoint_value\tendpoint_actual_value\n";

  foreach my $tableFullName (split(/,/, $optimizerStatsTables)) {

    my ($schema, $table) = split(/\./, $tableFullName);

    my $query = $dbh->prepare(<<SQL);
select owner, table_name, column_name, endpoint_number, endpoint_value, endpoint_actual_value
from dba_histograms
where owner = upper('$schema')
  and table_name
        in (
            select table_name from all_tables where owner = upper('$schema') and table_name = upper('$table')
           union
            select table_name from all_synonyms where owner = upper('$schema') and synonym_name = upper('$table'))
order by owner, table_name, column_name, endpoint_number
SQL

    $query->execute();
    while (my @row = $query->fetchrow_array()) {
      $stats .= join("\t", @row) . "\n";
    }
    $query->finish();

  }
  return $stats;
}

sub getDbaIndStatistics {
  my ($optimizerStatsTables, $dbh) = @_;

  return '' if !$optimizerStatsTables;

  my $stats = "owner\tindex_name\ttable_owner\ttable_name\tpartition_name\tpartition_position\tsubpartition_name\tsubpartition_position\tobject_type\tblevel\tleaf_blocks\tdistinct_keys\tavg_leaf_blocks_per_key\tavg_data_blocks_per_key\tclustering_factor\tnum_rows\tavg_cached_blocks\tavg_cache_hit_ratio\tsample_size\tlast_analyzed\tglobal_stats\tuser_stats\tstattype_locked\tstale_stats\n";

  foreach my $tableFullName (split(/,/, $optimizerStatsTables)) {

    my ($schema, $table) = split(/\./, $tableFullName);

    my $query = $dbh->prepare(<<SQL);
select owner, index_name, table_owner, table_name, partition_name, partition_position, subpartition_name, subpartition_position, object_type, blevel, leaf_blocks, distinct_keys, avg_leaf_blocks_per_key, avg_data_blocks_per_key, clustering_factor, num_rows, avg_cached_blocks, avg_cache_hit_ratio, sample_size, last_analyzed, global_stats, user_stats, stattype_locked, stale_stats
from dba_ind_statistics
where owner = upper('$schema')
  and table_name
        in (
            select table_name from all_tables where owner = upper('$schema') and table_name = upper('$table')
           union
            select table_name from all_synonyms where owner = upper('$schema') and synonym_name = upper('$table'))
order by owner, table_name, index_name
SQL

    $query->execute();
    while (my @row = $query->fetchrow_array()) {
      $stats .= join("\t", @row) . "\n";
    }
    $query->finish();

  }
  return $stats;
}
