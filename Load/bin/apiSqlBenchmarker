#!/usr/bin/perl

use strict;
use DBI;
use Data::Dumper;

my $sqlDelim = '===';
my $eofDelim = '###';

usage() unless scalar(@ARGV) == 1;

my $configFile = $ARGV[0];

open(F, $configFile) || die "Can't open config file '$configFile'\n";
my $config = {trackingInstance=> "",
	      trackingLogin=> "",
	      trackingPassword=> "",
	      project=> "",
	      appInstance=> "",
	      appLogin=> "",
	      appPassword=> "",
	      sql=> "",
	      description=> "",
	      nickname=> "",
	      hide=> "",
	      };
my $propertyCount = scalar(keys(%$config));

my $optionalConfig = {
	      description=> 1,
	      nickname=> 1,
	      hide=> 1,
	      };

my $processingSql;

while (<F>) {
  next unless /\S/;
  last if /^$eofDelim/;
  if ($processingSql) {
    if (/^$sqlDelim/) {    # done processing sql
      $processingSql = 0;
    } else {
      $config->{sql} .= $_;
    }
  } else {
    if (/^$sqlDelim/) {
      $processingSql = 1; # start processing sql
    } else {
      chomp;
      /(\w+)\=(.+)/;
      $config->{$1} = $2;
    }
  }
}

chomp($config->{sql});

#print STDERR Dumper $config;

# validate the configuration
if (scalar(keys(%$config)) != $propertyCount) {
  print STDERR "ERROR: looks like you have an unsupported property in your config file\n\n";
  usage();
}

foreach my $prop (keys(%$config)) {
  if (!$config->{$prop} && !$optionalConfig->{$prop}) {
    print STDERR "ERROR: missing required property '$prop' in your config file\n\n";
  usage();
  }
}

my $trackingDbh = DBI->connect('dbi:Oracle:' . $config->{trackingInstance},
			      $config->{trackingLogin},
			      $config->{trackingPassword},
			      { PrintError => 1, RaiseError => 0}
			     )
  or die "Can't connect to the tracking database: $DBI::errstr\n";

my $appDbh = DBI->connect('dbi:Oracle:' . $config->{appInstance},
			  $config->{appLogin},
			  $config->{appPassword},
			  { PrintError => 1, RaiseError => 0}
			 )
  or die "Can't connect to the app database: $DBI::errstr\n";

# execute query to get timing and row count
my $startTime = time;
my $query = $appDbh->prepare($config->{sql});
my $finishedPrepare = time;
$query->execute();
my $finishedExecute = time;
my $rowCount = 0;
while (my @row = $query->fetchrow_array()) {
  $rowCount++;
}
$query->finish();

my $fetchTime = time - $finishedExecute;
my $totalTime = time - $startTime;
my $prepareTime = $finishedPrepare - $startTime;
my $executeTime = $finishedExecute - $finishedPrepare;

# get statistics
my $statistics;
my $consistentGets;

my $statQ = $appDbh->prepare(<<SQL);
select ms.value, sn.name
from v\$mystat ms, v\$statname sn
where ms.statistic# = sn.statistic#
  and sn.name in ('recursive calls', 'db block gets', 'consistent gets', 
                  'physical reads', 'redo size', 'bytes sent via SQL*Net to client', 
                  'bytes received via SQL*Net from client', 
                  'SQL*Net roundtrips to/from client', 'sorts (memory)', 
                  'sorts (disk)')
SQL
$statQ->execute();
while (my ($value, $statistic) = $statQ->fetchrow_array()) {
  $statistics .= sprintf('%10d %s', $value, $statistic) . "\n";
  $consistentGets = $value if $statistic eq 'consistent gets';
}
$statQ->finish();

# get plan
my $plan;

$appDbh->do("explain plan for " . $config->{sql})
         or die "explaining plan";
my $planQ = $appDbh->prepare("select * from table(dbms_xplan.display())");
$planQ->execute();
while (my ($line) = $planQ->fetchrow_array()) {
  $plan .= $line . "\n"
}
$planQ->finish();

# save benchmark record
my $insert = $trackingDbh->prepare(<<SQL);
  insert into apidb.BenchmarkedQuery
              (bqid, project, query, statistics, plan, instance, login, hide, nickname,
               description, rows_returned, prepare_time, execute_time, fetch_time,
               total_time, consistent_gets)
  values (apidb.BenchmarkedQuery_sq.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SQL
$insert->bind_param(1, $config->{project});
$insert->bind_param(2, $config->{sql});
$insert->bind_param(3, $statistics);
$insert->bind_param(4, $plan);
$insert->bind_param(5, $config->{appInstance});
$insert->bind_param(6, $config->{appLogin});
$insert->bind_param(7, $config->{hide});
$insert->bind_param(8, $config->{nickname});
$insert->bind_param(9, $config->{description});
$insert->bind_param(10, $rowCount);
$insert->bind_param(11, $prepareTime);
$insert->bind_param(12, $executeTime);
$insert->bind_param(13, $fetchTime);
$insert->bind_param(14, $totalTime);
$insert->bind_param(15, $consistentGets);

$insert->execute();
$insert->finish();

# fetch bqid for display
my $bqidQ = $trackingDbh->prepare(<<SQL);
select apidb.BenchmarkedQuery_sq.currval from dual
SQL
$bqidQ->execute();
my ($bqid) = $bqidQ->fetchrow_array();
print "created new BenchmarkedQuery record with bqid $bqid\n";
$bqidQ->finish();

$appDbh->disconnect();
$trackingDbh->disconnect();


###############################################################################

sub usage {
  print (
qq{
Usage:

apiSqlBenchmarker config_file

Config file format:

trackingInstance=
trackingLogin=
trackingPassword=
project=
appInstance=
appLogin=
appPassword=

$sqlDelim
select *
from whatever
where whatever
$sqlDelim

description=
nickname=
hide=

$eofDelim

Junk below the above delimter is ignored.

});
  exit(1);
}
