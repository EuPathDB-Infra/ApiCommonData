#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

# shortens the NRDB deflines to the first gi number (cuts at the first space)

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use File::Basename;
use Getopt::Long qw(GetOptions);
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;


my $inputFile;
my $outputFile;
my $taxonIdMappingFile;
my $newDefLine;
my $gusConfigFile;
my $verbose = 0;

GetOptions("inputFile=s"     => \$inputFile,
           "outputFile=s"    => \$outputFile,
	   "taxonIdMappingFile=s"    => \$taxonIdMappingFile,
          );

unless (-e $inputFile) {
  die "\nERROR:  Must supply a valid input file!\nUsage: shortenDefLine --inputFile <FILE> --outputFile <FILE>\n\nPURPOSE: shortens the NRDB deflines to the first gi number (cuts at the first space) so that BLAST doesn't choke on the return strings.\n";
}


my $gusConfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $dbh = GUS::ObjRelP::DbiDatabase->new($gusConfig->getDbiDsn(),
                                         $gusConfig->getDatabaseLogin(),
                                         $gusConfig->getDatabasePassword(),
                                         $verbose, 0, 1,
                                         $gusConfig->getCoreSchemaName()
                                        )->getQueryHandle();


  $dbh->do("DROP TABLE gi2ncbiTaxonId");
  $dbh->do(<<EOSQL);
  CREATE TABLE gi2ncbiTaxonId(
    gi INTEGER NOT NULL,
    ncbiTaxonId INTEGER NOT NULL
  ) NOLOGGING
EOSQL

  $dbh->do(<<EOSQL);
  CREATE INDEX gi2ncbiTaxonId_ix ON gi2ncbiTaxonId (gi, ncbiTaxonId)
EOSQL

  my $searchSql = $dbh->prepare(<<EOSQL);
  SELECT ncbiTaxonId
  FROM   gi2ncbiTaxonId
  WHERE  gi = ?
EOSQL

if ($taxonIdMappingFile){
    my $directories = dirname($taxonIdMappingFile);
    open(C,">$directories/loadGi2ncbiTaxonId.ctl") || die "Unable to open $directories/loadGi2ncbiTaxonId.ctl for writing\n";
    print C "LOAD DATA
             INFILE '$taxonIdMappingFile'
             APPEND
             INTO TABLE gi2ncbiTaxonId
             FIELDS TERMINATED BY '\\t'
             TRAILING NULLCOLS
             (gi,
              ncbiTaxonId
             )\n";
    close C;
    print STDERR "processnig taxonIdMapping File\n";
    system("sqlLoader.pl --file $directories/loadGi2ncbiTaxonId.ctl");
}

open(IN, "< $inputFile");
open(OUT, "> $outputFile");
    print STDERR "processnig nr File\n";
while(<IN>){
	if(/^\>gi/){
	    my @descList=split('gi\|', $_);
	    my $shorDefLine = $descList[0]."gi|".$descList[1];
	    if ($shorDefLine =~ /gi\|(\d*)\|(\w*)\|(\S*?)\|\S*\s*(.*)/){
		my $secondary_id = $1; 
		my $external_db = $2;
		my $source_id = $3;
		my $description = $4;
		$description =~ s/\"//g;
		if (($external_db eq 'gnl') || ($external_db eq 'pir') || ($external_db eq 'prf') || ($external_db eq 'pat')){
		    if ($shorDefLine =~ /gi\|\d*\|\w*\|\w*\|(\S*)/){
			$source_id = $1;
		    }
		    else{
			die "ERROR: Unable to parse source id  for gnl, pir, pat, or prf.\n";
		    }
		} elsif ($external_db eq 'pdb'){
		    if ($shorDefLine =~ /gi\|\d*\|\w*\|\w*\|(\S*)/){
			$source_id = $source_id . "." . "$1" if $1;
		    }
		    else{
			die "ERROR: Unable to parse source id for pdb.\n";
		    }
		} elsif (!$source_id){
		    $source_id = $secondary_id;
		    $external_db = 'genpept';
		}
		$shorDefLine=">gi|".$secondary_id ."|" . $external_db ."|" . $source_id ."|". $description
	    }
	    $newDefLine = $shorDefLine;
	}else{
	    $newDefLine = $_;
	}
	if ($newDefLine =~ /^\>gi\|(\d+)\|/){
	    $searchSql->execute($1);
	    my $ncbiTaxonId = $searchSql->fetchrow_array();
	    if ($ncbiTaxonId){
		$newDefLine .= "|$ncbiTaxonId|\n" ;
	    }elsif ($taxonIdMappingFile) {
		$newDefLine .= "|32644|\n" ;
	    }else {
		$newDefLine .= "\n" ;
	    }
        }
	print OUT $newDefLine;
}

close IN;
close OUT;

#$dbh->do("DROP TABLE gi2ncbiTaxonId");
