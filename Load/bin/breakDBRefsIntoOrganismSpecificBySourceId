#!/usr/bin/perl
use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long;
use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

my ($gusConfigFile,$extDbSpec,$outFile,$verbose,$inFile);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "extDbSpec=s" => \$extDbSpec,
	    "infile=s" => \$inFile,
	    "verbose!" => \$verbose,
	    "outfile=s" => \$outFile);


unless(-e $extDbSpec && -e $inFile && $outFile) {
  print STDERR "usage breakDBRefsIntoOrganismSpecificBySourceId --inFile map_file --outFile out_put_file --extDbSpec 'Name|Version' [--gus_config_file]\n";
  exit;
}


print STDERR "Establishing dbi login\n";

my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());



my $dbh = $db->getQueryHandle(0);

my $extDbRlsId;

if($extDbSpec){

    my @extDbSpecList = split(/,/, $extDbSpec);

    foreach my $db (@extDbSpecList){

	$extDbRlsId .= getDbRlsId($db).",";

    }

    $extDbRlsId =~ s/(,)$//g;
}

my $sql = "select source_id,na_feature_id from dots.genefeature where external_database_release_id in ($extDbRlsId)";

my $stmt1 = $dbh->prepareAndExecute($sql);

my %genes;

while(my ($sourceId,$naFeatId) = $stmt1->fetchrow_array()) {
  $genes{$sourceId} = $naFeatId;
}

$sql = "select ng.name from dots.nagene ng,dots.nafeaturenagene nn where nn.na_feature_id = ? and ng.na_gene_id = nn.na_gene_id";

my $stmt2 = $dbh->prepare($sql);

foreach my $sourceId (keys %genes) {
  $stmt2->execute($genes{$sourceId});

  while(my ($aliasName) = $stmt2->fetchrow_array()){
    $genes{$aliasName}=1;
  }
}

open(FILE, $inFile) or die "Cannot open file $inFile for reading:$!";

open(OUT,">$outFile"); 

while(<FILE>) {

  next unless($_);

  my ($sourceId) = split(/\t/, $_);

  if($genes{$sourceId}){
        print OUT "$_";
    }

}


sub getDbRlsId {

  my ($extDbRlsSpec) = @_;

  my ($extDbName, $extDbRlsVer) = &getExtDbInfo($extDbRlsSpec);

  my $stmt = $dbh->prepare("select dbr.external_database_release_id from sres.externaldatabaserelease dbr,sres.externaldatabase db where db.name = ? and db.external_database_id = dbr.external_database_id and dbr.version = ?");

  $stmt->execute($extDbName,$extDbRlsVer);

  my ($extDbRlsId) = $stmt->fetchrow_array();

  return $extDbRlsId;
}

sub getExtDbInfo {
  my ($extDbRlsSpec) = @_;
  if ($extDbRlsSpec =~ /(.+)\|(.+)/) {
    my $extDbName = $1;
    my $extDbRlsVer = $2;
    return ($extDbName, $extDbRlsVer);
  } else {
    die("Database specifier '$extDbRlsSpec' is not in 'name|version' format");
  }
}


