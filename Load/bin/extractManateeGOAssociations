#!/usr/bin/perl

use strict;
use warnings;

use DBI;
use List::Util qw(min max);
use Getopt::Long qw(GetOptions);

my ($database, $user, $password,
    $outfile, $taxonId);

GetOptions("user=s" => \$user,
	   "database|db=s" => \$database,
	   "password|pw=s" => \$password,
	   "outfile:s" => \$outfile,
	   "taxonId=i" => \$taxonId,
	  );

unless ($taxonId) {
  die "You must supply a nonzero NCBI taxon id via the --taxonId argument";
}

my $dbh = DBI->connect("dbi:mysql:$database", $user, $password)
  or die $DBI::errstr;

if ($outfile) {
  open(OUT, ">$outfile") or die "Can't open file $outfile: $!\n";
} else {
  *OUT = \*STDOUT;
}

my $sthGOAssoc = $dbh->prepare(<<EOSQL);

  SELECT phys_ev.feat_name,
         ident.com_name,
         go_role_link.go_id,
         go_role_link.qualifier,
         go_role_link.assigned_by,
         DATE_FORMAT(go_role_link.date, "%Y%m%d"),
         go_evidence.ev_code,
         go_evidence.with_ev,
         go_term.type
  FROM   clone_info
         INNER JOIN asm_feature AS model USING (asmbl_id)
         INNER JOIN phys_ev USING (feat_name)
         INNER JOIN feat_link AS tu ON (phys_ev.feat_name = tu.child_feat)
         INNER JOIN go_role_link ON (tu.parent_feat = go_role_link.feat_name)
         INNER JOIN go_evidence ON (go_role_link.id = go_evidence.role_link_id)
         LEFT JOIN common.go_term AS go_term ON (go_role_link.go_id = go_term.go_id)
         LEFT JOIN ident ON (ident.feat_name = tu.parent_feat)
  WHERE  phys_ev.ev_type = "working"
    AND  model.feat_type = "model"
    AND  clone_info.is_public = 1

EOSQL

$sthGOAssoc->execute();

while ( my ($sourceId, $product,
	    $goId, $qualifier,
	    $assignedBy, $date,
	    $evCode, $withEv, $type
	   ) = $sthGOAssoc->fetchrow_array()
      ) {

  $qualifier ||= ""; # is NULL/undef unless association is negative

  $type = $type ? ($type eq "molecular_function" ? "F"
		   : $type eq "biological_process" ? "P"
		   : $type eq "cellular_component" ? "C"
		   : "NA") : "NA";

  print join("\t",
	     "ToxoDB",
	     $sourceId,
	     $sourceId,
	     $qualifier,
	     $goId,
	     "",
	     $evCode,
	     $withEv,
	     $type,
	     $product,
	     $sourceId,
	     "gene",
	     "taxon:$taxonId",
	     $date,
	     $assignedBy
	    ), "\n";
}

close(OUT);

$dbh->disconnect();
